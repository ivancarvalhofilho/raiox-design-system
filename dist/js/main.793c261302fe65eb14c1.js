/******/ (() => { // webpackBootstrap
/******/ 	var __webpack_modules__ = ([
/* 0 */,
/* 1 */
/***/ ((__unused_webpack_module, __unused_webpack_exports, __webpack_require__) => {

var $ = __webpack_require__(2);
var DESCRIPTORS = __webpack_require__(5);
var objectDefinePropertyModile = __webpack_require__(19);

// `Object.defineProperty` method
// https://tc39.es/ecma262/#sec-object.defineproperty
$({ target: 'Object', stat: true, forced: !DESCRIPTORS, sham: !DESCRIPTORS }, {
  defineProperty: objectDefinePropertyModile.f
});


/***/ }),
/* 2 */
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var global = __webpack_require__(3);
var getOwnPropertyDescriptor = (__webpack_require__(4).f);
var createNonEnumerableProperty = __webpack_require__(18);
var redefine = __webpack_require__(21);
var setGlobal = __webpack_require__(22);
var copyConstructorProperties = __webpack_require__(32);
var isForced = __webpack_require__(44);

/*
  options.target      - name of the target object
  options.global      - target is the global object
  options.stat        - export as static methods of target
  options.proto       - export as prototype methods of target
  options.real        - real prototype method for the `pure` version
  options.forced      - export even if the native feature is available
  options.bind        - bind methods to the target, required for the `pure` version
  options.wrap        - wrap constructors to preventing global pollution, required for the `pure` version
  options.unsafe      - use the simple assignment of property instead of delete + defineProperty
  options.sham        - add a flag to not completely full polyfills
  options.enumerable  - export as enumerable property
  options.noTargetGet - prevent calling a getter on target
*/
module.exports = function (options, source) {
  var TARGET = options.target;
  var GLOBAL = options.global;
  var STATIC = options.stat;
  var FORCED, target, key, targetProperty, sourceProperty, descriptor;
  if (GLOBAL) {
    target = global;
  } else if (STATIC) {
    target = global[TARGET] || setGlobal(TARGET, {});
  } else {
    target = (global[TARGET] || {}).prototype;
  }
  if (target) for (key in source) {
    sourceProperty = source[key];
    if (options.noTargetGet) {
      descriptor = getOwnPropertyDescriptor(target, key);
      targetProperty = descriptor && descriptor.value;
    } else targetProperty = target[key];
    FORCED = isForced(GLOBAL ? key : TARGET + (STATIC ? '.' : '#') + key, options.forced);
    // contained in target
    if (!FORCED && targetProperty !== undefined) {
      if (typeof sourceProperty === typeof targetProperty) continue;
      copyConstructorProperties(sourceProperty, targetProperty);
    }
    // add a flag to not completely full polyfills
    if (options.sham || (targetProperty && targetProperty.sham)) {
      createNonEnumerableProperty(sourceProperty, 'sham', true);
    }
    // extend global
    redefine(target, key, sourceProperty, options);
  }
};


/***/ }),
/* 3 */
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var check = function (it) {
  return it && it.Math == Math && it;
};

// https://github.com/zloirock/core-js/issues/86#issuecomment-115759028
module.exports =
  // eslint-disable-next-line no-undef
  check(typeof globalThis == 'object' && globalThis) ||
  check(typeof window == 'object' && window) ||
  check(typeof self == 'object' && self) ||
  check(typeof __webpack_require__.g == 'object' && __webpack_require__.g) ||
  // eslint-disable-next-line no-new-func
  (function () { return this; })() || Function('return this')();


/***/ }),
/* 4 */
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

var DESCRIPTORS = __webpack_require__(5);
var propertyIsEnumerableModule = __webpack_require__(7);
var createPropertyDescriptor = __webpack_require__(8);
var toIndexedObject = __webpack_require__(9);
var toPrimitive = __webpack_require__(13);
var has = __webpack_require__(15);
var IE8_DOM_DEFINE = __webpack_require__(16);

var nativeGetOwnPropertyDescriptor = Object.getOwnPropertyDescriptor;

// `Object.getOwnPropertyDescriptor` method
// https://tc39.es/ecma262/#sec-object.getownpropertydescriptor
exports.f = DESCRIPTORS ? nativeGetOwnPropertyDescriptor : function getOwnPropertyDescriptor(O, P) {
  O = toIndexedObject(O);
  P = toPrimitive(P, true);
  if (IE8_DOM_DEFINE) try {
    return nativeGetOwnPropertyDescriptor(O, P);
  } catch (error) { /* empty */ }
  if (has(O, P)) return createPropertyDescriptor(!propertyIsEnumerableModule.f.call(O, P), O[P]);
};


/***/ }),
/* 5 */
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var fails = __webpack_require__(6);

// Detect IE8's incomplete defineProperty implementation
module.exports = !fails(function () {
  return Object.defineProperty({}, 1, { get: function () { return 7; } })[1] != 7;
});


/***/ }),
/* 6 */
/***/ ((module) => {

module.exports = function (exec) {
  try {
    return !!exec();
  } catch (error) {
    return true;
  }
};


/***/ }),
/* 7 */
/***/ ((__unused_webpack_module, exports) => {

"use strict";

var nativePropertyIsEnumerable = {}.propertyIsEnumerable;
var getOwnPropertyDescriptor = Object.getOwnPropertyDescriptor;

// Nashorn ~ JDK8 bug
var NASHORN_BUG = getOwnPropertyDescriptor && !nativePropertyIsEnumerable.call({ 1: 2 }, 1);

// `Object.prototype.propertyIsEnumerable` method implementation
// https://tc39.es/ecma262/#sec-object.prototype.propertyisenumerable
exports.f = NASHORN_BUG ? function propertyIsEnumerable(V) {
  var descriptor = getOwnPropertyDescriptor(this, V);
  return !!descriptor && descriptor.enumerable;
} : nativePropertyIsEnumerable;


/***/ }),
/* 8 */
/***/ ((module) => {

module.exports = function (bitmap, value) {
  return {
    enumerable: !(bitmap & 1),
    configurable: !(bitmap & 2),
    writable: !(bitmap & 4),
    value: value
  };
};


/***/ }),
/* 9 */
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

// toObject with fallback for non-array-like ES3 strings
var IndexedObject = __webpack_require__(10);
var requireObjectCoercible = __webpack_require__(12);

module.exports = function (it) {
  return IndexedObject(requireObjectCoercible(it));
};


/***/ }),
/* 10 */
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var fails = __webpack_require__(6);
var classof = __webpack_require__(11);

var split = ''.split;

// fallback for non-array-like ES3 and non-enumerable old V8 strings
module.exports = fails(function () {
  // throws an error in rhino, see https://github.com/mozilla/rhino/issues/346
  // eslint-disable-next-line no-prototype-builtins
  return !Object('z').propertyIsEnumerable(0);
}) ? function (it) {
  return classof(it) == 'String' ? split.call(it, '') : Object(it);
} : Object;


/***/ }),
/* 11 */
/***/ ((module) => {

var toString = {}.toString;

module.exports = function (it) {
  return toString.call(it).slice(8, -1);
};


/***/ }),
/* 12 */
/***/ ((module) => {

// `RequireObjectCoercible` abstract operation
// https://tc39.es/ecma262/#sec-requireobjectcoercible
module.exports = function (it) {
  if (it == undefined) throw TypeError("Can't call method on " + it);
  return it;
};


/***/ }),
/* 13 */
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var isObject = __webpack_require__(14);

// `ToPrimitive` abstract operation
// https://tc39.es/ecma262/#sec-toprimitive
// instead of the ES6 spec version, we didn't implement @@toPrimitive case
// and the second argument - flag - preferred type is a string
module.exports = function (input, PREFERRED_STRING) {
  if (!isObject(input)) return input;
  var fn, val;
  if (PREFERRED_STRING && typeof (fn = input.toString) == 'function' && !isObject(val = fn.call(input))) return val;
  if (typeof (fn = input.valueOf) == 'function' && !isObject(val = fn.call(input))) return val;
  if (!PREFERRED_STRING && typeof (fn = input.toString) == 'function' && !isObject(val = fn.call(input))) return val;
  throw TypeError("Can't convert object to primitive value");
};


/***/ }),
/* 14 */
/***/ ((module) => {

module.exports = function (it) {
  return typeof it === 'object' ? it !== null : typeof it === 'function';
};


/***/ }),
/* 15 */
/***/ ((module) => {

var hasOwnProperty = {}.hasOwnProperty;

module.exports = function (it, key) {
  return hasOwnProperty.call(it, key);
};


/***/ }),
/* 16 */
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var DESCRIPTORS = __webpack_require__(5);
var fails = __webpack_require__(6);
var createElement = __webpack_require__(17);

// Thank's IE8 for his funny defineProperty
module.exports = !DESCRIPTORS && !fails(function () {
  return Object.defineProperty(createElement('div'), 'a', {
    get: function () { return 7; }
  }).a != 7;
});


/***/ }),
/* 17 */
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var global = __webpack_require__(3);
var isObject = __webpack_require__(14);

var document = global.document;
// typeof document.createElement is 'object' in old IE
var EXISTS = isObject(document) && isObject(document.createElement);

module.exports = function (it) {
  return EXISTS ? document.createElement(it) : {};
};


/***/ }),
/* 18 */
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var DESCRIPTORS = __webpack_require__(5);
var definePropertyModule = __webpack_require__(19);
var createPropertyDescriptor = __webpack_require__(8);

module.exports = DESCRIPTORS ? function (object, key, value) {
  return definePropertyModule.f(object, key, createPropertyDescriptor(1, value));
} : function (object, key, value) {
  object[key] = value;
  return object;
};


/***/ }),
/* 19 */
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

var DESCRIPTORS = __webpack_require__(5);
var IE8_DOM_DEFINE = __webpack_require__(16);
var anObject = __webpack_require__(20);
var toPrimitive = __webpack_require__(13);

var nativeDefineProperty = Object.defineProperty;

// `Object.defineProperty` method
// https://tc39.es/ecma262/#sec-object.defineproperty
exports.f = DESCRIPTORS ? nativeDefineProperty : function defineProperty(O, P, Attributes) {
  anObject(O);
  P = toPrimitive(P, true);
  anObject(Attributes);
  if (IE8_DOM_DEFINE) try {
    return nativeDefineProperty(O, P, Attributes);
  } catch (error) { /* empty */ }
  if ('get' in Attributes || 'set' in Attributes) throw TypeError('Accessors not supported');
  if ('value' in Attributes) O[P] = Attributes.value;
  return O;
};


/***/ }),
/* 20 */
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var isObject = __webpack_require__(14);

module.exports = function (it) {
  if (!isObject(it)) {
    throw TypeError(String(it) + ' is not an object');
  } return it;
};


/***/ }),
/* 21 */
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var global = __webpack_require__(3);
var createNonEnumerableProperty = __webpack_require__(18);
var has = __webpack_require__(15);
var setGlobal = __webpack_require__(22);
var inspectSource = __webpack_require__(23);
var InternalStateModule = __webpack_require__(25);

var getInternalState = InternalStateModule.get;
var enforceInternalState = InternalStateModule.enforce;
var TEMPLATE = String(String).split('String');

(module.exports = function (O, key, value, options) {
  var unsafe = options ? !!options.unsafe : false;
  var simple = options ? !!options.enumerable : false;
  var noTargetGet = options ? !!options.noTargetGet : false;
  var state;
  if (typeof value == 'function') {
    if (typeof key == 'string' && !has(value, 'name')) {
      createNonEnumerableProperty(value, 'name', key);
    }
    state = enforceInternalState(value);
    if (!state.source) {
      state.source = TEMPLATE.join(typeof key == 'string' ? key : '');
    }
  }
  if (O === global) {
    if (simple) O[key] = value;
    else setGlobal(key, value);
    return;
  } else if (!unsafe) {
    delete O[key];
  } else if (!noTargetGet && O[key]) {
    simple = true;
  }
  if (simple) O[key] = value;
  else createNonEnumerableProperty(O, key, value);
// add fake Function#toString for correct work wrapped methods / constructors with methods like LoDash isNative
})(Function.prototype, 'toString', function toString() {
  return typeof this == 'function' && getInternalState(this).source || inspectSource(this);
});


/***/ }),
/* 22 */
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var global = __webpack_require__(3);
var createNonEnumerableProperty = __webpack_require__(18);

module.exports = function (key, value) {
  try {
    createNonEnumerableProperty(global, key, value);
  } catch (error) {
    global[key] = value;
  } return value;
};


/***/ }),
/* 23 */
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var store = __webpack_require__(24);

var functionToString = Function.toString;

// this helper broken in `3.4.1-3.4.4`, so we can't use `shared` helper
if (typeof store.inspectSource != 'function') {
  store.inspectSource = function (it) {
    return functionToString.call(it);
  };
}

module.exports = store.inspectSource;


/***/ }),
/* 24 */
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var global = __webpack_require__(3);
var setGlobal = __webpack_require__(22);

var SHARED = '__core-js_shared__';
var store = global[SHARED] || setGlobal(SHARED, {});

module.exports = store;


/***/ }),
/* 25 */
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var NATIVE_WEAK_MAP = __webpack_require__(26);
var global = __webpack_require__(3);
var isObject = __webpack_require__(14);
var createNonEnumerableProperty = __webpack_require__(18);
var objectHas = __webpack_require__(15);
var shared = __webpack_require__(24);
var sharedKey = __webpack_require__(27);
var hiddenKeys = __webpack_require__(31);

var WeakMap = global.WeakMap;
var set, get, has;

var enforce = function (it) {
  return has(it) ? get(it) : set(it, {});
};

var getterFor = function (TYPE) {
  return function (it) {
    var state;
    if (!isObject(it) || (state = get(it)).type !== TYPE) {
      throw TypeError('Incompatible receiver, ' + TYPE + ' required');
    } return state;
  };
};

if (NATIVE_WEAK_MAP) {
  var store = shared.state || (shared.state = new WeakMap());
  var wmget = store.get;
  var wmhas = store.has;
  var wmset = store.set;
  set = function (it, metadata) {
    metadata.facade = it;
    wmset.call(store, it, metadata);
    return metadata;
  };
  get = function (it) {
    return wmget.call(store, it) || {};
  };
  has = function (it) {
    return wmhas.call(store, it);
  };
} else {
  var STATE = sharedKey('state');
  hiddenKeys[STATE] = true;
  set = function (it, metadata) {
    metadata.facade = it;
    createNonEnumerableProperty(it, STATE, metadata);
    return metadata;
  };
  get = function (it) {
    return objectHas(it, STATE) ? it[STATE] : {};
  };
  has = function (it) {
    return objectHas(it, STATE);
  };
}

module.exports = {
  set: set,
  get: get,
  has: has,
  enforce: enforce,
  getterFor: getterFor
};


/***/ }),
/* 26 */
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var global = __webpack_require__(3);
var inspectSource = __webpack_require__(23);

var WeakMap = global.WeakMap;

module.exports = typeof WeakMap === 'function' && /native code/.test(inspectSource(WeakMap));


/***/ }),
/* 27 */
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var shared = __webpack_require__(28);
var uid = __webpack_require__(30);

var keys = shared('keys');

module.exports = function (key) {
  return keys[key] || (keys[key] = uid(key));
};


/***/ }),
/* 28 */
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var IS_PURE = __webpack_require__(29);
var store = __webpack_require__(24);

(module.exports = function (key, value) {
  return store[key] || (store[key] = value !== undefined ? value : {});
})('versions', []).push({
  version: '3.8.3',
  mode: IS_PURE ? 'pure' : 'global',
  copyright: '© 2021 Denis Pushkarev (zloirock.ru)'
});


/***/ }),
/* 29 */
/***/ ((module) => {

module.exports = false;


/***/ }),
/* 30 */
/***/ ((module) => {

var id = 0;
var postfix = Math.random();

module.exports = function (key) {
  return 'Symbol(' + String(key === undefined ? '' : key) + ')_' + (++id + postfix).toString(36);
};


/***/ }),
/* 31 */
/***/ ((module) => {

module.exports = {};


/***/ }),
/* 32 */
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var has = __webpack_require__(15);
var ownKeys = __webpack_require__(33);
var getOwnPropertyDescriptorModule = __webpack_require__(4);
var definePropertyModule = __webpack_require__(19);

module.exports = function (target, source) {
  var keys = ownKeys(source);
  var defineProperty = definePropertyModule.f;
  var getOwnPropertyDescriptor = getOwnPropertyDescriptorModule.f;
  for (var i = 0; i < keys.length; i++) {
    var key = keys[i];
    if (!has(target, key)) defineProperty(target, key, getOwnPropertyDescriptor(source, key));
  }
};


/***/ }),
/* 33 */
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var getBuiltIn = __webpack_require__(34);
var getOwnPropertyNamesModule = __webpack_require__(36);
var getOwnPropertySymbolsModule = __webpack_require__(43);
var anObject = __webpack_require__(20);

// all object keys, includes non-enumerable and symbols
module.exports = getBuiltIn('Reflect', 'ownKeys') || function ownKeys(it) {
  var keys = getOwnPropertyNamesModule.f(anObject(it));
  var getOwnPropertySymbols = getOwnPropertySymbolsModule.f;
  return getOwnPropertySymbols ? keys.concat(getOwnPropertySymbols(it)) : keys;
};


/***/ }),
/* 34 */
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var path = __webpack_require__(35);
var global = __webpack_require__(3);

var aFunction = function (variable) {
  return typeof variable == 'function' ? variable : undefined;
};

module.exports = function (namespace, method) {
  return arguments.length < 2 ? aFunction(path[namespace]) || aFunction(global[namespace])
    : path[namespace] && path[namespace][method] || global[namespace] && global[namespace][method];
};


/***/ }),
/* 35 */
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var global = __webpack_require__(3);

module.exports = global;


/***/ }),
/* 36 */
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

var internalObjectKeys = __webpack_require__(37);
var enumBugKeys = __webpack_require__(42);

var hiddenKeys = enumBugKeys.concat('length', 'prototype');

// `Object.getOwnPropertyNames` method
// https://tc39.es/ecma262/#sec-object.getownpropertynames
exports.f = Object.getOwnPropertyNames || function getOwnPropertyNames(O) {
  return internalObjectKeys(O, hiddenKeys);
};


/***/ }),
/* 37 */
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var has = __webpack_require__(15);
var toIndexedObject = __webpack_require__(9);
var indexOf = (__webpack_require__(38).indexOf);
var hiddenKeys = __webpack_require__(31);

module.exports = function (object, names) {
  var O = toIndexedObject(object);
  var i = 0;
  var result = [];
  var key;
  for (key in O) !has(hiddenKeys, key) && has(O, key) && result.push(key);
  // Don't enum bug & hidden keys
  while (names.length > i) if (has(O, key = names[i++])) {
    ~indexOf(result, key) || result.push(key);
  }
  return result;
};


/***/ }),
/* 38 */
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var toIndexedObject = __webpack_require__(9);
var toLength = __webpack_require__(39);
var toAbsoluteIndex = __webpack_require__(41);

// `Array.prototype.{ indexOf, includes }` methods implementation
var createMethod = function (IS_INCLUDES) {
  return function ($this, el, fromIndex) {
    var O = toIndexedObject($this);
    var length = toLength(O.length);
    var index = toAbsoluteIndex(fromIndex, length);
    var value;
    // Array#includes uses SameValueZero equality algorithm
    // eslint-disable-next-line no-self-compare
    if (IS_INCLUDES && el != el) while (length > index) {
      value = O[index++];
      // eslint-disable-next-line no-self-compare
      if (value != value) return true;
    // Array#indexOf ignores holes, Array#includes - not
    } else for (;length > index; index++) {
      if ((IS_INCLUDES || index in O) && O[index] === el) return IS_INCLUDES || index || 0;
    } return !IS_INCLUDES && -1;
  };
};

module.exports = {
  // `Array.prototype.includes` method
  // https://tc39.es/ecma262/#sec-array.prototype.includes
  includes: createMethod(true),
  // `Array.prototype.indexOf` method
  // https://tc39.es/ecma262/#sec-array.prototype.indexof
  indexOf: createMethod(false)
};


/***/ }),
/* 39 */
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var toInteger = __webpack_require__(40);

var min = Math.min;

// `ToLength` abstract operation
// https://tc39.es/ecma262/#sec-tolength
module.exports = function (argument) {
  return argument > 0 ? min(toInteger(argument), 0x1FFFFFFFFFFFFF) : 0; // 2 ** 53 - 1 == 9007199254740991
};


/***/ }),
/* 40 */
/***/ ((module) => {

var ceil = Math.ceil;
var floor = Math.floor;

// `ToInteger` abstract operation
// https://tc39.es/ecma262/#sec-tointeger
module.exports = function (argument) {
  return isNaN(argument = +argument) ? 0 : (argument > 0 ? floor : ceil)(argument);
};


/***/ }),
/* 41 */
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var toInteger = __webpack_require__(40);

var max = Math.max;
var min = Math.min;

// Helper for a popular repeating case of the spec:
// Let integer be ? ToInteger(index).
// If integer < 0, let result be max((length + integer), 0); else let result be min(integer, length).
module.exports = function (index, length) {
  var integer = toInteger(index);
  return integer < 0 ? max(integer + length, 0) : min(integer, length);
};


/***/ }),
/* 42 */
/***/ ((module) => {

// IE8- don't enum bug keys
module.exports = [
  'constructor',
  'hasOwnProperty',
  'isPrototypeOf',
  'propertyIsEnumerable',
  'toLocaleString',
  'toString',
  'valueOf'
];


/***/ }),
/* 43 */
/***/ ((__unused_webpack_module, exports) => {

exports.f = Object.getOwnPropertySymbols;


/***/ }),
/* 44 */
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var fails = __webpack_require__(6);

var replacement = /#|\.prototype\./;

var isForced = function (feature, detection) {
  var value = data[normalize(feature)];
  return value == POLYFILL ? true
    : value == NATIVE ? false
    : typeof detection == 'function' ? fails(detection)
    : !!detection;
};

var normalize = isForced.normalize = function (string) {
  return String(string).replace(replacement, '.').toLowerCase();
};

var data = isForced.data = {};
var NATIVE = isForced.NATIVE = 'N';
var POLYFILL = isForced.POLYFILL = 'P';

module.exports = isForced;


/***/ }),
/* 45 */
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";


function checkDCE() {
  /* global __REACT_DEVTOOLS_GLOBAL_HOOK__ */
  if (
    typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ === 'undefined' ||
    typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.checkDCE !== 'function'
  ) {
    return;
  }
  if ("MISSING_ENV_VAR".NODE_ENV !== 'production') {
    // This branch is unreachable because this function is only called
    // in production, but the condition is true only in development.
    // Therefore if the branch is still here, dead code elimination wasn't
    // properly applied.
    // Don't change the message. React DevTools relies on it. Also make sure
    // this message doesn't occur elsewhere in this function, or it will cause
    // a false positive.
    throw new Error('^_^');
  }
  try {
    // Verify that the code above has been dead code eliminated (DCE'd).
    __REACT_DEVTOOLS_GLOBAL_HOOK__.checkDCE(checkDCE);
  } catch (err) {
    // DevTools shouldn't crash React, no matter what.
    // We should still report in case we break this code.
    console.error(err);
  }
}

if ("MISSING_ENV_VAR".NODE_ENV === 'production') {
  // DCE check should happen before ReactDOM bundle executes so that
  // DevTools can report bad minification during injection.
  checkDCE();
  module.exports = __webpack_require__(46);
} else {
  module.exports = __webpack_require__(56);
}


/***/ }),
/* 46 */
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
/** @license React v16.14.0
 * react-dom.production.min.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */

/*
 Modernizr 3.0.0pre (Custom Build) | MIT
*/
var aa=__webpack_require__(47),n=__webpack_require__(49),r=__webpack_require__(53);function u(a){for(var b="https://reactjs.org/docs/error-decoder.html?invariant="+a,c=1;c<arguments.length;c++)b+="&args[]="+encodeURIComponent(arguments[c]);return"Minified React error #"+a+"; visit "+b+" for the full message or use the non-minified dev environment for full errors and additional helpful warnings."}if(!aa)throw Error(u(227));
function ba(a,b,c,d,e,f,g,h,k){var l=Array.prototype.slice.call(arguments,3);try{b.apply(c,l)}catch(m){this.onError(m)}}var da=!1,ea=null,fa=!1,ha=null,ia={onError:function(a){da=!0;ea=a}};function ja(a,b,c,d,e,f,g,h,k){da=!1;ea=null;ba.apply(ia,arguments)}function ka(a,b,c,d,e,f,g,h,k){ja.apply(this,arguments);if(da){if(da){var l=ea;da=!1;ea=null}else throw Error(u(198));fa||(fa=!0,ha=l)}}var la=null,ma=null,na=null;
function oa(a,b,c){var d=a.type||"unknown-event";a.currentTarget=na(c);ka(d,b,void 0,a);a.currentTarget=null}var pa=null,qa={};
function ra(){if(pa)for(var a in qa){var b=qa[a],c=pa.indexOf(a);if(!(-1<c))throw Error(u(96,a));if(!sa[c]){if(!b.extractEvents)throw Error(u(97,a));sa[c]=b;c=b.eventTypes;for(var d in c){var e=void 0;var f=c[d],g=b,h=d;if(ta.hasOwnProperty(h))throw Error(u(99,h));ta[h]=f;var k=f.phasedRegistrationNames;if(k){for(e in k)k.hasOwnProperty(e)&&ua(k[e],g,h);e=!0}else f.registrationName?(ua(f.registrationName,g,h),e=!0):e=!1;if(!e)throw Error(u(98,d,a));}}}}
function ua(a,b,c){if(va[a])throw Error(u(100,a));va[a]=b;wa[a]=b.eventTypes[c].dependencies}var sa=[],ta={},va={},wa={};function xa(a){var b=!1,c;for(c in a)if(a.hasOwnProperty(c)){var d=a[c];if(!qa.hasOwnProperty(c)||qa[c]!==d){if(qa[c])throw Error(u(102,c));qa[c]=d;b=!0}}b&&ra()}var ya=!("undefined"===typeof window||"undefined"===typeof window.document||"undefined"===typeof window.document.createElement),za=null,Aa=null,Ba=null;
function Ca(a){if(a=ma(a)){if("function"!==typeof za)throw Error(u(280));var b=a.stateNode;b&&(b=la(b),za(a.stateNode,a.type,b))}}function Da(a){Aa?Ba?Ba.push(a):Ba=[a]:Aa=a}function Ea(){if(Aa){var a=Aa,b=Ba;Ba=Aa=null;Ca(a);if(b)for(a=0;a<b.length;a++)Ca(b[a])}}function Fa(a,b){return a(b)}function Ga(a,b,c,d,e){return a(b,c,d,e)}function Ha(){}var Ia=Fa,Ja=!1,Ka=!1;function La(){if(null!==Aa||null!==Ba)Ha(),Ea()}
function Ma(a,b,c){if(Ka)return a(b,c);Ka=!0;try{return Ia(a,b,c)}finally{Ka=!1,La()}}var Na=/^[:A-Z_a-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD][:A-Z_a-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD\-.0-9\u00B7\u0300-\u036F\u203F-\u2040]*$/,Oa=Object.prototype.hasOwnProperty,Pa={},Qa={};
function Ra(a){if(Oa.call(Qa,a))return!0;if(Oa.call(Pa,a))return!1;if(Na.test(a))return Qa[a]=!0;Pa[a]=!0;return!1}function Sa(a,b,c,d){if(null!==c&&0===c.type)return!1;switch(typeof b){case "function":case "symbol":return!0;case "boolean":if(d)return!1;if(null!==c)return!c.acceptsBooleans;a=a.toLowerCase().slice(0,5);return"data-"!==a&&"aria-"!==a;default:return!1}}
function Ta(a,b,c,d){if(null===b||"undefined"===typeof b||Sa(a,b,c,d))return!0;if(d)return!1;if(null!==c)switch(c.type){case 3:return!b;case 4:return!1===b;case 5:return isNaN(b);case 6:return isNaN(b)||1>b}return!1}function v(a,b,c,d,e,f){this.acceptsBooleans=2===b||3===b||4===b;this.attributeName=d;this.attributeNamespace=e;this.mustUseProperty=c;this.propertyName=a;this.type=b;this.sanitizeURL=f}var C={};
"children dangerouslySetInnerHTML defaultValue defaultChecked innerHTML suppressContentEditableWarning suppressHydrationWarning style".split(" ").forEach(function(a){C[a]=new v(a,0,!1,a,null,!1)});[["acceptCharset","accept-charset"],["className","class"],["htmlFor","for"],["httpEquiv","http-equiv"]].forEach(function(a){var b=a[0];C[b]=new v(b,1,!1,a[1],null,!1)});["contentEditable","draggable","spellCheck","value"].forEach(function(a){C[a]=new v(a,2,!1,a.toLowerCase(),null,!1)});
["autoReverse","externalResourcesRequired","focusable","preserveAlpha"].forEach(function(a){C[a]=new v(a,2,!1,a,null,!1)});"allowFullScreen async autoFocus autoPlay controls default defer disabled disablePictureInPicture formNoValidate hidden loop noModule noValidate open playsInline readOnly required reversed scoped seamless itemScope".split(" ").forEach(function(a){C[a]=new v(a,3,!1,a.toLowerCase(),null,!1)});
["checked","multiple","muted","selected"].forEach(function(a){C[a]=new v(a,3,!0,a,null,!1)});["capture","download"].forEach(function(a){C[a]=new v(a,4,!1,a,null,!1)});["cols","rows","size","span"].forEach(function(a){C[a]=new v(a,6,!1,a,null,!1)});["rowSpan","start"].forEach(function(a){C[a]=new v(a,5,!1,a.toLowerCase(),null,!1)});var Ua=/[\-:]([a-z])/g;function Va(a){return a[1].toUpperCase()}
"accent-height alignment-baseline arabic-form baseline-shift cap-height clip-path clip-rule color-interpolation color-interpolation-filters color-profile color-rendering dominant-baseline enable-background fill-opacity fill-rule flood-color flood-opacity font-family font-size font-size-adjust font-stretch font-style font-variant font-weight glyph-name glyph-orientation-horizontal glyph-orientation-vertical horiz-adv-x horiz-origin-x image-rendering letter-spacing lighting-color marker-end marker-mid marker-start overline-position overline-thickness paint-order panose-1 pointer-events rendering-intent shape-rendering stop-color stop-opacity strikethrough-position strikethrough-thickness stroke-dasharray stroke-dashoffset stroke-linecap stroke-linejoin stroke-miterlimit stroke-opacity stroke-width text-anchor text-decoration text-rendering underline-position underline-thickness unicode-bidi unicode-range units-per-em v-alphabetic v-hanging v-ideographic v-mathematical vector-effect vert-adv-y vert-origin-x vert-origin-y word-spacing writing-mode xmlns:xlink x-height".split(" ").forEach(function(a){var b=a.replace(Ua,
Va);C[b]=new v(b,1,!1,a,null,!1)});"xlink:actuate xlink:arcrole xlink:role xlink:show xlink:title xlink:type".split(" ").forEach(function(a){var b=a.replace(Ua,Va);C[b]=new v(b,1,!1,a,"http://www.w3.org/1999/xlink",!1)});["xml:base","xml:lang","xml:space"].forEach(function(a){var b=a.replace(Ua,Va);C[b]=new v(b,1,!1,a,"http://www.w3.org/XML/1998/namespace",!1)});["tabIndex","crossOrigin"].forEach(function(a){C[a]=new v(a,1,!1,a.toLowerCase(),null,!1)});
C.xlinkHref=new v("xlinkHref",1,!1,"xlink:href","http://www.w3.org/1999/xlink",!0);["src","href","action","formAction"].forEach(function(a){C[a]=new v(a,1,!1,a.toLowerCase(),null,!0)});var Wa=aa.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED;Wa.hasOwnProperty("ReactCurrentDispatcher")||(Wa.ReactCurrentDispatcher={current:null});Wa.hasOwnProperty("ReactCurrentBatchConfig")||(Wa.ReactCurrentBatchConfig={suspense:null});
function Xa(a,b,c,d){var e=C.hasOwnProperty(b)?C[b]:null;var f=null!==e?0===e.type:d?!1:!(2<b.length)||"o"!==b[0]&&"O"!==b[0]||"n"!==b[1]&&"N"!==b[1]?!1:!0;f||(Ta(b,c,e,d)&&(c=null),d||null===e?Ra(b)&&(null===c?a.removeAttribute(b):a.setAttribute(b,""+c)):e.mustUseProperty?a[e.propertyName]=null===c?3===e.type?!1:"":c:(b=e.attributeName,d=e.attributeNamespace,null===c?a.removeAttribute(b):(e=e.type,c=3===e||4===e&&!0===c?"":""+c,d?a.setAttributeNS(d,b,c):a.setAttribute(b,c))))}
var Ya=/^(.*)[\\\/]/,E="function"===typeof Symbol&&Symbol.for,Za=E?Symbol.for("react.element"):60103,$a=E?Symbol.for("react.portal"):60106,ab=E?Symbol.for("react.fragment"):60107,bb=E?Symbol.for("react.strict_mode"):60108,cb=E?Symbol.for("react.profiler"):60114,db=E?Symbol.for("react.provider"):60109,eb=E?Symbol.for("react.context"):60110,fb=E?Symbol.for("react.concurrent_mode"):60111,gb=E?Symbol.for("react.forward_ref"):60112,hb=E?Symbol.for("react.suspense"):60113,ib=E?Symbol.for("react.suspense_list"):
60120,jb=E?Symbol.for("react.memo"):60115,kb=E?Symbol.for("react.lazy"):60116,lb=E?Symbol.for("react.block"):60121,mb="function"===typeof Symbol&&Symbol.iterator;function nb(a){if(null===a||"object"!==typeof a)return null;a=mb&&a[mb]||a["@@iterator"];return"function"===typeof a?a:null}function ob(a){if(-1===a._status){a._status=0;var b=a._ctor;b=b();a._result=b;b.then(function(b){0===a._status&&(b=b.default,a._status=1,a._result=b)},function(b){0===a._status&&(a._status=2,a._result=b)})}}
function pb(a){if(null==a)return null;if("function"===typeof a)return a.displayName||a.name||null;if("string"===typeof a)return a;switch(a){case ab:return"Fragment";case $a:return"Portal";case cb:return"Profiler";case bb:return"StrictMode";case hb:return"Suspense";case ib:return"SuspenseList"}if("object"===typeof a)switch(a.$$typeof){case eb:return"Context.Consumer";case db:return"Context.Provider";case gb:var b=a.render;b=b.displayName||b.name||"";return a.displayName||(""!==b?"ForwardRef("+b+")":
"ForwardRef");case jb:return pb(a.type);case lb:return pb(a.render);case kb:if(a=1===a._status?a._result:null)return pb(a)}return null}function qb(a){var b="";do{a:switch(a.tag){case 3:case 4:case 6:case 7:case 10:case 9:var c="";break a;default:var d=a._debugOwner,e=a._debugSource,f=pb(a.type);c=null;d&&(c=pb(d.type));d=f;f="";e?f=" (at "+e.fileName.replace(Ya,"")+":"+e.lineNumber+")":c&&(f=" (created by "+c+")");c="\n    in "+(d||"Unknown")+f}b+=c;a=a.return}while(a);return b}
function rb(a){switch(typeof a){case "boolean":case "number":case "object":case "string":case "undefined":return a;default:return""}}function sb(a){var b=a.type;return(a=a.nodeName)&&"input"===a.toLowerCase()&&("checkbox"===b||"radio"===b)}
function tb(a){var b=sb(a)?"checked":"value",c=Object.getOwnPropertyDescriptor(a.constructor.prototype,b),d=""+a[b];if(!a.hasOwnProperty(b)&&"undefined"!==typeof c&&"function"===typeof c.get&&"function"===typeof c.set){var e=c.get,f=c.set;Object.defineProperty(a,b,{configurable:!0,get:function(){return e.call(this)},set:function(a){d=""+a;f.call(this,a)}});Object.defineProperty(a,b,{enumerable:c.enumerable});return{getValue:function(){return d},setValue:function(a){d=""+a},stopTracking:function(){a._valueTracker=
null;delete a[b]}}}}function xb(a){a._valueTracker||(a._valueTracker=tb(a))}function yb(a){if(!a)return!1;var b=a._valueTracker;if(!b)return!0;var c=b.getValue();var d="";a&&(d=sb(a)?a.checked?"true":"false":a.value);a=d;return a!==c?(b.setValue(a),!0):!1}function zb(a,b){var c=b.checked;return n({},b,{defaultChecked:void 0,defaultValue:void 0,value:void 0,checked:null!=c?c:a._wrapperState.initialChecked})}
function Ab(a,b){var c=null==b.defaultValue?"":b.defaultValue,d=null!=b.checked?b.checked:b.defaultChecked;c=rb(null!=b.value?b.value:c);a._wrapperState={initialChecked:d,initialValue:c,controlled:"checkbox"===b.type||"radio"===b.type?null!=b.checked:null!=b.value}}function Bb(a,b){b=b.checked;null!=b&&Xa(a,"checked",b,!1)}
function Cb(a,b){Bb(a,b);var c=rb(b.value),d=b.type;if(null!=c)if("number"===d){if(0===c&&""===a.value||a.value!=c)a.value=""+c}else a.value!==""+c&&(a.value=""+c);else if("submit"===d||"reset"===d){a.removeAttribute("value");return}b.hasOwnProperty("value")?Db(a,b.type,c):b.hasOwnProperty("defaultValue")&&Db(a,b.type,rb(b.defaultValue));null==b.checked&&null!=b.defaultChecked&&(a.defaultChecked=!!b.defaultChecked)}
function Eb(a,b,c){if(b.hasOwnProperty("value")||b.hasOwnProperty("defaultValue")){var d=b.type;if(!("submit"!==d&&"reset"!==d||void 0!==b.value&&null!==b.value))return;b=""+a._wrapperState.initialValue;c||b===a.value||(a.value=b);a.defaultValue=b}c=a.name;""!==c&&(a.name="");a.defaultChecked=!!a._wrapperState.initialChecked;""!==c&&(a.name=c)}
function Db(a,b,c){if("number"!==b||a.ownerDocument.activeElement!==a)null==c?a.defaultValue=""+a._wrapperState.initialValue:a.defaultValue!==""+c&&(a.defaultValue=""+c)}function Fb(a){var b="";aa.Children.forEach(a,function(a){null!=a&&(b+=a)});return b}function Gb(a,b){a=n({children:void 0},b);if(b=Fb(b.children))a.children=b;return a}
function Hb(a,b,c,d){a=a.options;if(b){b={};for(var e=0;e<c.length;e++)b["$"+c[e]]=!0;for(c=0;c<a.length;c++)e=b.hasOwnProperty("$"+a[c].value),a[c].selected!==e&&(a[c].selected=e),e&&d&&(a[c].defaultSelected=!0)}else{c=""+rb(c);b=null;for(e=0;e<a.length;e++){if(a[e].value===c){a[e].selected=!0;d&&(a[e].defaultSelected=!0);return}null!==b||a[e].disabled||(b=a[e])}null!==b&&(b.selected=!0)}}
function Ib(a,b){if(null!=b.dangerouslySetInnerHTML)throw Error(u(91));return n({},b,{value:void 0,defaultValue:void 0,children:""+a._wrapperState.initialValue})}function Jb(a,b){var c=b.value;if(null==c){c=b.children;b=b.defaultValue;if(null!=c){if(null!=b)throw Error(u(92));if(Array.isArray(c)){if(!(1>=c.length))throw Error(u(93));c=c[0]}b=c}null==b&&(b="");c=b}a._wrapperState={initialValue:rb(c)}}
function Kb(a,b){var c=rb(b.value),d=rb(b.defaultValue);null!=c&&(c=""+c,c!==a.value&&(a.value=c),null==b.defaultValue&&a.defaultValue!==c&&(a.defaultValue=c));null!=d&&(a.defaultValue=""+d)}function Lb(a){var b=a.textContent;b===a._wrapperState.initialValue&&""!==b&&null!==b&&(a.value=b)}var Mb={html:"http://www.w3.org/1999/xhtml",mathml:"http://www.w3.org/1998/Math/MathML",svg:"http://www.w3.org/2000/svg"};
function Nb(a){switch(a){case "svg":return"http://www.w3.org/2000/svg";case "math":return"http://www.w3.org/1998/Math/MathML";default:return"http://www.w3.org/1999/xhtml"}}function Ob(a,b){return null==a||"http://www.w3.org/1999/xhtml"===a?Nb(b):"http://www.w3.org/2000/svg"===a&&"foreignObject"===b?"http://www.w3.org/1999/xhtml":a}
var Pb,Qb=function(a){return"undefined"!==typeof MSApp&&MSApp.execUnsafeLocalFunction?function(b,c,d,e){MSApp.execUnsafeLocalFunction(function(){return a(b,c,d,e)})}:a}(function(a,b){if(a.namespaceURI!==Mb.svg||"innerHTML"in a)a.innerHTML=b;else{Pb=Pb||document.createElement("div");Pb.innerHTML="<svg>"+b.valueOf().toString()+"</svg>";for(b=Pb.firstChild;a.firstChild;)a.removeChild(a.firstChild);for(;b.firstChild;)a.appendChild(b.firstChild)}});
function Rb(a,b){if(b){var c=a.firstChild;if(c&&c===a.lastChild&&3===c.nodeType){c.nodeValue=b;return}}a.textContent=b}function Sb(a,b){var c={};c[a.toLowerCase()]=b.toLowerCase();c["Webkit"+a]="webkit"+b;c["Moz"+a]="moz"+b;return c}var Tb={animationend:Sb("Animation","AnimationEnd"),animationiteration:Sb("Animation","AnimationIteration"),animationstart:Sb("Animation","AnimationStart"),transitionend:Sb("Transition","TransitionEnd")},Ub={},Vb={};
ya&&(Vb=document.createElement("div").style,"AnimationEvent"in window||(delete Tb.animationend.animation,delete Tb.animationiteration.animation,delete Tb.animationstart.animation),"TransitionEvent"in window||delete Tb.transitionend.transition);function Wb(a){if(Ub[a])return Ub[a];if(!Tb[a])return a;var b=Tb[a],c;for(c in b)if(b.hasOwnProperty(c)&&c in Vb)return Ub[a]=b[c];return a}
var Xb=Wb("animationend"),Yb=Wb("animationiteration"),Zb=Wb("animationstart"),$b=Wb("transitionend"),ac="abort canplay canplaythrough durationchange emptied encrypted ended error loadeddata loadedmetadata loadstart pause play playing progress ratechange seeked seeking stalled suspend timeupdate volumechange waiting".split(" "),bc=new ("function"===typeof WeakMap?WeakMap:Map);function cc(a){var b=bc.get(a);void 0===b&&(b=new Map,bc.set(a,b));return b}
function dc(a){var b=a,c=a;if(a.alternate)for(;b.return;)b=b.return;else{a=b;do b=a,0!==(b.effectTag&1026)&&(c=b.return),a=b.return;while(a)}return 3===b.tag?c:null}function ec(a){if(13===a.tag){var b=a.memoizedState;null===b&&(a=a.alternate,null!==a&&(b=a.memoizedState));if(null!==b)return b.dehydrated}return null}function fc(a){if(dc(a)!==a)throw Error(u(188));}
function gc(a){var b=a.alternate;if(!b){b=dc(a);if(null===b)throw Error(u(188));return b!==a?null:a}for(var c=a,d=b;;){var e=c.return;if(null===e)break;var f=e.alternate;if(null===f){d=e.return;if(null!==d){c=d;continue}break}if(e.child===f.child){for(f=e.child;f;){if(f===c)return fc(e),a;if(f===d)return fc(e),b;f=f.sibling}throw Error(u(188));}if(c.return!==d.return)c=e,d=f;else{for(var g=!1,h=e.child;h;){if(h===c){g=!0;c=e;d=f;break}if(h===d){g=!0;d=e;c=f;break}h=h.sibling}if(!g){for(h=f.child;h;){if(h===
c){g=!0;c=f;d=e;break}if(h===d){g=!0;d=f;c=e;break}h=h.sibling}if(!g)throw Error(u(189));}}if(c.alternate!==d)throw Error(u(190));}if(3!==c.tag)throw Error(u(188));return c.stateNode.current===c?a:b}function hc(a){a=gc(a);if(!a)return null;for(var b=a;;){if(5===b.tag||6===b.tag)return b;if(b.child)b.child.return=b,b=b.child;else{if(b===a)break;for(;!b.sibling;){if(!b.return||b.return===a)return null;b=b.return}b.sibling.return=b.return;b=b.sibling}}return null}
function ic(a,b){if(null==b)throw Error(u(30));if(null==a)return b;if(Array.isArray(a)){if(Array.isArray(b))return a.push.apply(a,b),a;a.push(b);return a}return Array.isArray(b)?[a].concat(b):[a,b]}function jc(a,b,c){Array.isArray(a)?a.forEach(b,c):a&&b.call(c,a)}var kc=null;
function lc(a){if(a){var b=a._dispatchListeners,c=a._dispatchInstances;if(Array.isArray(b))for(var d=0;d<b.length&&!a.isPropagationStopped();d++)oa(a,b[d],c[d]);else b&&oa(a,b,c);a._dispatchListeners=null;a._dispatchInstances=null;a.isPersistent()||a.constructor.release(a)}}function mc(a){null!==a&&(kc=ic(kc,a));a=kc;kc=null;if(a){jc(a,lc);if(kc)throw Error(u(95));if(fa)throw a=ha,fa=!1,ha=null,a;}}
function nc(a){a=a.target||a.srcElement||window;a.correspondingUseElement&&(a=a.correspondingUseElement);return 3===a.nodeType?a.parentNode:a}function oc(a){if(!ya)return!1;a="on"+a;var b=a in document;b||(b=document.createElement("div"),b.setAttribute(a,"return;"),b="function"===typeof b[a]);return b}var pc=[];function qc(a){a.topLevelType=null;a.nativeEvent=null;a.targetInst=null;a.ancestors.length=0;10>pc.length&&pc.push(a)}
function rc(a,b,c,d){if(pc.length){var e=pc.pop();e.topLevelType=a;e.eventSystemFlags=d;e.nativeEvent=b;e.targetInst=c;return e}return{topLevelType:a,eventSystemFlags:d,nativeEvent:b,targetInst:c,ancestors:[]}}
function sc(a){var b=a.targetInst,c=b;do{if(!c){a.ancestors.push(c);break}var d=c;if(3===d.tag)d=d.stateNode.containerInfo;else{for(;d.return;)d=d.return;d=3!==d.tag?null:d.stateNode.containerInfo}if(!d)break;b=c.tag;5!==b&&6!==b||a.ancestors.push(c);c=tc(d)}while(c);for(c=0;c<a.ancestors.length;c++){b=a.ancestors[c];var e=nc(a.nativeEvent);d=a.topLevelType;var f=a.nativeEvent,g=a.eventSystemFlags;0===c&&(g|=64);for(var h=null,k=0;k<sa.length;k++){var l=sa[k];l&&(l=l.extractEvents(d,b,f,e,g))&&(h=
ic(h,l))}mc(h)}}function uc(a,b,c){if(!c.has(a)){switch(a){case "scroll":vc(b,"scroll",!0);break;case "focus":case "blur":vc(b,"focus",!0);vc(b,"blur",!0);c.set("blur",null);c.set("focus",null);break;case "cancel":case "close":oc(a)&&vc(b,a,!0);break;case "invalid":case "submit":case "reset":break;default:-1===ac.indexOf(a)&&F(a,b)}c.set(a,null)}}
var wc,xc,yc,zc=!1,Ac=[],Bc=null,Cc=null,Dc=null,Ec=new Map,Fc=new Map,Gc=[],Hc="mousedown mouseup touchcancel touchend touchstart auxclick dblclick pointercancel pointerdown pointerup dragend dragstart drop compositionend compositionstart keydown keypress keyup input textInput close cancel copy cut paste click change contextmenu reset submit".split(" "),Ic="focus blur dragenter dragleave mouseover mouseout pointerover pointerout gotpointercapture lostpointercapture".split(" ");
function Jc(a,b){var c=cc(b);Hc.forEach(function(a){uc(a,b,c)});Ic.forEach(function(a){uc(a,b,c)})}function Kc(a,b,c,d,e){return{blockedOn:a,topLevelType:b,eventSystemFlags:c|32,nativeEvent:e,container:d}}
function Lc(a,b){switch(a){case "focus":case "blur":Bc=null;break;case "dragenter":case "dragleave":Cc=null;break;case "mouseover":case "mouseout":Dc=null;break;case "pointerover":case "pointerout":Ec.delete(b.pointerId);break;case "gotpointercapture":case "lostpointercapture":Fc.delete(b.pointerId)}}function Mc(a,b,c,d,e,f){if(null===a||a.nativeEvent!==f)return a=Kc(b,c,d,e,f),null!==b&&(b=Nc(b),null!==b&&xc(b)),a;a.eventSystemFlags|=d;return a}
function Oc(a,b,c,d,e){switch(b){case "focus":return Bc=Mc(Bc,a,b,c,d,e),!0;case "dragenter":return Cc=Mc(Cc,a,b,c,d,e),!0;case "mouseover":return Dc=Mc(Dc,a,b,c,d,e),!0;case "pointerover":var f=e.pointerId;Ec.set(f,Mc(Ec.get(f)||null,a,b,c,d,e));return!0;case "gotpointercapture":return f=e.pointerId,Fc.set(f,Mc(Fc.get(f)||null,a,b,c,d,e)),!0}return!1}
function Pc(a){var b=tc(a.target);if(null!==b){var c=dc(b);if(null!==c)if(b=c.tag,13===b){if(b=ec(c),null!==b){a.blockedOn=b;r.unstable_runWithPriority(a.priority,function(){yc(c)});return}}else if(3===b&&c.stateNode.hydrate){a.blockedOn=3===c.tag?c.stateNode.containerInfo:null;return}}a.blockedOn=null}function Qc(a){if(null!==a.blockedOn)return!1;var b=Rc(a.topLevelType,a.eventSystemFlags,a.container,a.nativeEvent);if(null!==b){var c=Nc(b);null!==c&&xc(c);a.blockedOn=b;return!1}return!0}
function Sc(a,b,c){Qc(a)&&c.delete(b)}function Tc(){for(zc=!1;0<Ac.length;){var a=Ac[0];if(null!==a.blockedOn){a=Nc(a.blockedOn);null!==a&&wc(a);break}var b=Rc(a.topLevelType,a.eventSystemFlags,a.container,a.nativeEvent);null!==b?a.blockedOn=b:Ac.shift()}null!==Bc&&Qc(Bc)&&(Bc=null);null!==Cc&&Qc(Cc)&&(Cc=null);null!==Dc&&Qc(Dc)&&(Dc=null);Ec.forEach(Sc);Fc.forEach(Sc)}function Uc(a,b){a.blockedOn===b&&(a.blockedOn=null,zc||(zc=!0,r.unstable_scheduleCallback(r.unstable_NormalPriority,Tc)))}
function Vc(a){function b(b){return Uc(b,a)}if(0<Ac.length){Uc(Ac[0],a);for(var c=1;c<Ac.length;c++){var d=Ac[c];d.blockedOn===a&&(d.blockedOn=null)}}null!==Bc&&Uc(Bc,a);null!==Cc&&Uc(Cc,a);null!==Dc&&Uc(Dc,a);Ec.forEach(b);Fc.forEach(b);for(c=0;c<Gc.length;c++)d=Gc[c],d.blockedOn===a&&(d.blockedOn=null);for(;0<Gc.length&&(c=Gc[0],null===c.blockedOn);)Pc(c),null===c.blockedOn&&Gc.shift()}
var Wc={},Yc=new Map,Zc=new Map,$c=["abort","abort",Xb,"animationEnd",Yb,"animationIteration",Zb,"animationStart","canplay","canPlay","canplaythrough","canPlayThrough","durationchange","durationChange","emptied","emptied","encrypted","encrypted","ended","ended","error","error","gotpointercapture","gotPointerCapture","load","load","loadeddata","loadedData","loadedmetadata","loadedMetadata","loadstart","loadStart","lostpointercapture","lostPointerCapture","playing","playing","progress","progress","seeking",
"seeking","stalled","stalled","suspend","suspend","timeupdate","timeUpdate",$b,"transitionEnd","waiting","waiting"];function ad(a,b){for(var c=0;c<a.length;c+=2){var d=a[c],e=a[c+1],f="on"+(e[0].toUpperCase()+e.slice(1));f={phasedRegistrationNames:{bubbled:f,captured:f+"Capture"},dependencies:[d],eventPriority:b};Zc.set(d,b);Yc.set(d,f);Wc[e]=f}}
ad("blur blur cancel cancel click click close close contextmenu contextMenu copy copy cut cut auxclick auxClick dblclick doubleClick dragend dragEnd dragstart dragStart drop drop focus focus input input invalid invalid keydown keyDown keypress keyPress keyup keyUp mousedown mouseDown mouseup mouseUp paste paste pause pause play play pointercancel pointerCancel pointerdown pointerDown pointerup pointerUp ratechange rateChange reset reset seeked seeked submit submit touchcancel touchCancel touchend touchEnd touchstart touchStart volumechange volumeChange".split(" "),0);
ad("drag drag dragenter dragEnter dragexit dragExit dragleave dragLeave dragover dragOver mousemove mouseMove mouseout mouseOut mouseover mouseOver pointermove pointerMove pointerout pointerOut pointerover pointerOver scroll scroll toggle toggle touchmove touchMove wheel wheel".split(" "),1);ad($c,2);for(var bd="change selectionchange textInput compositionstart compositionend compositionupdate".split(" "),cd=0;cd<bd.length;cd++)Zc.set(bd[cd],0);
var dd=r.unstable_UserBlockingPriority,ed=r.unstable_runWithPriority,fd=!0;function F(a,b){vc(b,a,!1)}function vc(a,b,c){var d=Zc.get(b);switch(void 0===d?2:d){case 0:d=gd.bind(null,b,1,a);break;case 1:d=hd.bind(null,b,1,a);break;default:d=id.bind(null,b,1,a)}c?a.addEventListener(b,d,!0):a.addEventListener(b,d,!1)}function gd(a,b,c,d){Ja||Ha();var e=id,f=Ja;Ja=!0;try{Ga(e,a,b,c,d)}finally{(Ja=f)||La()}}function hd(a,b,c,d){ed(dd,id.bind(null,a,b,c,d))}
function id(a,b,c,d){if(fd)if(0<Ac.length&&-1<Hc.indexOf(a))a=Kc(null,a,b,c,d),Ac.push(a);else{var e=Rc(a,b,c,d);if(null===e)Lc(a,d);else if(-1<Hc.indexOf(a))a=Kc(e,a,b,c,d),Ac.push(a);else if(!Oc(e,a,b,c,d)){Lc(a,d);a=rc(a,d,null,b);try{Ma(sc,a)}finally{qc(a)}}}}
function Rc(a,b,c,d){c=nc(d);c=tc(c);if(null!==c){var e=dc(c);if(null===e)c=null;else{var f=e.tag;if(13===f){c=ec(e);if(null!==c)return c;c=null}else if(3===f){if(e.stateNode.hydrate)return 3===e.tag?e.stateNode.containerInfo:null;c=null}else e!==c&&(c=null)}}a=rc(a,d,c,b);try{Ma(sc,a)}finally{qc(a)}return null}
var jd={animationIterationCount:!0,borderImageOutset:!0,borderImageSlice:!0,borderImageWidth:!0,boxFlex:!0,boxFlexGroup:!0,boxOrdinalGroup:!0,columnCount:!0,columns:!0,flex:!0,flexGrow:!0,flexPositive:!0,flexShrink:!0,flexNegative:!0,flexOrder:!0,gridArea:!0,gridRow:!0,gridRowEnd:!0,gridRowSpan:!0,gridRowStart:!0,gridColumn:!0,gridColumnEnd:!0,gridColumnSpan:!0,gridColumnStart:!0,fontWeight:!0,lineClamp:!0,lineHeight:!0,opacity:!0,order:!0,orphans:!0,tabSize:!0,widows:!0,zIndex:!0,zoom:!0,fillOpacity:!0,
floodOpacity:!0,stopOpacity:!0,strokeDasharray:!0,strokeDashoffset:!0,strokeMiterlimit:!0,strokeOpacity:!0,strokeWidth:!0},kd=["Webkit","ms","Moz","O"];Object.keys(jd).forEach(function(a){kd.forEach(function(b){b=b+a.charAt(0).toUpperCase()+a.substring(1);jd[b]=jd[a]})});function ld(a,b,c){return null==b||"boolean"===typeof b||""===b?"":c||"number"!==typeof b||0===b||jd.hasOwnProperty(a)&&jd[a]?(""+b).trim():b+"px"}
function md(a,b){a=a.style;for(var c in b)if(b.hasOwnProperty(c)){var d=0===c.indexOf("--"),e=ld(c,b[c],d);"float"===c&&(c="cssFloat");d?a.setProperty(c,e):a[c]=e}}var nd=n({menuitem:!0},{area:!0,base:!0,br:!0,col:!0,embed:!0,hr:!0,img:!0,input:!0,keygen:!0,link:!0,meta:!0,param:!0,source:!0,track:!0,wbr:!0});
function od(a,b){if(b){if(nd[a]&&(null!=b.children||null!=b.dangerouslySetInnerHTML))throw Error(u(137,a,""));if(null!=b.dangerouslySetInnerHTML){if(null!=b.children)throw Error(u(60));if(!("object"===typeof b.dangerouslySetInnerHTML&&"__html"in b.dangerouslySetInnerHTML))throw Error(u(61));}if(null!=b.style&&"object"!==typeof b.style)throw Error(u(62,""));}}
function pd(a,b){if(-1===a.indexOf("-"))return"string"===typeof b.is;switch(a){case "annotation-xml":case "color-profile":case "font-face":case "font-face-src":case "font-face-uri":case "font-face-format":case "font-face-name":case "missing-glyph":return!1;default:return!0}}var qd=Mb.html;function rd(a,b){a=9===a.nodeType||11===a.nodeType?a:a.ownerDocument;var c=cc(a);b=wa[b];for(var d=0;d<b.length;d++)uc(b[d],a,c)}function sd(){}
function td(a){a=a||("undefined"!==typeof document?document:void 0);if("undefined"===typeof a)return null;try{return a.activeElement||a.body}catch(b){return a.body}}function ud(a){for(;a&&a.firstChild;)a=a.firstChild;return a}function vd(a,b){var c=ud(a);a=0;for(var d;c;){if(3===c.nodeType){d=a+c.textContent.length;if(a<=b&&d>=b)return{node:c,offset:b-a};a=d}a:{for(;c;){if(c.nextSibling){c=c.nextSibling;break a}c=c.parentNode}c=void 0}c=ud(c)}}
function wd(a,b){return a&&b?a===b?!0:a&&3===a.nodeType?!1:b&&3===b.nodeType?wd(a,b.parentNode):"contains"in a?a.contains(b):a.compareDocumentPosition?!!(a.compareDocumentPosition(b)&16):!1:!1}function xd(){for(var a=window,b=td();b instanceof a.HTMLIFrameElement;){try{var c="string"===typeof b.contentWindow.location.href}catch(d){c=!1}if(c)a=b.contentWindow;else break;b=td(a.document)}return b}
function yd(a){var b=a&&a.nodeName&&a.nodeName.toLowerCase();return b&&("input"===b&&("text"===a.type||"search"===a.type||"tel"===a.type||"url"===a.type||"password"===a.type)||"textarea"===b||"true"===a.contentEditable)}var zd="$",Ad="/$",Bd="$?",Cd="$!",Dd=null,Ed=null;function Fd(a,b){switch(a){case "button":case "input":case "select":case "textarea":return!!b.autoFocus}return!1}
function Gd(a,b){return"textarea"===a||"option"===a||"noscript"===a||"string"===typeof b.children||"number"===typeof b.children||"object"===typeof b.dangerouslySetInnerHTML&&null!==b.dangerouslySetInnerHTML&&null!=b.dangerouslySetInnerHTML.__html}var Hd="function"===typeof setTimeout?setTimeout:void 0,Id="function"===typeof clearTimeout?clearTimeout:void 0;function Jd(a){for(;null!=a;a=a.nextSibling){var b=a.nodeType;if(1===b||3===b)break}return a}
function Kd(a){a=a.previousSibling;for(var b=0;a;){if(8===a.nodeType){var c=a.data;if(c===zd||c===Cd||c===Bd){if(0===b)return a;b--}else c===Ad&&b++}a=a.previousSibling}return null}var Ld=Math.random().toString(36).slice(2),Md="__reactInternalInstance$"+Ld,Nd="__reactEventHandlers$"+Ld,Od="__reactContainere$"+Ld;
function tc(a){var b=a[Md];if(b)return b;for(var c=a.parentNode;c;){if(b=c[Od]||c[Md]){c=b.alternate;if(null!==b.child||null!==c&&null!==c.child)for(a=Kd(a);null!==a;){if(c=a[Md])return c;a=Kd(a)}return b}a=c;c=a.parentNode}return null}function Nc(a){a=a[Md]||a[Od];return!a||5!==a.tag&&6!==a.tag&&13!==a.tag&&3!==a.tag?null:a}function Pd(a){if(5===a.tag||6===a.tag)return a.stateNode;throw Error(u(33));}function Qd(a){return a[Nd]||null}
function Rd(a){do a=a.return;while(a&&5!==a.tag);return a?a:null}
function Sd(a,b){var c=a.stateNode;if(!c)return null;var d=la(c);if(!d)return null;c=d[b];a:switch(b){case "onClick":case "onClickCapture":case "onDoubleClick":case "onDoubleClickCapture":case "onMouseDown":case "onMouseDownCapture":case "onMouseMove":case "onMouseMoveCapture":case "onMouseUp":case "onMouseUpCapture":case "onMouseEnter":(d=!d.disabled)||(a=a.type,d=!("button"===a||"input"===a||"select"===a||"textarea"===a));a=!d;break a;default:a=!1}if(a)return null;if(c&&"function"!==typeof c)throw Error(u(231,
b,typeof c));return c}function Td(a,b,c){if(b=Sd(a,c.dispatchConfig.phasedRegistrationNames[b]))c._dispatchListeners=ic(c._dispatchListeners,b),c._dispatchInstances=ic(c._dispatchInstances,a)}function Ud(a){if(a&&a.dispatchConfig.phasedRegistrationNames){for(var b=a._targetInst,c=[];b;)c.push(b),b=Rd(b);for(b=c.length;0<b--;)Td(c[b],"captured",a);for(b=0;b<c.length;b++)Td(c[b],"bubbled",a)}}
function Vd(a,b,c){a&&c&&c.dispatchConfig.registrationName&&(b=Sd(a,c.dispatchConfig.registrationName))&&(c._dispatchListeners=ic(c._dispatchListeners,b),c._dispatchInstances=ic(c._dispatchInstances,a))}function Wd(a){a&&a.dispatchConfig.registrationName&&Vd(a._targetInst,null,a)}function Xd(a){jc(a,Ud)}var Yd=null,Zd=null,$d=null;
function ae(){if($d)return $d;var a,b=Zd,c=b.length,d,e="value"in Yd?Yd.value:Yd.textContent,f=e.length;for(a=0;a<c&&b[a]===e[a];a++);var g=c-a;for(d=1;d<=g&&b[c-d]===e[f-d];d++);return $d=e.slice(a,1<d?1-d:void 0)}function be(){return!0}function ce(){return!1}
function G(a,b,c,d){this.dispatchConfig=a;this._targetInst=b;this.nativeEvent=c;a=this.constructor.Interface;for(var e in a)a.hasOwnProperty(e)&&((b=a[e])?this[e]=b(c):"target"===e?this.target=d:this[e]=c[e]);this.isDefaultPrevented=(null!=c.defaultPrevented?c.defaultPrevented:!1===c.returnValue)?be:ce;this.isPropagationStopped=ce;return this}
n(G.prototype,{preventDefault:function(){this.defaultPrevented=!0;var a=this.nativeEvent;a&&(a.preventDefault?a.preventDefault():"unknown"!==typeof a.returnValue&&(a.returnValue=!1),this.isDefaultPrevented=be)},stopPropagation:function(){var a=this.nativeEvent;a&&(a.stopPropagation?a.stopPropagation():"unknown"!==typeof a.cancelBubble&&(a.cancelBubble=!0),this.isPropagationStopped=be)},persist:function(){this.isPersistent=be},isPersistent:ce,destructor:function(){var a=this.constructor.Interface,
b;for(b in a)this[b]=null;this.nativeEvent=this._targetInst=this.dispatchConfig=null;this.isPropagationStopped=this.isDefaultPrevented=ce;this._dispatchInstances=this._dispatchListeners=null}});G.Interface={type:null,target:null,currentTarget:function(){return null},eventPhase:null,bubbles:null,cancelable:null,timeStamp:function(a){return a.timeStamp||Date.now()},defaultPrevented:null,isTrusted:null};
G.extend=function(a){function b(){}function c(){return d.apply(this,arguments)}var d=this;b.prototype=d.prototype;var e=new b;n(e,c.prototype);c.prototype=e;c.prototype.constructor=c;c.Interface=n({},d.Interface,a);c.extend=d.extend;de(c);return c};de(G);function ee(a,b,c,d){if(this.eventPool.length){var e=this.eventPool.pop();this.call(e,a,b,c,d);return e}return new this(a,b,c,d)}
function fe(a){if(!(a instanceof this))throw Error(u(279));a.destructor();10>this.eventPool.length&&this.eventPool.push(a)}function de(a){a.eventPool=[];a.getPooled=ee;a.release=fe}var ge=G.extend({data:null}),he=G.extend({data:null}),ie=[9,13,27,32],je=ya&&"CompositionEvent"in window,ke=null;ya&&"documentMode"in document&&(ke=document.documentMode);
var le=ya&&"TextEvent"in window&&!ke,me=ya&&(!je||ke&&8<ke&&11>=ke),ne=String.fromCharCode(32),oe={beforeInput:{phasedRegistrationNames:{bubbled:"onBeforeInput",captured:"onBeforeInputCapture"},dependencies:["compositionend","keypress","textInput","paste"]},compositionEnd:{phasedRegistrationNames:{bubbled:"onCompositionEnd",captured:"onCompositionEndCapture"},dependencies:"blur compositionend keydown keypress keyup mousedown".split(" ")},compositionStart:{phasedRegistrationNames:{bubbled:"onCompositionStart",
captured:"onCompositionStartCapture"},dependencies:"blur compositionstart keydown keypress keyup mousedown".split(" ")},compositionUpdate:{phasedRegistrationNames:{bubbled:"onCompositionUpdate",captured:"onCompositionUpdateCapture"},dependencies:"blur compositionupdate keydown keypress keyup mousedown".split(" ")}},pe=!1;
function qe(a,b){switch(a){case "keyup":return-1!==ie.indexOf(b.keyCode);case "keydown":return 229!==b.keyCode;case "keypress":case "mousedown":case "blur":return!0;default:return!1}}function re(a){a=a.detail;return"object"===typeof a&&"data"in a?a.data:null}var se=!1;function te(a,b){switch(a){case "compositionend":return re(b);case "keypress":if(32!==b.which)return null;pe=!0;return ne;case "textInput":return a=b.data,a===ne&&pe?null:a;default:return null}}
function ue(a,b){if(se)return"compositionend"===a||!je&&qe(a,b)?(a=ae(),$d=Zd=Yd=null,se=!1,a):null;switch(a){case "paste":return null;case "keypress":if(!(b.ctrlKey||b.altKey||b.metaKey)||b.ctrlKey&&b.altKey){if(b.char&&1<b.char.length)return b.char;if(b.which)return String.fromCharCode(b.which)}return null;case "compositionend":return me&&"ko"!==b.locale?null:b.data;default:return null}}
var ve={eventTypes:oe,extractEvents:function(a,b,c,d){var e;if(je)b:{switch(a){case "compositionstart":var f=oe.compositionStart;break b;case "compositionend":f=oe.compositionEnd;break b;case "compositionupdate":f=oe.compositionUpdate;break b}f=void 0}else se?qe(a,c)&&(f=oe.compositionEnd):"keydown"===a&&229===c.keyCode&&(f=oe.compositionStart);f?(me&&"ko"!==c.locale&&(se||f!==oe.compositionStart?f===oe.compositionEnd&&se&&(e=ae()):(Yd=d,Zd="value"in Yd?Yd.value:Yd.textContent,se=!0)),f=ge.getPooled(f,
b,c,d),e?f.data=e:(e=re(c),null!==e&&(f.data=e)),Xd(f),e=f):e=null;(a=le?te(a,c):ue(a,c))?(b=he.getPooled(oe.beforeInput,b,c,d),b.data=a,Xd(b)):b=null;return null===e?b:null===b?e:[e,b]}},we={color:!0,date:!0,datetime:!0,"datetime-local":!0,email:!0,month:!0,number:!0,password:!0,range:!0,search:!0,tel:!0,text:!0,time:!0,url:!0,week:!0};function xe(a){var b=a&&a.nodeName&&a.nodeName.toLowerCase();return"input"===b?!!we[a.type]:"textarea"===b?!0:!1}
var ye={change:{phasedRegistrationNames:{bubbled:"onChange",captured:"onChangeCapture"},dependencies:"blur change click focus input keydown keyup selectionchange".split(" ")}};function ze(a,b,c){a=G.getPooled(ye.change,a,b,c);a.type="change";Da(c);Xd(a);return a}var Ae=null,Be=null;function Ce(a){mc(a)}function De(a){var b=Pd(a);if(yb(b))return a}function Ee(a,b){if("change"===a)return b}var Fe=!1;ya&&(Fe=oc("input")&&(!document.documentMode||9<document.documentMode));
function Ge(){Ae&&(Ae.detachEvent("onpropertychange",He),Be=Ae=null)}function He(a){if("value"===a.propertyName&&De(Be))if(a=ze(Be,a,nc(a)),Ja)mc(a);else{Ja=!0;try{Fa(Ce,a)}finally{Ja=!1,La()}}}function Ie(a,b,c){"focus"===a?(Ge(),Ae=b,Be=c,Ae.attachEvent("onpropertychange",He)):"blur"===a&&Ge()}function Je(a){if("selectionchange"===a||"keyup"===a||"keydown"===a)return De(Be)}function Ke(a,b){if("click"===a)return De(b)}function Le(a,b){if("input"===a||"change"===a)return De(b)}
var Me={eventTypes:ye,_isInputEventSupported:Fe,extractEvents:function(a,b,c,d){var e=b?Pd(b):window,f=e.nodeName&&e.nodeName.toLowerCase();if("select"===f||"input"===f&&"file"===e.type)var g=Ee;else if(xe(e))if(Fe)g=Le;else{g=Je;var h=Ie}else(f=e.nodeName)&&"input"===f.toLowerCase()&&("checkbox"===e.type||"radio"===e.type)&&(g=Ke);if(g&&(g=g(a,b)))return ze(g,c,d);h&&h(a,e,b);"blur"===a&&(a=e._wrapperState)&&a.controlled&&"number"===e.type&&Db(e,"number",e.value)}},Ne=G.extend({view:null,detail:null}),
Oe={Alt:"altKey",Control:"ctrlKey",Meta:"metaKey",Shift:"shiftKey"};function Pe(a){var b=this.nativeEvent;return b.getModifierState?b.getModifierState(a):(a=Oe[a])?!!b[a]:!1}function Qe(){return Pe}
var Re=0,Se=0,Te=!1,Ue=!1,Ve=Ne.extend({screenX:null,screenY:null,clientX:null,clientY:null,pageX:null,pageY:null,ctrlKey:null,shiftKey:null,altKey:null,metaKey:null,getModifierState:Qe,button:null,buttons:null,relatedTarget:function(a){return a.relatedTarget||(a.fromElement===a.srcElement?a.toElement:a.fromElement)},movementX:function(a){if("movementX"in a)return a.movementX;var b=Re;Re=a.screenX;return Te?"mousemove"===a.type?a.screenX-b:0:(Te=!0,0)},movementY:function(a){if("movementY"in a)return a.movementY;
var b=Se;Se=a.screenY;return Ue?"mousemove"===a.type?a.screenY-b:0:(Ue=!0,0)}}),We=Ve.extend({pointerId:null,width:null,height:null,pressure:null,tangentialPressure:null,tiltX:null,tiltY:null,twist:null,pointerType:null,isPrimary:null}),Xe={mouseEnter:{registrationName:"onMouseEnter",dependencies:["mouseout","mouseover"]},mouseLeave:{registrationName:"onMouseLeave",dependencies:["mouseout","mouseover"]},pointerEnter:{registrationName:"onPointerEnter",dependencies:["pointerout","pointerover"]},pointerLeave:{registrationName:"onPointerLeave",
dependencies:["pointerout","pointerover"]}},Ye={eventTypes:Xe,extractEvents:function(a,b,c,d,e){var f="mouseover"===a||"pointerover"===a,g="mouseout"===a||"pointerout"===a;if(f&&0===(e&32)&&(c.relatedTarget||c.fromElement)||!g&&!f)return null;f=d.window===d?d:(f=d.ownerDocument)?f.defaultView||f.parentWindow:window;if(g){if(g=b,b=(b=c.relatedTarget||c.toElement)?tc(b):null,null!==b){var h=dc(b);if(b!==h||5!==b.tag&&6!==b.tag)b=null}}else g=null;if(g===b)return null;if("mouseout"===a||"mouseover"===
a){var k=Ve;var l=Xe.mouseLeave;var m=Xe.mouseEnter;var p="mouse"}else if("pointerout"===a||"pointerover"===a)k=We,l=Xe.pointerLeave,m=Xe.pointerEnter,p="pointer";a=null==g?f:Pd(g);f=null==b?f:Pd(b);l=k.getPooled(l,g,c,d);l.type=p+"leave";l.target=a;l.relatedTarget=f;c=k.getPooled(m,b,c,d);c.type=p+"enter";c.target=f;c.relatedTarget=a;d=g;p=b;if(d&&p)a:{k=d;m=p;g=0;for(a=k;a;a=Rd(a))g++;a=0;for(b=m;b;b=Rd(b))a++;for(;0<g-a;)k=Rd(k),g--;for(;0<a-g;)m=Rd(m),a--;for(;g--;){if(k===m||k===m.alternate)break a;
k=Rd(k);m=Rd(m)}k=null}else k=null;m=k;for(k=[];d&&d!==m;){g=d.alternate;if(null!==g&&g===m)break;k.push(d);d=Rd(d)}for(d=[];p&&p!==m;){g=p.alternate;if(null!==g&&g===m)break;d.push(p);p=Rd(p)}for(p=0;p<k.length;p++)Vd(k[p],"bubbled",l);for(p=d.length;0<p--;)Vd(d[p],"captured",c);return 0===(e&64)?[l]:[l,c]}};function Ze(a,b){return a===b&&(0!==a||1/a===1/b)||a!==a&&b!==b}var $e="function"===typeof Object.is?Object.is:Ze,af=Object.prototype.hasOwnProperty;
function bf(a,b){if($e(a,b))return!0;if("object"!==typeof a||null===a||"object"!==typeof b||null===b)return!1;var c=Object.keys(a),d=Object.keys(b);if(c.length!==d.length)return!1;for(d=0;d<c.length;d++)if(!af.call(b,c[d])||!$e(a[c[d]],b[c[d]]))return!1;return!0}
var cf=ya&&"documentMode"in document&&11>=document.documentMode,df={select:{phasedRegistrationNames:{bubbled:"onSelect",captured:"onSelectCapture"},dependencies:"blur contextmenu dragend focus keydown keyup mousedown mouseup selectionchange".split(" ")}},ef=null,ff=null,gf=null,hf=!1;
function jf(a,b){var c=b.window===b?b.document:9===b.nodeType?b:b.ownerDocument;if(hf||null==ef||ef!==td(c))return null;c=ef;"selectionStart"in c&&yd(c)?c={start:c.selectionStart,end:c.selectionEnd}:(c=(c.ownerDocument&&c.ownerDocument.defaultView||window).getSelection(),c={anchorNode:c.anchorNode,anchorOffset:c.anchorOffset,focusNode:c.focusNode,focusOffset:c.focusOffset});return gf&&bf(gf,c)?null:(gf=c,a=G.getPooled(df.select,ff,a,b),a.type="select",a.target=ef,Xd(a),a)}
var kf={eventTypes:df,extractEvents:function(a,b,c,d,e,f){e=f||(d.window===d?d.document:9===d.nodeType?d:d.ownerDocument);if(!(f=!e)){a:{e=cc(e);f=wa.onSelect;for(var g=0;g<f.length;g++)if(!e.has(f[g])){e=!1;break a}e=!0}f=!e}if(f)return null;e=b?Pd(b):window;switch(a){case "focus":if(xe(e)||"true"===e.contentEditable)ef=e,ff=b,gf=null;break;case "blur":gf=ff=ef=null;break;case "mousedown":hf=!0;break;case "contextmenu":case "mouseup":case "dragend":return hf=!1,jf(c,d);case "selectionchange":if(cf)break;
case "keydown":case "keyup":return jf(c,d)}return null}},lf=G.extend({animationName:null,elapsedTime:null,pseudoElement:null}),mf=G.extend({clipboardData:function(a){return"clipboardData"in a?a.clipboardData:window.clipboardData}}),nf=Ne.extend({relatedTarget:null});function of(a){var b=a.keyCode;"charCode"in a?(a=a.charCode,0===a&&13===b&&(a=13)):a=b;10===a&&(a=13);return 32<=a||13===a?a:0}
var pf={Esc:"Escape",Spacebar:" ",Left:"ArrowLeft",Up:"ArrowUp",Right:"ArrowRight",Down:"ArrowDown",Del:"Delete",Win:"OS",Menu:"ContextMenu",Apps:"ContextMenu",Scroll:"ScrollLock",MozPrintableKey:"Unidentified"},qf={8:"Backspace",9:"Tab",12:"Clear",13:"Enter",16:"Shift",17:"Control",18:"Alt",19:"Pause",20:"CapsLock",27:"Escape",32:" ",33:"PageUp",34:"PageDown",35:"End",36:"Home",37:"ArrowLeft",38:"ArrowUp",39:"ArrowRight",40:"ArrowDown",45:"Insert",46:"Delete",112:"F1",113:"F2",114:"F3",115:"F4",
116:"F5",117:"F6",118:"F7",119:"F8",120:"F9",121:"F10",122:"F11",123:"F12",144:"NumLock",145:"ScrollLock",224:"Meta"},rf=Ne.extend({key:function(a){if(a.key){var b=pf[a.key]||a.key;if("Unidentified"!==b)return b}return"keypress"===a.type?(a=of(a),13===a?"Enter":String.fromCharCode(a)):"keydown"===a.type||"keyup"===a.type?qf[a.keyCode]||"Unidentified":""},location:null,ctrlKey:null,shiftKey:null,altKey:null,metaKey:null,repeat:null,locale:null,getModifierState:Qe,charCode:function(a){return"keypress"===
a.type?of(a):0},keyCode:function(a){return"keydown"===a.type||"keyup"===a.type?a.keyCode:0},which:function(a){return"keypress"===a.type?of(a):"keydown"===a.type||"keyup"===a.type?a.keyCode:0}}),sf=Ve.extend({dataTransfer:null}),tf=Ne.extend({touches:null,targetTouches:null,changedTouches:null,altKey:null,metaKey:null,ctrlKey:null,shiftKey:null,getModifierState:Qe}),uf=G.extend({propertyName:null,elapsedTime:null,pseudoElement:null}),vf=Ve.extend({deltaX:function(a){return"deltaX"in a?a.deltaX:"wheelDeltaX"in
a?-a.wheelDeltaX:0},deltaY:function(a){return"deltaY"in a?a.deltaY:"wheelDeltaY"in a?-a.wheelDeltaY:"wheelDelta"in a?-a.wheelDelta:0},deltaZ:null,deltaMode:null}),wf={eventTypes:Wc,extractEvents:function(a,b,c,d){var e=Yc.get(a);if(!e)return null;switch(a){case "keypress":if(0===of(c))return null;case "keydown":case "keyup":a=rf;break;case "blur":case "focus":a=nf;break;case "click":if(2===c.button)return null;case "auxclick":case "dblclick":case "mousedown":case "mousemove":case "mouseup":case "mouseout":case "mouseover":case "contextmenu":a=
Ve;break;case "drag":case "dragend":case "dragenter":case "dragexit":case "dragleave":case "dragover":case "dragstart":case "drop":a=sf;break;case "touchcancel":case "touchend":case "touchmove":case "touchstart":a=tf;break;case Xb:case Yb:case Zb:a=lf;break;case $b:a=uf;break;case "scroll":a=Ne;break;case "wheel":a=vf;break;case "copy":case "cut":case "paste":a=mf;break;case "gotpointercapture":case "lostpointercapture":case "pointercancel":case "pointerdown":case "pointermove":case "pointerout":case "pointerover":case "pointerup":a=
We;break;default:a=G}b=a.getPooled(e,b,c,d);Xd(b);return b}};if(pa)throw Error(u(101));pa=Array.prototype.slice.call("ResponderEventPlugin SimpleEventPlugin EnterLeaveEventPlugin ChangeEventPlugin SelectEventPlugin BeforeInputEventPlugin".split(" "));ra();var xf=Nc;la=Qd;ma=xf;na=Pd;xa({SimpleEventPlugin:wf,EnterLeaveEventPlugin:Ye,ChangeEventPlugin:Me,SelectEventPlugin:kf,BeforeInputEventPlugin:ve});var yf=[],zf=-1;function H(a){0>zf||(a.current=yf[zf],yf[zf]=null,zf--)}
function I(a,b){zf++;yf[zf]=a.current;a.current=b}var Af={},J={current:Af},K={current:!1},Bf=Af;function Cf(a,b){var c=a.type.contextTypes;if(!c)return Af;var d=a.stateNode;if(d&&d.__reactInternalMemoizedUnmaskedChildContext===b)return d.__reactInternalMemoizedMaskedChildContext;var e={},f;for(f in c)e[f]=b[f];d&&(a=a.stateNode,a.__reactInternalMemoizedUnmaskedChildContext=b,a.__reactInternalMemoizedMaskedChildContext=e);return e}function L(a){a=a.childContextTypes;return null!==a&&void 0!==a}
function Df(){H(K);H(J)}function Ef(a,b,c){if(J.current!==Af)throw Error(u(168));I(J,b);I(K,c)}function Ff(a,b,c){var d=a.stateNode;a=b.childContextTypes;if("function"!==typeof d.getChildContext)return c;d=d.getChildContext();for(var e in d)if(!(e in a))throw Error(u(108,pb(b)||"Unknown",e));return n({},c,{},d)}function Gf(a){a=(a=a.stateNode)&&a.__reactInternalMemoizedMergedChildContext||Af;Bf=J.current;I(J,a);I(K,K.current);return!0}
function Hf(a,b,c){var d=a.stateNode;if(!d)throw Error(u(169));c?(a=Ff(a,b,Bf),d.__reactInternalMemoizedMergedChildContext=a,H(K),H(J),I(J,a)):H(K);I(K,c)}
var If=r.unstable_runWithPriority,Jf=r.unstable_scheduleCallback,Kf=r.unstable_cancelCallback,Lf=r.unstable_requestPaint,Mf=r.unstable_now,Nf=r.unstable_getCurrentPriorityLevel,Of=r.unstable_ImmediatePriority,Pf=r.unstable_UserBlockingPriority,Qf=r.unstable_NormalPriority,Rf=r.unstable_LowPriority,Sf=r.unstable_IdlePriority,Tf={},Uf=r.unstable_shouldYield,Vf=void 0!==Lf?Lf:function(){},Wf=null,Xf=null,Yf=!1,Zf=Mf(),$f=1E4>Zf?Mf:function(){return Mf()-Zf};
function ag(){switch(Nf()){case Of:return 99;case Pf:return 98;case Qf:return 97;case Rf:return 96;case Sf:return 95;default:throw Error(u(332));}}function bg(a){switch(a){case 99:return Of;case 98:return Pf;case 97:return Qf;case 96:return Rf;case 95:return Sf;default:throw Error(u(332));}}function cg(a,b){a=bg(a);return If(a,b)}function dg(a,b,c){a=bg(a);return Jf(a,b,c)}function eg(a){null===Wf?(Wf=[a],Xf=Jf(Of,fg)):Wf.push(a);return Tf}function gg(){if(null!==Xf){var a=Xf;Xf=null;Kf(a)}fg()}
function fg(){if(!Yf&&null!==Wf){Yf=!0;var a=0;try{var b=Wf;cg(99,function(){for(;a<b.length;a++){var c=b[a];do c=c(!0);while(null!==c)}});Wf=null}catch(c){throw null!==Wf&&(Wf=Wf.slice(a+1)),Jf(Of,gg),c;}finally{Yf=!1}}}function hg(a,b,c){c/=10;return 1073741821-(((1073741821-a+b/10)/c|0)+1)*c}function ig(a,b){if(a&&a.defaultProps){b=n({},b);a=a.defaultProps;for(var c in a)void 0===b[c]&&(b[c]=a[c])}return b}var jg={current:null},kg=null,lg=null,mg=null;function ng(){mg=lg=kg=null}
function og(a){var b=jg.current;H(jg);a.type._context._currentValue=b}function pg(a,b){for(;null!==a;){var c=a.alternate;if(a.childExpirationTime<b)a.childExpirationTime=b,null!==c&&c.childExpirationTime<b&&(c.childExpirationTime=b);else if(null!==c&&c.childExpirationTime<b)c.childExpirationTime=b;else break;a=a.return}}function qg(a,b){kg=a;mg=lg=null;a=a.dependencies;null!==a&&null!==a.firstContext&&(a.expirationTime>=b&&(rg=!0),a.firstContext=null)}
function sg(a,b){if(mg!==a&&!1!==b&&0!==b){if("number"!==typeof b||1073741823===b)mg=a,b=1073741823;b={context:a,observedBits:b,next:null};if(null===lg){if(null===kg)throw Error(u(308));lg=b;kg.dependencies={expirationTime:0,firstContext:b,responders:null}}else lg=lg.next=b}return a._currentValue}var tg=!1;function ug(a){a.updateQueue={baseState:a.memoizedState,baseQueue:null,shared:{pending:null},effects:null}}
function vg(a,b){a=a.updateQueue;b.updateQueue===a&&(b.updateQueue={baseState:a.baseState,baseQueue:a.baseQueue,shared:a.shared,effects:a.effects})}function wg(a,b){a={expirationTime:a,suspenseConfig:b,tag:0,payload:null,callback:null,next:null};return a.next=a}function xg(a,b){a=a.updateQueue;if(null!==a){a=a.shared;var c=a.pending;null===c?b.next=b:(b.next=c.next,c.next=b);a.pending=b}}
function yg(a,b){var c=a.alternate;null!==c&&vg(c,a);a=a.updateQueue;c=a.baseQueue;null===c?(a.baseQueue=b.next=b,b.next=b):(b.next=c.next,c.next=b)}
function zg(a,b,c,d){var e=a.updateQueue;tg=!1;var f=e.baseQueue,g=e.shared.pending;if(null!==g){if(null!==f){var h=f.next;f.next=g.next;g.next=h}f=g;e.shared.pending=null;h=a.alternate;null!==h&&(h=h.updateQueue,null!==h&&(h.baseQueue=g))}if(null!==f){h=f.next;var k=e.baseState,l=0,m=null,p=null,x=null;if(null!==h){var z=h;do{g=z.expirationTime;if(g<d){var ca={expirationTime:z.expirationTime,suspenseConfig:z.suspenseConfig,tag:z.tag,payload:z.payload,callback:z.callback,next:null};null===x?(p=x=
ca,m=k):x=x.next=ca;g>l&&(l=g)}else{null!==x&&(x=x.next={expirationTime:1073741823,suspenseConfig:z.suspenseConfig,tag:z.tag,payload:z.payload,callback:z.callback,next:null});Ag(g,z.suspenseConfig);a:{var D=a,t=z;g=b;ca=c;switch(t.tag){case 1:D=t.payload;if("function"===typeof D){k=D.call(ca,k,g);break a}k=D;break a;case 3:D.effectTag=D.effectTag&-4097|64;case 0:D=t.payload;g="function"===typeof D?D.call(ca,k,g):D;if(null===g||void 0===g)break a;k=n({},k,g);break a;case 2:tg=!0}}null!==z.callback&&
(a.effectTag|=32,g=e.effects,null===g?e.effects=[z]:g.push(z))}z=z.next;if(null===z||z===h)if(g=e.shared.pending,null===g)break;else z=f.next=g.next,g.next=h,e.baseQueue=f=g,e.shared.pending=null}while(1)}null===x?m=k:x.next=p;e.baseState=m;e.baseQueue=x;Bg(l);a.expirationTime=l;a.memoizedState=k}}
function Cg(a,b,c){a=b.effects;b.effects=null;if(null!==a)for(b=0;b<a.length;b++){var d=a[b],e=d.callback;if(null!==e){d.callback=null;d=e;e=c;if("function"!==typeof d)throw Error(u(191,d));d.call(e)}}}var Dg=Wa.ReactCurrentBatchConfig,Eg=(new aa.Component).refs;function Fg(a,b,c,d){b=a.memoizedState;c=c(d,b);c=null===c||void 0===c?b:n({},b,c);a.memoizedState=c;0===a.expirationTime&&(a.updateQueue.baseState=c)}
var Jg={isMounted:function(a){return(a=a._reactInternalFiber)?dc(a)===a:!1},enqueueSetState:function(a,b,c){a=a._reactInternalFiber;var d=Gg(),e=Dg.suspense;d=Hg(d,a,e);e=wg(d,e);e.payload=b;void 0!==c&&null!==c&&(e.callback=c);xg(a,e);Ig(a,d)},enqueueReplaceState:function(a,b,c){a=a._reactInternalFiber;var d=Gg(),e=Dg.suspense;d=Hg(d,a,e);e=wg(d,e);e.tag=1;e.payload=b;void 0!==c&&null!==c&&(e.callback=c);xg(a,e);Ig(a,d)},enqueueForceUpdate:function(a,b){a=a._reactInternalFiber;var c=Gg(),d=Dg.suspense;
c=Hg(c,a,d);d=wg(c,d);d.tag=2;void 0!==b&&null!==b&&(d.callback=b);xg(a,d);Ig(a,c)}};function Kg(a,b,c,d,e,f,g){a=a.stateNode;return"function"===typeof a.shouldComponentUpdate?a.shouldComponentUpdate(d,f,g):b.prototype&&b.prototype.isPureReactComponent?!bf(c,d)||!bf(e,f):!0}
function Lg(a,b,c){var d=!1,e=Af;var f=b.contextType;"object"===typeof f&&null!==f?f=sg(f):(e=L(b)?Bf:J.current,d=b.contextTypes,f=(d=null!==d&&void 0!==d)?Cf(a,e):Af);b=new b(c,f);a.memoizedState=null!==b.state&&void 0!==b.state?b.state:null;b.updater=Jg;a.stateNode=b;b._reactInternalFiber=a;d&&(a=a.stateNode,a.__reactInternalMemoizedUnmaskedChildContext=e,a.__reactInternalMemoizedMaskedChildContext=f);return b}
function Mg(a,b,c,d){a=b.state;"function"===typeof b.componentWillReceiveProps&&b.componentWillReceiveProps(c,d);"function"===typeof b.UNSAFE_componentWillReceiveProps&&b.UNSAFE_componentWillReceiveProps(c,d);b.state!==a&&Jg.enqueueReplaceState(b,b.state,null)}
function Ng(a,b,c,d){var e=a.stateNode;e.props=c;e.state=a.memoizedState;e.refs=Eg;ug(a);var f=b.contextType;"object"===typeof f&&null!==f?e.context=sg(f):(f=L(b)?Bf:J.current,e.context=Cf(a,f));zg(a,c,e,d);e.state=a.memoizedState;f=b.getDerivedStateFromProps;"function"===typeof f&&(Fg(a,b,f,c),e.state=a.memoizedState);"function"===typeof b.getDerivedStateFromProps||"function"===typeof e.getSnapshotBeforeUpdate||"function"!==typeof e.UNSAFE_componentWillMount&&"function"!==typeof e.componentWillMount||
(b=e.state,"function"===typeof e.componentWillMount&&e.componentWillMount(),"function"===typeof e.UNSAFE_componentWillMount&&e.UNSAFE_componentWillMount(),b!==e.state&&Jg.enqueueReplaceState(e,e.state,null),zg(a,c,e,d),e.state=a.memoizedState);"function"===typeof e.componentDidMount&&(a.effectTag|=4)}var Og=Array.isArray;
function Pg(a,b,c){a=c.ref;if(null!==a&&"function"!==typeof a&&"object"!==typeof a){if(c._owner){c=c._owner;if(c){if(1!==c.tag)throw Error(u(309));var d=c.stateNode}if(!d)throw Error(u(147,a));var e=""+a;if(null!==b&&null!==b.ref&&"function"===typeof b.ref&&b.ref._stringRef===e)return b.ref;b=function(a){var b=d.refs;b===Eg&&(b=d.refs={});null===a?delete b[e]:b[e]=a};b._stringRef=e;return b}if("string"!==typeof a)throw Error(u(284));if(!c._owner)throw Error(u(290,a));}return a}
function Qg(a,b){if("textarea"!==a.type)throw Error(u(31,"[object Object]"===Object.prototype.toString.call(b)?"object with keys {"+Object.keys(b).join(", ")+"}":b,""));}
function Rg(a){function b(b,c){if(a){var d=b.lastEffect;null!==d?(d.nextEffect=c,b.lastEffect=c):b.firstEffect=b.lastEffect=c;c.nextEffect=null;c.effectTag=8}}function c(c,d){if(!a)return null;for(;null!==d;)b(c,d),d=d.sibling;return null}function d(a,b){for(a=new Map;null!==b;)null!==b.key?a.set(b.key,b):a.set(b.index,b),b=b.sibling;return a}function e(a,b){a=Sg(a,b);a.index=0;a.sibling=null;return a}function f(b,c,d){b.index=d;if(!a)return c;d=b.alternate;if(null!==d)return d=d.index,d<c?(b.effectTag=
2,c):d;b.effectTag=2;return c}function g(b){a&&null===b.alternate&&(b.effectTag=2);return b}function h(a,b,c,d){if(null===b||6!==b.tag)return b=Tg(c,a.mode,d),b.return=a,b;b=e(b,c);b.return=a;return b}function k(a,b,c,d){if(null!==b&&b.elementType===c.type)return d=e(b,c.props),d.ref=Pg(a,b,c),d.return=a,d;d=Ug(c.type,c.key,c.props,null,a.mode,d);d.ref=Pg(a,b,c);d.return=a;return d}function l(a,b,c,d){if(null===b||4!==b.tag||b.stateNode.containerInfo!==c.containerInfo||b.stateNode.implementation!==
c.implementation)return b=Vg(c,a.mode,d),b.return=a,b;b=e(b,c.children||[]);b.return=a;return b}function m(a,b,c,d,f){if(null===b||7!==b.tag)return b=Wg(c,a.mode,d,f),b.return=a,b;b=e(b,c);b.return=a;return b}function p(a,b,c){if("string"===typeof b||"number"===typeof b)return b=Tg(""+b,a.mode,c),b.return=a,b;if("object"===typeof b&&null!==b){switch(b.$$typeof){case Za:return c=Ug(b.type,b.key,b.props,null,a.mode,c),c.ref=Pg(a,null,b),c.return=a,c;case $a:return b=Vg(b,a.mode,c),b.return=a,b}if(Og(b)||
nb(b))return b=Wg(b,a.mode,c,null),b.return=a,b;Qg(a,b)}return null}function x(a,b,c,d){var e=null!==b?b.key:null;if("string"===typeof c||"number"===typeof c)return null!==e?null:h(a,b,""+c,d);if("object"===typeof c&&null!==c){switch(c.$$typeof){case Za:return c.key===e?c.type===ab?m(a,b,c.props.children,d,e):k(a,b,c,d):null;case $a:return c.key===e?l(a,b,c,d):null}if(Og(c)||nb(c))return null!==e?null:m(a,b,c,d,null);Qg(a,c)}return null}function z(a,b,c,d,e){if("string"===typeof d||"number"===typeof d)return a=
a.get(c)||null,h(b,a,""+d,e);if("object"===typeof d&&null!==d){switch(d.$$typeof){case Za:return a=a.get(null===d.key?c:d.key)||null,d.type===ab?m(b,a,d.props.children,e,d.key):k(b,a,d,e);case $a:return a=a.get(null===d.key?c:d.key)||null,l(b,a,d,e)}if(Og(d)||nb(d))return a=a.get(c)||null,m(b,a,d,e,null);Qg(b,d)}return null}function ca(e,g,h,k){for(var l=null,t=null,m=g,y=g=0,A=null;null!==m&&y<h.length;y++){m.index>y?(A=m,m=null):A=m.sibling;var q=x(e,m,h[y],k);if(null===q){null===m&&(m=A);break}a&&
m&&null===q.alternate&&b(e,m);g=f(q,g,y);null===t?l=q:t.sibling=q;t=q;m=A}if(y===h.length)return c(e,m),l;if(null===m){for(;y<h.length;y++)m=p(e,h[y],k),null!==m&&(g=f(m,g,y),null===t?l=m:t.sibling=m,t=m);return l}for(m=d(e,m);y<h.length;y++)A=z(m,e,y,h[y],k),null!==A&&(a&&null!==A.alternate&&m.delete(null===A.key?y:A.key),g=f(A,g,y),null===t?l=A:t.sibling=A,t=A);a&&m.forEach(function(a){return b(e,a)});return l}function D(e,g,h,l){var k=nb(h);if("function"!==typeof k)throw Error(u(150));h=k.call(h);
if(null==h)throw Error(u(151));for(var m=k=null,t=g,y=g=0,A=null,q=h.next();null!==t&&!q.done;y++,q=h.next()){t.index>y?(A=t,t=null):A=t.sibling;var D=x(e,t,q.value,l);if(null===D){null===t&&(t=A);break}a&&t&&null===D.alternate&&b(e,t);g=f(D,g,y);null===m?k=D:m.sibling=D;m=D;t=A}if(q.done)return c(e,t),k;if(null===t){for(;!q.done;y++,q=h.next())q=p(e,q.value,l),null!==q&&(g=f(q,g,y),null===m?k=q:m.sibling=q,m=q);return k}for(t=d(e,t);!q.done;y++,q=h.next())q=z(t,e,y,q.value,l),null!==q&&(a&&null!==
q.alternate&&t.delete(null===q.key?y:q.key),g=f(q,g,y),null===m?k=q:m.sibling=q,m=q);a&&t.forEach(function(a){return b(e,a)});return k}return function(a,d,f,h){var k="object"===typeof f&&null!==f&&f.type===ab&&null===f.key;k&&(f=f.props.children);var l="object"===typeof f&&null!==f;if(l)switch(f.$$typeof){case Za:a:{l=f.key;for(k=d;null!==k;){if(k.key===l){switch(k.tag){case 7:if(f.type===ab){c(a,k.sibling);d=e(k,f.props.children);d.return=a;a=d;break a}break;default:if(k.elementType===f.type){c(a,
k.sibling);d=e(k,f.props);d.ref=Pg(a,k,f);d.return=a;a=d;break a}}c(a,k);break}else b(a,k);k=k.sibling}f.type===ab?(d=Wg(f.props.children,a.mode,h,f.key),d.return=a,a=d):(h=Ug(f.type,f.key,f.props,null,a.mode,h),h.ref=Pg(a,d,f),h.return=a,a=h)}return g(a);case $a:a:{for(k=f.key;null!==d;){if(d.key===k)if(4===d.tag&&d.stateNode.containerInfo===f.containerInfo&&d.stateNode.implementation===f.implementation){c(a,d.sibling);d=e(d,f.children||[]);d.return=a;a=d;break a}else{c(a,d);break}else b(a,d);d=
d.sibling}d=Vg(f,a.mode,h);d.return=a;a=d}return g(a)}if("string"===typeof f||"number"===typeof f)return f=""+f,null!==d&&6===d.tag?(c(a,d.sibling),d=e(d,f),d.return=a,a=d):(c(a,d),d=Tg(f,a.mode,h),d.return=a,a=d),g(a);if(Og(f))return ca(a,d,f,h);if(nb(f))return D(a,d,f,h);l&&Qg(a,f);if("undefined"===typeof f&&!k)switch(a.tag){case 1:case 0:throw a=a.type,Error(u(152,a.displayName||a.name||"Component"));}return c(a,d)}}var Xg=Rg(!0),Yg=Rg(!1),Zg={},$g={current:Zg},ah={current:Zg},bh={current:Zg};
function ch(a){if(a===Zg)throw Error(u(174));return a}function dh(a,b){I(bh,b);I(ah,a);I($g,Zg);a=b.nodeType;switch(a){case 9:case 11:b=(b=b.documentElement)?b.namespaceURI:Ob(null,"");break;default:a=8===a?b.parentNode:b,b=a.namespaceURI||null,a=a.tagName,b=Ob(b,a)}H($g);I($g,b)}function eh(){H($g);H(ah);H(bh)}function fh(a){ch(bh.current);var b=ch($g.current);var c=Ob(b,a.type);b!==c&&(I(ah,a),I($g,c))}function gh(a){ah.current===a&&(H($g),H(ah))}var M={current:0};
function hh(a){for(var b=a;null!==b;){if(13===b.tag){var c=b.memoizedState;if(null!==c&&(c=c.dehydrated,null===c||c.data===Bd||c.data===Cd))return b}else if(19===b.tag&&void 0!==b.memoizedProps.revealOrder){if(0!==(b.effectTag&64))return b}else if(null!==b.child){b.child.return=b;b=b.child;continue}if(b===a)break;for(;null===b.sibling;){if(null===b.return||b.return===a)return null;b=b.return}b.sibling.return=b.return;b=b.sibling}return null}function ih(a,b){return{responder:a,props:b}}
var jh=Wa.ReactCurrentDispatcher,kh=Wa.ReactCurrentBatchConfig,lh=0,N=null,O=null,P=null,mh=!1;function Q(){throw Error(u(321));}function nh(a,b){if(null===b)return!1;for(var c=0;c<b.length&&c<a.length;c++)if(!$e(a[c],b[c]))return!1;return!0}
function oh(a,b,c,d,e,f){lh=f;N=b;b.memoizedState=null;b.updateQueue=null;b.expirationTime=0;jh.current=null===a||null===a.memoizedState?ph:qh;a=c(d,e);if(b.expirationTime===lh){f=0;do{b.expirationTime=0;if(!(25>f))throw Error(u(301));f+=1;P=O=null;b.updateQueue=null;jh.current=rh;a=c(d,e)}while(b.expirationTime===lh)}jh.current=sh;b=null!==O&&null!==O.next;lh=0;P=O=N=null;mh=!1;if(b)throw Error(u(300));return a}
function th(){var a={memoizedState:null,baseState:null,baseQueue:null,queue:null,next:null};null===P?N.memoizedState=P=a:P=P.next=a;return P}function uh(){if(null===O){var a=N.alternate;a=null!==a?a.memoizedState:null}else a=O.next;var b=null===P?N.memoizedState:P.next;if(null!==b)P=b,O=a;else{if(null===a)throw Error(u(310));O=a;a={memoizedState:O.memoizedState,baseState:O.baseState,baseQueue:O.baseQueue,queue:O.queue,next:null};null===P?N.memoizedState=P=a:P=P.next=a}return P}
function vh(a,b){return"function"===typeof b?b(a):b}
function wh(a){var b=uh(),c=b.queue;if(null===c)throw Error(u(311));c.lastRenderedReducer=a;var d=O,e=d.baseQueue,f=c.pending;if(null!==f){if(null!==e){var g=e.next;e.next=f.next;f.next=g}d.baseQueue=e=f;c.pending=null}if(null!==e){e=e.next;d=d.baseState;var h=g=f=null,k=e;do{var l=k.expirationTime;if(l<lh){var m={expirationTime:k.expirationTime,suspenseConfig:k.suspenseConfig,action:k.action,eagerReducer:k.eagerReducer,eagerState:k.eagerState,next:null};null===h?(g=h=m,f=d):h=h.next=m;l>N.expirationTime&&
(N.expirationTime=l,Bg(l))}else null!==h&&(h=h.next={expirationTime:1073741823,suspenseConfig:k.suspenseConfig,action:k.action,eagerReducer:k.eagerReducer,eagerState:k.eagerState,next:null}),Ag(l,k.suspenseConfig),d=k.eagerReducer===a?k.eagerState:a(d,k.action);k=k.next}while(null!==k&&k!==e);null===h?f=d:h.next=g;$e(d,b.memoizedState)||(rg=!0);b.memoizedState=d;b.baseState=f;b.baseQueue=h;c.lastRenderedState=d}return[b.memoizedState,c.dispatch]}
function xh(a){var b=uh(),c=b.queue;if(null===c)throw Error(u(311));c.lastRenderedReducer=a;var d=c.dispatch,e=c.pending,f=b.memoizedState;if(null!==e){c.pending=null;var g=e=e.next;do f=a(f,g.action),g=g.next;while(g!==e);$e(f,b.memoizedState)||(rg=!0);b.memoizedState=f;null===b.baseQueue&&(b.baseState=f);c.lastRenderedState=f}return[f,d]}
function yh(a){var b=th();"function"===typeof a&&(a=a());b.memoizedState=b.baseState=a;a=b.queue={pending:null,dispatch:null,lastRenderedReducer:vh,lastRenderedState:a};a=a.dispatch=zh.bind(null,N,a);return[b.memoizedState,a]}function Ah(a,b,c,d){a={tag:a,create:b,destroy:c,deps:d,next:null};b=N.updateQueue;null===b?(b={lastEffect:null},N.updateQueue=b,b.lastEffect=a.next=a):(c=b.lastEffect,null===c?b.lastEffect=a.next=a:(d=c.next,c.next=a,a.next=d,b.lastEffect=a));return a}
function Bh(){return uh().memoizedState}function Ch(a,b,c,d){var e=th();N.effectTag|=a;e.memoizedState=Ah(1|b,c,void 0,void 0===d?null:d)}function Dh(a,b,c,d){var e=uh();d=void 0===d?null:d;var f=void 0;if(null!==O){var g=O.memoizedState;f=g.destroy;if(null!==d&&nh(d,g.deps)){Ah(b,c,f,d);return}}N.effectTag|=a;e.memoizedState=Ah(1|b,c,f,d)}function Eh(a,b){return Ch(516,4,a,b)}function Fh(a,b){return Dh(516,4,a,b)}function Gh(a,b){return Dh(4,2,a,b)}
function Hh(a,b){if("function"===typeof b)return a=a(),b(a),function(){b(null)};if(null!==b&&void 0!==b)return a=a(),b.current=a,function(){b.current=null}}function Ih(a,b,c){c=null!==c&&void 0!==c?c.concat([a]):null;return Dh(4,2,Hh.bind(null,b,a),c)}function Jh(){}function Kh(a,b){th().memoizedState=[a,void 0===b?null:b];return a}function Lh(a,b){var c=uh();b=void 0===b?null:b;var d=c.memoizedState;if(null!==d&&null!==b&&nh(b,d[1]))return d[0];c.memoizedState=[a,b];return a}
function Mh(a,b){var c=uh();b=void 0===b?null:b;var d=c.memoizedState;if(null!==d&&null!==b&&nh(b,d[1]))return d[0];a=a();c.memoizedState=[a,b];return a}function Nh(a,b,c){var d=ag();cg(98>d?98:d,function(){a(!0)});cg(97<d?97:d,function(){var d=kh.suspense;kh.suspense=void 0===b?null:b;try{a(!1),c()}finally{kh.suspense=d}})}
function zh(a,b,c){var d=Gg(),e=Dg.suspense;d=Hg(d,a,e);e={expirationTime:d,suspenseConfig:e,action:c,eagerReducer:null,eagerState:null,next:null};var f=b.pending;null===f?e.next=e:(e.next=f.next,f.next=e);b.pending=e;f=a.alternate;if(a===N||null!==f&&f===N)mh=!0,e.expirationTime=lh,N.expirationTime=lh;else{if(0===a.expirationTime&&(null===f||0===f.expirationTime)&&(f=b.lastRenderedReducer,null!==f))try{var g=b.lastRenderedState,h=f(g,c);e.eagerReducer=f;e.eagerState=h;if($e(h,g))return}catch(k){}finally{}Ig(a,
d)}}
var sh={readContext:sg,useCallback:Q,useContext:Q,useEffect:Q,useImperativeHandle:Q,useLayoutEffect:Q,useMemo:Q,useReducer:Q,useRef:Q,useState:Q,useDebugValue:Q,useResponder:Q,useDeferredValue:Q,useTransition:Q},ph={readContext:sg,useCallback:Kh,useContext:sg,useEffect:Eh,useImperativeHandle:function(a,b,c){c=null!==c&&void 0!==c?c.concat([a]):null;return Ch(4,2,Hh.bind(null,b,a),c)},useLayoutEffect:function(a,b){return Ch(4,2,a,b)},useMemo:function(a,b){var c=th();b=void 0===b?null:b;a=a();c.memoizedState=[a,
b];return a},useReducer:function(a,b,c){var d=th();b=void 0!==c?c(b):b;d.memoizedState=d.baseState=b;a=d.queue={pending:null,dispatch:null,lastRenderedReducer:a,lastRenderedState:b};a=a.dispatch=zh.bind(null,N,a);return[d.memoizedState,a]},useRef:function(a){var b=th();a={current:a};return b.memoizedState=a},useState:yh,useDebugValue:Jh,useResponder:ih,useDeferredValue:function(a,b){var c=yh(a),d=c[0],e=c[1];Eh(function(){var c=kh.suspense;kh.suspense=void 0===b?null:b;try{e(a)}finally{kh.suspense=
c}},[a,b]);return d},useTransition:function(a){var b=yh(!1),c=b[0];b=b[1];return[Kh(Nh.bind(null,b,a),[b,a]),c]}},qh={readContext:sg,useCallback:Lh,useContext:sg,useEffect:Fh,useImperativeHandle:Ih,useLayoutEffect:Gh,useMemo:Mh,useReducer:wh,useRef:Bh,useState:function(){return wh(vh)},useDebugValue:Jh,useResponder:ih,useDeferredValue:function(a,b){var c=wh(vh),d=c[0],e=c[1];Fh(function(){var c=kh.suspense;kh.suspense=void 0===b?null:b;try{e(a)}finally{kh.suspense=c}},[a,b]);return d},useTransition:function(a){var b=
wh(vh),c=b[0];b=b[1];return[Lh(Nh.bind(null,b,a),[b,a]),c]}},rh={readContext:sg,useCallback:Lh,useContext:sg,useEffect:Fh,useImperativeHandle:Ih,useLayoutEffect:Gh,useMemo:Mh,useReducer:xh,useRef:Bh,useState:function(){return xh(vh)},useDebugValue:Jh,useResponder:ih,useDeferredValue:function(a,b){var c=xh(vh),d=c[0],e=c[1];Fh(function(){var c=kh.suspense;kh.suspense=void 0===b?null:b;try{e(a)}finally{kh.suspense=c}},[a,b]);return d},useTransition:function(a){var b=xh(vh),c=b[0];b=b[1];return[Lh(Nh.bind(null,
b,a),[b,a]),c]}},Oh=null,Ph=null,Qh=!1;function Rh(a,b){var c=Sh(5,null,null,0);c.elementType="DELETED";c.type="DELETED";c.stateNode=b;c.return=a;c.effectTag=8;null!==a.lastEffect?(a.lastEffect.nextEffect=c,a.lastEffect=c):a.firstEffect=a.lastEffect=c}
function Th(a,b){switch(a.tag){case 5:var c=a.type;b=1!==b.nodeType||c.toLowerCase()!==b.nodeName.toLowerCase()?null:b;return null!==b?(a.stateNode=b,!0):!1;case 6:return b=""===a.pendingProps||3!==b.nodeType?null:b,null!==b?(a.stateNode=b,!0):!1;case 13:return!1;default:return!1}}
function Uh(a){if(Qh){var b=Ph;if(b){var c=b;if(!Th(a,b)){b=Jd(c.nextSibling);if(!b||!Th(a,b)){a.effectTag=a.effectTag&-1025|2;Qh=!1;Oh=a;return}Rh(Oh,c)}Oh=a;Ph=Jd(b.firstChild)}else a.effectTag=a.effectTag&-1025|2,Qh=!1,Oh=a}}function Vh(a){for(a=a.return;null!==a&&5!==a.tag&&3!==a.tag&&13!==a.tag;)a=a.return;Oh=a}
function Wh(a){if(a!==Oh)return!1;if(!Qh)return Vh(a),Qh=!0,!1;var b=a.type;if(5!==a.tag||"head"!==b&&"body"!==b&&!Gd(b,a.memoizedProps))for(b=Ph;b;)Rh(a,b),b=Jd(b.nextSibling);Vh(a);if(13===a.tag){a=a.memoizedState;a=null!==a?a.dehydrated:null;if(!a)throw Error(u(317));a:{a=a.nextSibling;for(b=0;a;){if(8===a.nodeType){var c=a.data;if(c===Ad){if(0===b){Ph=Jd(a.nextSibling);break a}b--}else c!==zd&&c!==Cd&&c!==Bd||b++}a=a.nextSibling}Ph=null}}else Ph=Oh?Jd(a.stateNode.nextSibling):null;return!0}
function Xh(){Ph=Oh=null;Qh=!1}var Yh=Wa.ReactCurrentOwner,rg=!1;function R(a,b,c,d){b.child=null===a?Yg(b,null,c,d):Xg(b,a.child,c,d)}function Zh(a,b,c,d,e){c=c.render;var f=b.ref;qg(b,e);d=oh(a,b,c,d,f,e);if(null!==a&&!rg)return b.updateQueue=a.updateQueue,b.effectTag&=-517,a.expirationTime<=e&&(a.expirationTime=0),$h(a,b,e);b.effectTag|=1;R(a,b,d,e);return b.child}
function ai(a,b,c,d,e,f){if(null===a){var g=c.type;if("function"===typeof g&&!bi(g)&&void 0===g.defaultProps&&null===c.compare&&void 0===c.defaultProps)return b.tag=15,b.type=g,ci(a,b,g,d,e,f);a=Ug(c.type,null,d,null,b.mode,f);a.ref=b.ref;a.return=b;return b.child=a}g=a.child;if(e<f&&(e=g.memoizedProps,c=c.compare,c=null!==c?c:bf,c(e,d)&&a.ref===b.ref))return $h(a,b,f);b.effectTag|=1;a=Sg(g,d);a.ref=b.ref;a.return=b;return b.child=a}
function ci(a,b,c,d,e,f){return null!==a&&bf(a.memoizedProps,d)&&a.ref===b.ref&&(rg=!1,e<f)?(b.expirationTime=a.expirationTime,$h(a,b,f)):di(a,b,c,d,f)}function ei(a,b){var c=b.ref;if(null===a&&null!==c||null!==a&&a.ref!==c)b.effectTag|=128}function di(a,b,c,d,e){var f=L(c)?Bf:J.current;f=Cf(b,f);qg(b,e);c=oh(a,b,c,d,f,e);if(null!==a&&!rg)return b.updateQueue=a.updateQueue,b.effectTag&=-517,a.expirationTime<=e&&(a.expirationTime=0),$h(a,b,e);b.effectTag|=1;R(a,b,c,e);return b.child}
function fi(a,b,c,d,e){if(L(c)){var f=!0;Gf(b)}else f=!1;qg(b,e);if(null===b.stateNode)null!==a&&(a.alternate=null,b.alternate=null,b.effectTag|=2),Lg(b,c,d),Ng(b,c,d,e),d=!0;else if(null===a){var g=b.stateNode,h=b.memoizedProps;g.props=h;var k=g.context,l=c.contextType;"object"===typeof l&&null!==l?l=sg(l):(l=L(c)?Bf:J.current,l=Cf(b,l));var m=c.getDerivedStateFromProps,p="function"===typeof m||"function"===typeof g.getSnapshotBeforeUpdate;p||"function"!==typeof g.UNSAFE_componentWillReceiveProps&&
"function"!==typeof g.componentWillReceiveProps||(h!==d||k!==l)&&Mg(b,g,d,l);tg=!1;var x=b.memoizedState;g.state=x;zg(b,d,g,e);k=b.memoizedState;h!==d||x!==k||K.current||tg?("function"===typeof m&&(Fg(b,c,m,d),k=b.memoizedState),(h=tg||Kg(b,c,h,d,x,k,l))?(p||"function"!==typeof g.UNSAFE_componentWillMount&&"function"!==typeof g.componentWillMount||("function"===typeof g.componentWillMount&&g.componentWillMount(),"function"===typeof g.UNSAFE_componentWillMount&&g.UNSAFE_componentWillMount()),"function"===
typeof g.componentDidMount&&(b.effectTag|=4)):("function"===typeof g.componentDidMount&&(b.effectTag|=4),b.memoizedProps=d,b.memoizedState=k),g.props=d,g.state=k,g.context=l,d=h):("function"===typeof g.componentDidMount&&(b.effectTag|=4),d=!1)}else g=b.stateNode,vg(a,b),h=b.memoizedProps,g.props=b.type===b.elementType?h:ig(b.type,h),k=g.context,l=c.contextType,"object"===typeof l&&null!==l?l=sg(l):(l=L(c)?Bf:J.current,l=Cf(b,l)),m=c.getDerivedStateFromProps,(p="function"===typeof m||"function"===
typeof g.getSnapshotBeforeUpdate)||"function"!==typeof g.UNSAFE_componentWillReceiveProps&&"function"!==typeof g.componentWillReceiveProps||(h!==d||k!==l)&&Mg(b,g,d,l),tg=!1,k=b.memoizedState,g.state=k,zg(b,d,g,e),x=b.memoizedState,h!==d||k!==x||K.current||tg?("function"===typeof m&&(Fg(b,c,m,d),x=b.memoizedState),(m=tg||Kg(b,c,h,d,k,x,l))?(p||"function"!==typeof g.UNSAFE_componentWillUpdate&&"function"!==typeof g.componentWillUpdate||("function"===typeof g.componentWillUpdate&&g.componentWillUpdate(d,
x,l),"function"===typeof g.UNSAFE_componentWillUpdate&&g.UNSAFE_componentWillUpdate(d,x,l)),"function"===typeof g.componentDidUpdate&&(b.effectTag|=4),"function"===typeof g.getSnapshotBeforeUpdate&&(b.effectTag|=256)):("function"!==typeof g.componentDidUpdate||h===a.memoizedProps&&k===a.memoizedState||(b.effectTag|=4),"function"!==typeof g.getSnapshotBeforeUpdate||h===a.memoizedProps&&k===a.memoizedState||(b.effectTag|=256),b.memoizedProps=d,b.memoizedState=x),g.props=d,g.state=x,g.context=l,d=m):
("function"!==typeof g.componentDidUpdate||h===a.memoizedProps&&k===a.memoizedState||(b.effectTag|=4),"function"!==typeof g.getSnapshotBeforeUpdate||h===a.memoizedProps&&k===a.memoizedState||(b.effectTag|=256),d=!1);return gi(a,b,c,d,f,e)}
function gi(a,b,c,d,e,f){ei(a,b);var g=0!==(b.effectTag&64);if(!d&&!g)return e&&Hf(b,c,!1),$h(a,b,f);d=b.stateNode;Yh.current=b;var h=g&&"function"!==typeof c.getDerivedStateFromError?null:d.render();b.effectTag|=1;null!==a&&g?(b.child=Xg(b,a.child,null,f),b.child=Xg(b,null,h,f)):R(a,b,h,f);b.memoizedState=d.state;e&&Hf(b,c,!0);return b.child}function hi(a){var b=a.stateNode;b.pendingContext?Ef(a,b.pendingContext,b.pendingContext!==b.context):b.context&&Ef(a,b.context,!1);dh(a,b.containerInfo)}
var ii={dehydrated:null,retryTime:0};
function ji(a,b,c){var d=b.mode,e=b.pendingProps,f=M.current,g=!1,h;(h=0!==(b.effectTag&64))||(h=0!==(f&2)&&(null===a||null!==a.memoizedState));h?(g=!0,b.effectTag&=-65):null!==a&&null===a.memoizedState||void 0===e.fallback||!0===e.unstable_avoidThisFallback||(f|=1);I(M,f&1);if(null===a){void 0!==e.fallback&&Uh(b);if(g){g=e.fallback;e=Wg(null,d,0,null);e.return=b;if(0===(b.mode&2))for(a=null!==b.memoizedState?b.child.child:b.child,e.child=a;null!==a;)a.return=e,a=a.sibling;c=Wg(g,d,c,null);c.return=
b;e.sibling=c;b.memoizedState=ii;b.child=e;return c}d=e.children;b.memoizedState=null;return b.child=Yg(b,null,d,c)}if(null!==a.memoizedState){a=a.child;d=a.sibling;if(g){e=e.fallback;c=Sg(a,a.pendingProps);c.return=b;if(0===(b.mode&2)&&(g=null!==b.memoizedState?b.child.child:b.child,g!==a.child))for(c.child=g;null!==g;)g.return=c,g=g.sibling;d=Sg(d,e);d.return=b;c.sibling=d;c.childExpirationTime=0;b.memoizedState=ii;b.child=c;return d}c=Xg(b,a.child,e.children,c);b.memoizedState=null;return b.child=
c}a=a.child;if(g){g=e.fallback;e=Wg(null,d,0,null);e.return=b;e.child=a;null!==a&&(a.return=e);if(0===(b.mode&2))for(a=null!==b.memoizedState?b.child.child:b.child,e.child=a;null!==a;)a.return=e,a=a.sibling;c=Wg(g,d,c,null);c.return=b;e.sibling=c;c.effectTag|=2;e.childExpirationTime=0;b.memoizedState=ii;b.child=e;return c}b.memoizedState=null;return b.child=Xg(b,a,e.children,c)}
function ki(a,b){a.expirationTime<b&&(a.expirationTime=b);var c=a.alternate;null!==c&&c.expirationTime<b&&(c.expirationTime=b);pg(a.return,b)}function li(a,b,c,d,e,f){var g=a.memoizedState;null===g?a.memoizedState={isBackwards:b,rendering:null,renderingStartTime:0,last:d,tail:c,tailExpiration:0,tailMode:e,lastEffect:f}:(g.isBackwards=b,g.rendering=null,g.renderingStartTime=0,g.last=d,g.tail=c,g.tailExpiration=0,g.tailMode=e,g.lastEffect=f)}
function mi(a,b,c){var d=b.pendingProps,e=d.revealOrder,f=d.tail;R(a,b,d.children,c);d=M.current;if(0!==(d&2))d=d&1|2,b.effectTag|=64;else{if(null!==a&&0!==(a.effectTag&64))a:for(a=b.child;null!==a;){if(13===a.tag)null!==a.memoizedState&&ki(a,c);else if(19===a.tag)ki(a,c);else if(null!==a.child){a.child.return=a;a=a.child;continue}if(a===b)break a;for(;null===a.sibling;){if(null===a.return||a.return===b)break a;a=a.return}a.sibling.return=a.return;a=a.sibling}d&=1}I(M,d);if(0===(b.mode&2))b.memoizedState=
null;else switch(e){case "forwards":c=b.child;for(e=null;null!==c;)a=c.alternate,null!==a&&null===hh(a)&&(e=c),c=c.sibling;c=e;null===c?(e=b.child,b.child=null):(e=c.sibling,c.sibling=null);li(b,!1,e,c,f,b.lastEffect);break;case "backwards":c=null;e=b.child;for(b.child=null;null!==e;){a=e.alternate;if(null!==a&&null===hh(a)){b.child=e;break}a=e.sibling;e.sibling=c;c=e;e=a}li(b,!0,c,null,f,b.lastEffect);break;case "together":li(b,!1,null,null,void 0,b.lastEffect);break;default:b.memoizedState=null}return b.child}
function $h(a,b,c){null!==a&&(b.dependencies=a.dependencies);var d=b.expirationTime;0!==d&&Bg(d);if(b.childExpirationTime<c)return null;if(null!==a&&b.child!==a.child)throw Error(u(153));if(null!==b.child){a=b.child;c=Sg(a,a.pendingProps);b.child=c;for(c.return=b;null!==a.sibling;)a=a.sibling,c=c.sibling=Sg(a,a.pendingProps),c.return=b;c.sibling=null}return b.child}var ni,oi,pi,qi;
ni=function(a,b){for(var c=b.child;null!==c;){if(5===c.tag||6===c.tag)a.appendChild(c.stateNode);else if(4!==c.tag&&null!==c.child){c.child.return=c;c=c.child;continue}if(c===b)break;for(;null===c.sibling;){if(null===c.return||c.return===b)return;c=c.return}c.sibling.return=c.return;c=c.sibling}};oi=function(){};
pi=function(a,b,c,d,e){var f=a.memoizedProps;if(f!==d){var g=b.stateNode;ch($g.current);a=null;switch(c){case "input":f=zb(g,f);d=zb(g,d);a=[];break;case "option":f=Gb(g,f);d=Gb(g,d);a=[];break;case "select":f=n({},f,{value:void 0});d=n({},d,{value:void 0});a=[];break;case "textarea":f=Ib(g,f);d=Ib(g,d);a=[];break;default:"function"!==typeof f.onClick&&"function"===typeof d.onClick&&(g.onclick=sd)}od(c,d);var h,k;c=null;for(h in f)if(!d.hasOwnProperty(h)&&f.hasOwnProperty(h)&&null!=f[h])if("style"===
h)for(k in g=f[h],g)g.hasOwnProperty(k)&&(c||(c={}),c[k]="");else"dangerouslySetInnerHTML"!==h&&"children"!==h&&"suppressContentEditableWarning"!==h&&"suppressHydrationWarning"!==h&&"autoFocus"!==h&&(va.hasOwnProperty(h)?a||(a=[]):(a=a||[]).push(h,null));for(h in d){var l=d[h];g=null!=f?f[h]:void 0;if(d.hasOwnProperty(h)&&l!==g&&(null!=l||null!=g))if("style"===h)if(g){for(k in g)!g.hasOwnProperty(k)||l&&l.hasOwnProperty(k)||(c||(c={}),c[k]="");for(k in l)l.hasOwnProperty(k)&&g[k]!==l[k]&&(c||(c={}),
c[k]=l[k])}else c||(a||(a=[]),a.push(h,c)),c=l;else"dangerouslySetInnerHTML"===h?(l=l?l.__html:void 0,g=g?g.__html:void 0,null!=l&&g!==l&&(a=a||[]).push(h,l)):"children"===h?g===l||"string"!==typeof l&&"number"!==typeof l||(a=a||[]).push(h,""+l):"suppressContentEditableWarning"!==h&&"suppressHydrationWarning"!==h&&(va.hasOwnProperty(h)?(null!=l&&rd(e,h),a||g===l||(a=[])):(a=a||[]).push(h,l))}c&&(a=a||[]).push("style",c);e=a;if(b.updateQueue=e)b.effectTag|=4}};
qi=function(a,b,c,d){c!==d&&(b.effectTag|=4)};function ri(a,b){switch(a.tailMode){case "hidden":b=a.tail;for(var c=null;null!==b;)null!==b.alternate&&(c=b),b=b.sibling;null===c?a.tail=null:c.sibling=null;break;case "collapsed":c=a.tail;for(var d=null;null!==c;)null!==c.alternate&&(d=c),c=c.sibling;null===d?b||null===a.tail?a.tail=null:a.tail.sibling=null:d.sibling=null}}
function si(a,b,c){var d=b.pendingProps;switch(b.tag){case 2:case 16:case 15:case 0:case 11:case 7:case 8:case 12:case 9:case 14:return null;case 1:return L(b.type)&&Df(),null;case 3:return eh(),H(K),H(J),c=b.stateNode,c.pendingContext&&(c.context=c.pendingContext,c.pendingContext=null),null!==a&&null!==a.child||!Wh(b)||(b.effectTag|=4),oi(b),null;case 5:gh(b);c=ch(bh.current);var e=b.type;if(null!==a&&null!=b.stateNode)pi(a,b,e,d,c),a.ref!==b.ref&&(b.effectTag|=128);else{if(!d){if(null===b.stateNode)throw Error(u(166));
return null}a=ch($g.current);if(Wh(b)){d=b.stateNode;e=b.type;var f=b.memoizedProps;d[Md]=b;d[Nd]=f;switch(e){case "iframe":case "object":case "embed":F("load",d);break;case "video":case "audio":for(a=0;a<ac.length;a++)F(ac[a],d);break;case "source":F("error",d);break;case "img":case "image":case "link":F("error",d);F("load",d);break;case "form":F("reset",d);F("submit",d);break;case "details":F("toggle",d);break;case "input":Ab(d,f);F("invalid",d);rd(c,"onChange");break;case "select":d._wrapperState=
{wasMultiple:!!f.multiple};F("invalid",d);rd(c,"onChange");break;case "textarea":Jb(d,f),F("invalid",d),rd(c,"onChange")}od(e,f);a=null;for(var g in f)if(f.hasOwnProperty(g)){var h=f[g];"children"===g?"string"===typeof h?d.textContent!==h&&(a=["children",h]):"number"===typeof h&&d.textContent!==""+h&&(a=["children",""+h]):va.hasOwnProperty(g)&&null!=h&&rd(c,g)}switch(e){case "input":xb(d);Eb(d,f,!0);break;case "textarea":xb(d);Lb(d);break;case "select":case "option":break;default:"function"===typeof f.onClick&&
(d.onclick=sd)}c=a;b.updateQueue=c;null!==c&&(b.effectTag|=4)}else{g=9===c.nodeType?c:c.ownerDocument;a===qd&&(a=Nb(e));a===qd?"script"===e?(a=g.createElement("div"),a.innerHTML="<script>\x3c/script>",a=a.removeChild(a.firstChild)):"string"===typeof d.is?a=g.createElement(e,{is:d.is}):(a=g.createElement(e),"select"===e&&(g=a,d.multiple?g.multiple=!0:d.size&&(g.size=d.size))):a=g.createElementNS(a,e);a[Md]=b;a[Nd]=d;ni(a,b,!1,!1);b.stateNode=a;g=pd(e,d);switch(e){case "iframe":case "object":case "embed":F("load",
a);h=d;break;case "video":case "audio":for(h=0;h<ac.length;h++)F(ac[h],a);h=d;break;case "source":F("error",a);h=d;break;case "img":case "image":case "link":F("error",a);F("load",a);h=d;break;case "form":F("reset",a);F("submit",a);h=d;break;case "details":F("toggle",a);h=d;break;case "input":Ab(a,d);h=zb(a,d);F("invalid",a);rd(c,"onChange");break;case "option":h=Gb(a,d);break;case "select":a._wrapperState={wasMultiple:!!d.multiple};h=n({},d,{value:void 0});F("invalid",a);rd(c,"onChange");break;case "textarea":Jb(a,
d);h=Ib(a,d);F("invalid",a);rd(c,"onChange");break;default:h=d}od(e,h);var k=h;for(f in k)if(k.hasOwnProperty(f)){var l=k[f];"style"===f?md(a,l):"dangerouslySetInnerHTML"===f?(l=l?l.__html:void 0,null!=l&&Qb(a,l)):"children"===f?"string"===typeof l?("textarea"!==e||""!==l)&&Rb(a,l):"number"===typeof l&&Rb(a,""+l):"suppressContentEditableWarning"!==f&&"suppressHydrationWarning"!==f&&"autoFocus"!==f&&(va.hasOwnProperty(f)?null!=l&&rd(c,f):null!=l&&Xa(a,f,l,g))}switch(e){case "input":xb(a);Eb(a,d,!1);
break;case "textarea":xb(a);Lb(a);break;case "option":null!=d.value&&a.setAttribute("value",""+rb(d.value));break;case "select":a.multiple=!!d.multiple;c=d.value;null!=c?Hb(a,!!d.multiple,c,!1):null!=d.defaultValue&&Hb(a,!!d.multiple,d.defaultValue,!0);break;default:"function"===typeof h.onClick&&(a.onclick=sd)}Fd(e,d)&&(b.effectTag|=4)}null!==b.ref&&(b.effectTag|=128)}return null;case 6:if(a&&null!=b.stateNode)qi(a,b,a.memoizedProps,d);else{if("string"!==typeof d&&null===b.stateNode)throw Error(u(166));
c=ch(bh.current);ch($g.current);Wh(b)?(c=b.stateNode,d=b.memoizedProps,c[Md]=b,c.nodeValue!==d&&(b.effectTag|=4)):(c=(9===c.nodeType?c:c.ownerDocument).createTextNode(d),c[Md]=b,b.stateNode=c)}return null;case 13:H(M);d=b.memoizedState;if(0!==(b.effectTag&64))return b.expirationTime=c,b;c=null!==d;d=!1;null===a?void 0!==b.memoizedProps.fallback&&Wh(b):(e=a.memoizedState,d=null!==e,c||null===e||(e=a.child.sibling,null!==e&&(f=b.firstEffect,null!==f?(b.firstEffect=e,e.nextEffect=f):(b.firstEffect=b.lastEffect=
e,e.nextEffect=null),e.effectTag=8)));if(c&&!d&&0!==(b.mode&2))if(null===a&&!0!==b.memoizedProps.unstable_avoidThisFallback||0!==(M.current&1))S===ti&&(S=ui);else{if(S===ti||S===ui)S=vi;0!==wi&&null!==T&&(xi(T,U),yi(T,wi))}if(c||d)b.effectTag|=4;return null;case 4:return eh(),oi(b),null;case 10:return og(b),null;case 17:return L(b.type)&&Df(),null;case 19:H(M);d=b.memoizedState;if(null===d)return null;e=0!==(b.effectTag&64);f=d.rendering;if(null===f)if(e)ri(d,!1);else{if(S!==ti||null!==a&&0!==(a.effectTag&
64))for(f=b.child;null!==f;){a=hh(f);if(null!==a){b.effectTag|=64;ri(d,!1);e=a.updateQueue;null!==e&&(b.updateQueue=e,b.effectTag|=4);null===d.lastEffect&&(b.firstEffect=null);b.lastEffect=d.lastEffect;for(d=b.child;null!==d;)e=d,f=c,e.effectTag&=2,e.nextEffect=null,e.firstEffect=null,e.lastEffect=null,a=e.alternate,null===a?(e.childExpirationTime=0,e.expirationTime=f,e.child=null,e.memoizedProps=null,e.memoizedState=null,e.updateQueue=null,e.dependencies=null):(e.childExpirationTime=a.childExpirationTime,
e.expirationTime=a.expirationTime,e.child=a.child,e.memoizedProps=a.memoizedProps,e.memoizedState=a.memoizedState,e.updateQueue=a.updateQueue,f=a.dependencies,e.dependencies=null===f?null:{expirationTime:f.expirationTime,firstContext:f.firstContext,responders:f.responders}),d=d.sibling;I(M,M.current&1|2);return b.child}f=f.sibling}}else{if(!e)if(a=hh(f),null!==a){if(b.effectTag|=64,e=!0,c=a.updateQueue,null!==c&&(b.updateQueue=c,b.effectTag|=4),ri(d,!0),null===d.tail&&"hidden"===d.tailMode&&!f.alternate)return b=
b.lastEffect=d.lastEffect,null!==b&&(b.nextEffect=null),null}else 2*$f()-d.renderingStartTime>d.tailExpiration&&1<c&&(b.effectTag|=64,e=!0,ri(d,!1),b.expirationTime=b.childExpirationTime=c-1);d.isBackwards?(f.sibling=b.child,b.child=f):(c=d.last,null!==c?c.sibling=f:b.child=f,d.last=f)}return null!==d.tail?(0===d.tailExpiration&&(d.tailExpiration=$f()+500),c=d.tail,d.rendering=c,d.tail=c.sibling,d.lastEffect=b.lastEffect,d.renderingStartTime=$f(),c.sibling=null,b=M.current,I(M,e?b&1|2:b&1),c):null}throw Error(u(156,
b.tag));}function zi(a){switch(a.tag){case 1:L(a.type)&&Df();var b=a.effectTag;return b&4096?(a.effectTag=b&-4097|64,a):null;case 3:eh();H(K);H(J);b=a.effectTag;if(0!==(b&64))throw Error(u(285));a.effectTag=b&-4097|64;return a;case 5:return gh(a),null;case 13:return H(M),b=a.effectTag,b&4096?(a.effectTag=b&-4097|64,a):null;case 19:return H(M),null;case 4:return eh(),null;case 10:return og(a),null;default:return null}}function Ai(a,b){return{value:a,source:b,stack:qb(b)}}
var Bi="function"===typeof WeakSet?WeakSet:Set;function Ci(a,b){var c=b.source,d=b.stack;null===d&&null!==c&&(d=qb(c));null!==c&&pb(c.type);b=b.value;null!==a&&1===a.tag&&pb(a.type);try{console.error(b)}catch(e){setTimeout(function(){throw e;})}}function Di(a,b){try{b.props=a.memoizedProps,b.state=a.memoizedState,b.componentWillUnmount()}catch(c){Ei(a,c)}}function Fi(a){var b=a.ref;if(null!==b)if("function"===typeof b)try{b(null)}catch(c){Ei(a,c)}else b.current=null}
function Gi(a,b){switch(b.tag){case 0:case 11:case 15:case 22:return;case 1:if(b.effectTag&256&&null!==a){var c=a.memoizedProps,d=a.memoizedState;a=b.stateNode;b=a.getSnapshotBeforeUpdate(b.elementType===b.type?c:ig(b.type,c),d);a.__reactInternalSnapshotBeforeUpdate=b}return;case 3:case 5:case 6:case 4:case 17:return}throw Error(u(163));}
function Hi(a,b){b=b.updateQueue;b=null!==b?b.lastEffect:null;if(null!==b){var c=b=b.next;do{if((c.tag&a)===a){var d=c.destroy;c.destroy=void 0;void 0!==d&&d()}c=c.next}while(c!==b)}}function Ii(a,b){b=b.updateQueue;b=null!==b?b.lastEffect:null;if(null!==b){var c=b=b.next;do{if((c.tag&a)===a){var d=c.create;c.destroy=d()}c=c.next}while(c!==b)}}
function Ji(a,b,c){switch(c.tag){case 0:case 11:case 15:case 22:Ii(3,c);return;case 1:a=c.stateNode;if(c.effectTag&4)if(null===b)a.componentDidMount();else{var d=c.elementType===c.type?b.memoizedProps:ig(c.type,b.memoizedProps);a.componentDidUpdate(d,b.memoizedState,a.__reactInternalSnapshotBeforeUpdate)}b=c.updateQueue;null!==b&&Cg(c,b,a);return;case 3:b=c.updateQueue;if(null!==b){a=null;if(null!==c.child)switch(c.child.tag){case 5:a=c.child.stateNode;break;case 1:a=c.child.stateNode}Cg(c,b,a)}return;
case 5:a=c.stateNode;null===b&&c.effectTag&4&&Fd(c.type,c.memoizedProps)&&a.focus();return;case 6:return;case 4:return;case 12:return;case 13:null===c.memoizedState&&(c=c.alternate,null!==c&&(c=c.memoizedState,null!==c&&(c=c.dehydrated,null!==c&&Vc(c))));return;case 19:case 17:case 20:case 21:return}throw Error(u(163));}
function Ki(a,b,c){"function"===typeof Li&&Li(b);switch(b.tag){case 0:case 11:case 14:case 15:case 22:a=b.updateQueue;if(null!==a&&(a=a.lastEffect,null!==a)){var d=a.next;cg(97<c?97:c,function(){var a=d;do{var c=a.destroy;if(void 0!==c){var g=b;try{c()}catch(h){Ei(g,h)}}a=a.next}while(a!==d)})}break;case 1:Fi(b);c=b.stateNode;"function"===typeof c.componentWillUnmount&&Di(b,c);break;case 5:Fi(b);break;case 4:Mi(a,b,c)}}
function Ni(a){var b=a.alternate;a.return=null;a.child=null;a.memoizedState=null;a.updateQueue=null;a.dependencies=null;a.alternate=null;a.firstEffect=null;a.lastEffect=null;a.pendingProps=null;a.memoizedProps=null;a.stateNode=null;null!==b&&Ni(b)}function Oi(a){return 5===a.tag||3===a.tag||4===a.tag}
function Pi(a){a:{for(var b=a.return;null!==b;){if(Oi(b)){var c=b;break a}b=b.return}throw Error(u(160));}b=c.stateNode;switch(c.tag){case 5:var d=!1;break;case 3:b=b.containerInfo;d=!0;break;case 4:b=b.containerInfo;d=!0;break;default:throw Error(u(161));}c.effectTag&16&&(Rb(b,""),c.effectTag&=-17);a:b:for(c=a;;){for(;null===c.sibling;){if(null===c.return||Oi(c.return)){c=null;break a}c=c.return}c.sibling.return=c.return;for(c=c.sibling;5!==c.tag&&6!==c.tag&&18!==c.tag;){if(c.effectTag&2)continue b;
if(null===c.child||4===c.tag)continue b;else c.child.return=c,c=c.child}if(!(c.effectTag&2)){c=c.stateNode;break a}}d?Qi(a,c,b):Ri(a,c,b)}
function Qi(a,b,c){var d=a.tag,e=5===d||6===d;if(e)a=e?a.stateNode:a.stateNode.instance,b?8===c.nodeType?c.parentNode.insertBefore(a,b):c.insertBefore(a,b):(8===c.nodeType?(b=c.parentNode,b.insertBefore(a,c)):(b=c,b.appendChild(a)),c=c._reactRootContainer,null!==c&&void 0!==c||null!==b.onclick||(b.onclick=sd));else if(4!==d&&(a=a.child,null!==a))for(Qi(a,b,c),a=a.sibling;null!==a;)Qi(a,b,c),a=a.sibling}
function Ri(a,b,c){var d=a.tag,e=5===d||6===d;if(e)a=e?a.stateNode:a.stateNode.instance,b?c.insertBefore(a,b):c.appendChild(a);else if(4!==d&&(a=a.child,null!==a))for(Ri(a,b,c),a=a.sibling;null!==a;)Ri(a,b,c),a=a.sibling}
function Mi(a,b,c){for(var d=b,e=!1,f,g;;){if(!e){e=d.return;a:for(;;){if(null===e)throw Error(u(160));f=e.stateNode;switch(e.tag){case 5:g=!1;break a;case 3:f=f.containerInfo;g=!0;break a;case 4:f=f.containerInfo;g=!0;break a}e=e.return}e=!0}if(5===d.tag||6===d.tag){a:for(var h=a,k=d,l=c,m=k;;)if(Ki(h,m,l),null!==m.child&&4!==m.tag)m.child.return=m,m=m.child;else{if(m===k)break a;for(;null===m.sibling;){if(null===m.return||m.return===k)break a;m=m.return}m.sibling.return=m.return;m=m.sibling}g?(h=
f,k=d.stateNode,8===h.nodeType?h.parentNode.removeChild(k):h.removeChild(k)):f.removeChild(d.stateNode)}else if(4===d.tag){if(null!==d.child){f=d.stateNode.containerInfo;g=!0;d.child.return=d;d=d.child;continue}}else if(Ki(a,d,c),null!==d.child){d.child.return=d;d=d.child;continue}if(d===b)break;for(;null===d.sibling;){if(null===d.return||d.return===b)return;d=d.return;4===d.tag&&(e=!1)}d.sibling.return=d.return;d=d.sibling}}
function Si(a,b){switch(b.tag){case 0:case 11:case 14:case 15:case 22:Hi(3,b);return;case 1:return;case 5:var c=b.stateNode;if(null!=c){var d=b.memoizedProps,e=null!==a?a.memoizedProps:d;a=b.type;var f=b.updateQueue;b.updateQueue=null;if(null!==f){c[Nd]=d;"input"===a&&"radio"===d.type&&null!=d.name&&Bb(c,d);pd(a,e);b=pd(a,d);for(e=0;e<f.length;e+=2){var g=f[e],h=f[e+1];"style"===g?md(c,h):"dangerouslySetInnerHTML"===g?Qb(c,h):"children"===g?Rb(c,h):Xa(c,g,h,b)}switch(a){case "input":Cb(c,d);break;
case "textarea":Kb(c,d);break;case "select":b=c._wrapperState.wasMultiple,c._wrapperState.wasMultiple=!!d.multiple,a=d.value,null!=a?Hb(c,!!d.multiple,a,!1):b!==!!d.multiple&&(null!=d.defaultValue?Hb(c,!!d.multiple,d.defaultValue,!0):Hb(c,!!d.multiple,d.multiple?[]:"",!1))}}}return;case 6:if(null===b.stateNode)throw Error(u(162));b.stateNode.nodeValue=b.memoizedProps;return;case 3:b=b.stateNode;b.hydrate&&(b.hydrate=!1,Vc(b.containerInfo));return;case 12:return;case 13:c=b;null===b.memoizedState?
d=!1:(d=!0,c=b.child,Ti=$f());if(null!==c)a:for(a=c;;){if(5===a.tag)f=a.stateNode,d?(f=f.style,"function"===typeof f.setProperty?f.setProperty("display","none","important"):f.display="none"):(f=a.stateNode,e=a.memoizedProps.style,e=void 0!==e&&null!==e&&e.hasOwnProperty("display")?e.display:null,f.style.display=ld("display",e));else if(6===a.tag)a.stateNode.nodeValue=d?"":a.memoizedProps;else if(13===a.tag&&null!==a.memoizedState&&null===a.memoizedState.dehydrated){f=a.child.sibling;f.return=a;a=
f;continue}else if(null!==a.child){a.child.return=a;a=a.child;continue}if(a===c)break;for(;null===a.sibling;){if(null===a.return||a.return===c)break a;a=a.return}a.sibling.return=a.return;a=a.sibling}Ui(b);return;case 19:Ui(b);return;case 17:return}throw Error(u(163));}function Ui(a){var b=a.updateQueue;if(null!==b){a.updateQueue=null;var c=a.stateNode;null===c&&(c=a.stateNode=new Bi);b.forEach(function(b){var d=Vi.bind(null,a,b);c.has(b)||(c.add(b),b.then(d,d))})}}
var Wi="function"===typeof WeakMap?WeakMap:Map;function Xi(a,b,c){c=wg(c,null);c.tag=3;c.payload={element:null};var d=b.value;c.callback=function(){Yi||(Yi=!0,Zi=d);Ci(a,b)};return c}
function $i(a,b,c){c=wg(c,null);c.tag=3;var d=a.type.getDerivedStateFromError;if("function"===typeof d){var e=b.value;c.payload=function(){Ci(a,b);return d(e)}}var f=a.stateNode;null!==f&&"function"===typeof f.componentDidCatch&&(c.callback=function(){"function"!==typeof d&&(null===aj?aj=new Set([this]):aj.add(this),Ci(a,b));var c=b.stack;this.componentDidCatch(b.value,{componentStack:null!==c?c:""})});return c}
var bj=Math.ceil,cj=Wa.ReactCurrentDispatcher,dj=Wa.ReactCurrentOwner,V=0,ej=8,fj=16,gj=32,ti=0,hj=1,ij=2,ui=3,vi=4,jj=5,W=V,T=null,X=null,U=0,S=ti,kj=null,lj=1073741823,mj=1073741823,nj=null,wi=0,oj=!1,Ti=0,pj=500,Y=null,Yi=!1,Zi=null,aj=null,qj=!1,rj=null,sj=90,tj=null,uj=0,vj=null,wj=0;function Gg(){return(W&(fj|gj))!==V?1073741821-($f()/10|0):0!==wj?wj:wj=1073741821-($f()/10|0)}
function Hg(a,b,c){b=b.mode;if(0===(b&2))return 1073741823;var d=ag();if(0===(b&4))return 99===d?1073741823:1073741822;if((W&fj)!==V)return U;if(null!==c)a=hg(a,c.timeoutMs|0||5E3,250);else switch(d){case 99:a=1073741823;break;case 98:a=hg(a,150,100);break;case 97:case 96:a=hg(a,5E3,250);break;case 95:a=2;break;default:throw Error(u(326));}null!==T&&a===U&&--a;return a}
function Ig(a,b){if(50<uj)throw uj=0,vj=null,Error(u(185));a=xj(a,b);if(null!==a){var c=ag();1073741823===b?(W&ej)!==V&&(W&(fj|gj))===V?yj(a):(Z(a),W===V&&gg()):Z(a);(W&4)===V||98!==c&&99!==c||(null===tj?tj=new Map([[a,b]]):(c=tj.get(a),(void 0===c||c>b)&&tj.set(a,b)))}}
function xj(a,b){a.expirationTime<b&&(a.expirationTime=b);var c=a.alternate;null!==c&&c.expirationTime<b&&(c.expirationTime=b);var d=a.return,e=null;if(null===d&&3===a.tag)e=a.stateNode;else for(;null!==d;){c=d.alternate;d.childExpirationTime<b&&(d.childExpirationTime=b);null!==c&&c.childExpirationTime<b&&(c.childExpirationTime=b);if(null===d.return&&3===d.tag){e=d.stateNode;break}d=d.return}null!==e&&(T===e&&(Bg(b),S===vi&&xi(e,U)),yi(e,b));return e}
function zj(a){var b=a.lastExpiredTime;if(0!==b)return b;b=a.firstPendingTime;if(!Aj(a,b))return b;var c=a.lastPingedTime;a=a.nextKnownPendingLevel;a=c>a?c:a;return 2>=a&&b!==a?0:a}
function Z(a){if(0!==a.lastExpiredTime)a.callbackExpirationTime=1073741823,a.callbackPriority=99,a.callbackNode=eg(yj.bind(null,a));else{var b=zj(a),c=a.callbackNode;if(0===b)null!==c&&(a.callbackNode=null,a.callbackExpirationTime=0,a.callbackPriority=90);else{var d=Gg();1073741823===b?d=99:1===b||2===b?d=95:(d=10*(1073741821-b)-10*(1073741821-d),d=0>=d?99:250>=d?98:5250>=d?97:95);if(null!==c){var e=a.callbackPriority;if(a.callbackExpirationTime===b&&e>=d)return;c!==Tf&&Kf(c)}a.callbackExpirationTime=
b;a.callbackPriority=d;b=1073741823===b?eg(yj.bind(null,a)):dg(d,Bj.bind(null,a),{timeout:10*(1073741821-b)-$f()});a.callbackNode=b}}}
function Bj(a,b){wj=0;if(b)return b=Gg(),Cj(a,b),Z(a),null;var c=zj(a);if(0!==c){b=a.callbackNode;if((W&(fj|gj))!==V)throw Error(u(327));Dj();a===T&&c===U||Ej(a,c);if(null!==X){var d=W;W|=fj;var e=Fj();do try{Gj();break}catch(h){Hj(a,h)}while(1);ng();W=d;cj.current=e;if(S===hj)throw b=kj,Ej(a,c),xi(a,c),Z(a),b;if(null===X)switch(e=a.finishedWork=a.current.alternate,a.finishedExpirationTime=c,d=S,T=null,d){case ti:case hj:throw Error(u(345));case ij:Cj(a,2<c?2:c);break;case ui:xi(a,c);d=a.lastSuspendedTime;
c===d&&(a.nextKnownPendingLevel=Ij(e));if(1073741823===lj&&(e=Ti+pj-$f(),10<e)){if(oj){var f=a.lastPingedTime;if(0===f||f>=c){a.lastPingedTime=c;Ej(a,c);break}}f=zj(a);if(0!==f&&f!==c)break;if(0!==d&&d!==c){a.lastPingedTime=d;break}a.timeoutHandle=Hd(Jj.bind(null,a),e);break}Jj(a);break;case vi:xi(a,c);d=a.lastSuspendedTime;c===d&&(a.nextKnownPendingLevel=Ij(e));if(oj&&(e=a.lastPingedTime,0===e||e>=c)){a.lastPingedTime=c;Ej(a,c);break}e=zj(a);if(0!==e&&e!==c)break;if(0!==d&&d!==c){a.lastPingedTime=
d;break}1073741823!==mj?d=10*(1073741821-mj)-$f():1073741823===lj?d=0:(d=10*(1073741821-lj)-5E3,e=$f(),c=10*(1073741821-c)-e,d=e-d,0>d&&(d=0),d=(120>d?120:480>d?480:1080>d?1080:1920>d?1920:3E3>d?3E3:4320>d?4320:1960*bj(d/1960))-d,c<d&&(d=c));if(10<d){a.timeoutHandle=Hd(Jj.bind(null,a),d);break}Jj(a);break;case jj:if(1073741823!==lj&&null!==nj){f=lj;var g=nj;d=g.busyMinDurationMs|0;0>=d?d=0:(e=g.busyDelayMs|0,f=$f()-(10*(1073741821-f)-(g.timeoutMs|0||5E3)),d=f<=e?0:e+d-f);if(10<d){xi(a,c);a.timeoutHandle=
Hd(Jj.bind(null,a),d);break}}Jj(a);break;default:throw Error(u(329));}Z(a);if(a.callbackNode===b)return Bj.bind(null,a)}}return null}
function yj(a){var b=a.lastExpiredTime;b=0!==b?b:1073741823;if((W&(fj|gj))!==V)throw Error(u(327));Dj();a===T&&b===U||Ej(a,b);if(null!==X){var c=W;W|=fj;var d=Fj();do try{Kj();break}catch(e){Hj(a,e)}while(1);ng();W=c;cj.current=d;if(S===hj)throw c=kj,Ej(a,b),xi(a,b),Z(a),c;if(null!==X)throw Error(u(261));a.finishedWork=a.current.alternate;a.finishedExpirationTime=b;T=null;Jj(a);Z(a)}return null}function Lj(){if(null!==tj){var a=tj;tj=null;a.forEach(function(a,c){Cj(c,a);Z(c)});gg()}}
function Mj(a,b){var c=W;W|=1;try{return a(b)}finally{W=c,W===V&&gg()}}function Nj(a,b){var c=W;W&=-2;W|=ej;try{return a(b)}finally{W=c,W===V&&gg()}}
function Ej(a,b){a.finishedWork=null;a.finishedExpirationTime=0;var c=a.timeoutHandle;-1!==c&&(a.timeoutHandle=-1,Id(c));if(null!==X)for(c=X.return;null!==c;){var d=c;switch(d.tag){case 1:d=d.type.childContextTypes;null!==d&&void 0!==d&&Df();break;case 3:eh();H(K);H(J);break;case 5:gh(d);break;case 4:eh();break;case 13:H(M);break;case 19:H(M);break;case 10:og(d)}c=c.return}T=a;X=Sg(a.current,null);U=b;S=ti;kj=null;mj=lj=1073741823;nj=null;wi=0;oj=!1}
function Hj(a,b){do{try{ng();jh.current=sh;if(mh)for(var c=N.memoizedState;null!==c;){var d=c.queue;null!==d&&(d.pending=null);c=c.next}lh=0;P=O=N=null;mh=!1;if(null===X||null===X.return)return S=hj,kj=b,X=null;a:{var e=a,f=X.return,g=X,h=b;b=U;g.effectTag|=2048;g.firstEffect=g.lastEffect=null;if(null!==h&&"object"===typeof h&&"function"===typeof h.then){var k=h;if(0===(g.mode&2)){var l=g.alternate;l?(g.updateQueue=l.updateQueue,g.memoizedState=l.memoizedState,g.expirationTime=l.expirationTime):(g.updateQueue=
null,g.memoizedState=null)}var m=0!==(M.current&1),p=f;do{var x;if(x=13===p.tag){var z=p.memoizedState;if(null!==z)x=null!==z.dehydrated?!0:!1;else{var ca=p.memoizedProps;x=void 0===ca.fallback?!1:!0!==ca.unstable_avoidThisFallback?!0:m?!1:!0}}if(x){var D=p.updateQueue;if(null===D){var t=new Set;t.add(k);p.updateQueue=t}else D.add(k);if(0===(p.mode&2)){p.effectTag|=64;g.effectTag&=-2981;if(1===g.tag)if(null===g.alternate)g.tag=17;else{var y=wg(1073741823,null);y.tag=2;xg(g,y)}g.expirationTime=1073741823;
break a}h=void 0;g=b;var A=e.pingCache;null===A?(A=e.pingCache=new Wi,h=new Set,A.set(k,h)):(h=A.get(k),void 0===h&&(h=new Set,A.set(k,h)));if(!h.has(g)){h.add(g);var q=Oj.bind(null,e,k,g);k.then(q,q)}p.effectTag|=4096;p.expirationTime=b;break a}p=p.return}while(null!==p);h=Error((pb(g.type)||"A React component")+" suspended while rendering, but no fallback UI was specified.\n\nAdd a <Suspense fallback=...> component higher in the tree to provide a loading indicator or placeholder to display."+qb(g))}S!==
jj&&(S=ij);h=Ai(h,g);p=f;do{switch(p.tag){case 3:k=h;p.effectTag|=4096;p.expirationTime=b;var B=Xi(p,k,b);yg(p,B);break a;case 1:k=h;var w=p.type,ub=p.stateNode;if(0===(p.effectTag&64)&&("function"===typeof w.getDerivedStateFromError||null!==ub&&"function"===typeof ub.componentDidCatch&&(null===aj||!aj.has(ub)))){p.effectTag|=4096;p.expirationTime=b;var vb=$i(p,k,b);yg(p,vb);break a}}p=p.return}while(null!==p)}X=Pj(X)}catch(Xc){b=Xc;continue}break}while(1)}
function Fj(){var a=cj.current;cj.current=sh;return null===a?sh:a}function Ag(a,b){a<lj&&2<a&&(lj=a);null!==b&&a<mj&&2<a&&(mj=a,nj=b)}function Bg(a){a>wi&&(wi=a)}function Kj(){for(;null!==X;)X=Qj(X)}function Gj(){for(;null!==X&&!Uf();)X=Qj(X)}function Qj(a){var b=Rj(a.alternate,a,U);a.memoizedProps=a.pendingProps;null===b&&(b=Pj(a));dj.current=null;return b}
function Pj(a){X=a;do{var b=X.alternate;a=X.return;if(0===(X.effectTag&2048)){b=si(b,X,U);if(1===U||1!==X.childExpirationTime){for(var c=0,d=X.child;null!==d;){var e=d.expirationTime,f=d.childExpirationTime;e>c&&(c=e);f>c&&(c=f);d=d.sibling}X.childExpirationTime=c}if(null!==b)return b;null!==a&&0===(a.effectTag&2048)&&(null===a.firstEffect&&(a.firstEffect=X.firstEffect),null!==X.lastEffect&&(null!==a.lastEffect&&(a.lastEffect.nextEffect=X.firstEffect),a.lastEffect=X.lastEffect),1<X.effectTag&&(null!==
a.lastEffect?a.lastEffect.nextEffect=X:a.firstEffect=X,a.lastEffect=X))}else{b=zi(X);if(null!==b)return b.effectTag&=2047,b;null!==a&&(a.firstEffect=a.lastEffect=null,a.effectTag|=2048)}b=X.sibling;if(null!==b)return b;X=a}while(null!==X);S===ti&&(S=jj);return null}function Ij(a){var b=a.expirationTime;a=a.childExpirationTime;return b>a?b:a}function Jj(a){var b=ag();cg(99,Sj.bind(null,a,b));return null}
function Sj(a,b){do Dj();while(null!==rj);if((W&(fj|gj))!==V)throw Error(u(327));var c=a.finishedWork,d=a.finishedExpirationTime;if(null===c)return null;a.finishedWork=null;a.finishedExpirationTime=0;if(c===a.current)throw Error(u(177));a.callbackNode=null;a.callbackExpirationTime=0;a.callbackPriority=90;a.nextKnownPendingLevel=0;var e=Ij(c);a.firstPendingTime=e;d<=a.lastSuspendedTime?a.firstSuspendedTime=a.lastSuspendedTime=a.nextKnownPendingLevel=0:d<=a.firstSuspendedTime&&(a.firstSuspendedTime=
d-1);d<=a.lastPingedTime&&(a.lastPingedTime=0);d<=a.lastExpiredTime&&(a.lastExpiredTime=0);a===T&&(X=T=null,U=0);1<c.effectTag?null!==c.lastEffect?(c.lastEffect.nextEffect=c,e=c.firstEffect):e=c:e=c.firstEffect;if(null!==e){var f=W;W|=gj;dj.current=null;Dd=fd;var g=xd();if(yd(g)){if("selectionStart"in g)var h={start:g.selectionStart,end:g.selectionEnd};else a:{h=(h=g.ownerDocument)&&h.defaultView||window;var k=h.getSelection&&h.getSelection();if(k&&0!==k.rangeCount){h=k.anchorNode;var l=k.anchorOffset,
m=k.focusNode;k=k.focusOffset;try{h.nodeType,m.nodeType}catch(wb){h=null;break a}var p=0,x=-1,z=-1,ca=0,D=0,t=g,y=null;b:for(;;){for(var A;;){t!==h||0!==l&&3!==t.nodeType||(x=p+l);t!==m||0!==k&&3!==t.nodeType||(z=p+k);3===t.nodeType&&(p+=t.nodeValue.length);if(null===(A=t.firstChild))break;y=t;t=A}for(;;){if(t===g)break b;y===h&&++ca===l&&(x=p);y===m&&++D===k&&(z=p);if(null!==(A=t.nextSibling))break;t=y;y=t.parentNode}t=A}h=-1===x||-1===z?null:{start:x,end:z}}else h=null}h=h||{start:0,end:0}}else h=
null;Ed={activeElementDetached:null,focusedElem:g,selectionRange:h};fd=!1;Y=e;do try{Tj()}catch(wb){if(null===Y)throw Error(u(330));Ei(Y,wb);Y=Y.nextEffect}while(null!==Y);Y=e;do try{for(g=a,h=b;null!==Y;){var q=Y.effectTag;q&16&&Rb(Y.stateNode,"");if(q&128){var B=Y.alternate;if(null!==B){var w=B.ref;null!==w&&("function"===typeof w?w(null):w.current=null)}}switch(q&1038){case 2:Pi(Y);Y.effectTag&=-3;break;case 6:Pi(Y);Y.effectTag&=-3;Si(Y.alternate,Y);break;case 1024:Y.effectTag&=-1025;break;case 1028:Y.effectTag&=
-1025;Si(Y.alternate,Y);break;case 4:Si(Y.alternate,Y);break;case 8:l=Y,Mi(g,l,h),Ni(l)}Y=Y.nextEffect}}catch(wb){if(null===Y)throw Error(u(330));Ei(Y,wb);Y=Y.nextEffect}while(null!==Y);w=Ed;B=xd();q=w.focusedElem;h=w.selectionRange;if(B!==q&&q&&q.ownerDocument&&wd(q.ownerDocument.documentElement,q)){null!==h&&yd(q)&&(B=h.start,w=h.end,void 0===w&&(w=B),"selectionStart"in q?(q.selectionStart=B,q.selectionEnd=Math.min(w,q.value.length)):(w=(B=q.ownerDocument||document)&&B.defaultView||window,w.getSelection&&
(w=w.getSelection(),l=q.textContent.length,g=Math.min(h.start,l),h=void 0===h.end?g:Math.min(h.end,l),!w.extend&&g>h&&(l=h,h=g,g=l),l=vd(q,g),m=vd(q,h),l&&m&&(1!==w.rangeCount||w.anchorNode!==l.node||w.anchorOffset!==l.offset||w.focusNode!==m.node||w.focusOffset!==m.offset)&&(B=B.createRange(),B.setStart(l.node,l.offset),w.removeAllRanges(),g>h?(w.addRange(B),w.extend(m.node,m.offset)):(B.setEnd(m.node,m.offset),w.addRange(B))))));B=[];for(w=q;w=w.parentNode;)1===w.nodeType&&B.push({element:w,left:w.scrollLeft,
top:w.scrollTop});"function"===typeof q.focus&&q.focus();for(q=0;q<B.length;q++)w=B[q],w.element.scrollLeft=w.left,w.element.scrollTop=w.top}fd=!!Dd;Ed=Dd=null;a.current=c;Y=e;do try{for(q=a;null!==Y;){var ub=Y.effectTag;ub&36&&Ji(q,Y.alternate,Y);if(ub&128){B=void 0;var vb=Y.ref;if(null!==vb){var Xc=Y.stateNode;switch(Y.tag){case 5:B=Xc;break;default:B=Xc}"function"===typeof vb?vb(B):vb.current=B}}Y=Y.nextEffect}}catch(wb){if(null===Y)throw Error(u(330));Ei(Y,wb);Y=Y.nextEffect}while(null!==Y);Y=
null;Vf();W=f}else a.current=c;if(qj)qj=!1,rj=a,sj=b;else for(Y=e;null!==Y;)b=Y.nextEffect,Y.nextEffect=null,Y=b;b=a.firstPendingTime;0===b&&(aj=null);1073741823===b?a===vj?uj++:(uj=0,vj=a):uj=0;"function"===typeof Uj&&Uj(c.stateNode,d);Z(a);if(Yi)throw Yi=!1,a=Zi,Zi=null,a;if((W&ej)!==V)return null;gg();return null}function Tj(){for(;null!==Y;){var a=Y.effectTag;0!==(a&256)&&Gi(Y.alternate,Y);0===(a&512)||qj||(qj=!0,dg(97,function(){Dj();return null}));Y=Y.nextEffect}}
function Dj(){if(90!==sj){var a=97<sj?97:sj;sj=90;return cg(a,Vj)}}function Vj(){if(null===rj)return!1;var a=rj;rj=null;if((W&(fj|gj))!==V)throw Error(u(331));var b=W;W|=gj;for(a=a.current.firstEffect;null!==a;){try{var c=a;if(0!==(c.effectTag&512))switch(c.tag){case 0:case 11:case 15:case 22:Hi(5,c),Ii(5,c)}}catch(d){if(null===a)throw Error(u(330));Ei(a,d)}c=a.nextEffect;a.nextEffect=null;a=c}W=b;gg();return!0}
function Wj(a,b,c){b=Ai(c,b);b=Xi(a,b,1073741823);xg(a,b);a=xj(a,1073741823);null!==a&&Z(a)}function Ei(a,b){if(3===a.tag)Wj(a,a,b);else for(var c=a.return;null!==c;){if(3===c.tag){Wj(c,a,b);break}else if(1===c.tag){var d=c.stateNode;if("function"===typeof c.type.getDerivedStateFromError||"function"===typeof d.componentDidCatch&&(null===aj||!aj.has(d))){a=Ai(b,a);a=$i(c,a,1073741823);xg(c,a);c=xj(c,1073741823);null!==c&&Z(c);break}}c=c.return}}
function Oj(a,b,c){var d=a.pingCache;null!==d&&d.delete(b);T===a&&U===c?S===vi||S===ui&&1073741823===lj&&$f()-Ti<pj?Ej(a,U):oj=!0:Aj(a,c)&&(b=a.lastPingedTime,0!==b&&b<c||(a.lastPingedTime=c,Z(a)))}function Vi(a,b){var c=a.stateNode;null!==c&&c.delete(b);b=0;0===b&&(b=Gg(),b=Hg(b,a,null));a=xj(a,b);null!==a&&Z(a)}var Rj;
Rj=function(a,b,c){var d=b.expirationTime;if(null!==a){var e=b.pendingProps;if(a.memoizedProps!==e||K.current)rg=!0;else{if(d<c){rg=!1;switch(b.tag){case 3:hi(b);Xh();break;case 5:fh(b);if(b.mode&4&&1!==c&&e.hidden)return b.expirationTime=b.childExpirationTime=1,null;break;case 1:L(b.type)&&Gf(b);break;case 4:dh(b,b.stateNode.containerInfo);break;case 10:d=b.memoizedProps.value;e=b.type._context;I(jg,e._currentValue);e._currentValue=d;break;case 13:if(null!==b.memoizedState){d=b.child.childExpirationTime;
if(0!==d&&d>=c)return ji(a,b,c);I(M,M.current&1);b=$h(a,b,c);return null!==b?b.sibling:null}I(M,M.current&1);break;case 19:d=b.childExpirationTime>=c;if(0!==(a.effectTag&64)){if(d)return mi(a,b,c);b.effectTag|=64}e=b.memoizedState;null!==e&&(e.rendering=null,e.tail=null);I(M,M.current);if(!d)return null}return $h(a,b,c)}rg=!1}}else rg=!1;b.expirationTime=0;switch(b.tag){case 2:d=b.type;null!==a&&(a.alternate=null,b.alternate=null,b.effectTag|=2);a=b.pendingProps;e=Cf(b,J.current);qg(b,c);e=oh(null,
b,d,a,e,c);b.effectTag|=1;if("object"===typeof e&&null!==e&&"function"===typeof e.render&&void 0===e.$$typeof){b.tag=1;b.memoizedState=null;b.updateQueue=null;if(L(d)){var f=!0;Gf(b)}else f=!1;b.memoizedState=null!==e.state&&void 0!==e.state?e.state:null;ug(b);var g=d.getDerivedStateFromProps;"function"===typeof g&&Fg(b,d,g,a);e.updater=Jg;b.stateNode=e;e._reactInternalFiber=b;Ng(b,d,a,c);b=gi(null,b,d,!0,f,c)}else b.tag=0,R(null,b,e,c),b=b.child;return b;case 16:a:{e=b.elementType;null!==a&&(a.alternate=
null,b.alternate=null,b.effectTag|=2);a=b.pendingProps;ob(e);if(1!==e._status)throw e._result;e=e._result;b.type=e;f=b.tag=Xj(e);a=ig(e,a);switch(f){case 0:b=di(null,b,e,a,c);break a;case 1:b=fi(null,b,e,a,c);break a;case 11:b=Zh(null,b,e,a,c);break a;case 14:b=ai(null,b,e,ig(e.type,a),d,c);break a}throw Error(u(306,e,""));}return b;case 0:return d=b.type,e=b.pendingProps,e=b.elementType===d?e:ig(d,e),di(a,b,d,e,c);case 1:return d=b.type,e=b.pendingProps,e=b.elementType===d?e:ig(d,e),fi(a,b,d,e,c);
case 3:hi(b);d=b.updateQueue;if(null===a||null===d)throw Error(u(282));d=b.pendingProps;e=b.memoizedState;e=null!==e?e.element:null;vg(a,b);zg(b,d,null,c);d=b.memoizedState.element;if(d===e)Xh(),b=$h(a,b,c);else{if(e=b.stateNode.hydrate)Ph=Jd(b.stateNode.containerInfo.firstChild),Oh=b,e=Qh=!0;if(e)for(c=Yg(b,null,d,c),b.child=c;c;)c.effectTag=c.effectTag&-3|1024,c=c.sibling;else R(a,b,d,c),Xh();b=b.child}return b;case 5:return fh(b),null===a&&Uh(b),d=b.type,e=b.pendingProps,f=null!==a?a.memoizedProps:
null,g=e.children,Gd(d,e)?g=null:null!==f&&Gd(d,f)&&(b.effectTag|=16),ei(a,b),b.mode&4&&1!==c&&e.hidden?(b.expirationTime=b.childExpirationTime=1,b=null):(R(a,b,g,c),b=b.child),b;case 6:return null===a&&Uh(b),null;case 13:return ji(a,b,c);case 4:return dh(b,b.stateNode.containerInfo),d=b.pendingProps,null===a?b.child=Xg(b,null,d,c):R(a,b,d,c),b.child;case 11:return d=b.type,e=b.pendingProps,e=b.elementType===d?e:ig(d,e),Zh(a,b,d,e,c);case 7:return R(a,b,b.pendingProps,c),b.child;case 8:return R(a,
b,b.pendingProps.children,c),b.child;case 12:return R(a,b,b.pendingProps.children,c),b.child;case 10:a:{d=b.type._context;e=b.pendingProps;g=b.memoizedProps;f=e.value;var h=b.type._context;I(jg,h._currentValue);h._currentValue=f;if(null!==g)if(h=g.value,f=$e(h,f)?0:("function"===typeof d._calculateChangedBits?d._calculateChangedBits(h,f):1073741823)|0,0===f){if(g.children===e.children&&!K.current){b=$h(a,b,c);break a}}else for(h=b.child,null!==h&&(h.return=b);null!==h;){var k=h.dependencies;if(null!==
k){g=h.child;for(var l=k.firstContext;null!==l;){if(l.context===d&&0!==(l.observedBits&f)){1===h.tag&&(l=wg(c,null),l.tag=2,xg(h,l));h.expirationTime<c&&(h.expirationTime=c);l=h.alternate;null!==l&&l.expirationTime<c&&(l.expirationTime=c);pg(h.return,c);k.expirationTime<c&&(k.expirationTime=c);break}l=l.next}}else g=10===h.tag?h.type===b.type?null:h.child:h.child;if(null!==g)g.return=h;else for(g=h;null!==g;){if(g===b){g=null;break}h=g.sibling;if(null!==h){h.return=g.return;g=h;break}g=g.return}h=
g}R(a,b,e.children,c);b=b.child}return b;case 9:return e=b.type,f=b.pendingProps,d=f.children,qg(b,c),e=sg(e,f.unstable_observedBits),d=d(e),b.effectTag|=1,R(a,b,d,c),b.child;case 14:return e=b.type,f=ig(e,b.pendingProps),f=ig(e.type,f),ai(a,b,e,f,d,c);case 15:return ci(a,b,b.type,b.pendingProps,d,c);case 17:return d=b.type,e=b.pendingProps,e=b.elementType===d?e:ig(d,e),null!==a&&(a.alternate=null,b.alternate=null,b.effectTag|=2),b.tag=1,L(d)?(a=!0,Gf(b)):a=!1,qg(b,c),Lg(b,d,e),Ng(b,d,e,c),gi(null,
b,d,!0,a,c);case 19:return mi(a,b,c)}throw Error(u(156,b.tag));};var Uj=null,Li=null;function Yj(a){if("undefined"===typeof __REACT_DEVTOOLS_GLOBAL_HOOK__)return!1;var b=__REACT_DEVTOOLS_GLOBAL_HOOK__;if(b.isDisabled||!b.supportsFiber)return!0;try{var c=b.inject(a);Uj=function(a){try{b.onCommitFiberRoot(c,a,void 0,64===(a.current.effectTag&64))}catch(e){}};Li=function(a){try{b.onCommitFiberUnmount(c,a)}catch(e){}}}catch(d){}return!0}
function Zj(a,b,c,d){this.tag=a;this.key=c;this.sibling=this.child=this.return=this.stateNode=this.type=this.elementType=null;this.index=0;this.ref=null;this.pendingProps=b;this.dependencies=this.memoizedState=this.updateQueue=this.memoizedProps=null;this.mode=d;this.effectTag=0;this.lastEffect=this.firstEffect=this.nextEffect=null;this.childExpirationTime=this.expirationTime=0;this.alternate=null}function Sh(a,b,c,d){return new Zj(a,b,c,d)}
function bi(a){a=a.prototype;return!(!a||!a.isReactComponent)}function Xj(a){if("function"===typeof a)return bi(a)?1:0;if(void 0!==a&&null!==a){a=a.$$typeof;if(a===gb)return 11;if(a===jb)return 14}return 2}
function Sg(a,b){var c=a.alternate;null===c?(c=Sh(a.tag,b,a.key,a.mode),c.elementType=a.elementType,c.type=a.type,c.stateNode=a.stateNode,c.alternate=a,a.alternate=c):(c.pendingProps=b,c.effectTag=0,c.nextEffect=null,c.firstEffect=null,c.lastEffect=null);c.childExpirationTime=a.childExpirationTime;c.expirationTime=a.expirationTime;c.child=a.child;c.memoizedProps=a.memoizedProps;c.memoizedState=a.memoizedState;c.updateQueue=a.updateQueue;b=a.dependencies;c.dependencies=null===b?null:{expirationTime:b.expirationTime,
firstContext:b.firstContext,responders:b.responders};c.sibling=a.sibling;c.index=a.index;c.ref=a.ref;return c}
function Ug(a,b,c,d,e,f){var g=2;d=a;if("function"===typeof a)bi(a)&&(g=1);else if("string"===typeof a)g=5;else a:switch(a){case ab:return Wg(c.children,e,f,b);case fb:g=8;e|=7;break;case bb:g=8;e|=1;break;case cb:return a=Sh(12,c,b,e|8),a.elementType=cb,a.type=cb,a.expirationTime=f,a;case hb:return a=Sh(13,c,b,e),a.type=hb,a.elementType=hb,a.expirationTime=f,a;case ib:return a=Sh(19,c,b,e),a.elementType=ib,a.expirationTime=f,a;default:if("object"===typeof a&&null!==a)switch(a.$$typeof){case db:g=
10;break a;case eb:g=9;break a;case gb:g=11;break a;case jb:g=14;break a;case kb:g=16;d=null;break a;case lb:g=22;break a}throw Error(u(130,null==a?a:typeof a,""));}b=Sh(g,c,b,e);b.elementType=a;b.type=d;b.expirationTime=f;return b}function Wg(a,b,c,d){a=Sh(7,a,d,b);a.expirationTime=c;return a}function Tg(a,b,c){a=Sh(6,a,null,b);a.expirationTime=c;return a}
function Vg(a,b,c){b=Sh(4,null!==a.children?a.children:[],a.key,b);b.expirationTime=c;b.stateNode={containerInfo:a.containerInfo,pendingChildren:null,implementation:a.implementation};return b}
function ak(a,b,c){this.tag=b;this.current=null;this.containerInfo=a;this.pingCache=this.pendingChildren=null;this.finishedExpirationTime=0;this.finishedWork=null;this.timeoutHandle=-1;this.pendingContext=this.context=null;this.hydrate=c;this.callbackNode=null;this.callbackPriority=90;this.lastExpiredTime=this.lastPingedTime=this.nextKnownPendingLevel=this.lastSuspendedTime=this.firstSuspendedTime=this.firstPendingTime=0}
function Aj(a,b){var c=a.firstSuspendedTime;a=a.lastSuspendedTime;return 0!==c&&c>=b&&a<=b}function xi(a,b){var c=a.firstSuspendedTime,d=a.lastSuspendedTime;c<b&&(a.firstSuspendedTime=b);if(d>b||0===c)a.lastSuspendedTime=b;b<=a.lastPingedTime&&(a.lastPingedTime=0);b<=a.lastExpiredTime&&(a.lastExpiredTime=0)}
function yi(a,b){b>a.firstPendingTime&&(a.firstPendingTime=b);var c=a.firstSuspendedTime;0!==c&&(b>=c?a.firstSuspendedTime=a.lastSuspendedTime=a.nextKnownPendingLevel=0:b>=a.lastSuspendedTime&&(a.lastSuspendedTime=b+1),b>a.nextKnownPendingLevel&&(a.nextKnownPendingLevel=b))}function Cj(a,b){var c=a.lastExpiredTime;if(0===c||c>b)a.lastExpiredTime=b}
function bk(a,b,c,d){var e=b.current,f=Gg(),g=Dg.suspense;f=Hg(f,e,g);a:if(c){c=c._reactInternalFiber;b:{if(dc(c)!==c||1!==c.tag)throw Error(u(170));var h=c;do{switch(h.tag){case 3:h=h.stateNode.context;break b;case 1:if(L(h.type)){h=h.stateNode.__reactInternalMemoizedMergedChildContext;break b}}h=h.return}while(null!==h);throw Error(u(171));}if(1===c.tag){var k=c.type;if(L(k)){c=Ff(c,k,h);break a}}c=h}else c=Af;null===b.context?b.context=c:b.pendingContext=c;b=wg(f,g);b.payload={element:a};d=void 0===
d?null:d;null!==d&&(b.callback=d);xg(e,b);Ig(e,f);return f}function ck(a){a=a.current;if(!a.child)return null;switch(a.child.tag){case 5:return a.child.stateNode;default:return a.child.stateNode}}function dk(a,b){a=a.memoizedState;null!==a&&null!==a.dehydrated&&a.retryTime<b&&(a.retryTime=b)}function ek(a,b){dk(a,b);(a=a.alternate)&&dk(a,b)}
function fk(a,b,c){c=null!=c&&!0===c.hydrate;var d=new ak(a,b,c),e=Sh(3,null,null,2===b?7:1===b?3:0);d.current=e;e.stateNode=d;ug(e);a[Od]=d.current;c&&0!==b&&Jc(a,9===a.nodeType?a:a.ownerDocument);this._internalRoot=d}fk.prototype.render=function(a){bk(a,this._internalRoot,null,null)};fk.prototype.unmount=function(){var a=this._internalRoot,b=a.containerInfo;bk(null,a,null,function(){b[Od]=null})};
function gk(a){return!(!a||1!==a.nodeType&&9!==a.nodeType&&11!==a.nodeType&&(8!==a.nodeType||" react-mount-point-unstable "!==a.nodeValue))}function hk(a,b){b||(b=a?9===a.nodeType?a.documentElement:a.firstChild:null,b=!(!b||1!==b.nodeType||!b.hasAttribute("data-reactroot")));if(!b)for(var c;c=a.lastChild;)a.removeChild(c);return new fk(a,0,b?{hydrate:!0}:void 0)}
function ik(a,b,c,d,e){var f=c._reactRootContainer;if(f){var g=f._internalRoot;if("function"===typeof e){var h=e;e=function(){var a=ck(g);h.call(a)}}bk(b,g,a,e)}else{f=c._reactRootContainer=hk(c,d);g=f._internalRoot;if("function"===typeof e){var k=e;e=function(){var a=ck(g);k.call(a)}}Nj(function(){bk(b,g,a,e)})}return ck(g)}function jk(a,b,c){var d=3<arguments.length&&void 0!==arguments[3]?arguments[3]:null;return{$$typeof:$a,key:null==d?null:""+d,children:a,containerInfo:b,implementation:c}}
wc=function(a){if(13===a.tag){var b=hg(Gg(),150,100);Ig(a,b);ek(a,b)}};xc=function(a){13===a.tag&&(Ig(a,3),ek(a,3))};yc=function(a){if(13===a.tag){var b=Gg();b=Hg(b,a,null);Ig(a,b);ek(a,b)}};
za=function(a,b,c){switch(b){case "input":Cb(a,c);b=c.name;if("radio"===c.type&&null!=b){for(c=a;c.parentNode;)c=c.parentNode;c=c.querySelectorAll("input[name="+JSON.stringify(""+b)+'][type="radio"]');for(b=0;b<c.length;b++){var d=c[b];if(d!==a&&d.form===a.form){var e=Qd(d);if(!e)throw Error(u(90));yb(d);Cb(d,e)}}}break;case "textarea":Kb(a,c);break;case "select":b=c.value,null!=b&&Hb(a,!!c.multiple,b,!1)}};Fa=Mj;
Ga=function(a,b,c,d,e){var f=W;W|=4;try{return cg(98,a.bind(null,b,c,d,e))}finally{W=f,W===V&&gg()}};Ha=function(){(W&(1|fj|gj))===V&&(Lj(),Dj())};Ia=function(a,b){var c=W;W|=2;try{return a(b)}finally{W=c,W===V&&gg()}};function kk(a,b){var c=2<arguments.length&&void 0!==arguments[2]?arguments[2]:null;if(!gk(b))throw Error(u(200));return jk(a,b,null,c)}var lk={Events:[Nc,Pd,Qd,xa,ta,Xd,function(a){jc(a,Wd)},Da,Ea,id,mc,Dj,{current:!1}]};
(function(a){var b=a.findFiberByHostInstance;return Yj(n({},a,{overrideHookState:null,overrideProps:null,setSuspenseHandler:null,scheduleUpdate:null,currentDispatcherRef:Wa.ReactCurrentDispatcher,findHostInstanceByFiber:function(a){a=hc(a);return null===a?null:a.stateNode},findFiberByHostInstance:function(a){return b?b(a):null},findHostInstancesForRefresh:null,scheduleRefresh:null,scheduleRoot:null,setRefreshHandler:null,getCurrentFiber:null}))})({findFiberByHostInstance:tc,bundleType:0,version:"16.14.0",
rendererPackageName:"react-dom"});exports.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED=lk;exports.createPortal=kk;exports.findDOMNode=function(a){if(null==a)return null;if(1===a.nodeType)return a;var b=a._reactInternalFiber;if(void 0===b){if("function"===typeof a.render)throw Error(u(188));throw Error(u(268,Object.keys(a)));}a=hc(b);a=null===a?null:a.stateNode;return a};
exports.flushSync=function(a,b){if((W&(fj|gj))!==V)throw Error(u(187));var c=W;W|=1;try{return cg(99,a.bind(null,b))}finally{W=c,gg()}};exports.hydrate=function(a,b,c){if(!gk(b))throw Error(u(200));return ik(null,a,b,!0,c)};exports.render=function(a,b,c){if(!gk(b))throw Error(u(200));return ik(null,a,b,!1,c)};
exports.unmountComponentAtNode=function(a){if(!gk(a))throw Error(u(40));return a._reactRootContainer?(Nj(function(){ik(null,null,a,!1,function(){a._reactRootContainer=null;a[Od]=null})}),!0):!1};exports.unstable_batchedUpdates=Mj;exports.unstable_createPortal=function(a,b){return kk(a,b,2<arguments.length&&void 0!==arguments[2]?arguments[2]:null)};
exports.unstable_renderSubtreeIntoContainer=function(a,b,c,d){if(!gk(c))throw Error(u(200));if(null==a||void 0===a._reactInternalFiber)throw Error(u(38));return ik(a,b,c,!1,d)};exports.version="16.14.0";


/***/ }),
/* 47 */
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";


if ("MISSING_ENV_VAR".NODE_ENV === 'production') {
  module.exports = __webpack_require__(48);
} else {
  module.exports = __webpack_require__(50);
}


/***/ }),
/* 48 */
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
/** @license React v16.14.0
 * react.production.min.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */

var l=__webpack_require__(49),n="function"===typeof Symbol&&Symbol.for,p=n?Symbol.for("react.element"):60103,q=n?Symbol.for("react.portal"):60106,r=n?Symbol.for("react.fragment"):60107,t=n?Symbol.for("react.strict_mode"):60108,u=n?Symbol.for("react.profiler"):60114,v=n?Symbol.for("react.provider"):60109,w=n?Symbol.for("react.context"):60110,x=n?Symbol.for("react.forward_ref"):60112,y=n?Symbol.for("react.suspense"):60113,z=n?Symbol.for("react.memo"):60115,A=n?Symbol.for("react.lazy"):
60116,B="function"===typeof Symbol&&Symbol.iterator;function C(a){for(var b="https://reactjs.org/docs/error-decoder.html?invariant="+a,c=1;c<arguments.length;c++)b+="&args[]="+encodeURIComponent(arguments[c]);return"Minified React error #"+a+"; visit "+b+" for the full message or use the non-minified dev environment for full errors and additional helpful warnings."}
var D={isMounted:function(){return!1},enqueueForceUpdate:function(){},enqueueReplaceState:function(){},enqueueSetState:function(){}},E={};function F(a,b,c){this.props=a;this.context=b;this.refs=E;this.updater=c||D}F.prototype.isReactComponent={};F.prototype.setState=function(a,b){if("object"!==typeof a&&"function"!==typeof a&&null!=a)throw Error(C(85));this.updater.enqueueSetState(this,a,b,"setState")};F.prototype.forceUpdate=function(a){this.updater.enqueueForceUpdate(this,a,"forceUpdate")};
function G(){}G.prototype=F.prototype;function H(a,b,c){this.props=a;this.context=b;this.refs=E;this.updater=c||D}var I=H.prototype=new G;I.constructor=H;l(I,F.prototype);I.isPureReactComponent=!0;var J={current:null},K=Object.prototype.hasOwnProperty,L={key:!0,ref:!0,__self:!0,__source:!0};
function M(a,b,c){var e,d={},g=null,k=null;if(null!=b)for(e in void 0!==b.ref&&(k=b.ref),void 0!==b.key&&(g=""+b.key),b)K.call(b,e)&&!L.hasOwnProperty(e)&&(d[e]=b[e]);var f=arguments.length-2;if(1===f)d.children=c;else if(1<f){for(var h=Array(f),m=0;m<f;m++)h[m]=arguments[m+2];d.children=h}if(a&&a.defaultProps)for(e in f=a.defaultProps,f)void 0===d[e]&&(d[e]=f[e]);return{$$typeof:p,type:a,key:g,ref:k,props:d,_owner:J.current}}
function N(a,b){return{$$typeof:p,type:a.type,key:b,ref:a.ref,props:a.props,_owner:a._owner}}function O(a){return"object"===typeof a&&null!==a&&a.$$typeof===p}function escape(a){var b={"=":"=0",":":"=2"};return"$"+(""+a).replace(/[=:]/g,function(a){return b[a]})}var P=/\/+/g,Q=[];function R(a,b,c,e){if(Q.length){var d=Q.pop();d.result=a;d.keyPrefix=b;d.func=c;d.context=e;d.count=0;return d}return{result:a,keyPrefix:b,func:c,context:e,count:0}}
function S(a){a.result=null;a.keyPrefix=null;a.func=null;a.context=null;a.count=0;10>Q.length&&Q.push(a)}
function T(a,b,c,e){var d=typeof a;if("undefined"===d||"boolean"===d)a=null;var g=!1;if(null===a)g=!0;else switch(d){case "string":case "number":g=!0;break;case "object":switch(a.$$typeof){case p:case q:g=!0}}if(g)return c(e,a,""===b?"."+U(a,0):b),1;g=0;b=""===b?".":b+":";if(Array.isArray(a))for(var k=0;k<a.length;k++){d=a[k];var f=b+U(d,k);g+=T(d,f,c,e)}else if(null===a||"object"!==typeof a?f=null:(f=B&&a[B]||a["@@iterator"],f="function"===typeof f?f:null),"function"===typeof f)for(a=f.call(a),k=
0;!(d=a.next()).done;)d=d.value,f=b+U(d,k++),g+=T(d,f,c,e);else if("object"===d)throw c=""+a,Error(C(31,"[object Object]"===c?"object with keys {"+Object.keys(a).join(", ")+"}":c,""));return g}function V(a,b,c){return null==a?0:T(a,"",b,c)}function U(a,b){return"object"===typeof a&&null!==a&&null!=a.key?escape(a.key):b.toString(36)}function W(a,b){a.func.call(a.context,b,a.count++)}
function aa(a,b,c){var e=a.result,d=a.keyPrefix;a=a.func.call(a.context,b,a.count++);Array.isArray(a)?X(a,e,c,function(a){return a}):null!=a&&(O(a)&&(a=N(a,d+(!a.key||b&&b.key===a.key?"":(""+a.key).replace(P,"$&/")+"/")+c)),e.push(a))}function X(a,b,c,e,d){var g="";null!=c&&(g=(""+c).replace(P,"$&/")+"/");b=R(b,g,e,d);V(a,aa,b);S(b)}var Y={current:null};function Z(){var a=Y.current;if(null===a)throw Error(C(321));return a}
var ba={ReactCurrentDispatcher:Y,ReactCurrentBatchConfig:{suspense:null},ReactCurrentOwner:J,IsSomeRendererActing:{current:!1},assign:l};exports.Children={map:function(a,b,c){if(null==a)return a;var e=[];X(a,e,null,b,c);return e},forEach:function(a,b,c){if(null==a)return a;b=R(null,null,b,c);V(a,W,b);S(b)},count:function(a){return V(a,function(){return null},null)},toArray:function(a){var b=[];X(a,b,null,function(a){return a});return b},only:function(a){if(!O(a))throw Error(C(143));return a}};
exports.Component=F;exports.Fragment=r;exports.Profiler=u;exports.PureComponent=H;exports.StrictMode=t;exports.Suspense=y;exports.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED=ba;
exports.cloneElement=function(a,b,c){if(null===a||void 0===a)throw Error(C(267,a));var e=l({},a.props),d=a.key,g=a.ref,k=a._owner;if(null!=b){void 0!==b.ref&&(g=b.ref,k=J.current);void 0!==b.key&&(d=""+b.key);if(a.type&&a.type.defaultProps)var f=a.type.defaultProps;for(h in b)K.call(b,h)&&!L.hasOwnProperty(h)&&(e[h]=void 0===b[h]&&void 0!==f?f[h]:b[h])}var h=arguments.length-2;if(1===h)e.children=c;else if(1<h){f=Array(h);for(var m=0;m<h;m++)f[m]=arguments[m+2];e.children=f}return{$$typeof:p,type:a.type,
key:d,ref:g,props:e,_owner:k}};exports.createContext=function(a,b){void 0===b&&(b=null);a={$$typeof:w,_calculateChangedBits:b,_currentValue:a,_currentValue2:a,_threadCount:0,Provider:null,Consumer:null};a.Provider={$$typeof:v,_context:a};return a.Consumer=a};exports.createElement=M;exports.createFactory=function(a){var b=M.bind(null,a);b.type=a;return b};exports.createRef=function(){return{current:null}};exports.forwardRef=function(a){return{$$typeof:x,render:a}};exports.isValidElement=O;
exports.lazy=function(a){return{$$typeof:A,_ctor:a,_status:-1,_result:null}};exports.memo=function(a,b){return{$$typeof:z,type:a,compare:void 0===b?null:b}};exports.useCallback=function(a,b){return Z().useCallback(a,b)};exports.useContext=function(a,b){return Z().useContext(a,b)};exports.useDebugValue=function(){};exports.useEffect=function(a,b){return Z().useEffect(a,b)};exports.useImperativeHandle=function(a,b,c){return Z().useImperativeHandle(a,b,c)};
exports.useLayoutEffect=function(a,b){return Z().useLayoutEffect(a,b)};exports.useMemo=function(a,b){return Z().useMemo(a,b)};exports.useReducer=function(a,b,c){return Z().useReducer(a,b,c)};exports.useRef=function(a){return Z().useRef(a)};exports.useState=function(a){return Z().useState(a)};exports.version="16.14.0";


/***/ }),
/* 49 */
/***/ ((module) => {

"use strict";
/*
object-assign
(c) Sindre Sorhus
@license MIT
*/


/* eslint-disable no-unused-vars */
var getOwnPropertySymbols = Object.getOwnPropertySymbols;
var hasOwnProperty = Object.prototype.hasOwnProperty;
var propIsEnumerable = Object.prototype.propertyIsEnumerable;

function toObject(val) {
	if (val === null || val === undefined) {
		throw new TypeError('Object.assign cannot be called with null or undefined');
	}

	return Object(val);
}

function shouldUseNative() {
	try {
		if (!Object.assign) {
			return false;
		}

		// Detect buggy property enumeration order in older V8 versions.

		// https://bugs.chromium.org/p/v8/issues/detail?id=4118
		var test1 = new String('abc');  // eslint-disable-line no-new-wrappers
		test1[5] = 'de';
		if (Object.getOwnPropertyNames(test1)[0] === '5') {
			return false;
		}

		// https://bugs.chromium.org/p/v8/issues/detail?id=3056
		var test2 = {};
		for (var i = 0; i < 10; i++) {
			test2['_' + String.fromCharCode(i)] = i;
		}
		var order2 = Object.getOwnPropertyNames(test2).map(function (n) {
			return test2[n];
		});
		if (order2.join('') !== '0123456789') {
			return false;
		}

		// https://bugs.chromium.org/p/v8/issues/detail?id=3056
		var test3 = {};
		'abcdefghijklmnopqrst'.split('').forEach(function (letter) {
			test3[letter] = letter;
		});
		if (Object.keys(Object.assign({}, test3)).join('') !==
				'abcdefghijklmnopqrst') {
			return false;
		}

		return true;
	} catch (err) {
		// We don't expect any of the above to throw, but better to be safe.
		return false;
	}
}

module.exports = shouldUseNative() ? Object.assign : function (target, source) {
	var from;
	var to = toObject(target);
	var symbols;

	for (var s = 1; s < arguments.length; s++) {
		from = Object(arguments[s]);

		for (var key in from) {
			if (hasOwnProperty.call(from, key)) {
				to[key] = from[key];
			}
		}

		if (getOwnPropertySymbols) {
			symbols = getOwnPropertySymbols(from);
			for (var i = 0; i < symbols.length; i++) {
				if (propIsEnumerable.call(from, symbols[i])) {
					to[symbols[i]] = from[symbols[i]];
				}
			}
		}
	}

	return to;
};


/***/ }),
/* 50 */
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
/** @license React v16.14.0
 * react.development.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */





if ("MISSING_ENV_VAR".NODE_ENV !== "production") {
  (function() {
'use strict';

var _assign = __webpack_require__(49);
var checkPropTypes = __webpack_require__(51);

var ReactVersion = '16.14.0';

// The Symbol used to tag the ReactElement-like types. If there is no native Symbol
// nor polyfill, then a plain number is used for performance.
var hasSymbol = typeof Symbol === 'function' && Symbol.for;
var REACT_ELEMENT_TYPE = hasSymbol ? Symbol.for('react.element') : 0xeac7;
var REACT_PORTAL_TYPE = hasSymbol ? Symbol.for('react.portal') : 0xeaca;
var REACT_FRAGMENT_TYPE = hasSymbol ? Symbol.for('react.fragment') : 0xeacb;
var REACT_STRICT_MODE_TYPE = hasSymbol ? Symbol.for('react.strict_mode') : 0xeacc;
var REACT_PROFILER_TYPE = hasSymbol ? Symbol.for('react.profiler') : 0xead2;
var REACT_PROVIDER_TYPE = hasSymbol ? Symbol.for('react.provider') : 0xeacd;
var REACT_CONTEXT_TYPE = hasSymbol ? Symbol.for('react.context') : 0xeace; // TODO: We don't use AsyncMode or ConcurrentMode anymore. They were temporary
var REACT_CONCURRENT_MODE_TYPE = hasSymbol ? Symbol.for('react.concurrent_mode') : 0xeacf;
var REACT_FORWARD_REF_TYPE = hasSymbol ? Symbol.for('react.forward_ref') : 0xead0;
var REACT_SUSPENSE_TYPE = hasSymbol ? Symbol.for('react.suspense') : 0xead1;
var REACT_SUSPENSE_LIST_TYPE = hasSymbol ? Symbol.for('react.suspense_list') : 0xead8;
var REACT_MEMO_TYPE = hasSymbol ? Symbol.for('react.memo') : 0xead3;
var REACT_LAZY_TYPE = hasSymbol ? Symbol.for('react.lazy') : 0xead4;
var REACT_BLOCK_TYPE = hasSymbol ? Symbol.for('react.block') : 0xead9;
var REACT_FUNDAMENTAL_TYPE = hasSymbol ? Symbol.for('react.fundamental') : 0xead5;
var REACT_RESPONDER_TYPE = hasSymbol ? Symbol.for('react.responder') : 0xead6;
var REACT_SCOPE_TYPE = hasSymbol ? Symbol.for('react.scope') : 0xead7;
var MAYBE_ITERATOR_SYMBOL = typeof Symbol === 'function' && Symbol.iterator;
var FAUX_ITERATOR_SYMBOL = '@@iterator';
function getIteratorFn(maybeIterable) {
  if (maybeIterable === null || typeof maybeIterable !== 'object') {
    return null;
  }

  var maybeIterator = MAYBE_ITERATOR_SYMBOL && maybeIterable[MAYBE_ITERATOR_SYMBOL] || maybeIterable[FAUX_ITERATOR_SYMBOL];

  if (typeof maybeIterator === 'function') {
    return maybeIterator;
  }

  return null;
}

/**
 * Keeps track of the current dispatcher.
 */
var ReactCurrentDispatcher = {
  /**
   * @internal
   * @type {ReactComponent}
   */
  current: null
};

/**
 * Keeps track of the current batch's configuration such as how long an update
 * should suspend for if it needs to.
 */
var ReactCurrentBatchConfig = {
  suspense: null
};

/**
 * Keeps track of the current owner.
 *
 * The current owner is the component who should own any components that are
 * currently being constructed.
 */
var ReactCurrentOwner = {
  /**
   * @internal
   * @type {ReactComponent}
   */
  current: null
};

var BEFORE_SLASH_RE = /^(.*)[\\\/]/;
function describeComponentFrame (name, source, ownerName) {
  var sourceInfo = '';

  if (source) {
    var path = source.fileName;
    var fileName = path.replace(BEFORE_SLASH_RE, '');

    {
      // In DEV, include code for a common special case:
      // prefer "folder/index.js" instead of just "index.js".
      if (/^index\./.test(fileName)) {
        var match = path.match(BEFORE_SLASH_RE);

        if (match) {
          var pathBeforeSlash = match[1];

          if (pathBeforeSlash) {
            var folderName = pathBeforeSlash.replace(BEFORE_SLASH_RE, '');
            fileName = folderName + '/' + fileName;
          }
        }
      }
    }

    sourceInfo = ' (at ' + fileName + ':' + source.lineNumber + ')';
  } else if (ownerName) {
    sourceInfo = ' (created by ' + ownerName + ')';
  }

  return '\n    in ' + (name || 'Unknown') + sourceInfo;
}

var Resolved = 1;
function refineResolvedLazyComponent(lazyComponent) {
  return lazyComponent._status === Resolved ? lazyComponent._result : null;
}

function getWrappedName(outerType, innerType, wrapperName) {
  var functionName = innerType.displayName || innerType.name || '';
  return outerType.displayName || (functionName !== '' ? wrapperName + "(" + functionName + ")" : wrapperName);
}

function getComponentName(type) {
  if (type == null) {
    // Host root, text node or just invalid type.
    return null;
  }

  {
    if (typeof type.tag === 'number') {
      error('Received an unexpected object in getComponentName(). ' + 'This is likely a bug in React. Please file an issue.');
    }
  }

  if (typeof type === 'function') {
    return type.displayName || type.name || null;
  }

  if (typeof type === 'string') {
    return type;
  }

  switch (type) {
    case REACT_FRAGMENT_TYPE:
      return 'Fragment';

    case REACT_PORTAL_TYPE:
      return 'Portal';

    case REACT_PROFILER_TYPE:
      return "Profiler";

    case REACT_STRICT_MODE_TYPE:
      return 'StrictMode';

    case REACT_SUSPENSE_TYPE:
      return 'Suspense';

    case REACT_SUSPENSE_LIST_TYPE:
      return 'SuspenseList';
  }

  if (typeof type === 'object') {
    switch (type.$$typeof) {
      case REACT_CONTEXT_TYPE:
        return 'Context.Consumer';

      case REACT_PROVIDER_TYPE:
        return 'Context.Provider';

      case REACT_FORWARD_REF_TYPE:
        return getWrappedName(type, type.render, 'ForwardRef');

      case REACT_MEMO_TYPE:
        return getComponentName(type.type);

      case REACT_BLOCK_TYPE:
        return getComponentName(type.render);

      case REACT_LAZY_TYPE:
        {
          var thenable = type;
          var resolvedThenable = refineResolvedLazyComponent(thenable);

          if (resolvedThenable) {
            return getComponentName(resolvedThenable);
          }

          break;
        }
    }
  }

  return null;
}

var ReactDebugCurrentFrame = {};
var currentlyValidatingElement = null;
function setCurrentlyValidatingElement(element) {
  {
    currentlyValidatingElement = element;
  }
}

{
  // Stack implementation injected by the current renderer.
  ReactDebugCurrentFrame.getCurrentStack = null;

  ReactDebugCurrentFrame.getStackAddendum = function () {
    var stack = ''; // Add an extra top frame while an element is being validated

    if (currentlyValidatingElement) {
      var name = getComponentName(currentlyValidatingElement.type);
      var owner = currentlyValidatingElement._owner;
      stack += describeComponentFrame(name, currentlyValidatingElement._source, owner && getComponentName(owner.type));
    } // Delegate to the injected renderer-specific implementation


    var impl = ReactDebugCurrentFrame.getCurrentStack;

    if (impl) {
      stack += impl() || '';
    }

    return stack;
  };
}

/**
 * Used by act() to track whether you're inside an act() scope.
 */
var IsSomeRendererActing = {
  current: false
};

var ReactSharedInternals = {
  ReactCurrentDispatcher: ReactCurrentDispatcher,
  ReactCurrentBatchConfig: ReactCurrentBatchConfig,
  ReactCurrentOwner: ReactCurrentOwner,
  IsSomeRendererActing: IsSomeRendererActing,
  // Used by renderers to avoid bundling object-assign twice in UMD bundles:
  assign: _assign
};

{
  _assign(ReactSharedInternals, {
    // These should not be included in production.
    ReactDebugCurrentFrame: ReactDebugCurrentFrame,
    // Shim for React DOM 16.0.0 which still destructured (but not used) this.
    // TODO: remove in React 17.0.
    ReactComponentTreeHook: {}
  });
}

// by calls to these methods by a Babel plugin.
//
// In PROD (or in packages without access to React internals),
// they are left as they are instead.

function warn(format) {
  {
    for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
      args[_key - 1] = arguments[_key];
    }

    printWarning('warn', format, args);
  }
}
function error(format) {
  {
    for (var _len2 = arguments.length, args = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {
      args[_key2 - 1] = arguments[_key2];
    }

    printWarning('error', format, args);
  }
}

function printWarning(level, format, args) {
  // When changing this logic, you might want to also
  // update consoleWithStackDev.www.js as well.
  {
    var hasExistingStack = args.length > 0 && typeof args[args.length - 1] === 'string' && args[args.length - 1].indexOf('\n    in') === 0;

    if (!hasExistingStack) {
      var ReactDebugCurrentFrame = ReactSharedInternals.ReactDebugCurrentFrame;
      var stack = ReactDebugCurrentFrame.getStackAddendum();

      if (stack !== '') {
        format += '%s';
        args = args.concat([stack]);
      }
    }

    var argsWithFormat = args.map(function (item) {
      return '' + item;
    }); // Careful: RN currently depends on this prefix

    argsWithFormat.unshift('Warning: ' + format); // We intentionally don't use spread (or .apply) directly because it
    // breaks IE9: https://github.com/facebook/react/issues/13610
    // eslint-disable-next-line react-internal/no-production-logging

    Function.prototype.apply.call(console[level], console, argsWithFormat);

    try {
      // --- Welcome to debugging React ---
      // This error was thrown as a convenience so that you can use this stack
      // to find the callsite that caused this warning to fire.
      var argIndex = 0;
      var message = 'Warning: ' + format.replace(/%s/g, function () {
        return args[argIndex++];
      });
      throw new Error(message);
    } catch (x) {}
  }
}

var didWarnStateUpdateForUnmountedComponent = {};

function warnNoop(publicInstance, callerName) {
  {
    var _constructor = publicInstance.constructor;
    var componentName = _constructor && (_constructor.displayName || _constructor.name) || 'ReactClass';
    var warningKey = componentName + "." + callerName;

    if (didWarnStateUpdateForUnmountedComponent[warningKey]) {
      return;
    }

    error("Can't call %s on a component that is not yet mounted. " + 'This is a no-op, but it might indicate a bug in your application. ' + 'Instead, assign to `this.state` directly or define a `state = {};` ' + 'class property with the desired state in the %s component.', callerName, componentName);

    didWarnStateUpdateForUnmountedComponent[warningKey] = true;
  }
}
/**
 * This is the abstract API for an update queue.
 */


var ReactNoopUpdateQueue = {
  /**
   * Checks whether or not this composite component is mounted.
   * @param {ReactClass} publicInstance The instance we want to test.
   * @return {boolean} True if mounted, false otherwise.
   * @protected
   * @final
   */
  isMounted: function (publicInstance) {
    return false;
  },

  /**
   * Forces an update. This should only be invoked when it is known with
   * certainty that we are **not** in a DOM transaction.
   *
   * You may want to call this when you know that some deeper aspect of the
   * component's state has changed but `setState` was not called.
   *
   * This will not invoke `shouldComponentUpdate`, but it will invoke
   * `componentWillUpdate` and `componentDidUpdate`.
   *
   * @param {ReactClass} publicInstance The instance that should rerender.
   * @param {?function} callback Called after component is updated.
   * @param {?string} callerName name of the calling function in the public API.
   * @internal
   */
  enqueueForceUpdate: function (publicInstance, callback, callerName) {
    warnNoop(publicInstance, 'forceUpdate');
  },

  /**
   * Replaces all of the state. Always use this or `setState` to mutate state.
   * You should treat `this.state` as immutable.
   *
   * There is no guarantee that `this.state` will be immediately updated, so
   * accessing `this.state` after calling this method may return the old value.
   *
   * @param {ReactClass} publicInstance The instance that should rerender.
   * @param {object} completeState Next state.
   * @param {?function} callback Called after component is updated.
   * @param {?string} callerName name of the calling function in the public API.
   * @internal
   */
  enqueueReplaceState: function (publicInstance, completeState, callback, callerName) {
    warnNoop(publicInstance, 'replaceState');
  },

  /**
   * Sets a subset of the state. This only exists because _pendingState is
   * internal. This provides a merging strategy that is not available to deep
   * properties which is confusing. TODO: Expose pendingState or don't use it
   * during the merge.
   *
   * @param {ReactClass} publicInstance The instance that should rerender.
   * @param {object} partialState Next partial state to be merged with state.
   * @param {?function} callback Called after component is updated.
   * @param {?string} Name of the calling function in the public API.
   * @internal
   */
  enqueueSetState: function (publicInstance, partialState, callback, callerName) {
    warnNoop(publicInstance, 'setState');
  }
};

var emptyObject = {};

{
  Object.freeze(emptyObject);
}
/**
 * Base class helpers for the updating state of a component.
 */


function Component(props, context, updater) {
  this.props = props;
  this.context = context; // If a component has string refs, we will assign a different object later.

  this.refs = emptyObject; // We initialize the default updater but the real one gets injected by the
  // renderer.

  this.updater = updater || ReactNoopUpdateQueue;
}

Component.prototype.isReactComponent = {};
/**
 * Sets a subset of the state. Always use this to mutate
 * state. You should treat `this.state` as immutable.
 *
 * There is no guarantee that `this.state` will be immediately updated, so
 * accessing `this.state` after calling this method may return the old value.
 *
 * There is no guarantee that calls to `setState` will run synchronously,
 * as they may eventually be batched together.  You can provide an optional
 * callback that will be executed when the call to setState is actually
 * completed.
 *
 * When a function is provided to setState, it will be called at some point in
 * the future (not synchronously). It will be called with the up to date
 * component arguments (state, props, context). These values can be different
 * from this.* because your function may be called after receiveProps but before
 * shouldComponentUpdate, and this new state, props, and context will not yet be
 * assigned to this.
 *
 * @param {object|function} partialState Next partial state or function to
 *        produce next partial state to be merged with current state.
 * @param {?function} callback Called after state is updated.
 * @final
 * @protected
 */

Component.prototype.setState = function (partialState, callback) {
  if (!(typeof partialState === 'object' || typeof partialState === 'function' || partialState == null)) {
    {
      throw Error( "setState(...): takes an object of state variables to update or a function which returns an object of state variables." );
    }
  }

  this.updater.enqueueSetState(this, partialState, callback, 'setState');
};
/**
 * Forces an update. This should only be invoked when it is known with
 * certainty that we are **not** in a DOM transaction.
 *
 * You may want to call this when you know that some deeper aspect of the
 * component's state has changed but `setState` was not called.
 *
 * This will not invoke `shouldComponentUpdate`, but it will invoke
 * `componentWillUpdate` and `componentDidUpdate`.
 *
 * @param {?function} callback Called after update is complete.
 * @final
 * @protected
 */


Component.prototype.forceUpdate = function (callback) {
  this.updater.enqueueForceUpdate(this, callback, 'forceUpdate');
};
/**
 * Deprecated APIs. These APIs used to exist on classic React classes but since
 * we would like to deprecate them, we're not going to move them over to this
 * modern base class. Instead, we define a getter that warns if it's accessed.
 */


{
  var deprecatedAPIs = {
    isMounted: ['isMounted', 'Instead, make sure to clean up subscriptions and pending requests in ' + 'componentWillUnmount to prevent memory leaks.'],
    replaceState: ['replaceState', 'Refactor your code to use setState instead (see ' + 'https://github.com/facebook/react/issues/3236).']
  };

  var defineDeprecationWarning = function (methodName, info) {
    Object.defineProperty(Component.prototype, methodName, {
      get: function () {
        warn('%s(...) is deprecated in plain JavaScript React classes. %s', info[0], info[1]);

        return undefined;
      }
    });
  };

  for (var fnName in deprecatedAPIs) {
    if (deprecatedAPIs.hasOwnProperty(fnName)) {
      defineDeprecationWarning(fnName, deprecatedAPIs[fnName]);
    }
  }
}

function ComponentDummy() {}

ComponentDummy.prototype = Component.prototype;
/**
 * Convenience component with default shallow equality check for sCU.
 */

function PureComponent(props, context, updater) {
  this.props = props;
  this.context = context; // If a component has string refs, we will assign a different object later.

  this.refs = emptyObject;
  this.updater = updater || ReactNoopUpdateQueue;
}

var pureComponentPrototype = PureComponent.prototype = new ComponentDummy();
pureComponentPrototype.constructor = PureComponent; // Avoid an extra prototype jump for these methods.

_assign(pureComponentPrototype, Component.prototype);

pureComponentPrototype.isPureReactComponent = true;

// an immutable object with a single mutable value
function createRef() {
  var refObject = {
    current: null
  };

  {
    Object.seal(refObject);
  }

  return refObject;
}

var hasOwnProperty = Object.prototype.hasOwnProperty;
var RESERVED_PROPS = {
  key: true,
  ref: true,
  __self: true,
  __source: true
};
var specialPropKeyWarningShown, specialPropRefWarningShown, didWarnAboutStringRefs;

{
  didWarnAboutStringRefs = {};
}

function hasValidRef(config) {
  {
    if (hasOwnProperty.call(config, 'ref')) {
      var getter = Object.getOwnPropertyDescriptor(config, 'ref').get;

      if (getter && getter.isReactWarning) {
        return false;
      }
    }
  }

  return config.ref !== undefined;
}

function hasValidKey(config) {
  {
    if (hasOwnProperty.call(config, 'key')) {
      var getter = Object.getOwnPropertyDescriptor(config, 'key').get;

      if (getter && getter.isReactWarning) {
        return false;
      }
    }
  }

  return config.key !== undefined;
}

function defineKeyPropWarningGetter(props, displayName) {
  var warnAboutAccessingKey = function () {
    {
      if (!specialPropKeyWarningShown) {
        specialPropKeyWarningShown = true;

        error('%s: `key` is not a prop. Trying to access it will result ' + 'in `undefined` being returned. If you need to access the same ' + 'value within the child component, you should pass it as a different ' + 'prop. (https://fb.me/react-special-props)', displayName);
      }
    }
  };

  warnAboutAccessingKey.isReactWarning = true;
  Object.defineProperty(props, 'key', {
    get: warnAboutAccessingKey,
    configurable: true
  });
}

function defineRefPropWarningGetter(props, displayName) {
  var warnAboutAccessingRef = function () {
    {
      if (!specialPropRefWarningShown) {
        specialPropRefWarningShown = true;

        error('%s: `ref` is not a prop. Trying to access it will result ' + 'in `undefined` being returned. If you need to access the same ' + 'value within the child component, you should pass it as a different ' + 'prop. (https://fb.me/react-special-props)', displayName);
      }
    }
  };

  warnAboutAccessingRef.isReactWarning = true;
  Object.defineProperty(props, 'ref', {
    get: warnAboutAccessingRef,
    configurable: true
  });
}

function warnIfStringRefCannotBeAutoConverted(config) {
  {
    if (typeof config.ref === 'string' && ReactCurrentOwner.current && config.__self && ReactCurrentOwner.current.stateNode !== config.__self) {
      var componentName = getComponentName(ReactCurrentOwner.current.type);

      if (!didWarnAboutStringRefs[componentName]) {
        error('Component "%s" contains the string ref "%s". ' + 'Support for string refs will be removed in a future major release. ' + 'This case cannot be automatically converted to an arrow function. ' + 'We ask you to manually fix this case by using useRef() or createRef() instead. ' + 'Learn more about using refs safely here: ' + 'https://fb.me/react-strict-mode-string-ref', getComponentName(ReactCurrentOwner.current.type), config.ref);

        didWarnAboutStringRefs[componentName] = true;
      }
    }
  }
}
/**
 * Factory method to create a new React element. This no longer adheres to
 * the class pattern, so do not use new to call it. Also, instanceof check
 * will not work. Instead test $$typeof field against Symbol.for('react.element') to check
 * if something is a React Element.
 *
 * @param {*} type
 * @param {*} props
 * @param {*} key
 * @param {string|object} ref
 * @param {*} owner
 * @param {*} self A *temporary* helper to detect places where `this` is
 * different from the `owner` when React.createElement is called, so that we
 * can warn. We want to get rid of owner and replace string `ref`s with arrow
 * functions, and as long as `this` and owner are the same, there will be no
 * change in behavior.
 * @param {*} source An annotation object (added by a transpiler or otherwise)
 * indicating filename, line number, and/or other information.
 * @internal
 */


var ReactElement = function (type, key, ref, self, source, owner, props) {
  var element = {
    // This tag allows us to uniquely identify this as a React Element
    $$typeof: REACT_ELEMENT_TYPE,
    // Built-in properties that belong on the element
    type: type,
    key: key,
    ref: ref,
    props: props,
    // Record the component responsible for creating this element.
    _owner: owner
  };

  {
    // The validation flag is currently mutative. We put it on
    // an external backing store so that we can freeze the whole object.
    // This can be replaced with a WeakMap once they are implemented in
    // commonly used development environments.
    element._store = {}; // To make comparing ReactElements easier for testing purposes, we make
    // the validation flag non-enumerable (where possible, which should
    // include every environment we run tests in), so the test framework
    // ignores it.

    Object.defineProperty(element._store, 'validated', {
      configurable: false,
      enumerable: false,
      writable: true,
      value: false
    }); // self and source are DEV only properties.

    Object.defineProperty(element, '_self', {
      configurable: false,
      enumerable: false,
      writable: false,
      value: self
    }); // Two elements created in two different places should be considered
    // equal for testing purposes and therefore we hide it from enumeration.

    Object.defineProperty(element, '_source', {
      configurable: false,
      enumerable: false,
      writable: false,
      value: source
    });

    if (Object.freeze) {
      Object.freeze(element.props);
      Object.freeze(element);
    }
  }

  return element;
};
/**
 * Create and return a new ReactElement of the given type.
 * See https://reactjs.org/docs/react-api.html#createelement
 */

function createElement(type, config, children) {
  var propName; // Reserved names are extracted

  var props = {};
  var key = null;
  var ref = null;
  var self = null;
  var source = null;

  if (config != null) {
    if (hasValidRef(config)) {
      ref = config.ref;

      {
        warnIfStringRefCannotBeAutoConverted(config);
      }
    }

    if (hasValidKey(config)) {
      key = '' + config.key;
    }

    self = config.__self === undefined ? null : config.__self;
    source = config.__source === undefined ? null : config.__source; // Remaining properties are added to a new props object

    for (propName in config) {
      if (hasOwnProperty.call(config, propName) && !RESERVED_PROPS.hasOwnProperty(propName)) {
        props[propName] = config[propName];
      }
    }
  } // Children can be more than one argument, and those are transferred onto
  // the newly allocated props object.


  var childrenLength = arguments.length - 2;

  if (childrenLength === 1) {
    props.children = children;
  } else if (childrenLength > 1) {
    var childArray = Array(childrenLength);

    for (var i = 0; i < childrenLength; i++) {
      childArray[i] = arguments[i + 2];
    }

    {
      if (Object.freeze) {
        Object.freeze(childArray);
      }
    }

    props.children = childArray;
  } // Resolve default props


  if (type && type.defaultProps) {
    var defaultProps = type.defaultProps;

    for (propName in defaultProps) {
      if (props[propName] === undefined) {
        props[propName] = defaultProps[propName];
      }
    }
  }

  {
    if (key || ref) {
      var displayName = typeof type === 'function' ? type.displayName || type.name || 'Unknown' : type;

      if (key) {
        defineKeyPropWarningGetter(props, displayName);
      }

      if (ref) {
        defineRefPropWarningGetter(props, displayName);
      }
    }
  }

  return ReactElement(type, key, ref, self, source, ReactCurrentOwner.current, props);
}
function cloneAndReplaceKey(oldElement, newKey) {
  var newElement = ReactElement(oldElement.type, newKey, oldElement.ref, oldElement._self, oldElement._source, oldElement._owner, oldElement.props);
  return newElement;
}
/**
 * Clone and return a new ReactElement using element as the starting point.
 * See https://reactjs.org/docs/react-api.html#cloneelement
 */

function cloneElement(element, config, children) {
  if (!!(element === null || element === undefined)) {
    {
      throw Error( "React.cloneElement(...): The argument must be a React element, but you passed " + element + "." );
    }
  }

  var propName; // Original props are copied

  var props = _assign({}, element.props); // Reserved names are extracted


  var key = element.key;
  var ref = element.ref; // Self is preserved since the owner is preserved.

  var self = element._self; // Source is preserved since cloneElement is unlikely to be targeted by a
  // transpiler, and the original source is probably a better indicator of the
  // true owner.

  var source = element._source; // Owner will be preserved, unless ref is overridden

  var owner = element._owner;

  if (config != null) {
    if (hasValidRef(config)) {
      // Silently steal the ref from the parent.
      ref = config.ref;
      owner = ReactCurrentOwner.current;
    }

    if (hasValidKey(config)) {
      key = '' + config.key;
    } // Remaining properties override existing props


    var defaultProps;

    if (element.type && element.type.defaultProps) {
      defaultProps = element.type.defaultProps;
    }

    for (propName in config) {
      if (hasOwnProperty.call(config, propName) && !RESERVED_PROPS.hasOwnProperty(propName)) {
        if (config[propName] === undefined && defaultProps !== undefined) {
          // Resolve default props
          props[propName] = defaultProps[propName];
        } else {
          props[propName] = config[propName];
        }
      }
    }
  } // Children can be more than one argument, and those are transferred onto
  // the newly allocated props object.


  var childrenLength = arguments.length - 2;

  if (childrenLength === 1) {
    props.children = children;
  } else if (childrenLength > 1) {
    var childArray = Array(childrenLength);

    for (var i = 0; i < childrenLength; i++) {
      childArray[i] = arguments[i + 2];
    }

    props.children = childArray;
  }

  return ReactElement(element.type, key, ref, self, source, owner, props);
}
/**
 * Verifies the object is a ReactElement.
 * See https://reactjs.org/docs/react-api.html#isvalidelement
 * @param {?object} object
 * @return {boolean} True if `object` is a ReactElement.
 * @final
 */

function isValidElement(object) {
  return typeof object === 'object' && object !== null && object.$$typeof === REACT_ELEMENT_TYPE;
}

var SEPARATOR = '.';
var SUBSEPARATOR = ':';
/**
 * Escape and wrap key so it is safe to use as a reactid
 *
 * @param {string} key to be escaped.
 * @return {string} the escaped key.
 */

function escape(key) {
  var escapeRegex = /[=:]/g;
  var escaperLookup = {
    '=': '=0',
    ':': '=2'
  };
  var escapedString = ('' + key).replace(escapeRegex, function (match) {
    return escaperLookup[match];
  });
  return '$' + escapedString;
}
/**
 * TODO: Test that a single child and an array with one item have the same key
 * pattern.
 */


var didWarnAboutMaps = false;
var userProvidedKeyEscapeRegex = /\/+/g;

function escapeUserProvidedKey(text) {
  return ('' + text).replace(userProvidedKeyEscapeRegex, '$&/');
}

var POOL_SIZE = 10;
var traverseContextPool = [];

function getPooledTraverseContext(mapResult, keyPrefix, mapFunction, mapContext) {
  if (traverseContextPool.length) {
    var traverseContext = traverseContextPool.pop();
    traverseContext.result = mapResult;
    traverseContext.keyPrefix = keyPrefix;
    traverseContext.func = mapFunction;
    traverseContext.context = mapContext;
    traverseContext.count = 0;
    return traverseContext;
  } else {
    return {
      result: mapResult,
      keyPrefix: keyPrefix,
      func: mapFunction,
      context: mapContext,
      count: 0
    };
  }
}

function releaseTraverseContext(traverseContext) {
  traverseContext.result = null;
  traverseContext.keyPrefix = null;
  traverseContext.func = null;
  traverseContext.context = null;
  traverseContext.count = 0;

  if (traverseContextPool.length < POOL_SIZE) {
    traverseContextPool.push(traverseContext);
  }
}
/**
 * @param {?*} children Children tree container.
 * @param {!string} nameSoFar Name of the key path so far.
 * @param {!function} callback Callback to invoke with each child found.
 * @param {?*} traverseContext Used to pass information throughout the traversal
 * process.
 * @return {!number} The number of children in this subtree.
 */


function traverseAllChildrenImpl(children, nameSoFar, callback, traverseContext) {
  var type = typeof children;

  if (type === 'undefined' || type === 'boolean') {
    // All of the above are perceived as null.
    children = null;
  }

  var invokeCallback = false;

  if (children === null) {
    invokeCallback = true;
  } else {
    switch (type) {
      case 'string':
      case 'number':
        invokeCallback = true;
        break;

      case 'object':
        switch (children.$$typeof) {
          case REACT_ELEMENT_TYPE:
          case REACT_PORTAL_TYPE:
            invokeCallback = true;
        }

    }
  }

  if (invokeCallback) {
    callback(traverseContext, children, // If it's the only child, treat the name as if it was wrapped in an array
    // so that it's consistent if the number of children grows.
    nameSoFar === '' ? SEPARATOR + getComponentKey(children, 0) : nameSoFar);
    return 1;
  }

  var child;
  var nextName;
  var subtreeCount = 0; // Count of children found in the current subtree.

  var nextNamePrefix = nameSoFar === '' ? SEPARATOR : nameSoFar + SUBSEPARATOR;

  if (Array.isArray(children)) {
    for (var i = 0; i < children.length; i++) {
      child = children[i];
      nextName = nextNamePrefix + getComponentKey(child, i);
      subtreeCount += traverseAllChildrenImpl(child, nextName, callback, traverseContext);
    }
  } else {
    var iteratorFn = getIteratorFn(children);

    if (typeof iteratorFn === 'function') {

      {
        // Warn about using Maps as children
        if (iteratorFn === children.entries) {
          if (!didWarnAboutMaps) {
            warn('Using Maps as children is deprecated and will be removed in ' + 'a future major release. Consider converting children to ' + 'an array of keyed ReactElements instead.');
          }

          didWarnAboutMaps = true;
        }
      }

      var iterator = iteratorFn.call(children);
      var step;
      var ii = 0;

      while (!(step = iterator.next()).done) {
        child = step.value;
        nextName = nextNamePrefix + getComponentKey(child, ii++);
        subtreeCount += traverseAllChildrenImpl(child, nextName, callback, traverseContext);
      }
    } else if (type === 'object') {
      var addendum = '';

      {
        addendum = ' If you meant to render a collection of children, use an array ' + 'instead.' + ReactDebugCurrentFrame.getStackAddendum();
      }

      var childrenString = '' + children;

      {
        {
          throw Error( "Objects are not valid as a React child (found: " + (childrenString === '[object Object]' ? 'object with keys {' + Object.keys(children).join(', ') + '}' : childrenString) + ")." + addendum );
        }
      }
    }
  }

  return subtreeCount;
}
/**
 * Traverses children that are typically specified as `props.children`, but
 * might also be specified through attributes:
 *
 * - `traverseAllChildren(this.props.children, ...)`
 * - `traverseAllChildren(this.props.leftPanelChildren, ...)`
 *
 * The `traverseContext` is an optional argument that is passed through the
 * entire traversal. It can be used to store accumulations or anything else that
 * the callback might find relevant.
 *
 * @param {?*} children Children tree object.
 * @param {!function} callback To invoke upon traversing each child.
 * @param {?*} traverseContext Context for traversal.
 * @return {!number} The number of children in this subtree.
 */


function traverseAllChildren(children, callback, traverseContext) {
  if (children == null) {
    return 0;
  }

  return traverseAllChildrenImpl(children, '', callback, traverseContext);
}
/**
 * Generate a key string that identifies a component within a set.
 *
 * @param {*} component A component that could contain a manual key.
 * @param {number} index Index that is used if a manual key is not provided.
 * @return {string}
 */


function getComponentKey(component, index) {
  // Do some typechecking here since we call this blindly. We want to ensure
  // that we don't block potential future ES APIs.
  if (typeof component === 'object' && component !== null && component.key != null) {
    // Explicit key
    return escape(component.key);
  } // Implicit key determined by the index in the set


  return index.toString(36);
}

function forEachSingleChild(bookKeeping, child, name) {
  var func = bookKeeping.func,
      context = bookKeeping.context;
  func.call(context, child, bookKeeping.count++);
}
/**
 * Iterates through children that are typically specified as `props.children`.
 *
 * See https://reactjs.org/docs/react-api.html#reactchildrenforeach
 *
 * The provided forEachFunc(child, index) will be called for each
 * leaf child.
 *
 * @param {?*} children Children tree container.
 * @param {function(*, int)} forEachFunc
 * @param {*} forEachContext Context for forEachContext.
 */


function forEachChildren(children, forEachFunc, forEachContext) {
  if (children == null) {
    return children;
  }

  var traverseContext = getPooledTraverseContext(null, null, forEachFunc, forEachContext);
  traverseAllChildren(children, forEachSingleChild, traverseContext);
  releaseTraverseContext(traverseContext);
}

function mapSingleChildIntoContext(bookKeeping, child, childKey) {
  var result = bookKeeping.result,
      keyPrefix = bookKeeping.keyPrefix,
      func = bookKeeping.func,
      context = bookKeeping.context;
  var mappedChild = func.call(context, child, bookKeeping.count++);

  if (Array.isArray(mappedChild)) {
    mapIntoWithKeyPrefixInternal(mappedChild, result, childKey, function (c) {
      return c;
    });
  } else if (mappedChild != null) {
    if (isValidElement(mappedChild)) {
      mappedChild = cloneAndReplaceKey(mappedChild, // Keep both the (mapped) and old keys if they differ, just as
      // traverseAllChildren used to do for objects as children
      keyPrefix + (mappedChild.key && (!child || child.key !== mappedChild.key) ? escapeUserProvidedKey(mappedChild.key) + '/' : '') + childKey);
    }

    result.push(mappedChild);
  }
}

function mapIntoWithKeyPrefixInternal(children, array, prefix, func, context) {
  var escapedPrefix = '';

  if (prefix != null) {
    escapedPrefix = escapeUserProvidedKey(prefix) + '/';
  }

  var traverseContext = getPooledTraverseContext(array, escapedPrefix, func, context);
  traverseAllChildren(children, mapSingleChildIntoContext, traverseContext);
  releaseTraverseContext(traverseContext);
}
/**
 * Maps children that are typically specified as `props.children`.
 *
 * See https://reactjs.org/docs/react-api.html#reactchildrenmap
 *
 * The provided mapFunction(child, key, index) will be called for each
 * leaf child.
 *
 * @param {?*} children Children tree container.
 * @param {function(*, int)} func The map function.
 * @param {*} context Context for mapFunction.
 * @return {object} Object containing the ordered map of results.
 */


function mapChildren(children, func, context) {
  if (children == null) {
    return children;
  }

  var result = [];
  mapIntoWithKeyPrefixInternal(children, result, null, func, context);
  return result;
}
/**
 * Count the number of children that are typically specified as
 * `props.children`.
 *
 * See https://reactjs.org/docs/react-api.html#reactchildrencount
 *
 * @param {?*} children Children tree container.
 * @return {number} The number of children.
 */


function countChildren(children) {
  return traverseAllChildren(children, function () {
    return null;
  }, null);
}
/**
 * Flatten a children object (typically specified as `props.children`) and
 * return an array with appropriately re-keyed children.
 *
 * See https://reactjs.org/docs/react-api.html#reactchildrentoarray
 */


function toArray(children) {
  var result = [];
  mapIntoWithKeyPrefixInternal(children, result, null, function (child) {
    return child;
  });
  return result;
}
/**
 * Returns the first child in a collection of children and verifies that there
 * is only one child in the collection.
 *
 * See https://reactjs.org/docs/react-api.html#reactchildrenonly
 *
 * The current implementation of this function assumes that a single child gets
 * passed without a wrapper, but the purpose of this helper function is to
 * abstract away the particular structure of children.
 *
 * @param {?object} children Child collection structure.
 * @return {ReactElement} The first and only `ReactElement` contained in the
 * structure.
 */


function onlyChild(children) {
  if (!isValidElement(children)) {
    {
      throw Error( "React.Children.only expected to receive a single React element child." );
    }
  }

  return children;
}

function createContext(defaultValue, calculateChangedBits) {
  if (calculateChangedBits === undefined) {
    calculateChangedBits = null;
  } else {
    {
      if (calculateChangedBits !== null && typeof calculateChangedBits !== 'function') {
        error('createContext: Expected the optional second argument to be a ' + 'function. Instead received: %s', calculateChangedBits);
      }
    }
  }

  var context = {
    $$typeof: REACT_CONTEXT_TYPE,
    _calculateChangedBits: calculateChangedBits,
    // As a workaround to support multiple concurrent renderers, we categorize
    // some renderers as primary and others as secondary. We only expect
    // there to be two concurrent renderers at most: React Native (primary) and
    // Fabric (secondary); React DOM (primary) and React ART (secondary).
    // Secondary renderers store their context values on separate fields.
    _currentValue: defaultValue,
    _currentValue2: defaultValue,
    // Used to track how many concurrent renderers this context currently
    // supports within in a single renderer. Such as parallel server rendering.
    _threadCount: 0,
    // These are circular
    Provider: null,
    Consumer: null
  };
  context.Provider = {
    $$typeof: REACT_PROVIDER_TYPE,
    _context: context
  };
  var hasWarnedAboutUsingNestedContextConsumers = false;
  var hasWarnedAboutUsingConsumerProvider = false;

  {
    // A separate object, but proxies back to the original context object for
    // backwards compatibility. It has a different $$typeof, so we can properly
    // warn for the incorrect usage of Context as a Consumer.
    var Consumer = {
      $$typeof: REACT_CONTEXT_TYPE,
      _context: context,
      _calculateChangedBits: context._calculateChangedBits
    }; // $FlowFixMe: Flow complains about not setting a value, which is intentional here

    Object.defineProperties(Consumer, {
      Provider: {
        get: function () {
          if (!hasWarnedAboutUsingConsumerProvider) {
            hasWarnedAboutUsingConsumerProvider = true;

            error('Rendering <Context.Consumer.Provider> is not supported and will be removed in ' + 'a future major release. Did you mean to render <Context.Provider> instead?');
          }

          return context.Provider;
        },
        set: function (_Provider) {
          context.Provider = _Provider;
        }
      },
      _currentValue: {
        get: function () {
          return context._currentValue;
        },
        set: function (_currentValue) {
          context._currentValue = _currentValue;
        }
      },
      _currentValue2: {
        get: function () {
          return context._currentValue2;
        },
        set: function (_currentValue2) {
          context._currentValue2 = _currentValue2;
        }
      },
      _threadCount: {
        get: function () {
          return context._threadCount;
        },
        set: function (_threadCount) {
          context._threadCount = _threadCount;
        }
      },
      Consumer: {
        get: function () {
          if (!hasWarnedAboutUsingNestedContextConsumers) {
            hasWarnedAboutUsingNestedContextConsumers = true;

            error('Rendering <Context.Consumer.Consumer> is not supported and will be removed in ' + 'a future major release. Did you mean to render <Context.Consumer> instead?');
          }

          return context.Consumer;
        }
      }
    }); // $FlowFixMe: Flow complains about missing properties because it doesn't understand defineProperty

    context.Consumer = Consumer;
  }

  {
    context._currentRenderer = null;
    context._currentRenderer2 = null;
  }

  return context;
}

function lazy(ctor) {
  var lazyType = {
    $$typeof: REACT_LAZY_TYPE,
    _ctor: ctor,
    // React uses these fields to store the result.
    _status: -1,
    _result: null
  };

  {
    // In production, this would just set it on the object.
    var defaultProps;
    var propTypes;
    Object.defineProperties(lazyType, {
      defaultProps: {
        configurable: true,
        get: function () {
          return defaultProps;
        },
        set: function (newDefaultProps) {
          error('React.lazy(...): It is not supported to assign `defaultProps` to ' + 'a lazy component import. Either specify them where the component ' + 'is defined, or create a wrapping component around it.');

          defaultProps = newDefaultProps; // Match production behavior more closely:

          Object.defineProperty(lazyType, 'defaultProps', {
            enumerable: true
          });
        }
      },
      propTypes: {
        configurable: true,
        get: function () {
          return propTypes;
        },
        set: function (newPropTypes) {
          error('React.lazy(...): It is not supported to assign `propTypes` to ' + 'a lazy component import. Either specify them where the component ' + 'is defined, or create a wrapping component around it.');

          propTypes = newPropTypes; // Match production behavior more closely:

          Object.defineProperty(lazyType, 'propTypes', {
            enumerable: true
          });
        }
      }
    });
  }

  return lazyType;
}

function forwardRef(render) {
  {
    if (render != null && render.$$typeof === REACT_MEMO_TYPE) {
      error('forwardRef requires a render function but received a `memo` ' + 'component. Instead of forwardRef(memo(...)), use ' + 'memo(forwardRef(...)).');
    } else if (typeof render !== 'function') {
      error('forwardRef requires a render function but was given %s.', render === null ? 'null' : typeof render);
    } else {
      if (render.length !== 0 && render.length !== 2) {
        error('forwardRef render functions accept exactly two parameters: props and ref. %s', render.length === 1 ? 'Did you forget to use the ref parameter?' : 'Any additional parameter will be undefined.');
      }
    }

    if (render != null) {
      if (render.defaultProps != null || render.propTypes != null) {
        error('forwardRef render functions do not support propTypes or defaultProps. ' + 'Did you accidentally pass a React component?');
      }
    }
  }

  return {
    $$typeof: REACT_FORWARD_REF_TYPE,
    render: render
  };
}

function isValidElementType(type) {
  return typeof type === 'string' || typeof type === 'function' || // Note: its typeof might be other than 'symbol' or 'number' if it's a polyfill.
  type === REACT_FRAGMENT_TYPE || type === REACT_CONCURRENT_MODE_TYPE || type === REACT_PROFILER_TYPE || type === REACT_STRICT_MODE_TYPE || type === REACT_SUSPENSE_TYPE || type === REACT_SUSPENSE_LIST_TYPE || typeof type === 'object' && type !== null && (type.$$typeof === REACT_LAZY_TYPE || type.$$typeof === REACT_MEMO_TYPE || type.$$typeof === REACT_PROVIDER_TYPE || type.$$typeof === REACT_CONTEXT_TYPE || type.$$typeof === REACT_FORWARD_REF_TYPE || type.$$typeof === REACT_FUNDAMENTAL_TYPE || type.$$typeof === REACT_RESPONDER_TYPE || type.$$typeof === REACT_SCOPE_TYPE || type.$$typeof === REACT_BLOCK_TYPE);
}

function memo(type, compare) {
  {
    if (!isValidElementType(type)) {
      error('memo: The first argument must be a component. Instead ' + 'received: %s', type === null ? 'null' : typeof type);
    }
  }

  return {
    $$typeof: REACT_MEMO_TYPE,
    type: type,
    compare: compare === undefined ? null : compare
  };
}

function resolveDispatcher() {
  var dispatcher = ReactCurrentDispatcher.current;

  if (!(dispatcher !== null)) {
    {
      throw Error( "Invalid hook call. Hooks can only be called inside of the body of a function component. This could happen for one of the following reasons:\n1. You might have mismatching versions of React and the renderer (such as React DOM)\n2. You might be breaking the Rules of Hooks\n3. You might have more than one copy of React in the same app\nSee https://fb.me/react-invalid-hook-call for tips about how to debug and fix this problem." );
    }
  }

  return dispatcher;
}

function useContext(Context, unstable_observedBits) {
  var dispatcher = resolveDispatcher();

  {
    if (unstable_observedBits !== undefined) {
      error('useContext() second argument is reserved for future ' + 'use in React. Passing it is not supported. ' + 'You passed: %s.%s', unstable_observedBits, typeof unstable_observedBits === 'number' && Array.isArray(arguments[2]) ? '\n\nDid you call array.map(useContext)? ' + 'Calling Hooks inside a loop is not supported. ' + 'Learn more at https://fb.me/rules-of-hooks' : '');
    } // TODO: add a more generic warning for invalid values.


    if (Context._context !== undefined) {
      var realContext = Context._context; // Don't deduplicate because this legitimately causes bugs
      // and nobody should be using this in existing code.

      if (realContext.Consumer === Context) {
        error('Calling useContext(Context.Consumer) is not supported, may cause bugs, and will be ' + 'removed in a future major release. Did you mean to call useContext(Context) instead?');
      } else if (realContext.Provider === Context) {
        error('Calling useContext(Context.Provider) is not supported. ' + 'Did you mean to call useContext(Context) instead?');
      }
    }
  }

  return dispatcher.useContext(Context, unstable_observedBits);
}
function useState(initialState) {
  var dispatcher = resolveDispatcher();
  return dispatcher.useState(initialState);
}
function useReducer(reducer, initialArg, init) {
  var dispatcher = resolveDispatcher();
  return dispatcher.useReducer(reducer, initialArg, init);
}
function useRef(initialValue) {
  var dispatcher = resolveDispatcher();
  return dispatcher.useRef(initialValue);
}
function useEffect(create, deps) {
  var dispatcher = resolveDispatcher();
  return dispatcher.useEffect(create, deps);
}
function useLayoutEffect(create, deps) {
  var dispatcher = resolveDispatcher();
  return dispatcher.useLayoutEffect(create, deps);
}
function useCallback(callback, deps) {
  var dispatcher = resolveDispatcher();
  return dispatcher.useCallback(callback, deps);
}
function useMemo(create, deps) {
  var dispatcher = resolveDispatcher();
  return dispatcher.useMemo(create, deps);
}
function useImperativeHandle(ref, create, deps) {
  var dispatcher = resolveDispatcher();
  return dispatcher.useImperativeHandle(ref, create, deps);
}
function useDebugValue(value, formatterFn) {
  {
    var dispatcher = resolveDispatcher();
    return dispatcher.useDebugValue(value, formatterFn);
  }
}

var propTypesMisspellWarningShown;

{
  propTypesMisspellWarningShown = false;
}

function getDeclarationErrorAddendum() {
  if (ReactCurrentOwner.current) {
    var name = getComponentName(ReactCurrentOwner.current.type);

    if (name) {
      return '\n\nCheck the render method of `' + name + '`.';
    }
  }

  return '';
}

function getSourceInfoErrorAddendum(source) {
  if (source !== undefined) {
    var fileName = source.fileName.replace(/^.*[\\\/]/, '');
    var lineNumber = source.lineNumber;
    return '\n\nCheck your code at ' + fileName + ':' + lineNumber + '.';
  }

  return '';
}

function getSourceInfoErrorAddendumForProps(elementProps) {
  if (elementProps !== null && elementProps !== undefined) {
    return getSourceInfoErrorAddendum(elementProps.__source);
  }

  return '';
}
/**
 * Warn if there's no key explicitly set on dynamic arrays of children or
 * object keys are not valid. This allows us to keep track of children between
 * updates.
 */


var ownerHasKeyUseWarning = {};

function getCurrentComponentErrorInfo(parentType) {
  var info = getDeclarationErrorAddendum();

  if (!info) {
    var parentName = typeof parentType === 'string' ? parentType : parentType.displayName || parentType.name;

    if (parentName) {
      info = "\n\nCheck the top-level render call using <" + parentName + ">.";
    }
  }

  return info;
}
/**
 * Warn if the element doesn't have an explicit key assigned to it.
 * This element is in an array. The array could grow and shrink or be
 * reordered. All children that haven't already been validated are required to
 * have a "key" property assigned to it. Error statuses are cached so a warning
 * will only be shown once.
 *
 * @internal
 * @param {ReactElement} element Element that requires a key.
 * @param {*} parentType element's parent's type.
 */


function validateExplicitKey(element, parentType) {
  if (!element._store || element._store.validated || element.key != null) {
    return;
  }

  element._store.validated = true;
  var currentComponentErrorInfo = getCurrentComponentErrorInfo(parentType);

  if (ownerHasKeyUseWarning[currentComponentErrorInfo]) {
    return;
  }

  ownerHasKeyUseWarning[currentComponentErrorInfo] = true; // Usually the current owner is the offender, but if it accepts children as a
  // property, it may be the creator of the child that's responsible for
  // assigning it a key.

  var childOwner = '';

  if (element && element._owner && element._owner !== ReactCurrentOwner.current) {
    // Give the component that originally created this child.
    childOwner = " It was passed a child from " + getComponentName(element._owner.type) + ".";
  }

  setCurrentlyValidatingElement(element);

  {
    error('Each child in a list should have a unique "key" prop.' + '%s%s See https://fb.me/react-warning-keys for more information.', currentComponentErrorInfo, childOwner);
  }

  setCurrentlyValidatingElement(null);
}
/**
 * Ensure that every element either is passed in a static location, in an
 * array with an explicit keys property defined, or in an object literal
 * with valid key property.
 *
 * @internal
 * @param {ReactNode} node Statically passed child of any type.
 * @param {*} parentType node's parent's type.
 */


function validateChildKeys(node, parentType) {
  if (typeof node !== 'object') {
    return;
  }

  if (Array.isArray(node)) {
    for (var i = 0; i < node.length; i++) {
      var child = node[i];

      if (isValidElement(child)) {
        validateExplicitKey(child, parentType);
      }
    }
  } else if (isValidElement(node)) {
    // This element was passed in a valid location.
    if (node._store) {
      node._store.validated = true;
    }
  } else if (node) {
    var iteratorFn = getIteratorFn(node);

    if (typeof iteratorFn === 'function') {
      // Entry iterators used to provide implicit keys,
      // but now we print a separate warning for them later.
      if (iteratorFn !== node.entries) {
        var iterator = iteratorFn.call(node);
        var step;

        while (!(step = iterator.next()).done) {
          if (isValidElement(step.value)) {
            validateExplicitKey(step.value, parentType);
          }
        }
      }
    }
  }
}
/**
 * Given an element, validate that its props follow the propTypes definition,
 * provided by the type.
 *
 * @param {ReactElement} element
 */


function validatePropTypes(element) {
  {
    var type = element.type;

    if (type === null || type === undefined || typeof type === 'string') {
      return;
    }

    var name = getComponentName(type);
    var propTypes;

    if (typeof type === 'function') {
      propTypes = type.propTypes;
    } else if (typeof type === 'object' && (type.$$typeof === REACT_FORWARD_REF_TYPE || // Note: Memo only checks outer props here.
    // Inner props are checked in the reconciler.
    type.$$typeof === REACT_MEMO_TYPE)) {
      propTypes = type.propTypes;
    } else {
      return;
    }

    if (propTypes) {
      setCurrentlyValidatingElement(element);
      checkPropTypes(propTypes, element.props, 'prop', name, ReactDebugCurrentFrame.getStackAddendum);
      setCurrentlyValidatingElement(null);
    } else if (type.PropTypes !== undefined && !propTypesMisspellWarningShown) {
      propTypesMisspellWarningShown = true;

      error('Component %s declared `PropTypes` instead of `propTypes`. Did you misspell the property assignment?', name || 'Unknown');
    }

    if (typeof type.getDefaultProps === 'function' && !type.getDefaultProps.isReactClassApproved) {
      error('getDefaultProps is only used on classic React.createClass ' + 'definitions. Use a static property named `defaultProps` instead.');
    }
  }
}
/**
 * Given a fragment, validate that it can only be provided with fragment props
 * @param {ReactElement} fragment
 */


function validateFragmentProps(fragment) {
  {
    setCurrentlyValidatingElement(fragment);
    var keys = Object.keys(fragment.props);

    for (var i = 0; i < keys.length; i++) {
      var key = keys[i];

      if (key !== 'children' && key !== 'key') {
        error('Invalid prop `%s` supplied to `React.Fragment`. ' + 'React.Fragment can only have `key` and `children` props.', key);

        break;
      }
    }

    if (fragment.ref !== null) {
      error('Invalid attribute `ref` supplied to `React.Fragment`.');
    }

    setCurrentlyValidatingElement(null);
  }
}
function createElementWithValidation(type, props, children) {
  var validType = isValidElementType(type); // We warn in this case but don't throw. We expect the element creation to
  // succeed and there will likely be errors in render.

  if (!validType) {
    var info = '';

    if (type === undefined || typeof type === 'object' && type !== null && Object.keys(type).length === 0) {
      info += ' You likely forgot to export your component from the file ' + "it's defined in, or you might have mixed up default and named imports.";
    }

    var sourceInfo = getSourceInfoErrorAddendumForProps(props);

    if (sourceInfo) {
      info += sourceInfo;
    } else {
      info += getDeclarationErrorAddendum();
    }

    var typeString;

    if (type === null) {
      typeString = 'null';
    } else if (Array.isArray(type)) {
      typeString = 'array';
    } else if (type !== undefined && type.$$typeof === REACT_ELEMENT_TYPE) {
      typeString = "<" + (getComponentName(type.type) || 'Unknown') + " />";
      info = ' Did you accidentally export a JSX literal instead of a component?';
    } else {
      typeString = typeof type;
    }

    {
      error('React.createElement: type is invalid -- expected a string (for ' + 'built-in components) or a class/function (for composite ' + 'components) but got: %s.%s', typeString, info);
    }
  }

  var element = createElement.apply(this, arguments); // The result can be nullish if a mock or a custom function is used.
  // TODO: Drop this when these are no longer allowed as the type argument.

  if (element == null) {
    return element;
  } // Skip key warning if the type isn't valid since our key validation logic
  // doesn't expect a non-string/function type and can throw confusing errors.
  // We don't want exception behavior to differ between dev and prod.
  // (Rendering will throw with a helpful message and as soon as the type is
  // fixed, the key warnings will appear.)


  if (validType) {
    for (var i = 2; i < arguments.length; i++) {
      validateChildKeys(arguments[i], type);
    }
  }

  if (type === REACT_FRAGMENT_TYPE) {
    validateFragmentProps(element);
  } else {
    validatePropTypes(element);
  }

  return element;
}
var didWarnAboutDeprecatedCreateFactory = false;
function createFactoryWithValidation(type) {
  var validatedFactory = createElementWithValidation.bind(null, type);
  validatedFactory.type = type;

  {
    if (!didWarnAboutDeprecatedCreateFactory) {
      didWarnAboutDeprecatedCreateFactory = true;

      warn('React.createFactory() is deprecated and will be removed in ' + 'a future major release. Consider using JSX ' + 'or use React.createElement() directly instead.');
    } // Legacy hook: remove it


    Object.defineProperty(validatedFactory, 'type', {
      enumerable: false,
      get: function () {
        warn('Factory.type is deprecated. Access the class directly ' + 'before passing it to createFactory.');

        Object.defineProperty(this, 'type', {
          value: type
        });
        return type;
      }
    });
  }

  return validatedFactory;
}
function cloneElementWithValidation(element, props, children) {
  var newElement = cloneElement.apply(this, arguments);

  for (var i = 2; i < arguments.length; i++) {
    validateChildKeys(arguments[i], newElement.type);
  }

  validatePropTypes(newElement);
  return newElement;
}

{

  try {
    var frozenObject = Object.freeze({});
    var testMap = new Map([[frozenObject, null]]);
    var testSet = new Set([frozenObject]); // This is necessary for Rollup to not consider these unused.
    // https://github.com/rollup/rollup/issues/1771
    // TODO: we can remove these if Rollup fixes the bug.

    testMap.set(0, 0);
    testSet.add(0);
  } catch (e) {
  }
}

var createElement$1 =  createElementWithValidation ;
var cloneElement$1 =  cloneElementWithValidation ;
var createFactory =  createFactoryWithValidation ;
var Children = {
  map: mapChildren,
  forEach: forEachChildren,
  count: countChildren,
  toArray: toArray,
  only: onlyChild
};

exports.Children = Children;
exports.Component = Component;
exports.Fragment = REACT_FRAGMENT_TYPE;
exports.Profiler = REACT_PROFILER_TYPE;
exports.PureComponent = PureComponent;
exports.StrictMode = REACT_STRICT_MODE_TYPE;
exports.Suspense = REACT_SUSPENSE_TYPE;
exports.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED = ReactSharedInternals;
exports.cloneElement = cloneElement$1;
exports.createContext = createContext;
exports.createElement = createElement$1;
exports.createFactory = createFactory;
exports.createRef = createRef;
exports.forwardRef = forwardRef;
exports.isValidElement = isValidElement;
exports.lazy = lazy;
exports.memo = memo;
exports.useCallback = useCallback;
exports.useContext = useContext;
exports.useDebugValue = useDebugValue;
exports.useEffect = useEffect;
exports.useImperativeHandle = useImperativeHandle;
exports.useLayoutEffect = useLayoutEffect;
exports.useMemo = useMemo;
exports.useReducer = useReducer;
exports.useRef = useRef;
exports.useState = useState;
exports.version = ReactVersion;
  })();
}


/***/ }),
/* 51 */
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
/**
 * Copyright (c) 2013-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */



var printWarning = function() {};

if ("MISSING_ENV_VAR".NODE_ENV !== 'production') {
  var ReactPropTypesSecret = __webpack_require__(52);
  var loggedTypeFailures = {};
  var has = Function.call.bind(Object.prototype.hasOwnProperty);

  printWarning = function(text) {
    var message = 'Warning: ' + text;
    if (typeof console !== 'undefined') {
      console.error(message);
    }
    try {
      // --- Welcome to debugging React ---
      // This error was thrown as a convenience so that you can use this stack
      // to find the callsite that caused this warning to fire.
      throw new Error(message);
    } catch (x) {}
  };
}

/**
 * Assert that the values match with the type specs.
 * Error messages are memorized and will only be shown once.
 *
 * @param {object} typeSpecs Map of name to a ReactPropType
 * @param {object} values Runtime values that need to be type-checked
 * @param {string} location e.g. "prop", "context", "child context"
 * @param {string} componentName Name of the component for error messages.
 * @param {?Function} getStack Returns the component stack.
 * @private
 */
function checkPropTypes(typeSpecs, values, location, componentName, getStack) {
  if ("MISSING_ENV_VAR".NODE_ENV !== 'production') {
    for (var typeSpecName in typeSpecs) {
      if (has(typeSpecs, typeSpecName)) {
        var error;
        // Prop type validation may throw. In case they do, we don't want to
        // fail the render phase where it didn't fail before. So we log it.
        // After these have been cleaned up, we'll let them throw.
        try {
          // This is intentionally an invariant that gets caught. It's the same
          // behavior as without this statement except with a better message.
          if (typeof typeSpecs[typeSpecName] !== 'function') {
            var err = Error(
              (componentName || 'React class') + ': ' + location + ' type `' + typeSpecName + '` is invalid; ' +
              'it must be a function, usually from the `prop-types` package, but received `' + typeof typeSpecs[typeSpecName] + '`.'
            );
            err.name = 'Invariant Violation';
            throw err;
          }
          error = typeSpecs[typeSpecName](values, typeSpecName, componentName, location, null, ReactPropTypesSecret);
        } catch (ex) {
          error = ex;
        }
        if (error && !(error instanceof Error)) {
          printWarning(
            (componentName || 'React class') + ': type specification of ' +
            location + ' `' + typeSpecName + '` is invalid; the type checker ' +
            'function must return `null` or an `Error` but returned a ' + typeof error + '. ' +
            'You may have forgotten to pass an argument to the type checker ' +
            'creator (arrayOf, instanceOf, objectOf, oneOf, oneOfType, and ' +
            'shape all require an argument).'
          );
        }
        if (error instanceof Error && !(error.message in loggedTypeFailures)) {
          // Only monitor this failure once because there tends to be a lot of the
          // same error.
          loggedTypeFailures[error.message] = true;

          var stack = getStack ? getStack() : '';

          printWarning(
            'Failed ' + location + ' type: ' + error.message + (stack != null ? stack : '')
          );
        }
      }
    }
  }
}

/**
 * Resets warning cache when testing.
 *
 * @private
 */
checkPropTypes.resetWarningCache = function() {
  if ("MISSING_ENV_VAR".NODE_ENV !== 'production') {
    loggedTypeFailures = {};
  }
}

module.exports = checkPropTypes;


/***/ }),
/* 52 */
/***/ ((module) => {

"use strict";
/**
 * Copyright (c) 2013-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */



var ReactPropTypesSecret = 'SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED';

module.exports = ReactPropTypesSecret;


/***/ }),
/* 53 */
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";


if ("MISSING_ENV_VAR".NODE_ENV === 'production') {
  module.exports = __webpack_require__(54);
} else {
  module.exports = __webpack_require__(55);
}


/***/ }),
/* 54 */
/***/ ((__unused_webpack_module, exports) => {

"use strict";
/** @license React v0.19.1
 * scheduler.production.min.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */

var f,g,h,k,l;
if("undefined"===typeof window||"function"!==typeof MessageChannel){var p=null,q=null,t=function(){if(null!==p)try{var a=exports.unstable_now();p(!0,a);p=null}catch(b){throw setTimeout(t,0),b;}},u=Date.now();exports.unstable_now=function(){return Date.now()-u};f=function(a){null!==p?setTimeout(f,0,a):(p=a,setTimeout(t,0))};g=function(a,b){q=setTimeout(a,b)};h=function(){clearTimeout(q)};k=function(){return!1};l=exports.unstable_forceFrameRate=function(){}}else{var w=window.performance,x=window.Date,
y=window.setTimeout,z=window.clearTimeout;if("undefined"!==typeof console){var A=window.cancelAnimationFrame;"function"!==typeof window.requestAnimationFrame&&console.error("This browser doesn't support requestAnimationFrame. Make sure that you load a polyfill in older browsers. https://fb.me/react-polyfills");"function"!==typeof A&&console.error("This browser doesn't support cancelAnimationFrame. Make sure that you load a polyfill in older browsers. https://fb.me/react-polyfills")}if("object"===
typeof w&&"function"===typeof w.now)exports.unstable_now=function(){return w.now()};else{var B=x.now();exports.unstable_now=function(){return x.now()-B}}var C=!1,D=null,E=-1,F=5,G=0;k=function(){return exports.unstable_now()>=G};l=function(){};exports.unstable_forceFrameRate=function(a){0>a||125<a?console.error("forceFrameRate takes a positive int between 0 and 125, forcing framerates higher than 125 fps is not unsupported"):F=0<a?Math.floor(1E3/a):5};var H=new MessageChannel,I=H.port2;H.port1.onmessage=
function(){if(null!==D){var a=exports.unstable_now();G=a+F;try{D(!0,a)?I.postMessage(null):(C=!1,D=null)}catch(b){throw I.postMessage(null),b;}}else C=!1};f=function(a){D=a;C||(C=!0,I.postMessage(null))};g=function(a,b){E=y(function(){a(exports.unstable_now())},b)};h=function(){z(E);E=-1}}function J(a,b){var c=a.length;a.push(b);a:for(;;){var d=c-1>>>1,e=a[d];if(void 0!==e&&0<K(e,b))a[d]=b,a[c]=e,c=d;else break a}}function L(a){a=a[0];return void 0===a?null:a}
function M(a){var b=a[0];if(void 0!==b){var c=a.pop();if(c!==b){a[0]=c;a:for(var d=0,e=a.length;d<e;){var m=2*(d+1)-1,n=a[m],v=m+1,r=a[v];if(void 0!==n&&0>K(n,c))void 0!==r&&0>K(r,n)?(a[d]=r,a[v]=c,d=v):(a[d]=n,a[m]=c,d=m);else if(void 0!==r&&0>K(r,c))a[d]=r,a[v]=c,d=v;else break a}}return b}return null}function K(a,b){var c=a.sortIndex-b.sortIndex;return 0!==c?c:a.id-b.id}var N=[],O=[],P=1,Q=null,R=3,S=!1,T=!1,U=!1;
function V(a){for(var b=L(O);null!==b;){if(null===b.callback)M(O);else if(b.startTime<=a)M(O),b.sortIndex=b.expirationTime,J(N,b);else break;b=L(O)}}function W(a){U=!1;V(a);if(!T)if(null!==L(N))T=!0,f(X);else{var b=L(O);null!==b&&g(W,b.startTime-a)}}
function X(a,b){T=!1;U&&(U=!1,h());S=!0;var c=R;try{V(b);for(Q=L(N);null!==Q&&(!(Q.expirationTime>b)||a&&!k());){var d=Q.callback;if(null!==d){Q.callback=null;R=Q.priorityLevel;var e=d(Q.expirationTime<=b);b=exports.unstable_now();"function"===typeof e?Q.callback=e:Q===L(N)&&M(N);V(b)}else M(N);Q=L(N)}if(null!==Q)var m=!0;else{var n=L(O);null!==n&&g(W,n.startTime-b);m=!1}return m}finally{Q=null,R=c,S=!1}}
function Y(a){switch(a){case 1:return-1;case 2:return 250;case 5:return 1073741823;case 4:return 1E4;default:return 5E3}}var Z=l;exports.unstable_IdlePriority=5;exports.unstable_ImmediatePriority=1;exports.unstable_LowPriority=4;exports.unstable_NormalPriority=3;exports.unstable_Profiling=null;exports.unstable_UserBlockingPriority=2;exports.unstable_cancelCallback=function(a){a.callback=null};exports.unstable_continueExecution=function(){T||S||(T=!0,f(X))};
exports.unstable_getCurrentPriorityLevel=function(){return R};exports.unstable_getFirstCallbackNode=function(){return L(N)};exports.unstable_next=function(a){switch(R){case 1:case 2:case 3:var b=3;break;default:b=R}var c=R;R=b;try{return a()}finally{R=c}};exports.unstable_pauseExecution=function(){};exports.unstable_requestPaint=Z;exports.unstable_runWithPriority=function(a,b){switch(a){case 1:case 2:case 3:case 4:case 5:break;default:a=3}var c=R;R=a;try{return b()}finally{R=c}};
exports.unstable_scheduleCallback=function(a,b,c){var d=exports.unstable_now();if("object"===typeof c&&null!==c){var e=c.delay;e="number"===typeof e&&0<e?d+e:d;c="number"===typeof c.timeout?c.timeout:Y(a)}else c=Y(a),e=d;c=e+c;a={id:P++,callback:b,priorityLevel:a,startTime:e,expirationTime:c,sortIndex:-1};e>d?(a.sortIndex=e,J(O,a),null===L(N)&&a===L(O)&&(U?h():U=!0,g(W,e-d))):(a.sortIndex=c,J(N,a),T||S||(T=!0,f(X)));return a};
exports.unstable_shouldYield=function(){var a=exports.unstable_now();V(a);var b=L(N);return b!==Q&&null!==Q&&null!==b&&null!==b.callback&&b.startTime<=a&&b.expirationTime<Q.expirationTime||k()};exports.unstable_wrapCallback=function(a){var b=R;return function(){var c=R;R=b;try{return a.apply(this,arguments)}finally{R=c}}};


/***/ }),
/* 55 */
/***/ ((__unused_webpack_module, exports) => {

"use strict";
/** @license React v0.19.1
 * scheduler.development.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */





if ("MISSING_ENV_VAR".NODE_ENV !== "production") {
  (function() {
'use strict';

var enableSchedulerDebugging = false;
var enableProfiling = true;

var requestHostCallback;
var requestHostTimeout;
var cancelHostTimeout;
var shouldYieldToHost;
var requestPaint;

if ( // If Scheduler runs in a non-DOM environment, it falls back to a naive
// implementation using setTimeout.
typeof window === 'undefined' || // Check if MessageChannel is supported, too.
typeof MessageChannel !== 'function') {
  // If this accidentally gets imported in a non-browser environment, e.g. JavaScriptCore,
  // fallback to a naive implementation.
  var _callback = null;
  var _timeoutID = null;

  var _flushCallback = function () {
    if (_callback !== null) {
      try {
        var currentTime = exports.unstable_now();
        var hasRemainingTime = true;

        _callback(hasRemainingTime, currentTime);

        _callback = null;
      } catch (e) {
        setTimeout(_flushCallback, 0);
        throw e;
      }
    }
  };

  var initialTime = Date.now();

  exports.unstable_now = function () {
    return Date.now() - initialTime;
  };

  requestHostCallback = function (cb) {
    if (_callback !== null) {
      // Protect against re-entrancy.
      setTimeout(requestHostCallback, 0, cb);
    } else {
      _callback = cb;
      setTimeout(_flushCallback, 0);
    }
  };

  requestHostTimeout = function (cb, ms) {
    _timeoutID = setTimeout(cb, ms);
  };

  cancelHostTimeout = function () {
    clearTimeout(_timeoutID);
  };

  shouldYieldToHost = function () {
    return false;
  };

  requestPaint = exports.unstable_forceFrameRate = function () {};
} else {
  // Capture local references to native APIs, in case a polyfill overrides them.
  var performance = window.performance;
  var _Date = window.Date;
  var _setTimeout = window.setTimeout;
  var _clearTimeout = window.clearTimeout;

  if (typeof console !== 'undefined') {
    // TODO: Scheduler no longer requires these methods to be polyfilled. But
    // maybe we want to continue warning if they don't exist, to preserve the
    // option to rely on it in the future?
    var requestAnimationFrame = window.requestAnimationFrame;
    var cancelAnimationFrame = window.cancelAnimationFrame; // TODO: Remove fb.me link

    if (typeof requestAnimationFrame !== 'function') {
      // Using console['error'] to evade Babel and ESLint
      console['error']("This browser doesn't support requestAnimationFrame. " + 'Make sure that you load a ' + 'polyfill in older browsers. https://fb.me/react-polyfills');
    }

    if (typeof cancelAnimationFrame !== 'function') {
      // Using console['error'] to evade Babel and ESLint
      console['error']("This browser doesn't support cancelAnimationFrame. " + 'Make sure that you load a ' + 'polyfill in older browsers. https://fb.me/react-polyfills');
    }
  }

  if (typeof performance === 'object' && typeof performance.now === 'function') {
    exports.unstable_now = function () {
      return performance.now();
    };
  } else {
    var _initialTime = _Date.now();

    exports.unstable_now = function () {
      return _Date.now() - _initialTime;
    };
  }

  var isMessageLoopRunning = false;
  var scheduledHostCallback = null;
  var taskTimeoutID = -1; // Scheduler periodically yields in case there is other work on the main
  // thread, like user events. By default, it yields multiple times per frame.
  // It does not attempt to align with frame boundaries, since most tasks don't
  // need to be frame aligned; for those that do, use requestAnimationFrame.

  var yieldInterval = 5;
  var deadline = 0; // TODO: Make this configurable

  {
    // `isInputPending` is not available. Since we have no way of knowing if
    // there's pending input, always yield at the end of the frame.
    shouldYieldToHost = function () {
      return exports.unstable_now() >= deadline;
    }; // Since we yield every frame regardless, `requestPaint` has no effect.


    requestPaint = function () {};
  }

  exports.unstable_forceFrameRate = function (fps) {
    if (fps < 0 || fps > 125) {
      // Using console['error'] to evade Babel and ESLint
      console['error']('forceFrameRate takes a positive int between 0 and 125, ' + 'forcing framerates higher than 125 fps is not unsupported');
      return;
    }

    if (fps > 0) {
      yieldInterval = Math.floor(1000 / fps);
    } else {
      // reset the framerate
      yieldInterval = 5;
    }
  };

  var performWorkUntilDeadline = function () {
    if (scheduledHostCallback !== null) {
      var currentTime = exports.unstable_now(); // Yield after `yieldInterval` ms, regardless of where we are in the vsync
      // cycle. This means there's always time remaining at the beginning of
      // the message event.

      deadline = currentTime + yieldInterval;
      var hasTimeRemaining = true;

      try {
        var hasMoreWork = scheduledHostCallback(hasTimeRemaining, currentTime);

        if (!hasMoreWork) {
          isMessageLoopRunning = false;
          scheduledHostCallback = null;
        } else {
          // If there's more work, schedule the next message event at the end
          // of the preceding one.
          port.postMessage(null);
        }
      } catch (error) {
        // If a scheduler task throws, exit the current browser task so the
        // error can be observed.
        port.postMessage(null);
        throw error;
      }
    } else {
      isMessageLoopRunning = false;
    } // Yielding to the browser will give it a chance to paint, so we can
  };

  var channel = new MessageChannel();
  var port = channel.port2;
  channel.port1.onmessage = performWorkUntilDeadline;

  requestHostCallback = function (callback) {
    scheduledHostCallback = callback;

    if (!isMessageLoopRunning) {
      isMessageLoopRunning = true;
      port.postMessage(null);
    }
  };

  requestHostTimeout = function (callback, ms) {
    taskTimeoutID = _setTimeout(function () {
      callback(exports.unstable_now());
    }, ms);
  };

  cancelHostTimeout = function () {
    _clearTimeout(taskTimeoutID);

    taskTimeoutID = -1;
  };
}

function push(heap, node) {
  var index = heap.length;
  heap.push(node);
  siftUp(heap, node, index);
}
function peek(heap) {
  var first = heap[0];
  return first === undefined ? null : first;
}
function pop(heap) {
  var first = heap[0];

  if (first !== undefined) {
    var last = heap.pop();

    if (last !== first) {
      heap[0] = last;
      siftDown(heap, last, 0);
    }

    return first;
  } else {
    return null;
  }
}

function siftUp(heap, node, i) {
  var index = i;

  while (true) {
    var parentIndex = index - 1 >>> 1;
    var parent = heap[parentIndex];

    if (parent !== undefined && compare(parent, node) > 0) {
      // The parent is larger. Swap positions.
      heap[parentIndex] = node;
      heap[index] = parent;
      index = parentIndex;
    } else {
      // The parent is smaller. Exit.
      return;
    }
  }
}

function siftDown(heap, node, i) {
  var index = i;
  var length = heap.length;

  while (index < length) {
    var leftIndex = (index + 1) * 2 - 1;
    var left = heap[leftIndex];
    var rightIndex = leftIndex + 1;
    var right = heap[rightIndex]; // If the left or right node is smaller, swap with the smaller of those.

    if (left !== undefined && compare(left, node) < 0) {
      if (right !== undefined && compare(right, left) < 0) {
        heap[index] = right;
        heap[rightIndex] = node;
        index = rightIndex;
      } else {
        heap[index] = left;
        heap[leftIndex] = node;
        index = leftIndex;
      }
    } else if (right !== undefined && compare(right, node) < 0) {
      heap[index] = right;
      heap[rightIndex] = node;
      index = rightIndex;
    } else {
      // Neither child is smaller. Exit.
      return;
    }
  }
}

function compare(a, b) {
  // Compare sort index first, then task id.
  var diff = a.sortIndex - b.sortIndex;
  return diff !== 0 ? diff : a.id - b.id;
}

// TODO: Use symbols?
var NoPriority = 0;
var ImmediatePriority = 1;
var UserBlockingPriority = 2;
var NormalPriority = 3;
var LowPriority = 4;
var IdlePriority = 5;

var runIdCounter = 0;
var mainThreadIdCounter = 0;
var profilingStateSize = 4;
var sharedProfilingBuffer =  // $FlowFixMe Flow doesn't know about SharedArrayBuffer
typeof SharedArrayBuffer === 'function' ? new SharedArrayBuffer(profilingStateSize * Int32Array.BYTES_PER_ELEMENT) : // $FlowFixMe Flow doesn't know about ArrayBuffer
typeof ArrayBuffer === 'function' ? new ArrayBuffer(profilingStateSize * Int32Array.BYTES_PER_ELEMENT) : null // Don't crash the init path on IE9
;
var profilingState =  sharedProfilingBuffer !== null ? new Int32Array(sharedProfilingBuffer) : []; // We can't read this but it helps save bytes for null checks

var PRIORITY = 0;
var CURRENT_TASK_ID = 1;
var CURRENT_RUN_ID = 2;
var QUEUE_SIZE = 3;

{
  profilingState[PRIORITY] = NoPriority; // This is maintained with a counter, because the size of the priority queue
  // array might include canceled tasks.

  profilingState[QUEUE_SIZE] = 0;
  profilingState[CURRENT_TASK_ID] = 0;
} // Bytes per element is 4


var INITIAL_EVENT_LOG_SIZE = 131072;
var MAX_EVENT_LOG_SIZE = 524288; // Equivalent to 2 megabytes

var eventLogSize = 0;
var eventLogBuffer = null;
var eventLog = null;
var eventLogIndex = 0;
var TaskStartEvent = 1;
var TaskCompleteEvent = 2;
var TaskErrorEvent = 3;
var TaskCancelEvent = 4;
var TaskRunEvent = 5;
var TaskYieldEvent = 6;
var SchedulerSuspendEvent = 7;
var SchedulerResumeEvent = 8;

function logEvent(entries) {
  if (eventLog !== null) {
    var offset = eventLogIndex;
    eventLogIndex += entries.length;

    if (eventLogIndex + 1 > eventLogSize) {
      eventLogSize *= 2;

      if (eventLogSize > MAX_EVENT_LOG_SIZE) {
        // Using console['error'] to evade Babel and ESLint
        console['error']("Scheduler Profiling: Event log exceeded maximum size. Don't " + 'forget to call `stopLoggingProfilingEvents()`.');
        stopLoggingProfilingEvents();
        return;
      }

      var newEventLog = new Int32Array(eventLogSize * 4);
      newEventLog.set(eventLog);
      eventLogBuffer = newEventLog.buffer;
      eventLog = newEventLog;
    }

    eventLog.set(entries, offset);
  }
}

function startLoggingProfilingEvents() {
  eventLogSize = INITIAL_EVENT_LOG_SIZE;
  eventLogBuffer = new ArrayBuffer(eventLogSize * 4);
  eventLog = new Int32Array(eventLogBuffer);
  eventLogIndex = 0;
}
function stopLoggingProfilingEvents() {
  var buffer = eventLogBuffer;
  eventLogSize = 0;
  eventLogBuffer = null;
  eventLog = null;
  eventLogIndex = 0;
  return buffer;
}
function markTaskStart(task, ms) {
  {
    profilingState[QUEUE_SIZE]++;

    if (eventLog !== null) {
      // performance.now returns a float, representing milliseconds. When the
      // event is logged, it's coerced to an int. Convert to microseconds to
      // maintain extra degrees of precision.
      logEvent([TaskStartEvent, ms * 1000, task.id, task.priorityLevel]);
    }
  }
}
function markTaskCompleted(task, ms) {
  {
    profilingState[PRIORITY] = NoPriority;
    profilingState[CURRENT_TASK_ID] = 0;
    profilingState[QUEUE_SIZE]--;

    if (eventLog !== null) {
      logEvent([TaskCompleteEvent, ms * 1000, task.id]);
    }
  }
}
function markTaskCanceled(task, ms) {
  {
    profilingState[QUEUE_SIZE]--;

    if (eventLog !== null) {
      logEvent([TaskCancelEvent, ms * 1000, task.id]);
    }
  }
}
function markTaskErrored(task, ms) {
  {
    profilingState[PRIORITY] = NoPriority;
    profilingState[CURRENT_TASK_ID] = 0;
    profilingState[QUEUE_SIZE]--;

    if (eventLog !== null) {
      logEvent([TaskErrorEvent, ms * 1000, task.id]);
    }
  }
}
function markTaskRun(task, ms) {
  {
    runIdCounter++;
    profilingState[PRIORITY] = task.priorityLevel;
    profilingState[CURRENT_TASK_ID] = task.id;
    profilingState[CURRENT_RUN_ID] = runIdCounter;

    if (eventLog !== null) {
      logEvent([TaskRunEvent, ms * 1000, task.id, runIdCounter]);
    }
  }
}
function markTaskYield(task, ms) {
  {
    profilingState[PRIORITY] = NoPriority;
    profilingState[CURRENT_TASK_ID] = 0;
    profilingState[CURRENT_RUN_ID] = 0;

    if (eventLog !== null) {
      logEvent([TaskYieldEvent, ms * 1000, task.id, runIdCounter]);
    }
  }
}
function markSchedulerSuspended(ms) {
  {
    mainThreadIdCounter++;

    if (eventLog !== null) {
      logEvent([SchedulerSuspendEvent, ms * 1000, mainThreadIdCounter]);
    }
  }
}
function markSchedulerUnsuspended(ms) {
  {
    if (eventLog !== null) {
      logEvent([SchedulerResumeEvent, ms * 1000, mainThreadIdCounter]);
    }
  }
}

/* eslint-disable no-var */
// Math.pow(2, 30) - 1
// 0b111111111111111111111111111111

var maxSigned31BitInt = 1073741823; // Times out immediately

var IMMEDIATE_PRIORITY_TIMEOUT = -1; // Eventually times out

var USER_BLOCKING_PRIORITY = 250;
var NORMAL_PRIORITY_TIMEOUT = 5000;
var LOW_PRIORITY_TIMEOUT = 10000; // Never times out

var IDLE_PRIORITY = maxSigned31BitInt; // Tasks are stored on a min heap

var taskQueue = [];
var timerQueue = []; // Incrementing id counter. Used to maintain insertion order.

var taskIdCounter = 1; // Pausing the scheduler is useful for debugging.
var currentTask = null;
var currentPriorityLevel = NormalPriority; // This is set while performing work, to prevent re-entrancy.

var isPerformingWork = false;
var isHostCallbackScheduled = false;
var isHostTimeoutScheduled = false;

function advanceTimers(currentTime) {
  // Check for tasks that are no longer delayed and add them to the queue.
  var timer = peek(timerQueue);

  while (timer !== null) {
    if (timer.callback === null) {
      // Timer was cancelled.
      pop(timerQueue);
    } else if (timer.startTime <= currentTime) {
      // Timer fired. Transfer to the task queue.
      pop(timerQueue);
      timer.sortIndex = timer.expirationTime;
      push(taskQueue, timer);

      {
        markTaskStart(timer, currentTime);
        timer.isQueued = true;
      }
    } else {
      // Remaining timers are pending.
      return;
    }

    timer = peek(timerQueue);
  }
}

function handleTimeout(currentTime) {
  isHostTimeoutScheduled = false;
  advanceTimers(currentTime);

  if (!isHostCallbackScheduled) {
    if (peek(taskQueue) !== null) {
      isHostCallbackScheduled = true;
      requestHostCallback(flushWork);
    } else {
      var firstTimer = peek(timerQueue);

      if (firstTimer !== null) {
        requestHostTimeout(handleTimeout, firstTimer.startTime - currentTime);
      }
    }
  }
}

function flushWork(hasTimeRemaining, initialTime) {
  {
    markSchedulerUnsuspended(initialTime);
  } // We'll need a host callback the next time work is scheduled.


  isHostCallbackScheduled = false;

  if (isHostTimeoutScheduled) {
    // We scheduled a timeout but it's no longer needed. Cancel it.
    isHostTimeoutScheduled = false;
    cancelHostTimeout();
  }

  isPerformingWork = true;
  var previousPriorityLevel = currentPriorityLevel;

  try {
    if (enableProfiling) {
      try {
        return workLoop(hasTimeRemaining, initialTime);
      } catch (error) {
        if (currentTask !== null) {
          var currentTime = exports.unstable_now();
          markTaskErrored(currentTask, currentTime);
          currentTask.isQueued = false;
        }

        throw error;
      }
    } else {
      // No catch in prod codepath.
      return workLoop(hasTimeRemaining, initialTime);
    }
  } finally {
    currentTask = null;
    currentPriorityLevel = previousPriorityLevel;
    isPerformingWork = false;

    {
      var _currentTime = exports.unstable_now();

      markSchedulerSuspended(_currentTime);
    }
  }
}

function workLoop(hasTimeRemaining, initialTime) {
  var currentTime = initialTime;
  advanceTimers(currentTime);
  currentTask = peek(taskQueue);

  while (currentTask !== null && !(enableSchedulerDebugging )) {
    if (currentTask.expirationTime > currentTime && (!hasTimeRemaining || shouldYieldToHost())) {
      // This currentTask hasn't expired, and we've reached the deadline.
      break;
    }

    var callback = currentTask.callback;

    if (callback !== null) {
      currentTask.callback = null;
      currentPriorityLevel = currentTask.priorityLevel;
      var didUserCallbackTimeout = currentTask.expirationTime <= currentTime;
      markTaskRun(currentTask, currentTime);
      var continuationCallback = callback(didUserCallbackTimeout);
      currentTime = exports.unstable_now();

      if (typeof continuationCallback === 'function') {
        currentTask.callback = continuationCallback;
        markTaskYield(currentTask, currentTime);
      } else {
        {
          markTaskCompleted(currentTask, currentTime);
          currentTask.isQueued = false;
        }

        if (currentTask === peek(taskQueue)) {
          pop(taskQueue);
        }
      }

      advanceTimers(currentTime);
    } else {
      pop(taskQueue);
    }

    currentTask = peek(taskQueue);
  } // Return whether there's additional work


  if (currentTask !== null) {
    return true;
  } else {
    var firstTimer = peek(timerQueue);

    if (firstTimer !== null) {
      requestHostTimeout(handleTimeout, firstTimer.startTime - currentTime);
    }

    return false;
  }
}

function unstable_runWithPriority(priorityLevel, eventHandler) {
  switch (priorityLevel) {
    case ImmediatePriority:
    case UserBlockingPriority:
    case NormalPriority:
    case LowPriority:
    case IdlePriority:
      break;

    default:
      priorityLevel = NormalPriority;
  }

  var previousPriorityLevel = currentPriorityLevel;
  currentPriorityLevel = priorityLevel;

  try {
    return eventHandler();
  } finally {
    currentPriorityLevel = previousPriorityLevel;
  }
}

function unstable_next(eventHandler) {
  var priorityLevel;

  switch (currentPriorityLevel) {
    case ImmediatePriority:
    case UserBlockingPriority:
    case NormalPriority:
      // Shift down to normal priority
      priorityLevel = NormalPriority;
      break;

    default:
      // Anything lower than normal priority should remain at the current level.
      priorityLevel = currentPriorityLevel;
      break;
  }

  var previousPriorityLevel = currentPriorityLevel;
  currentPriorityLevel = priorityLevel;

  try {
    return eventHandler();
  } finally {
    currentPriorityLevel = previousPriorityLevel;
  }
}

function unstable_wrapCallback(callback) {
  var parentPriorityLevel = currentPriorityLevel;
  return function () {
    // This is a fork of runWithPriority, inlined for performance.
    var previousPriorityLevel = currentPriorityLevel;
    currentPriorityLevel = parentPriorityLevel;

    try {
      return callback.apply(this, arguments);
    } finally {
      currentPriorityLevel = previousPriorityLevel;
    }
  };
}

function timeoutForPriorityLevel(priorityLevel) {
  switch (priorityLevel) {
    case ImmediatePriority:
      return IMMEDIATE_PRIORITY_TIMEOUT;

    case UserBlockingPriority:
      return USER_BLOCKING_PRIORITY;

    case IdlePriority:
      return IDLE_PRIORITY;

    case LowPriority:
      return LOW_PRIORITY_TIMEOUT;

    case NormalPriority:
    default:
      return NORMAL_PRIORITY_TIMEOUT;
  }
}

function unstable_scheduleCallback(priorityLevel, callback, options) {
  var currentTime = exports.unstable_now();
  var startTime;
  var timeout;

  if (typeof options === 'object' && options !== null) {
    var delay = options.delay;

    if (typeof delay === 'number' && delay > 0) {
      startTime = currentTime + delay;
    } else {
      startTime = currentTime;
    }

    timeout = typeof options.timeout === 'number' ? options.timeout : timeoutForPriorityLevel(priorityLevel);
  } else {
    timeout = timeoutForPriorityLevel(priorityLevel);
    startTime = currentTime;
  }

  var expirationTime = startTime + timeout;
  var newTask = {
    id: taskIdCounter++,
    callback: callback,
    priorityLevel: priorityLevel,
    startTime: startTime,
    expirationTime: expirationTime,
    sortIndex: -1
  };

  {
    newTask.isQueued = false;
  }

  if (startTime > currentTime) {
    // This is a delayed task.
    newTask.sortIndex = startTime;
    push(timerQueue, newTask);

    if (peek(taskQueue) === null && newTask === peek(timerQueue)) {
      // All tasks are delayed, and this is the task with the earliest delay.
      if (isHostTimeoutScheduled) {
        // Cancel an existing timeout.
        cancelHostTimeout();
      } else {
        isHostTimeoutScheduled = true;
      } // Schedule a timeout.


      requestHostTimeout(handleTimeout, startTime - currentTime);
    }
  } else {
    newTask.sortIndex = expirationTime;
    push(taskQueue, newTask);

    {
      markTaskStart(newTask, currentTime);
      newTask.isQueued = true;
    } // Schedule a host callback, if needed. If we're already performing work,
    // wait until the next time we yield.


    if (!isHostCallbackScheduled && !isPerformingWork) {
      isHostCallbackScheduled = true;
      requestHostCallback(flushWork);
    }
  }

  return newTask;
}

function unstable_pauseExecution() {
}

function unstable_continueExecution() {

  if (!isHostCallbackScheduled && !isPerformingWork) {
    isHostCallbackScheduled = true;
    requestHostCallback(flushWork);
  }
}

function unstable_getFirstCallbackNode() {
  return peek(taskQueue);
}

function unstable_cancelCallback(task) {
  {
    if (task.isQueued) {
      var currentTime = exports.unstable_now();
      markTaskCanceled(task, currentTime);
      task.isQueued = false;
    }
  } // Null out the callback to indicate the task has been canceled. (Can't
  // remove from the queue because you can't remove arbitrary nodes from an
  // array based heap, only the first one.)


  task.callback = null;
}

function unstable_getCurrentPriorityLevel() {
  return currentPriorityLevel;
}

function unstable_shouldYield() {
  var currentTime = exports.unstable_now();
  advanceTimers(currentTime);
  var firstTask = peek(taskQueue);
  return firstTask !== currentTask && currentTask !== null && firstTask !== null && firstTask.callback !== null && firstTask.startTime <= currentTime && firstTask.expirationTime < currentTask.expirationTime || shouldYieldToHost();
}

var unstable_requestPaint = requestPaint;
var unstable_Profiling =  {
  startLoggingProfilingEvents: startLoggingProfilingEvents,
  stopLoggingProfilingEvents: stopLoggingProfilingEvents,
  sharedProfilingBuffer: sharedProfilingBuffer
} ;

exports.unstable_IdlePriority = IdlePriority;
exports.unstable_ImmediatePriority = ImmediatePriority;
exports.unstable_LowPriority = LowPriority;
exports.unstable_NormalPriority = NormalPriority;
exports.unstable_Profiling = unstable_Profiling;
exports.unstable_UserBlockingPriority = UserBlockingPriority;
exports.unstable_cancelCallback = unstable_cancelCallback;
exports.unstable_continueExecution = unstable_continueExecution;
exports.unstable_getCurrentPriorityLevel = unstable_getCurrentPriorityLevel;
exports.unstable_getFirstCallbackNode = unstable_getFirstCallbackNode;
exports.unstable_next = unstable_next;
exports.unstable_pauseExecution = unstable_pauseExecution;
exports.unstable_requestPaint = unstable_requestPaint;
exports.unstable_runWithPriority = unstable_runWithPriority;
exports.unstable_scheduleCallback = unstable_scheduleCallback;
exports.unstable_shouldYield = unstable_shouldYield;
exports.unstable_wrapCallback = unstable_wrapCallback;
  })();
}


/***/ }),
/* 56 */
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
/** @license React v16.14.0
 * react-dom.development.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */





if ("MISSING_ENV_VAR".NODE_ENV !== "production") {
  (function() {
'use strict';

var React = __webpack_require__(47);
var _assign = __webpack_require__(49);
var Scheduler = __webpack_require__(53);
var checkPropTypes = __webpack_require__(51);
var tracing = __webpack_require__(57);

var ReactSharedInternals = React.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED; // Prevent newer renderers from RTE when used with older react package versions.
// Current owner and dispatcher used to share the same ref,
// but PR #14548 split them out to better support the react-debug-tools package.

if (!ReactSharedInternals.hasOwnProperty('ReactCurrentDispatcher')) {
  ReactSharedInternals.ReactCurrentDispatcher = {
    current: null
  };
}

if (!ReactSharedInternals.hasOwnProperty('ReactCurrentBatchConfig')) {
  ReactSharedInternals.ReactCurrentBatchConfig = {
    suspense: null
  };
}

// by calls to these methods by a Babel plugin.
//
// In PROD (or in packages without access to React internals),
// they are left as they are instead.

function warn(format) {
  {
    for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
      args[_key - 1] = arguments[_key];
    }

    printWarning('warn', format, args);
  }
}
function error(format) {
  {
    for (var _len2 = arguments.length, args = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {
      args[_key2 - 1] = arguments[_key2];
    }

    printWarning('error', format, args);
  }
}

function printWarning(level, format, args) {
  // When changing this logic, you might want to also
  // update consoleWithStackDev.www.js as well.
  {
    var hasExistingStack = args.length > 0 && typeof args[args.length - 1] === 'string' && args[args.length - 1].indexOf('\n    in') === 0;

    if (!hasExistingStack) {
      var ReactDebugCurrentFrame = ReactSharedInternals.ReactDebugCurrentFrame;
      var stack = ReactDebugCurrentFrame.getStackAddendum();

      if (stack !== '') {
        format += '%s';
        args = args.concat([stack]);
      }
    }

    var argsWithFormat = args.map(function (item) {
      return '' + item;
    }); // Careful: RN currently depends on this prefix

    argsWithFormat.unshift('Warning: ' + format); // We intentionally don't use spread (or .apply) directly because it
    // breaks IE9: https://github.com/facebook/react/issues/13610
    // eslint-disable-next-line react-internal/no-production-logging

    Function.prototype.apply.call(console[level], console, argsWithFormat);

    try {
      // --- Welcome to debugging React ---
      // This error was thrown as a convenience so that you can use this stack
      // to find the callsite that caused this warning to fire.
      var argIndex = 0;
      var message = 'Warning: ' + format.replace(/%s/g, function () {
        return args[argIndex++];
      });
      throw new Error(message);
    } catch (x) {}
  }
}

if (!React) {
  {
    throw Error( "ReactDOM was loaded before React. Make sure you load the React package before loading ReactDOM." );
  }
}

var invokeGuardedCallbackImpl = function (name, func, context, a, b, c, d, e, f) {
  var funcArgs = Array.prototype.slice.call(arguments, 3);

  try {
    func.apply(context, funcArgs);
  } catch (error) {
    this.onError(error);
  }
};

{
  // In DEV mode, we swap out invokeGuardedCallback for a special version
  // that plays more nicely with the browser's DevTools. The idea is to preserve
  // "Pause on exceptions" behavior. Because React wraps all user-provided
  // functions in invokeGuardedCallback, and the production version of
  // invokeGuardedCallback uses a try-catch, all user exceptions are treated
  // like caught exceptions, and the DevTools won't pause unless the developer
  // takes the extra step of enabling pause on caught exceptions. This is
  // unintuitive, though, because even though React has caught the error, from
  // the developer's perspective, the error is uncaught.
  //
  // To preserve the expected "Pause on exceptions" behavior, we don't use a
  // try-catch in DEV. Instead, we synchronously dispatch a fake event to a fake
  // DOM node, and call the user-provided callback from inside an event handler
  // for that fake event. If the callback throws, the error is "captured" using
  // a global event handler. But because the error happens in a different
  // event loop context, it does not interrupt the normal program flow.
  // Effectively, this gives us try-catch behavior without actually using
  // try-catch. Neat!
  // Check that the browser supports the APIs we need to implement our special
  // DEV version of invokeGuardedCallback
  if (typeof window !== 'undefined' && typeof window.dispatchEvent === 'function' && typeof document !== 'undefined' && typeof document.createEvent === 'function') {
    var fakeNode = document.createElement('react');

    var invokeGuardedCallbackDev = function (name, func, context, a, b, c, d, e, f) {
      // If document doesn't exist we know for sure we will crash in this method
      // when we call document.createEvent(). However this can cause confusing
      // errors: https://github.com/facebookincubator/create-react-app/issues/3482
      // So we preemptively throw with a better message instead.
      if (!(typeof document !== 'undefined')) {
        {
          throw Error( "The `document` global was defined when React was initialized, but is not defined anymore. This can happen in a test environment if a component schedules an update from an asynchronous callback, but the test has already finished running. To solve this, you can either unmount the component at the end of your test (and ensure that any asynchronous operations get canceled in `componentWillUnmount`), or you can change the test itself to be asynchronous." );
        }
      }

      var evt = document.createEvent('Event'); // Keeps track of whether the user-provided callback threw an error. We
      // set this to true at the beginning, then set it to false right after
      // calling the function. If the function errors, `didError` will never be
      // set to false. This strategy works even if the browser is flaky and
      // fails to call our global error handler, because it doesn't rely on
      // the error event at all.

      var didError = true; // Keeps track of the value of window.event so that we can reset it
      // during the callback to let user code access window.event in the
      // browsers that support it.

      var windowEvent = window.event; // Keeps track of the descriptor of window.event to restore it after event
      // dispatching: https://github.com/facebook/react/issues/13688

      var windowEventDescriptor = Object.getOwnPropertyDescriptor(window, 'event'); // Create an event handler for our fake event. We will synchronously
      // dispatch our fake event using `dispatchEvent`. Inside the handler, we
      // call the user-provided callback.

      var funcArgs = Array.prototype.slice.call(arguments, 3);

      function callCallback() {
        // We immediately remove the callback from event listeners so that
        // nested `invokeGuardedCallback` calls do not clash. Otherwise, a
        // nested call would trigger the fake event handlers of any call higher
        // in the stack.
        fakeNode.removeEventListener(evtType, callCallback, false); // We check for window.hasOwnProperty('event') to prevent the
        // window.event assignment in both IE <= 10 as they throw an error
        // "Member not found" in strict mode, and in Firefox which does not
        // support window.event.

        if (typeof window.event !== 'undefined' && window.hasOwnProperty('event')) {
          window.event = windowEvent;
        }

        func.apply(context, funcArgs);
        didError = false;
      } // Create a global error event handler. We use this to capture the value
      // that was thrown. It's possible that this error handler will fire more
      // than once; for example, if non-React code also calls `dispatchEvent`
      // and a handler for that event throws. We should be resilient to most of
      // those cases. Even if our error event handler fires more than once, the
      // last error event is always used. If the callback actually does error,
      // we know that the last error event is the correct one, because it's not
      // possible for anything else to have happened in between our callback
      // erroring and the code that follows the `dispatchEvent` call below. If
      // the callback doesn't error, but the error event was fired, we know to
      // ignore it because `didError` will be false, as described above.


      var error; // Use this to track whether the error event is ever called.

      var didSetError = false;
      var isCrossOriginError = false;

      function handleWindowError(event) {
        error = event.error;
        didSetError = true;

        if (error === null && event.colno === 0 && event.lineno === 0) {
          isCrossOriginError = true;
        }

        if (event.defaultPrevented) {
          // Some other error handler has prevented default.
          // Browsers silence the error report if this happens.
          // We'll remember this to later decide whether to log it or not.
          if (error != null && typeof error === 'object') {
            try {
              error._suppressLogging = true;
            } catch (inner) {// Ignore.
            }
          }
        }
      } // Create a fake event type.


      var evtType = "react-" + (name ? name : 'invokeguardedcallback'); // Attach our event handlers

      window.addEventListener('error', handleWindowError);
      fakeNode.addEventListener(evtType, callCallback, false); // Synchronously dispatch our fake event. If the user-provided function
      // errors, it will trigger our global error handler.

      evt.initEvent(evtType, false, false);
      fakeNode.dispatchEvent(evt);

      if (windowEventDescriptor) {
        Object.defineProperty(window, 'event', windowEventDescriptor);
      }

      if (didError) {
        if (!didSetError) {
          // The callback errored, but the error event never fired.
          error = new Error('An error was thrown inside one of your components, but React ' + "doesn't know what it was. This is likely due to browser " + 'flakiness. React does its best to preserve the "Pause on ' + 'exceptions" behavior of the DevTools, which requires some ' + "DEV-mode only tricks. It's possible that these don't work in " + 'your browser. Try triggering the error in production mode, ' + 'or switching to a modern browser. If you suspect that this is ' + 'actually an issue with React, please file an issue.');
        } else if (isCrossOriginError) {
          error = new Error("A cross-origin error was thrown. React doesn't have access to " + 'the actual error object in development. ' + 'See https://fb.me/react-crossorigin-error for more information.');
        }

        this.onError(error);
      } // Remove our event listeners


      window.removeEventListener('error', handleWindowError);
    };

    invokeGuardedCallbackImpl = invokeGuardedCallbackDev;
  }
}

var invokeGuardedCallbackImpl$1 = invokeGuardedCallbackImpl;

var hasError = false;
var caughtError = null; // Used by event system to capture/rethrow the first error.

var hasRethrowError = false;
var rethrowError = null;
var reporter = {
  onError: function (error) {
    hasError = true;
    caughtError = error;
  }
};
/**
 * Call a function while guarding against errors that happens within it.
 * Returns an error if it throws, otherwise null.
 *
 * In production, this is implemented using a try-catch. The reason we don't
 * use a try-catch directly is so that we can swap out a different
 * implementation in DEV mode.
 *
 * @param {String} name of the guard to use for logging or debugging
 * @param {Function} func The function to invoke
 * @param {*} context The context to use when calling the function
 * @param {...*} args Arguments for function
 */

function invokeGuardedCallback(name, func, context, a, b, c, d, e, f) {
  hasError = false;
  caughtError = null;
  invokeGuardedCallbackImpl$1.apply(reporter, arguments);
}
/**
 * Same as invokeGuardedCallback, but instead of returning an error, it stores
 * it in a global so it can be rethrown by `rethrowCaughtError` later.
 * TODO: See if caughtError and rethrowError can be unified.
 *
 * @param {String} name of the guard to use for logging or debugging
 * @param {Function} func The function to invoke
 * @param {*} context The context to use when calling the function
 * @param {...*} args Arguments for function
 */

function invokeGuardedCallbackAndCatchFirstError(name, func, context, a, b, c, d, e, f) {
  invokeGuardedCallback.apply(this, arguments);

  if (hasError) {
    var error = clearCaughtError();

    if (!hasRethrowError) {
      hasRethrowError = true;
      rethrowError = error;
    }
  }
}
/**
 * During execution of guarded functions we will capture the first error which
 * we will rethrow to be handled by the top level error handler.
 */

function rethrowCaughtError() {
  if (hasRethrowError) {
    var error = rethrowError;
    hasRethrowError = false;
    rethrowError = null;
    throw error;
  }
}
function hasCaughtError() {
  return hasError;
}
function clearCaughtError() {
  if (hasError) {
    var error = caughtError;
    hasError = false;
    caughtError = null;
    return error;
  } else {
    {
      {
        throw Error( "clearCaughtError was called but no error was captured. This error is likely caused by a bug in React. Please file an issue." );
      }
    }
  }
}

var getFiberCurrentPropsFromNode = null;
var getInstanceFromNode = null;
var getNodeFromInstance = null;
function setComponentTree(getFiberCurrentPropsFromNodeImpl, getInstanceFromNodeImpl, getNodeFromInstanceImpl) {
  getFiberCurrentPropsFromNode = getFiberCurrentPropsFromNodeImpl;
  getInstanceFromNode = getInstanceFromNodeImpl;
  getNodeFromInstance = getNodeFromInstanceImpl;

  {
    if (!getNodeFromInstance || !getInstanceFromNode) {
      error('EventPluginUtils.setComponentTree(...): Injected ' + 'module is missing getNodeFromInstance or getInstanceFromNode.');
    }
  }
}
var validateEventDispatches;

{
  validateEventDispatches = function (event) {
    var dispatchListeners = event._dispatchListeners;
    var dispatchInstances = event._dispatchInstances;
    var listenersIsArr = Array.isArray(dispatchListeners);
    var listenersLen = listenersIsArr ? dispatchListeners.length : dispatchListeners ? 1 : 0;
    var instancesIsArr = Array.isArray(dispatchInstances);
    var instancesLen = instancesIsArr ? dispatchInstances.length : dispatchInstances ? 1 : 0;

    if (instancesIsArr !== listenersIsArr || instancesLen !== listenersLen) {
      error('EventPluginUtils: Invalid `event`.');
    }
  };
}
/**
 * Dispatch the event to the listener.
 * @param {SyntheticEvent} event SyntheticEvent to handle
 * @param {function} listener Application-level callback
 * @param {*} inst Internal component instance
 */


function executeDispatch(event, listener, inst) {
  var type = event.type || 'unknown-event';
  event.currentTarget = getNodeFromInstance(inst);
  invokeGuardedCallbackAndCatchFirstError(type, listener, undefined, event);
  event.currentTarget = null;
}
/**
 * Standard/simple iteration through an event's collected dispatches.
 */

function executeDispatchesInOrder(event) {
  var dispatchListeners = event._dispatchListeners;
  var dispatchInstances = event._dispatchInstances;

  {
    validateEventDispatches(event);
  }

  if (Array.isArray(dispatchListeners)) {
    for (var i = 0; i < dispatchListeners.length; i++) {
      if (event.isPropagationStopped()) {
        break;
      } // Listeners and Instances are two parallel arrays that are always in sync.


      executeDispatch(event, dispatchListeners[i], dispatchInstances[i]);
    }
  } else if (dispatchListeners) {
    executeDispatch(event, dispatchListeners, dispatchInstances);
  }

  event._dispatchListeners = null;
  event._dispatchInstances = null;
}

var FunctionComponent = 0;
var ClassComponent = 1;
var IndeterminateComponent = 2; // Before we know whether it is function or class

var HostRoot = 3; // Root of a host tree. Could be nested inside another node.

var HostPortal = 4; // A subtree. Could be an entry point to a different renderer.

var HostComponent = 5;
var HostText = 6;
var Fragment = 7;
var Mode = 8;
var ContextConsumer = 9;
var ContextProvider = 10;
var ForwardRef = 11;
var Profiler = 12;
var SuspenseComponent = 13;
var MemoComponent = 14;
var SimpleMemoComponent = 15;
var LazyComponent = 16;
var IncompleteClassComponent = 17;
var DehydratedFragment = 18;
var SuspenseListComponent = 19;
var FundamentalComponent = 20;
var ScopeComponent = 21;
var Block = 22;

/**
 * Injectable ordering of event plugins.
 */
var eventPluginOrder = null;
/**
 * Injectable mapping from names to event plugin modules.
 */

var namesToPlugins = {};
/**
 * Recomputes the plugin list using the injected plugins and plugin ordering.
 *
 * @private
 */

function recomputePluginOrdering() {
  if (!eventPluginOrder) {
    // Wait until an `eventPluginOrder` is injected.
    return;
  }

  for (var pluginName in namesToPlugins) {
    var pluginModule = namesToPlugins[pluginName];
    var pluginIndex = eventPluginOrder.indexOf(pluginName);

    if (!(pluginIndex > -1)) {
      {
        throw Error( "EventPluginRegistry: Cannot inject event plugins that do not exist in the plugin ordering, `" + pluginName + "`." );
      }
    }

    if (plugins[pluginIndex]) {
      continue;
    }

    if (!pluginModule.extractEvents) {
      {
        throw Error( "EventPluginRegistry: Event plugins must implement an `extractEvents` method, but `" + pluginName + "` does not." );
      }
    }

    plugins[pluginIndex] = pluginModule;
    var publishedEvents = pluginModule.eventTypes;

    for (var eventName in publishedEvents) {
      if (!publishEventForPlugin(publishedEvents[eventName], pluginModule, eventName)) {
        {
          throw Error( "EventPluginRegistry: Failed to publish event `" + eventName + "` for plugin `" + pluginName + "`." );
        }
      }
    }
  }
}
/**
 * Publishes an event so that it can be dispatched by the supplied plugin.
 *
 * @param {object} dispatchConfig Dispatch configuration for the event.
 * @param {object} PluginModule Plugin publishing the event.
 * @return {boolean} True if the event was successfully published.
 * @private
 */


function publishEventForPlugin(dispatchConfig, pluginModule, eventName) {
  if (!!eventNameDispatchConfigs.hasOwnProperty(eventName)) {
    {
      throw Error( "EventPluginRegistry: More than one plugin attempted to publish the same event name, `" + eventName + "`." );
    }
  }

  eventNameDispatchConfigs[eventName] = dispatchConfig;
  var phasedRegistrationNames = dispatchConfig.phasedRegistrationNames;

  if (phasedRegistrationNames) {
    for (var phaseName in phasedRegistrationNames) {
      if (phasedRegistrationNames.hasOwnProperty(phaseName)) {
        var phasedRegistrationName = phasedRegistrationNames[phaseName];
        publishRegistrationName(phasedRegistrationName, pluginModule, eventName);
      }
    }

    return true;
  } else if (dispatchConfig.registrationName) {
    publishRegistrationName(dispatchConfig.registrationName, pluginModule, eventName);
    return true;
  }

  return false;
}
/**
 * Publishes a registration name that is used to identify dispatched events.
 *
 * @param {string} registrationName Registration name to add.
 * @param {object} PluginModule Plugin publishing the event.
 * @private
 */


function publishRegistrationName(registrationName, pluginModule, eventName) {
  if (!!registrationNameModules[registrationName]) {
    {
      throw Error( "EventPluginRegistry: More than one plugin attempted to publish the same registration name, `" + registrationName + "`." );
    }
  }

  registrationNameModules[registrationName] = pluginModule;
  registrationNameDependencies[registrationName] = pluginModule.eventTypes[eventName].dependencies;

  {
    var lowerCasedName = registrationName.toLowerCase();
    possibleRegistrationNames[lowerCasedName] = registrationName;

    if (registrationName === 'onDoubleClick') {
      possibleRegistrationNames.ondblclick = registrationName;
    }
  }
}
/**
 * Registers plugins so that they can extract and dispatch events.
 */

/**
 * Ordered list of injected plugins.
 */


var plugins = [];
/**
 * Mapping from event name to dispatch config
 */

var eventNameDispatchConfigs = {};
/**
 * Mapping from registration name to plugin module
 */

var registrationNameModules = {};
/**
 * Mapping from registration name to event name
 */

var registrationNameDependencies = {};
/**
 * Mapping from lowercase registration names to the properly cased version,
 * used to warn in the case of missing event handlers. Available
 * only in true.
 * @type {Object}
 */

var possibleRegistrationNames =  {} ; // Trust the developer to only use possibleRegistrationNames in true

/**
 * Injects an ordering of plugins (by plugin name). This allows the ordering
 * to be decoupled from injection of the actual plugins so that ordering is
 * always deterministic regardless of packaging, on-the-fly injection, etc.
 *
 * @param {array} InjectedEventPluginOrder
 * @internal
 */

function injectEventPluginOrder(injectedEventPluginOrder) {
  if (!!eventPluginOrder) {
    {
      throw Error( "EventPluginRegistry: Cannot inject event plugin ordering more than once. You are likely trying to load more than one copy of React." );
    }
  } // Clone the ordering so it cannot be dynamically mutated.


  eventPluginOrder = Array.prototype.slice.call(injectedEventPluginOrder);
  recomputePluginOrdering();
}
/**
 * Injects plugins to be used by plugin event system. The plugin names must be
 * in the ordering injected by `injectEventPluginOrder`.
 *
 * Plugins can be injected as part of page initialization or on-the-fly.
 *
 * @param {object} injectedNamesToPlugins Map from names to plugin modules.
 * @internal
 */

function injectEventPluginsByName(injectedNamesToPlugins) {
  var isOrderingDirty = false;

  for (var pluginName in injectedNamesToPlugins) {
    if (!injectedNamesToPlugins.hasOwnProperty(pluginName)) {
      continue;
    }

    var pluginModule = injectedNamesToPlugins[pluginName];

    if (!namesToPlugins.hasOwnProperty(pluginName) || namesToPlugins[pluginName] !== pluginModule) {
      if (!!namesToPlugins[pluginName]) {
        {
          throw Error( "EventPluginRegistry: Cannot inject two different event plugins using the same name, `" + pluginName + "`." );
        }
      }

      namesToPlugins[pluginName] = pluginModule;
      isOrderingDirty = true;
    }
  }

  if (isOrderingDirty) {
    recomputePluginOrdering();
  }
}

var canUseDOM = !!(typeof window !== 'undefined' && typeof window.document !== 'undefined' && typeof window.document.createElement !== 'undefined');

var PLUGIN_EVENT_SYSTEM = 1;
var IS_REPLAYED = 1 << 5;
var IS_FIRST_ANCESTOR = 1 << 6;

var restoreImpl = null;
var restoreTarget = null;
var restoreQueue = null;

function restoreStateOfTarget(target) {
  // We perform this translation at the end of the event loop so that we
  // always receive the correct fiber here
  var internalInstance = getInstanceFromNode(target);

  if (!internalInstance) {
    // Unmounted
    return;
  }

  if (!(typeof restoreImpl === 'function')) {
    {
      throw Error( "setRestoreImplementation() needs to be called to handle a target for controlled events. This error is likely caused by a bug in React. Please file an issue." );
    }
  }

  var stateNode = internalInstance.stateNode; // Guard against Fiber being unmounted.

  if (stateNode) {
    var _props = getFiberCurrentPropsFromNode(stateNode);

    restoreImpl(internalInstance.stateNode, internalInstance.type, _props);
  }
}

function setRestoreImplementation(impl) {
  restoreImpl = impl;
}
function enqueueStateRestore(target) {
  if (restoreTarget) {
    if (restoreQueue) {
      restoreQueue.push(target);
    } else {
      restoreQueue = [target];
    }
  } else {
    restoreTarget = target;
  }
}
function needsStateRestore() {
  return restoreTarget !== null || restoreQueue !== null;
}
function restoreStateIfNeeded() {
  if (!restoreTarget) {
    return;
  }

  var target = restoreTarget;
  var queuedTargets = restoreQueue;
  restoreTarget = null;
  restoreQueue = null;
  restoreStateOfTarget(target);

  if (queuedTargets) {
    for (var i = 0; i < queuedTargets.length; i++) {
      restoreStateOfTarget(queuedTargets[i]);
    }
  }
}

var enableProfilerTimer = true; // Trace which interactions trigger each commit.

var enableDeprecatedFlareAPI = false; // Experimental Host Component support.

var enableFundamentalAPI = false; // Experimental Scope support.
var warnAboutStringRefs = false;

// the renderer. Such as when we're dispatching events or if third party
// libraries need to call batchedUpdates. Eventually, this API will go away when
// everything is batched by default. We'll then have a similar API to opt-out of
// scheduled work and instead do synchronous work.
// Defaults

var batchedUpdatesImpl = function (fn, bookkeeping) {
  return fn(bookkeeping);
};

var discreteUpdatesImpl = function (fn, a, b, c, d) {
  return fn(a, b, c, d);
};

var flushDiscreteUpdatesImpl = function () {};

var batchedEventUpdatesImpl = batchedUpdatesImpl;
var isInsideEventHandler = false;
var isBatchingEventUpdates = false;

function finishEventHandler() {
  // Here we wait until all updates have propagated, which is important
  // when using controlled components within layers:
  // https://github.com/facebook/react/issues/1698
  // Then we restore state of any controlled component.
  var controlledComponentsHavePendingUpdates = needsStateRestore();

  if (controlledComponentsHavePendingUpdates) {
    // If a controlled event was fired, we may need to restore the state of
    // the DOM node back to the controlled value. This is necessary when React
    // bails out of the update without touching the DOM.
    flushDiscreteUpdatesImpl();
    restoreStateIfNeeded();
  }
}

function batchedUpdates(fn, bookkeeping) {
  if (isInsideEventHandler) {
    // If we are currently inside another batch, we need to wait until it
    // fully completes before restoring state.
    return fn(bookkeeping);
  }

  isInsideEventHandler = true;

  try {
    return batchedUpdatesImpl(fn, bookkeeping);
  } finally {
    isInsideEventHandler = false;
    finishEventHandler();
  }
}
function batchedEventUpdates(fn, a, b) {
  if (isBatchingEventUpdates) {
    // If we are currently inside another batch, we need to wait until it
    // fully completes before restoring state.
    return fn(a, b);
  }

  isBatchingEventUpdates = true;

  try {
    return batchedEventUpdatesImpl(fn, a, b);
  } finally {
    isBatchingEventUpdates = false;
    finishEventHandler();
  }
} // This is for the React Flare event system
function discreteUpdates(fn, a, b, c, d) {
  var prevIsInsideEventHandler = isInsideEventHandler;
  isInsideEventHandler = true;

  try {
    return discreteUpdatesImpl(fn, a, b, c, d);
  } finally {
    isInsideEventHandler = prevIsInsideEventHandler;

    if (!isInsideEventHandler) {
      finishEventHandler();
    }
  }
}
function flushDiscreteUpdatesIfNeeded(timeStamp) {
  // event.timeStamp isn't overly reliable due to inconsistencies in
  // how different browsers have historically provided the time stamp.
  // Some browsers provide high-resolution time stamps for all events,
  // some provide low-resolution time stamps for all events. FF < 52
  // even mixes both time stamps together. Some browsers even report
  // negative time stamps or time stamps that are 0 (iOS9) in some cases.
  // Given we are only comparing two time stamps with equality (!==),
  // we are safe from the resolution differences. If the time stamp is 0
  // we bail-out of preventing the flush, which can affect semantics,
  // such as if an earlier flush removes or adds event listeners that
  // are fired in the subsequent flush. However, this is the same
  // behaviour as we had before this change, so the risks are low.
  if (!isInsideEventHandler && (!enableDeprecatedFlareAPI  )) {
    flushDiscreteUpdatesImpl();
  }
}
function setBatchingImplementation(_batchedUpdatesImpl, _discreteUpdatesImpl, _flushDiscreteUpdatesImpl, _batchedEventUpdatesImpl) {
  batchedUpdatesImpl = _batchedUpdatesImpl;
  discreteUpdatesImpl = _discreteUpdatesImpl;
  flushDiscreteUpdatesImpl = _flushDiscreteUpdatesImpl;
  batchedEventUpdatesImpl = _batchedEventUpdatesImpl;
}

var DiscreteEvent = 0;
var UserBlockingEvent = 1;
var ContinuousEvent = 2;

// A reserved attribute.
// It is handled by React separately and shouldn't be written to the DOM.
var RESERVED = 0; // A simple string attribute.
// Attributes that aren't in the whitelist are presumed to have this type.

var STRING = 1; // A string attribute that accepts booleans in React. In HTML, these are called
// "enumerated" attributes with "true" and "false" as possible values.
// When true, it should be set to a "true" string.
// When false, it should be set to a "false" string.

var BOOLEANISH_STRING = 2; // A real boolean attribute.
// When true, it should be present (set either to an empty string or its name).
// When false, it should be omitted.

var BOOLEAN = 3; // An attribute that can be used as a flag as well as with a value.
// When true, it should be present (set either to an empty string or its name).
// When false, it should be omitted.
// For any other value, should be present with that value.

var OVERLOADED_BOOLEAN = 4; // An attribute that must be numeric or parse as a numeric.
// When falsy, it should be removed.

var NUMERIC = 5; // An attribute that must be positive numeric or parse as a positive numeric.
// When falsy, it should be removed.

var POSITIVE_NUMERIC = 6;

/* eslint-disable max-len */
var ATTRIBUTE_NAME_START_CHAR = ":A-Z_a-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD";
/* eslint-enable max-len */

var ATTRIBUTE_NAME_CHAR = ATTRIBUTE_NAME_START_CHAR + "\\-.0-9\\u00B7\\u0300-\\u036F\\u203F-\\u2040";
var ROOT_ATTRIBUTE_NAME = 'data-reactroot';
var VALID_ATTRIBUTE_NAME_REGEX = new RegExp('^[' + ATTRIBUTE_NAME_START_CHAR + '][' + ATTRIBUTE_NAME_CHAR + ']*$');
var hasOwnProperty = Object.prototype.hasOwnProperty;
var illegalAttributeNameCache = {};
var validatedAttributeNameCache = {};
function isAttributeNameSafe(attributeName) {
  if (hasOwnProperty.call(validatedAttributeNameCache, attributeName)) {
    return true;
  }

  if (hasOwnProperty.call(illegalAttributeNameCache, attributeName)) {
    return false;
  }

  if (VALID_ATTRIBUTE_NAME_REGEX.test(attributeName)) {
    validatedAttributeNameCache[attributeName] = true;
    return true;
  }

  illegalAttributeNameCache[attributeName] = true;

  {
    error('Invalid attribute name: `%s`', attributeName);
  }

  return false;
}
function shouldIgnoreAttribute(name, propertyInfo, isCustomComponentTag) {
  if (propertyInfo !== null) {
    return propertyInfo.type === RESERVED;
  }

  if (isCustomComponentTag) {
    return false;
  }

  if (name.length > 2 && (name[0] === 'o' || name[0] === 'O') && (name[1] === 'n' || name[1] === 'N')) {
    return true;
  }

  return false;
}
function shouldRemoveAttributeWithWarning(name, value, propertyInfo, isCustomComponentTag) {
  if (propertyInfo !== null && propertyInfo.type === RESERVED) {
    return false;
  }

  switch (typeof value) {
    case 'function': // $FlowIssue symbol is perfectly valid here

    case 'symbol':
      // eslint-disable-line
      return true;

    case 'boolean':
      {
        if (isCustomComponentTag) {
          return false;
        }

        if (propertyInfo !== null) {
          return !propertyInfo.acceptsBooleans;
        } else {
          var prefix = name.toLowerCase().slice(0, 5);
          return prefix !== 'data-' && prefix !== 'aria-';
        }
      }

    default:
      return false;
  }
}
function shouldRemoveAttribute(name, value, propertyInfo, isCustomComponentTag) {
  if (value === null || typeof value === 'undefined') {
    return true;
  }

  if (shouldRemoveAttributeWithWarning(name, value, propertyInfo, isCustomComponentTag)) {
    return true;
  }

  if (isCustomComponentTag) {
    return false;
  }

  if (propertyInfo !== null) {
    switch (propertyInfo.type) {
      case BOOLEAN:
        return !value;

      case OVERLOADED_BOOLEAN:
        return value === false;

      case NUMERIC:
        return isNaN(value);

      case POSITIVE_NUMERIC:
        return isNaN(value) || value < 1;
    }
  }

  return false;
}
function getPropertyInfo(name) {
  return properties.hasOwnProperty(name) ? properties[name] : null;
}

function PropertyInfoRecord(name, type, mustUseProperty, attributeName, attributeNamespace, sanitizeURL) {
  this.acceptsBooleans = type === BOOLEANISH_STRING || type === BOOLEAN || type === OVERLOADED_BOOLEAN;
  this.attributeName = attributeName;
  this.attributeNamespace = attributeNamespace;
  this.mustUseProperty = mustUseProperty;
  this.propertyName = name;
  this.type = type;
  this.sanitizeURL = sanitizeURL;
} // When adding attributes to this list, be sure to also add them to
// the `possibleStandardNames` module to ensure casing and incorrect
// name warnings.


var properties = {}; // These props are reserved by React. They shouldn't be written to the DOM.

var reservedProps = ['children', 'dangerouslySetInnerHTML', // TODO: This prevents the assignment of defaultValue to regular
// elements (not just inputs). Now that ReactDOMInput assigns to the
// defaultValue property -- do we need this?
'defaultValue', 'defaultChecked', 'innerHTML', 'suppressContentEditableWarning', 'suppressHydrationWarning', 'style'];

reservedProps.forEach(function (name) {
  properties[name] = new PropertyInfoRecord(name, RESERVED, false, // mustUseProperty
  name, // attributeName
  null, // attributeNamespace
  false);
}); // A few React string attributes have a different name.
// This is a mapping from React prop names to the attribute names.

[['acceptCharset', 'accept-charset'], ['className', 'class'], ['htmlFor', 'for'], ['httpEquiv', 'http-equiv']].forEach(function (_ref) {
  var name = _ref[0],
      attributeName = _ref[1];
  properties[name] = new PropertyInfoRecord(name, STRING, false, // mustUseProperty
  attributeName, // attributeName
  null, // attributeNamespace
  false);
}); // These are "enumerated" HTML attributes that accept "true" and "false".
// In React, we let users pass `true` and `false` even though technically
// these aren't boolean attributes (they are coerced to strings).

['contentEditable', 'draggable', 'spellCheck', 'value'].forEach(function (name) {
  properties[name] = new PropertyInfoRecord(name, BOOLEANISH_STRING, false, // mustUseProperty
  name.toLowerCase(), // attributeName
  null, // attributeNamespace
  false);
}); // These are "enumerated" SVG attributes that accept "true" and "false".
// In React, we let users pass `true` and `false` even though technically
// these aren't boolean attributes (they are coerced to strings).
// Since these are SVG attributes, their attribute names are case-sensitive.

['autoReverse', 'externalResourcesRequired', 'focusable', 'preserveAlpha'].forEach(function (name) {
  properties[name] = new PropertyInfoRecord(name, BOOLEANISH_STRING, false, // mustUseProperty
  name, // attributeName
  null, // attributeNamespace
  false);
}); // These are HTML boolean attributes.

['allowFullScreen', 'async', // Note: there is a special case that prevents it from being written to the DOM
// on the client side because the browsers are inconsistent. Instead we call focus().
'autoFocus', 'autoPlay', 'controls', 'default', 'defer', 'disabled', 'disablePictureInPicture', 'formNoValidate', 'hidden', 'loop', 'noModule', 'noValidate', 'open', 'playsInline', 'readOnly', 'required', 'reversed', 'scoped', 'seamless', // Microdata
'itemScope'].forEach(function (name) {
  properties[name] = new PropertyInfoRecord(name, BOOLEAN, false, // mustUseProperty
  name.toLowerCase(), // attributeName
  null, // attributeNamespace
  false);
}); // These are the few React props that we set as DOM properties
// rather than attributes. These are all booleans.

['checked', // Note: `option.selected` is not updated if `select.multiple` is
// disabled with `removeAttribute`. We have special logic for handling this.
'multiple', 'muted', 'selected' // NOTE: if you add a camelCased prop to this list,
// you'll need to set attributeName to name.toLowerCase()
// instead in the assignment below.
].forEach(function (name) {
  properties[name] = new PropertyInfoRecord(name, BOOLEAN, true, // mustUseProperty
  name, // attributeName
  null, // attributeNamespace
  false);
}); // These are HTML attributes that are "overloaded booleans": they behave like
// booleans, but can also accept a string value.

['capture', 'download' // NOTE: if you add a camelCased prop to this list,
// you'll need to set attributeName to name.toLowerCase()
// instead in the assignment below.
].forEach(function (name) {
  properties[name] = new PropertyInfoRecord(name, OVERLOADED_BOOLEAN, false, // mustUseProperty
  name, // attributeName
  null, // attributeNamespace
  false);
}); // These are HTML attributes that must be positive numbers.

['cols', 'rows', 'size', 'span' // NOTE: if you add a camelCased prop to this list,
// you'll need to set attributeName to name.toLowerCase()
// instead in the assignment below.
].forEach(function (name) {
  properties[name] = new PropertyInfoRecord(name, POSITIVE_NUMERIC, false, // mustUseProperty
  name, // attributeName
  null, // attributeNamespace
  false);
}); // These are HTML attributes that must be numbers.

['rowSpan', 'start'].forEach(function (name) {
  properties[name] = new PropertyInfoRecord(name, NUMERIC, false, // mustUseProperty
  name.toLowerCase(), // attributeName
  null, // attributeNamespace
  false);
});
var CAMELIZE = /[\-\:]([a-z])/g;

var capitalize = function (token) {
  return token[1].toUpperCase();
}; // This is a list of all SVG attributes that need special casing, namespacing,
// or boolean value assignment. Regular attributes that just accept strings
// and have the same names are omitted, just like in the HTML whitelist.
// Some of these attributes can be hard to find. This list was created by
// scraping the MDN documentation.


['accent-height', 'alignment-baseline', 'arabic-form', 'baseline-shift', 'cap-height', 'clip-path', 'clip-rule', 'color-interpolation', 'color-interpolation-filters', 'color-profile', 'color-rendering', 'dominant-baseline', 'enable-background', 'fill-opacity', 'fill-rule', 'flood-color', 'flood-opacity', 'font-family', 'font-size', 'font-size-adjust', 'font-stretch', 'font-style', 'font-variant', 'font-weight', 'glyph-name', 'glyph-orientation-horizontal', 'glyph-orientation-vertical', 'horiz-adv-x', 'horiz-origin-x', 'image-rendering', 'letter-spacing', 'lighting-color', 'marker-end', 'marker-mid', 'marker-start', 'overline-position', 'overline-thickness', 'paint-order', 'panose-1', 'pointer-events', 'rendering-intent', 'shape-rendering', 'stop-color', 'stop-opacity', 'strikethrough-position', 'strikethrough-thickness', 'stroke-dasharray', 'stroke-dashoffset', 'stroke-linecap', 'stroke-linejoin', 'stroke-miterlimit', 'stroke-opacity', 'stroke-width', 'text-anchor', 'text-decoration', 'text-rendering', 'underline-position', 'underline-thickness', 'unicode-bidi', 'unicode-range', 'units-per-em', 'v-alphabetic', 'v-hanging', 'v-ideographic', 'v-mathematical', 'vector-effect', 'vert-adv-y', 'vert-origin-x', 'vert-origin-y', 'word-spacing', 'writing-mode', 'xmlns:xlink', 'x-height' // NOTE: if you add a camelCased prop to this list,
// you'll need to set attributeName to name.toLowerCase()
// instead in the assignment below.
].forEach(function (attributeName) {
  var name = attributeName.replace(CAMELIZE, capitalize);
  properties[name] = new PropertyInfoRecord(name, STRING, false, // mustUseProperty
  attributeName, null, // attributeNamespace
  false);
}); // String SVG attributes with the xlink namespace.

['xlink:actuate', 'xlink:arcrole', 'xlink:role', 'xlink:show', 'xlink:title', 'xlink:type' // NOTE: if you add a camelCased prop to this list,
// you'll need to set attributeName to name.toLowerCase()
// instead in the assignment below.
].forEach(function (attributeName) {
  var name = attributeName.replace(CAMELIZE, capitalize);
  properties[name] = new PropertyInfoRecord(name, STRING, false, // mustUseProperty
  attributeName, 'http://www.w3.org/1999/xlink', false);
}); // String SVG attributes with the xml namespace.

['xml:base', 'xml:lang', 'xml:space' // NOTE: if you add a camelCased prop to this list,
// you'll need to set attributeName to name.toLowerCase()
// instead in the assignment below.
].forEach(function (attributeName) {
  var name = attributeName.replace(CAMELIZE, capitalize);
  properties[name] = new PropertyInfoRecord(name, STRING, false, // mustUseProperty
  attributeName, 'http://www.w3.org/XML/1998/namespace', false);
}); // These attribute exists both in HTML and SVG.
// The attribute name is case-sensitive in SVG so we can't just use
// the React name like we do for attributes that exist only in HTML.

['tabIndex', 'crossOrigin'].forEach(function (attributeName) {
  properties[attributeName] = new PropertyInfoRecord(attributeName, STRING, false, // mustUseProperty
  attributeName.toLowerCase(), // attributeName
  null, // attributeNamespace
  false);
}); // These attributes accept URLs. These must not allow javascript: URLS.
// These will also need to accept Trusted Types object in the future.

var xlinkHref = 'xlinkHref';
properties[xlinkHref] = new PropertyInfoRecord('xlinkHref', STRING, false, // mustUseProperty
'xlink:href', 'http://www.w3.org/1999/xlink', true);
['src', 'href', 'action', 'formAction'].forEach(function (attributeName) {
  properties[attributeName] = new PropertyInfoRecord(attributeName, STRING, false, // mustUseProperty
  attributeName.toLowerCase(), // attributeName
  null, // attributeNamespace
  true);
});

var ReactDebugCurrentFrame = null;

{
  ReactDebugCurrentFrame = ReactSharedInternals.ReactDebugCurrentFrame;
} // A javascript: URL can contain leading C0 control or \u0020 SPACE,
// and any newline or tab are filtered out as if they're not part of the URL.
// https://url.spec.whatwg.org/#url-parsing
// Tab or newline are defined as \r\n\t:
// https://infra.spec.whatwg.org/#ascii-tab-or-newline
// A C0 control is a code point in the range \u0000 NULL to \u001F
// INFORMATION SEPARATOR ONE, inclusive:
// https://infra.spec.whatwg.org/#c0-control-or-space

/* eslint-disable max-len */


var isJavaScriptProtocol = /^[\u0000-\u001F ]*j[\r\n\t]*a[\r\n\t]*v[\r\n\t]*a[\r\n\t]*s[\r\n\t]*c[\r\n\t]*r[\r\n\t]*i[\r\n\t]*p[\r\n\t]*t[\r\n\t]*\:/i;
var didWarn = false;

function sanitizeURL(url) {
  {
    if (!didWarn && isJavaScriptProtocol.test(url)) {
      didWarn = true;

      error('A future version of React will block javascript: URLs as a security precaution. ' + 'Use event handlers instead if you can. If you need to generate unsafe HTML try ' + 'using dangerouslySetInnerHTML instead. React was passed %s.', JSON.stringify(url));
    }
  }
}

/**
 * Get the value for a property on a node. Only used in DEV for SSR validation.
 * The "expected" argument is used as a hint of what the expected value is.
 * Some properties have multiple equivalent values.
 */
function getValueForProperty(node, name, expected, propertyInfo) {
  {
    if (propertyInfo.mustUseProperty) {
      var propertyName = propertyInfo.propertyName;
      return node[propertyName];
    } else {
      if ( propertyInfo.sanitizeURL) {
        // If we haven't fully disabled javascript: URLs, and if
        // the hydration is successful of a javascript: URL, we
        // still want to warn on the client.
        sanitizeURL('' + expected);
      }

      var attributeName = propertyInfo.attributeName;
      var stringValue = null;

      if (propertyInfo.type === OVERLOADED_BOOLEAN) {
        if (node.hasAttribute(attributeName)) {
          var value = node.getAttribute(attributeName);

          if (value === '') {
            return true;
          }

          if (shouldRemoveAttribute(name, expected, propertyInfo, false)) {
            return value;
          }

          if (value === '' + expected) {
            return expected;
          }

          return value;
        }
      } else if (node.hasAttribute(attributeName)) {
        if (shouldRemoveAttribute(name, expected, propertyInfo, false)) {
          // We had an attribute but shouldn't have had one, so read it
          // for the error message.
          return node.getAttribute(attributeName);
        }

        if (propertyInfo.type === BOOLEAN) {
          // If this was a boolean, it doesn't matter what the value is
          // the fact that we have it is the same as the expected.
          return expected;
        } // Even if this property uses a namespace we use getAttribute
        // because we assume its namespaced name is the same as our config.
        // To use getAttributeNS we need the local name which we don't have
        // in our config atm.


        stringValue = node.getAttribute(attributeName);
      }

      if (shouldRemoveAttribute(name, expected, propertyInfo, false)) {
        return stringValue === null ? expected : stringValue;
      } else if (stringValue === '' + expected) {
        return expected;
      } else {
        return stringValue;
      }
    }
  }
}
/**
 * Get the value for a attribute on a node. Only used in DEV for SSR validation.
 * The third argument is used as a hint of what the expected value is. Some
 * attributes have multiple equivalent values.
 */

function getValueForAttribute(node, name, expected) {
  {
    if (!isAttributeNameSafe(name)) {
      return;
    }

    if (!node.hasAttribute(name)) {
      return expected === undefined ? undefined : null;
    }

    var value = node.getAttribute(name);

    if (value === '' + expected) {
      return expected;
    }

    return value;
  }
}
/**
 * Sets the value for a property on a node.
 *
 * @param {DOMElement} node
 * @param {string} name
 * @param {*} value
 */

function setValueForProperty(node, name, value, isCustomComponentTag) {
  var propertyInfo = getPropertyInfo(name);

  if (shouldIgnoreAttribute(name, propertyInfo, isCustomComponentTag)) {
    return;
  }

  if (shouldRemoveAttribute(name, value, propertyInfo, isCustomComponentTag)) {
    value = null;
  } // If the prop isn't in the special list, treat it as a simple attribute.


  if (isCustomComponentTag || propertyInfo === null) {
    if (isAttributeNameSafe(name)) {
      var _attributeName = name;

      if (value === null) {
        node.removeAttribute(_attributeName);
      } else {
        node.setAttribute(_attributeName,  '' + value);
      }
    }

    return;
  }

  var mustUseProperty = propertyInfo.mustUseProperty;

  if (mustUseProperty) {
    var propertyName = propertyInfo.propertyName;

    if (value === null) {
      var type = propertyInfo.type;
      node[propertyName] = type === BOOLEAN ? false : '';
    } else {
      // Contrary to `setAttribute`, object properties are properly
      // `toString`ed by IE8/9.
      node[propertyName] = value;
    }

    return;
  } // The rest are treated as attributes with special cases.


  var attributeName = propertyInfo.attributeName,
      attributeNamespace = propertyInfo.attributeNamespace;

  if (value === null) {
    node.removeAttribute(attributeName);
  } else {
    var _type = propertyInfo.type;
    var attributeValue;

    if (_type === BOOLEAN || _type === OVERLOADED_BOOLEAN && value === true) {
      // If attribute type is boolean, we know for sure it won't be an execution sink
      // and we won't require Trusted Type here.
      attributeValue = '';
    } else {
      // `setAttribute` with objects becomes only `[object]` in IE8/9,
      // ('' + value) makes it output the correct toString()-value.
      {
        attributeValue = '' + value;
      }

      if (propertyInfo.sanitizeURL) {
        sanitizeURL(attributeValue.toString());
      }
    }

    if (attributeNamespace) {
      node.setAttributeNS(attributeNamespace, attributeName, attributeValue);
    } else {
      node.setAttribute(attributeName, attributeValue);
    }
  }
}

var BEFORE_SLASH_RE = /^(.*)[\\\/]/;
function describeComponentFrame (name, source, ownerName) {
  var sourceInfo = '';

  if (source) {
    var path = source.fileName;
    var fileName = path.replace(BEFORE_SLASH_RE, '');

    {
      // In DEV, include code for a common special case:
      // prefer "folder/index.js" instead of just "index.js".
      if (/^index\./.test(fileName)) {
        var match = path.match(BEFORE_SLASH_RE);

        if (match) {
          var pathBeforeSlash = match[1];

          if (pathBeforeSlash) {
            var folderName = pathBeforeSlash.replace(BEFORE_SLASH_RE, '');
            fileName = folderName + '/' + fileName;
          }
        }
      }
    }

    sourceInfo = ' (at ' + fileName + ':' + source.lineNumber + ')';
  } else if (ownerName) {
    sourceInfo = ' (created by ' + ownerName + ')';
  }

  return '\n    in ' + (name || 'Unknown') + sourceInfo;
}

// The Symbol used to tag the ReactElement-like types. If there is no native Symbol
// nor polyfill, then a plain number is used for performance.
var hasSymbol = typeof Symbol === 'function' && Symbol.for;
var REACT_ELEMENT_TYPE = hasSymbol ? Symbol.for('react.element') : 0xeac7;
var REACT_PORTAL_TYPE = hasSymbol ? Symbol.for('react.portal') : 0xeaca;
var REACT_FRAGMENT_TYPE = hasSymbol ? Symbol.for('react.fragment') : 0xeacb;
var REACT_STRICT_MODE_TYPE = hasSymbol ? Symbol.for('react.strict_mode') : 0xeacc;
var REACT_PROFILER_TYPE = hasSymbol ? Symbol.for('react.profiler') : 0xead2;
var REACT_PROVIDER_TYPE = hasSymbol ? Symbol.for('react.provider') : 0xeacd;
var REACT_CONTEXT_TYPE = hasSymbol ? Symbol.for('react.context') : 0xeace; // TODO: We don't use AsyncMode or ConcurrentMode anymore. They were temporary
var REACT_CONCURRENT_MODE_TYPE = hasSymbol ? Symbol.for('react.concurrent_mode') : 0xeacf;
var REACT_FORWARD_REF_TYPE = hasSymbol ? Symbol.for('react.forward_ref') : 0xead0;
var REACT_SUSPENSE_TYPE = hasSymbol ? Symbol.for('react.suspense') : 0xead1;
var REACT_SUSPENSE_LIST_TYPE = hasSymbol ? Symbol.for('react.suspense_list') : 0xead8;
var REACT_MEMO_TYPE = hasSymbol ? Symbol.for('react.memo') : 0xead3;
var REACT_LAZY_TYPE = hasSymbol ? Symbol.for('react.lazy') : 0xead4;
var REACT_BLOCK_TYPE = hasSymbol ? Symbol.for('react.block') : 0xead9;
var MAYBE_ITERATOR_SYMBOL = typeof Symbol === 'function' && Symbol.iterator;
var FAUX_ITERATOR_SYMBOL = '@@iterator';
function getIteratorFn(maybeIterable) {
  if (maybeIterable === null || typeof maybeIterable !== 'object') {
    return null;
  }

  var maybeIterator = MAYBE_ITERATOR_SYMBOL && maybeIterable[MAYBE_ITERATOR_SYMBOL] || maybeIterable[FAUX_ITERATOR_SYMBOL];

  if (typeof maybeIterator === 'function') {
    return maybeIterator;
  }

  return null;
}

var Uninitialized = -1;
var Pending = 0;
var Resolved = 1;
var Rejected = 2;
function refineResolvedLazyComponent(lazyComponent) {
  return lazyComponent._status === Resolved ? lazyComponent._result : null;
}
function initializeLazyComponentType(lazyComponent) {
  if (lazyComponent._status === Uninitialized) {
    lazyComponent._status = Pending;
    var ctor = lazyComponent._ctor;
    var thenable = ctor();
    lazyComponent._result = thenable;
    thenable.then(function (moduleObject) {
      if (lazyComponent._status === Pending) {
        var defaultExport = moduleObject.default;

        {
          if (defaultExport === undefined) {
            error('lazy: Expected the result of a dynamic import() call. ' + 'Instead received: %s\n\nYour code should look like: \n  ' + "const MyComponent = lazy(() => import('./MyComponent'))", moduleObject);
          }
        }

        lazyComponent._status = Resolved;
        lazyComponent._result = defaultExport;
      }
    }, function (error) {
      if (lazyComponent._status === Pending) {
        lazyComponent._status = Rejected;
        lazyComponent._result = error;
      }
    });
  }
}

function getWrappedName(outerType, innerType, wrapperName) {
  var functionName = innerType.displayName || innerType.name || '';
  return outerType.displayName || (functionName !== '' ? wrapperName + "(" + functionName + ")" : wrapperName);
}

function getComponentName(type) {
  if (type == null) {
    // Host root, text node or just invalid type.
    return null;
  }

  {
    if (typeof type.tag === 'number') {
      error('Received an unexpected object in getComponentName(). ' + 'This is likely a bug in React. Please file an issue.');
    }
  }

  if (typeof type === 'function') {
    return type.displayName || type.name || null;
  }

  if (typeof type === 'string') {
    return type;
  }

  switch (type) {
    case REACT_FRAGMENT_TYPE:
      return 'Fragment';

    case REACT_PORTAL_TYPE:
      return 'Portal';

    case REACT_PROFILER_TYPE:
      return "Profiler";

    case REACT_STRICT_MODE_TYPE:
      return 'StrictMode';

    case REACT_SUSPENSE_TYPE:
      return 'Suspense';

    case REACT_SUSPENSE_LIST_TYPE:
      return 'SuspenseList';
  }

  if (typeof type === 'object') {
    switch (type.$$typeof) {
      case REACT_CONTEXT_TYPE:
        return 'Context.Consumer';

      case REACT_PROVIDER_TYPE:
        return 'Context.Provider';

      case REACT_FORWARD_REF_TYPE:
        return getWrappedName(type, type.render, 'ForwardRef');

      case REACT_MEMO_TYPE:
        return getComponentName(type.type);

      case REACT_BLOCK_TYPE:
        return getComponentName(type.render);

      case REACT_LAZY_TYPE:
        {
          var thenable = type;
          var resolvedThenable = refineResolvedLazyComponent(thenable);

          if (resolvedThenable) {
            return getComponentName(resolvedThenable);
          }

          break;
        }
    }
  }

  return null;
}

var ReactDebugCurrentFrame$1 = ReactSharedInternals.ReactDebugCurrentFrame;

function describeFiber(fiber) {
  switch (fiber.tag) {
    case HostRoot:
    case HostPortal:
    case HostText:
    case Fragment:
    case ContextProvider:
    case ContextConsumer:
      return '';

    default:
      var owner = fiber._debugOwner;
      var source = fiber._debugSource;
      var name = getComponentName(fiber.type);
      var ownerName = null;

      if (owner) {
        ownerName = getComponentName(owner.type);
      }

      return describeComponentFrame(name, source, ownerName);
  }
}

function getStackByFiberInDevAndProd(workInProgress) {
  var info = '';
  var node = workInProgress;

  do {
    info += describeFiber(node);
    node = node.return;
  } while (node);

  return info;
}
var current = null;
var isRendering = false;
function getCurrentFiberOwnerNameInDevOrNull() {
  {
    if (current === null) {
      return null;
    }

    var owner = current._debugOwner;

    if (owner !== null && typeof owner !== 'undefined') {
      return getComponentName(owner.type);
    }
  }

  return null;
}
function getCurrentFiberStackInDev() {
  {
    if (current === null) {
      return '';
    } // Safe because if current fiber exists, we are reconciling,
    // and it is guaranteed to be the work-in-progress version.


    return getStackByFiberInDevAndProd(current);
  }
}
function resetCurrentFiber() {
  {
    ReactDebugCurrentFrame$1.getCurrentStack = null;
    current = null;
    isRendering = false;
  }
}
function setCurrentFiber(fiber) {
  {
    ReactDebugCurrentFrame$1.getCurrentStack = getCurrentFiberStackInDev;
    current = fiber;
    isRendering = false;
  }
}
function setIsRendering(rendering) {
  {
    isRendering = rendering;
  }
}

// Flow does not allow string concatenation of most non-string types. To work
// around this limitation, we use an opaque type that can only be obtained by
// passing the value through getToStringValue first.
function toString(value) {
  return '' + value;
}
function getToStringValue(value) {
  switch (typeof value) {
    case 'boolean':
    case 'number':
    case 'object':
    case 'string':
    case 'undefined':
      return value;

    default:
      // function, symbol are assigned as empty strings
      return '';
  }
}

var ReactDebugCurrentFrame$2 = null;
var ReactControlledValuePropTypes = {
  checkPropTypes: null
};

{
  ReactDebugCurrentFrame$2 = ReactSharedInternals.ReactDebugCurrentFrame;
  var hasReadOnlyValue = {
    button: true,
    checkbox: true,
    image: true,
    hidden: true,
    radio: true,
    reset: true,
    submit: true
  };
  var propTypes = {
    value: function (props, propName, componentName) {
      if (hasReadOnlyValue[props.type] || props.onChange || props.readOnly || props.disabled || props[propName] == null || enableDeprecatedFlareAPI ) {
        return null;
      }

      return new Error('You provided a `value` prop to a form field without an ' + '`onChange` handler. This will render a read-only field. If ' + 'the field should be mutable use `defaultValue`. Otherwise, ' + 'set either `onChange` or `readOnly`.');
    },
    checked: function (props, propName, componentName) {
      if (props.onChange || props.readOnly || props.disabled || props[propName] == null || enableDeprecatedFlareAPI ) {
        return null;
      }

      return new Error('You provided a `checked` prop to a form field without an ' + '`onChange` handler. This will render a read-only field. If ' + 'the field should be mutable use `defaultChecked`. Otherwise, ' + 'set either `onChange` or `readOnly`.');
    }
  };
  /**
   * Provide a linked `value` attribute for controlled forms. You should not use
   * this outside of the ReactDOM controlled form components.
   */

  ReactControlledValuePropTypes.checkPropTypes = function (tagName, props) {
    checkPropTypes(propTypes, props, 'prop', tagName, ReactDebugCurrentFrame$2.getStackAddendum);
  };
}

function isCheckable(elem) {
  var type = elem.type;
  var nodeName = elem.nodeName;
  return nodeName && nodeName.toLowerCase() === 'input' && (type === 'checkbox' || type === 'radio');
}

function getTracker(node) {
  return node._valueTracker;
}

function detachTracker(node) {
  node._valueTracker = null;
}

function getValueFromNode(node) {
  var value = '';

  if (!node) {
    return value;
  }

  if (isCheckable(node)) {
    value = node.checked ? 'true' : 'false';
  } else {
    value = node.value;
  }

  return value;
}

function trackValueOnNode(node) {
  var valueField = isCheckable(node) ? 'checked' : 'value';
  var descriptor = Object.getOwnPropertyDescriptor(node.constructor.prototype, valueField);
  var currentValue = '' + node[valueField]; // if someone has already defined a value or Safari, then bail
  // and don't track value will cause over reporting of changes,
  // but it's better then a hard failure
  // (needed for certain tests that spyOn input values and Safari)

  if (node.hasOwnProperty(valueField) || typeof descriptor === 'undefined' || typeof descriptor.get !== 'function' || typeof descriptor.set !== 'function') {
    return;
  }

  var get = descriptor.get,
      set = descriptor.set;
  Object.defineProperty(node, valueField, {
    configurable: true,
    get: function () {
      return get.call(this);
    },
    set: function (value) {
      currentValue = '' + value;
      set.call(this, value);
    }
  }); // We could've passed this the first time
  // but it triggers a bug in IE11 and Edge 14/15.
  // Calling defineProperty() again should be equivalent.
  // https://github.com/facebook/react/issues/11768

  Object.defineProperty(node, valueField, {
    enumerable: descriptor.enumerable
  });
  var tracker = {
    getValue: function () {
      return currentValue;
    },
    setValue: function (value) {
      currentValue = '' + value;
    },
    stopTracking: function () {
      detachTracker(node);
      delete node[valueField];
    }
  };
  return tracker;
}

function track(node) {
  if (getTracker(node)) {
    return;
  } // TODO: Once it's just Fiber we can move this to node._wrapperState


  node._valueTracker = trackValueOnNode(node);
}
function updateValueIfChanged(node) {
  if (!node) {
    return false;
  }

  var tracker = getTracker(node); // if there is no tracker at this point it's unlikely
  // that trying again will succeed

  if (!tracker) {
    return true;
  }

  var lastValue = tracker.getValue();
  var nextValue = getValueFromNode(node);

  if (nextValue !== lastValue) {
    tracker.setValue(nextValue);
    return true;
  }

  return false;
}

var didWarnValueDefaultValue = false;
var didWarnCheckedDefaultChecked = false;
var didWarnControlledToUncontrolled = false;
var didWarnUncontrolledToControlled = false;

function isControlled(props) {
  var usesChecked = props.type === 'checkbox' || props.type === 'radio';
  return usesChecked ? props.checked != null : props.value != null;
}
/**
 * Implements an <input> host component that allows setting these optional
 * props: `checked`, `value`, `defaultChecked`, and `defaultValue`.
 *
 * If `checked` or `value` are not supplied (or null/undefined), user actions
 * that affect the checked state or value will trigger updates to the element.
 *
 * If they are supplied (and not null/undefined), the rendered element will not
 * trigger updates to the element. Instead, the props must change in order for
 * the rendered element to be updated.
 *
 * The rendered element will be initialized as unchecked (or `defaultChecked`)
 * with an empty value (or `defaultValue`).
 *
 * See http://www.w3.org/TR/2012/WD-html5-20121025/the-input-element.html
 */


function getHostProps(element, props) {
  var node = element;
  var checked = props.checked;

  var hostProps = _assign({}, props, {
    defaultChecked: undefined,
    defaultValue: undefined,
    value: undefined,
    checked: checked != null ? checked : node._wrapperState.initialChecked
  });

  return hostProps;
}
function initWrapperState(element, props) {
  {
    ReactControlledValuePropTypes.checkPropTypes('input', props);

    if (props.checked !== undefined && props.defaultChecked !== undefined && !didWarnCheckedDefaultChecked) {
      error('%s contains an input of type %s with both checked and defaultChecked props. ' + 'Input elements must be either controlled or uncontrolled ' + '(specify either the checked prop, or the defaultChecked prop, but not ' + 'both). Decide between using a controlled or uncontrolled input ' + 'element and remove one of these props. More info: ' + 'https://fb.me/react-controlled-components', getCurrentFiberOwnerNameInDevOrNull() || 'A component', props.type);

      didWarnCheckedDefaultChecked = true;
    }

    if (props.value !== undefined && props.defaultValue !== undefined && !didWarnValueDefaultValue) {
      error('%s contains an input of type %s with both value and defaultValue props. ' + 'Input elements must be either controlled or uncontrolled ' + '(specify either the value prop, or the defaultValue prop, but not ' + 'both). Decide between using a controlled or uncontrolled input ' + 'element and remove one of these props. More info: ' + 'https://fb.me/react-controlled-components', getCurrentFiberOwnerNameInDevOrNull() || 'A component', props.type);

      didWarnValueDefaultValue = true;
    }
  }

  var node = element;
  var defaultValue = props.defaultValue == null ? '' : props.defaultValue;
  node._wrapperState = {
    initialChecked: props.checked != null ? props.checked : props.defaultChecked,
    initialValue: getToStringValue(props.value != null ? props.value : defaultValue),
    controlled: isControlled(props)
  };
}
function updateChecked(element, props) {
  var node = element;
  var checked = props.checked;

  if (checked != null) {
    setValueForProperty(node, 'checked', checked, false);
  }
}
function updateWrapper(element, props) {
  var node = element;

  {
    var controlled = isControlled(props);

    if (!node._wrapperState.controlled && controlled && !didWarnUncontrolledToControlled) {
      error('A component is changing an uncontrolled input of type %s to be controlled. ' + 'Input elements should not switch from uncontrolled to controlled (or vice versa). ' + 'Decide between using a controlled or uncontrolled input ' + 'element for the lifetime of the component. More info: https://fb.me/react-controlled-components', props.type);

      didWarnUncontrolledToControlled = true;
    }

    if (node._wrapperState.controlled && !controlled && !didWarnControlledToUncontrolled) {
      error('A component is changing a controlled input of type %s to be uncontrolled. ' + 'Input elements should not switch from controlled to uncontrolled (or vice versa). ' + 'Decide between using a controlled or uncontrolled input ' + 'element for the lifetime of the component. More info: https://fb.me/react-controlled-components', props.type);

      didWarnControlledToUncontrolled = true;
    }
  }

  updateChecked(element, props);
  var value = getToStringValue(props.value);
  var type = props.type;

  if (value != null) {
    if (type === 'number') {
      if (value === 0 && node.value === '' || // We explicitly want to coerce to number here if possible.
      // eslint-disable-next-line
      node.value != value) {
        node.value = toString(value);
      }
    } else if (node.value !== toString(value)) {
      node.value = toString(value);
    }
  } else if (type === 'submit' || type === 'reset') {
    // Submit/reset inputs need the attribute removed completely to avoid
    // blank-text buttons.
    node.removeAttribute('value');
    return;
  }

  {
    // When syncing the value attribute, the value comes from a cascade of
    // properties:
    //  1. The value React property
    //  2. The defaultValue React property
    //  3. Otherwise there should be no change
    if (props.hasOwnProperty('value')) {
      setDefaultValue(node, props.type, value);
    } else if (props.hasOwnProperty('defaultValue')) {
      setDefaultValue(node, props.type, getToStringValue(props.defaultValue));
    }
  }

  {
    // When syncing the checked attribute, it only changes when it needs
    // to be removed, such as transitioning from a checkbox into a text input
    if (props.checked == null && props.defaultChecked != null) {
      node.defaultChecked = !!props.defaultChecked;
    }
  }
}
function postMountWrapper(element, props, isHydrating) {
  var node = element; // Do not assign value if it is already set. This prevents user text input
  // from being lost during SSR hydration.

  if (props.hasOwnProperty('value') || props.hasOwnProperty('defaultValue')) {
    var type = props.type;
    var isButton = type === 'submit' || type === 'reset'; // Avoid setting value attribute on submit/reset inputs as it overrides the
    // default value provided by the browser. See: #12872

    if (isButton && (props.value === undefined || props.value === null)) {
      return;
    }

    var initialValue = toString(node._wrapperState.initialValue); // Do not assign value if it is already set. This prevents user text input
    // from being lost during SSR hydration.

    if (!isHydrating) {
      {
        // When syncing the value attribute, the value property should use
        // the wrapperState._initialValue property. This uses:
        //
        //   1. The value React property when present
        //   2. The defaultValue React property when present
        //   3. An empty string
        if (initialValue !== node.value) {
          node.value = initialValue;
        }
      }
    }

    {
      // Otherwise, the value attribute is synchronized to the property,
      // so we assign defaultValue to the same thing as the value property
      // assignment step above.
      node.defaultValue = initialValue;
    }
  } // Normally, we'd just do `node.checked = node.checked` upon initial mount, less this bug
  // this is needed to work around a chrome bug where setting defaultChecked
  // will sometimes influence the value of checked (even after detachment).
  // Reference: https://bugs.chromium.org/p/chromium/issues/detail?id=608416
  // We need to temporarily unset name to avoid disrupting radio button groups.


  var name = node.name;

  if (name !== '') {
    node.name = '';
  }

  {
    // When syncing the checked attribute, both the checked property and
    // attribute are assigned at the same time using defaultChecked. This uses:
    //
    //   1. The checked React property when present
    //   2. The defaultChecked React property when present
    //   3. Otherwise, false
    node.defaultChecked = !node.defaultChecked;
    node.defaultChecked = !!node._wrapperState.initialChecked;
  }

  if (name !== '') {
    node.name = name;
  }
}
function restoreControlledState(element, props) {
  var node = element;
  updateWrapper(node, props);
  updateNamedCousins(node, props);
}

function updateNamedCousins(rootNode, props) {
  var name = props.name;

  if (props.type === 'radio' && name != null) {
    var queryRoot = rootNode;

    while (queryRoot.parentNode) {
      queryRoot = queryRoot.parentNode;
    } // If `rootNode.form` was non-null, then we could try `form.elements`,
    // but that sometimes behaves strangely in IE8. We could also try using
    // `form.getElementsByName`, but that will only return direct children
    // and won't include inputs that use the HTML5 `form=` attribute. Since
    // the input might not even be in a form. It might not even be in the
    // document. Let's just use the local `querySelectorAll` to ensure we don't
    // miss anything.


    var group = queryRoot.querySelectorAll('input[name=' + JSON.stringify('' + name) + '][type="radio"]');

    for (var i = 0; i < group.length; i++) {
      var otherNode = group[i];

      if (otherNode === rootNode || otherNode.form !== rootNode.form) {
        continue;
      } // This will throw if radio buttons rendered by different copies of React
      // and the same name are rendered into the same form (same as #1939).
      // That's probably okay; we don't support it just as we don't support
      // mixing React radio buttons with non-React ones.


      var otherProps = getFiberCurrentPropsFromNode$1(otherNode);

      if (!otherProps) {
        {
          throw Error( "ReactDOMInput: Mixing React and non-React radio inputs with the same `name` is not supported." );
        }
      } // We need update the tracked value on the named cousin since the value
      // was changed but the input saw no event or value set


      updateValueIfChanged(otherNode); // If this is a controlled radio button group, forcing the input that
      // was previously checked to update will cause it to be come re-checked
      // as appropriate.

      updateWrapper(otherNode, otherProps);
    }
  }
} // In Chrome, assigning defaultValue to certain input types triggers input validation.
// For number inputs, the display value loses trailing decimal points. For email inputs,
// Chrome raises "The specified value <x> is not a valid email address".
//
// Here we check to see if the defaultValue has actually changed, avoiding these problems
// when the user is inputting text
//
// https://github.com/facebook/react/issues/7253


function setDefaultValue(node, type, value) {
  if ( // Focused number inputs synchronize on blur. See ChangeEventPlugin.js
  type !== 'number' || node.ownerDocument.activeElement !== node) {
    if (value == null) {
      node.defaultValue = toString(node._wrapperState.initialValue);
    } else if (node.defaultValue !== toString(value)) {
      node.defaultValue = toString(value);
    }
  }
}

var didWarnSelectedSetOnOption = false;
var didWarnInvalidChild = false;

function flattenChildren(children) {
  var content = ''; // Flatten children. We'll warn if they are invalid
  // during validateProps() which runs for hydration too.
  // Note that this would throw on non-element objects.
  // Elements are stringified (which is normally irrelevant
  // but matters for <fbt>).

  React.Children.forEach(children, function (child) {
    if (child == null) {
      return;
    }

    content += child; // Note: we don't warn about invalid children here.
    // Instead, this is done separately below so that
    // it happens during the hydration codepath too.
  });
  return content;
}
/**
 * Implements an <option> host component that warns when `selected` is set.
 */


function validateProps(element, props) {
  {
    // This mirrors the codepath above, but runs for hydration too.
    // Warn about invalid children here so that client and hydration are consistent.
    // TODO: this seems like it could cause a DEV-only throw for hydration
    // if children contains a non-element object. We should try to avoid that.
    if (typeof props.children === 'object' && props.children !== null) {
      React.Children.forEach(props.children, function (child) {
        if (child == null) {
          return;
        }

        if (typeof child === 'string' || typeof child === 'number') {
          return;
        }

        if (typeof child.type !== 'string') {
          return;
        }

        if (!didWarnInvalidChild) {
          didWarnInvalidChild = true;

          error('Only strings and numbers are supported as <option> children.');
        }
      });
    } // TODO: Remove support for `selected` in <option>.


    if (props.selected != null && !didWarnSelectedSetOnOption) {
      error('Use the `defaultValue` or `value` props on <select> instead of ' + 'setting `selected` on <option>.');

      didWarnSelectedSetOnOption = true;
    }
  }
}
function postMountWrapper$1(element, props) {
  // value="" should make a value attribute (#6219)
  if (props.value != null) {
    element.setAttribute('value', toString(getToStringValue(props.value)));
  }
}
function getHostProps$1(element, props) {
  var hostProps = _assign({
    children: undefined
  }, props);

  var content = flattenChildren(props.children);

  if (content) {
    hostProps.children = content;
  }

  return hostProps;
}

var didWarnValueDefaultValue$1;

{
  didWarnValueDefaultValue$1 = false;
}

function getDeclarationErrorAddendum() {
  var ownerName = getCurrentFiberOwnerNameInDevOrNull();

  if (ownerName) {
    return '\n\nCheck the render method of `' + ownerName + '`.';
  }

  return '';
}

var valuePropNames = ['value', 'defaultValue'];
/**
 * Validation function for `value` and `defaultValue`.
 */

function checkSelectPropTypes(props) {
  {
    ReactControlledValuePropTypes.checkPropTypes('select', props);

    for (var i = 0; i < valuePropNames.length; i++) {
      var propName = valuePropNames[i];

      if (props[propName] == null) {
        continue;
      }

      var isArray = Array.isArray(props[propName]);

      if (props.multiple && !isArray) {
        error('The `%s` prop supplied to <select> must be an array if ' + '`multiple` is true.%s', propName, getDeclarationErrorAddendum());
      } else if (!props.multiple && isArray) {
        error('The `%s` prop supplied to <select> must be a scalar ' + 'value if `multiple` is false.%s', propName, getDeclarationErrorAddendum());
      }
    }
  }
}

function updateOptions(node, multiple, propValue, setDefaultSelected) {
  var options = node.options;

  if (multiple) {
    var selectedValues = propValue;
    var selectedValue = {};

    for (var i = 0; i < selectedValues.length; i++) {
      // Prefix to avoid chaos with special keys.
      selectedValue['$' + selectedValues[i]] = true;
    }

    for (var _i = 0; _i < options.length; _i++) {
      var selected = selectedValue.hasOwnProperty('$' + options[_i].value);

      if (options[_i].selected !== selected) {
        options[_i].selected = selected;
      }

      if (selected && setDefaultSelected) {
        options[_i].defaultSelected = true;
      }
    }
  } else {
    // Do not set `select.value` as exact behavior isn't consistent across all
    // browsers for all cases.
    var _selectedValue = toString(getToStringValue(propValue));

    var defaultSelected = null;

    for (var _i2 = 0; _i2 < options.length; _i2++) {
      if (options[_i2].value === _selectedValue) {
        options[_i2].selected = true;

        if (setDefaultSelected) {
          options[_i2].defaultSelected = true;
        }

        return;
      }

      if (defaultSelected === null && !options[_i2].disabled) {
        defaultSelected = options[_i2];
      }
    }

    if (defaultSelected !== null) {
      defaultSelected.selected = true;
    }
  }
}
/**
 * Implements a <select> host component that allows optionally setting the
 * props `value` and `defaultValue`. If `multiple` is false, the prop must be a
 * stringable. If `multiple` is true, the prop must be an array of stringables.
 *
 * If `value` is not supplied (or null/undefined), user actions that change the
 * selected option will trigger updates to the rendered options.
 *
 * If it is supplied (and not null/undefined), the rendered options will not
 * update in response to user actions. Instead, the `value` prop must change in
 * order for the rendered options to update.
 *
 * If `defaultValue` is provided, any options with the supplied values will be
 * selected.
 */


function getHostProps$2(element, props) {
  return _assign({}, props, {
    value: undefined
  });
}
function initWrapperState$1(element, props) {
  var node = element;

  {
    checkSelectPropTypes(props);
  }

  node._wrapperState = {
    wasMultiple: !!props.multiple
  };

  {
    if (props.value !== undefined && props.defaultValue !== undefined && !didWarnValueDefaultValue$1) {
      error('Select elements must be either controlled or uncontrolled ' + '(specify either the value prop, or the defaultValue prop, but not ' + 'both). Decide between using a controlled or uncontrolled select ' + 'element and remove one of these props. More info: ' + 'https://fb.me/react-controlled-components');

      didWarnValueDefaultValue$1 = true;
    }
  }
}
function postMountWrapper$2(element, props) {
  var node = element;
  node.multiple = !!props.multiple;
  var value = props.value;

  if (value != null) {
    updateOptions(node, !!props.multiple, value, false);
  } else if (props.defaultValue != null) {
    updateOptions(node, !!props.multiple, props.defaultValue, true);
  }
}
function postUpdateWrapper(element, props) {
  var node = element;
  var wasMultiple = node._wrapperState.wasMultiple;
  node._wrapperState.wasMultiple = !!props.multiple;
  var value = props.value;

  if (value != null) {
    updateOptions(node, !!props.multiple, value, false);
  } else if (wasMultiple !== !!props.multiple) {
    // For simplicity, reapply `defaultValue` if `multiple` is toggled.
    if (props.defaultValue != null) {
      updateOptions(node, !!props.multiple, props.defaultValue, true);
    } else {
      // Revert the select back to its default unselected state.
      updateOptions(node, !!props.multiple, props.multiple ? [] : '', false);
    }
  }
}
function restoreControlledState$1(element, props) {
  var node = element;
  var value = props.value;

  if (value != null) {
    updateOptions(node, !!props.multiple, value, false);
  }
}

var didWarnValDefaultVal = false;

/**
 * Implements a <textarea> host component that allows setting `value`, and
 * `defaultValue`. This differs from the traditional DOM API because value is
 * usually set as PCDATA children.
 *
 * If `value` is not supplied (or null/undefined), user actions that affect the
 * value will trigger updates to the element.
 *
 * If `value` is supplied (and not null/undefined), the rendered element will
 * not trigger updates to the element. Instead, the `value` prop must change in
 * order for the rendered element to be updated.
 *
 * The rendered element will be initialized with an empty value, the prop
 * `defaultValue` if specified, or the children content (deprecated).
 */
function getHostProps$3(element, props) {
  var node = element;

  if (!(props.dangerouslySetInnerHTML == null)) {
    {
      throw Error( "`dangerouslySetInnerHTML` does not make sense on <textarea>." );
    }
  } // Always set children to the same thing. In IE9, the selection range will
  // get reset if `textContent` is mutated.  We could add a check in setTextContent
  // to only set the value if/when the value differs from the node value (which would
  // completely solve this IE9 bug), but Sebastian+Sophie seemed to like this
  // solution. The value can be a boolean or object so that's why it's forced
  // to be a string.


  var hostProps = _assign({}, props, {
    value: undefined,
    defaultValue: undefined,
    children: toString(node._wrapperState.initialValue)
  });

  return hostProps;
}
function initWrapperState$2(element, props) {
  var node = element;

  {
    ReactControlledValuePropTypes.checkPropTypes('textarea', props);

    if (props.value !== undefined && props.defaultValue !== undefined && !didWarnValDefaultVal) {
      error('%s contains a textarea with both value and defaultValue props. ' + 'Textarea elements must be either controlled or uncontrolled ' + '(specify either the value prop, or the defaultValue prop, but not ' + 'both). Decide between using a controlled or uncontrolled textarea ' + 'and remove one of these props. More info: ' + 'https://fb.me/react-controlled-components', getCurrentFiberOwnerNameInDevOrNull() || 'A component');

      didWarnValDefaultVal = true;
    }
  }

  var initialValue = props.value; // Only bother fetching default value if we're going to use it

  if (initialValue == null) {
    var children = props.children,
        defaultValue = props.defaultValue;

    if (children != null) {
      {
        error('Use the `defaultValue` or `value` props instead of setting ' + 'children on <textarea>.');
      }

      {
        if (!(defaultValue == null)) {
          {
            throw Error( "If you supply `defaultValue` on a <textarea>, do not pass children." );
          }
        }

        if (Array.isArray(children)) {
          if (!(children.length <= 1)) {
            {
              throw Error( "<textarea> can only have at most one child." );
            }
          }

          children = children[0];
        }

        defaultValue = children;
      }
    }

    if (defaultValue == null) {
      defaultValue = '';
    }

    initialValue = defaultValue;
  }

  node._wrapperState = {
    initialValue: getToStringValue(initialValue)
  };
}
function updateWrapper$1(element, props) {
  var node = element;
  var value = getToStringValue(props.value);
  var defaultValue = getToStringValue(props.defaultValue);

  if (value != null) {
    // Cast `value` to a string to ensure the value is set correctly. While
    // browsers typically do this as necessary, jsdom doesn't.
    var newValue = toString(value); // To avoid side effects (such as losing text selection), only set value if changed

    if (newValue !== node.value) {
      node.value = newValue;
    }

    if (props.defaultValue == null && node.defaultValue !== newValue) {
      node.defaultValue = newValue;
    }
  }

  if (defaultValue != null) {
    node.defaultValue = toString(defaultValue);
  }
}
function postMountWrapper$3(element, props) {
  var node = element; // This is in postMount because we need access to the DOM node, which is not
  // available until after the component has mounted.

  var textContent = node.textContent; // Only set node.value if textContent is equal to the expected
  // initial value. In IE10/IE11 there is a bug where the placeholder attribute
  // will populate textContent as well.
  // https://developer.microsoft.com/microsoft-edge/platform/issues/101525/

  if (textContent === node._wrapperState.initialValue) {
    if (textContent !== '' && textContent !== null) {
      node.value = textContent;
    }
  }
}
function restoreControlledState$2(element, props) {
  // DOM component is still mounted; update
  updateWrapper$1(element, props);
}

var HTML_NAMESPACE = 'http://www.w3.org/1999/xhtml';
var MATH_NAMESPACE = 'http://www.w3.org/1998/Math/MathML';
var SVG_NAMESPACE = 'http://www.w3.org/2000/svg';
var Namespaces = {
  html: HTML_NAMESPACE,
  mathml: MATH_NAMESPACE,
  svg: SVG_NAMESPACE
}; // Assumes there is no parent namespace.

function getIntrinsicNamespace(type) {
  switch (type) {
    case 'svg':
      return SVG_NAMESPACE;

    case 'math':
      return MATH_NAMESPACE;

    default:
      return HTML_NAMESPACE;
  }
}
function getChildNamespace(parentNamespace, type) {
  if (parentNamespace == null || parentNamespace === HTML_NAMESPACE) {
    // No (or default) parent namespace: potential entry point.
    return getIntrinsicNamespace(type);
  }

  if (parentNamespace === SVG_NAMESPACE && type === 'foreignObject') {
    // We're leaving SVG.
    return HTML_NAMESPACE;
  } // By default, pass namespace below.


  return parentNamespace;
}

/* globals MSApp */

/**
 * Create a function which has 'unsafe' privileges (required by windows8 apps)
 */
var createMicrosoftUnsafeLocalFunction = function (func) {
  if (typeof MSApp !== 'undefined' && MSApp.execUnsafeLocalFunction) {
    return function (arg0, arg1, arg2, arg3) {
      MSApp.execUnsafeLocalFunction(function () {
        return func(arg0, arg1, arg2, arg3);
      });
    };
  } else {
    return func;
  }
};

var reusableSVGContainer;
/**
 * Set the innerHTML property of a node
 *
 * @param {DOMElement} node
 * @param {string} html
 * @internal
 */

var setInnerHTML = createMicrosoftUnsafeLocalFunction(function (node, html) {
  if (node.namespaceURI === Namespaces.svg) {

    if (!('innerHTML' in node)) {
      // IE does not have innerHTML for SVG nodes, so instead we inject the
      // new markup in a temp node and then move the child nodes across into
      // the target node
      reusableSVGContainer = reusableSVGContainer || document.createElement('div');
      reusableSVGContainer.innerHTML = '<svg>' + html.valueOf().toString() + '</svg>';
      var svgNode = reusableSVGContainer.firstChild;

      while (node.firstChild) {
        node.removeChild(node.firstChild);
      }

      while (svgNode.firstChild) {
        node.appendChild(svgNode.firstChild);
      }

      return;
    }
  }

  node.innerHTML = html;
});

/**
 * HTML nodeType values that represent the type of the node
 */
var ELEMENT_NODE = 1;
var TEXT_NODE = 3;
var COMMENT_NODE = 8;
var DOCUMENT_NODE = 9;
var DOCUMENT_FRAGMENT_NODE = 11;

/**
 * Set the textContent property of a node. For text updates, it's faster
 * to set the `nodeValue` of the Text node directly instead of using
 * `.textContent` which will remove the existing node and create a new one.
 *
 * @param {DOMElement} node
 * @param {string} text
 * @internal
 */

var setTextContent = function (node, text) {
  if (text) {
    var firstChild = node.firstChild;

    if (firstChild && firstChild === node.lastChild && firstChild.nodeType === TEXT_NODE) {
      firstChild.nodeValue = text;
      return;
    }
  }

  node.textContent = text;
};

// Do not use the below two methods directly!
// Instead use constants exported from DOMTopLevelEventTypes in ReactDOM.
// (It is the only module that is allowed to access these methods.)
function unsafeCastStringToDOMTopLevelType(topLevelType) {
  return topLevelType;
}
function unsafeCastDOMTopLevelTypeToString(topLevelType) {
  return topLevelType;
}

/**
 * Generate a mapping of standard vendor prefixes using the defined style property and event name.
 *
 * @param {string} styleProp
 * @param {string} eventName
 * @returns {object}
 */

function makePrefixMap(styleProp, eventName) {
  var prefixes = {};
  prefixes[styleProp.toLowerCase()] = eventName.toLowerCase();
  prefixes['Webkit' + styleProp] = 'webkit' + eventName;
  prefixes['Moz' + styleProp] = 'moz' + eventName;
  return prefixes;
}
/**
 * A list of event names to a configurable list of vendor prefixes.
 */


var vendorPrefixes = {
  animationend: makePrefixMap('Animation', 'AnimationEnd'),
  animationiteration: makePrefixMap('Animation', 'AnimationIteration'),
  animationstart: makePrefixMap('Animation', 'AnimationStart'),
  transitionend: makePrefixMap('Transition', 'TransitionEnd')
};
/**
 * Event names that have already been detected and prefixed (if applicable).
 */

var prefixedEventNames = {};
/**
 * Element to check for prefixes on.
 */

var style = {};
/**
 * Bootstrap if a DOM exists.
 */

if (canUseDOM) {
  style = document.createElement('div').style; // On some platforms, in particular some releases of Android 4.x,
  // the un-prefixed "animation" and "transition" properties are defined on the
  // style object but the events that fire will still be prefixed, so we need
  // to check if the un-prefixed events are usable, and if not remove them from the map.

  if (!('AnimationEvent' in window)) {
    delete vendorPrefixes.animationend.animation;
    delete vendorPrefixes.animationiteration.animation;
    delete vendorPrefixes.animationstart.animation;
  } // Same as above


  if (!('TransitionEvent' in window)) {
    delete vendorPrefixes.transitionend.transition;
  }
}
/**
 * Attempts to determine the correct vendor prefixed event name.
 *
 * @param {string} eventName
 * @returns {string}
 */


function getVendorPrefixedEventName(eventName) {
  if (prefixedEventNames[eventName]) {
    return prefixedEventNames[eventName];
  } else if (!vendorPrefixes[eventName]) {
    return eventName;
  }

  var prefixMap = vendorPrefixes[eventName];

  for (var styleProp in prefixMap) {
    if (prefixMap.hasOwnProperty(styleProp) && styleProp in style) {
      return prefixedEventNames[eventName] = prefixMap[styleProp];
    }
  }

  return eventName;
}

/**
 * To identify top level events in ReactDOM, we use constants defined by this
 * module. This is the only module that uses the unsafe* methods to express
 * that the constants actually correspond to the browser event names. This lets
 * us save some bundle size by avoiding a top level type -> event name map.
 * The rest of ReactDOM code should import top level types from this file.
 */

var TOP_ABORT = unsafeCastStringToDOMTopLevelType('abort');
var TOP_ANIMATION_END = unsafeCastStringToDOMTopLevelType(getVendorPrefixedEventName('animationend'));
var TOP_ANIMATION_ITERATION = unsafeCastStringToDOMTopLevelType(getVendorPrefixedEventName('animationiteration'));
var TOP_ANIMATION_START = unsafeCastStringToDOMTopLevelType(getVendorPrefixedEventName('animationstart'));
var TOP_BLUR = unsafeCastStringToDOMTopLevelType('blur');
var TOP_CAN_PLAY = unsafeCastStringToDOMTopLevelType('canplay');
var TOP_CAN_PLAY_THROUGH = unsafeCastStringToDOMTopLevelType('canplaythrough');
var TOP_CANCEL = unsafeCastStringToDOMTopLevelType('cancel');
var TOP_CHANGE = unsafeCastStringToDOMTopLevelType('change');
var TOP_CLICK = unsafeCastStringToDOMTopLevelType('click');
var TOP_CLOSE = unsafeCastStringToDOMTopLevelType('close');
var TOP_COMPOSITION_END = unsafeCastStringToDOMTopLevelType('compositionend');
var TOP_COMPOSITION_START = unsafeCastStringToDOMTopLevelType('compositionstart');
var TOP_COMPOSITION_UPDATE = unsafeCastStringToDOMTopLevelType('compositionupdate');
var TOP_CONTEXT_MENU = unsafeCastStringToDOMTopLevelType('contextmenu');
var TOP_COPY = unsafeCastStringToDOMTopLevelType('copy');
var TOP_CUT = unsafeCastStringToDOMTopLevelType('cut');
var TOP_DOUBLE_CLICK = unsafeCastStringToDOMTopLevelType('dblclick');
var TOP_AUX_CLICK = unsafeCastStringToDOMTopLevelType('auxclick');
var TOP_DRAG = unsafeCastStringToDOMTopLevelType('drag');
var TOP_DRAG_END = unsafeCastStringToDOMTopLevelType('dragend');
var TOP_DRAG_ENTER = unsafeCastStringToDOMTopLevelType('dragenter');
var TOP_DRAG_EXIT = unsafeCastStringToDOMTopLevelType('dragexit');
var TOP_DRAG_LEAVE = unsafeCastStringToDOMTopLevelType('dragleave');
var TOP_DRAG_OVER = unsafeCastStringToDOMTopLevelType('dragover');
var TOP_DRAG_START = unsafeCastStringToDOMTopLevelType('dragstart');
var TOP_DROP = unsafeCastStringToDOMTopLevelType('drop');
var TOP_DURATION_CHANGE = unsafeCastStringToDOMTopLevelType('durationchange');
var TOP_EMPTIED = unsafeCastStringToDOMTopLevelType('emptied');
var TOP_ENCRYPTED = unsafeCastStringToDOMTopLevelType('encrypted');
var TOP_ENDED = unsafeCastStringToDOMTopLevelType('ended');
var TOP_ERROR = unsafeCastStringToDOMTopLevelType('error');
var TOP_FOCUS = unsafeCastStringToDOMTopLevelType('focus');
var TOP_GOT_POINTER_CAPTURE = unsafeCastStringToDOMTopLevelType('gotpointercapture');
var TOP_INPUT = unsafeCastStringToDOMTopLevelType('input');
var TOP_INVALID = unsafeCastStringToDOMTopLevelType('invalid');
var TOP_KEY_DOWN = unsafeCastStringToDOMTopLevelType('keydown');
var TOP_KEY_PRESS = unsafeCastStringToDOMTopLevelType('keypress');
var TOP_KEY_UP = unsafeCastStringToDOMTopLevelType('keyup');
var TOP_LOAD = unsafeCastStringToDOMTopLevelType('load');
var TOP_LOAD_START = unsafeCastStringToDOMTopLevelType('loadstart');
var TOP_LOADED_DATA = unsafeCastStringToDOMTopLevelType('loadeddata');
var TOP_LOADED_METADATA = unsafeCastStringToDOMTopLevelType('loadedmetadata');
var TOP_LOST_POINTER_CAPTURE = unsafeCastStringToDOMTopLevelType('lostpointercapture');
var TOP_MOUSE_DOWN = unsafeCastStringToDOMTopLevelType('mousedown');
var TOP_MOUSE_MOVE = unsafeCastStringToDOMTopLevelType('mousemove');
var TOP_MOUSE_OUT = unsafeCastStringToDOMTopLevelType('mouseout');
var TOP_MOUSE_OVER = unsafeCastStringToDOMTopLevelType('mouseover');
var TOP_MOUSE_UP = unsafeCastStringToDOMTopLevelType('mouseup');
var TOP_PASTE = unsafeCastStringToDOMTopLevelType('paste');
var TOP_PAUSE = unsafeCastStringToDOMTopLevelType('pause');
var TOP_PLAY = unsafeCastStringToDOMTopLevelType('play');
var TOP_PLAYING = unsafeCastStringToDOMTopLevelType('playing');
var TOP_POINTER_CANCEL = unsafeCastStringToDOMTopLevelType('pointercancel');
var TOP_POINTER_DOWN = unsafeCastStringToDOMTopLevelType('pointerdown');
var TOP_POINTER_MOVE = unsafeCastStringToDOMTopLevelType('pointermove');
var TOP_POINTER_OUT = unsafeCastStringToDOMTopLevelType('pointerout');
var TOP_POINTER_OVER = unsafeCastStringToDOMTopLevelType('pointerover');
var TOP_POINTER_UP = unsafeCastStringToDOMTopLevelType('pointerup');
var TOP_PROGRESS = unsafeCastStringToDOMTopLevelType('progress');
var TOP_RATE_CHANGE = unsafeCastStringToDOMTopLevelType('ratechange');
var TOP_RESET = unsafeCastStringToDOMTopLevelType('reset');
var TOP_SCROLL = unsafeCastStringToDOMTopLevelType('scroll');
var TOP_SEEKED = unsafeCastStringToDOMTopLevelType('seeked');
var TOP_SEEKING = unsafeCastStringToDOMTopLevelType('seeking');
var TOP_SELECTION_CHANGE = unsafeCastStringToDOMTopLevelType('selectionchange');
var TOP_STALLED = unsafeCastStringToDOMTopLevelType('stalled');
var TOP_SUBMIT = unsafeCastStringToDOMTopLevelType('submit');
var TOP_SUSPEND = unsafeCastStringToDOMTopLevelType('suspend');
var TOP_TEXT_INPUT = unsafeCastStringToDOMTopLevelType('textInput');
var TOP_TIME_UPDATE = unsafeCastStringToDOMTopLevelType('timeupdate');
var TOP_TOGGLE = unsafeCastStringToDOMTopLevelType('toggle');
var TOP_TOUCH_CANCEL = unsafeCastStringToDOMTopLevelType('touchcancel');
var TOP_TOUCH_END = unsafeCastStringToDOMTopLevelType('touchend');
var TOP_TOUCH_MOVE = unsafeCastStringToDOMTopLevelType('touchmove');
var TOP_TOUCH_START = unsafeCastStringToDOMTopLevelType('touchstart');
var TOP_TRANSITION_END = unsafeCastStringToDOMTopLevelType(getVendorPrefixedEventName('transitionend'));
var TOP_VOLUME_CHANGE = unsafeCastStringToDOMTopLevelType('volumechange');
var TOP_WAITING = unsafeCastStringToDOMTopLevelType('waiting');
var TOP_WHEEL = unsafeCastStringToDOMTopLevelType('wheel'); // List of events that need to be individually attached to media elements.
// Note that events in this list will *not* be listened to at the top level
// unless they're explicitly whitelisted in `ReactBrowserEventEmitter.listenTo`.

var mediaEventTypes = [TOP_ABORT, TOP_CAN_PLAY, TOP_CAN_PLAY_THROUGH, TOP_DURATION_CHANGE, TOP_EMPTIED, TOP_ENCRYPTED, TOP_ENDED, TOP_ERROR, TOP_LOADED_DATA, TOP_LOADED_METADATA, TOP_LOAD_START, TOP_PAUSE, TOP_PLAY, TOP_PLAYING, TOP_PROGRESS, TOP_RATE_CHANGE, TOP_SEEKED, TOP_SEEKING, TOP_STALLED, TOP_SUSPEND, TOP_TIME_UPDATE, TOP_VOLUME_CHANGE, TOP_WAITING];
function getRawEventName(topLevelType) {
  return unsafeCastDOMTopLevelTypeToString(topLevelType);
}

var PossiblyWeakMap = typeof WeakMap === 'function' ? WeakMap : Map; // prettier-ignore

var elementListenerMap = new PossiblyWeakMap();
function getListenerMapForElement(element) {
  var listenerMap = elementListenerMap.get(element);

  if (listenerMap === undefined) {
    listenerMap = new Map();
    elementListenerMap.set(element, listenerMap);
  }

  return listenerMap;
}

/**
 * `ReactInstanceMap` maintains a mapping from a public facing stateful
 * instance (key) and the internal representation (value). This allows public
 * methods to accept the user facing instance as an argument and map them back
 * to internal methods.
 *
 * Note that this module is currently shared and assumed to be stateless.
 * If this becomes an actual Map, that will break.
 */
function get(key) {
  return key._reactInternalFiber;
}
function has(key) {
  return key._reactInternalFiber !== undefined;
}
function set(key, value) {
  key._reactInternalFiber = value;
}

// Don't change these two values. They're used by React Dev Tools.
var NoEffect =
/*              */
0;
var PerformedWork =
/*         */
1; // You can change the rest (and add more).

var Placement =
/*             */
2;
var Update =
/*                */
4;
var PlacementAndUpdate =
/*    */
6;
var Deletion =
/*              */
8;
var ContentReset =
/*          */
16;
var Callback =
/*              */
32;
var DidCapture =
/*            */
64;
var Ref =
/*                   */
128;
var Snapshot =
/*              */
256;
var Passive =
/*               */
512;
var Hydrating =
/*             */
1024;
var HydratingAndUpdate =
/*    */
1028; // Passive & Update & Callback & Ref & Snapshot

var LifecycleEffectMask =
/*   */
932; // Union of all host effects

var HostEffectMask =
/*        */
2047;
var Incomplete =
/*            */
2048;
var ShouldCapture =
/*         */
4096;

var ReactCurrentOwner = ReactSharedInternals.ReactCurrentOwner;
function getNearestMountedFiber(fiber) {
  var node = fiber;
  var nearestMounted = fiber;

  if (!fiber.alternate) {
    // If there is no alternate, this might be a new tree that isn't inserted
    // yet. If it is, then it will have a pending insertion effect on it.
    var nextNode = node;

    do {
      node = nextNode;

      if ((node.effectTag & (Placement | Hydrating)) !== NoEffect) {
        // This is an insertion or in-progress hydration. The nearest possible
        // mounted fiber is the parent but we need to continue to figure out
        // if that one is still mounted.
        nearestMounted = node.return;
      }

      nextNode = node.return;
    } while (nextNode);
  } else {
    while (node.return) {
      node = node.return;
    }
  }

  if (node.tag === HostRoot) {
    // TODO: Check if this was a nested HostRoot when used with
    // renderContainerIntoSubtree.
    return nearestMounted;
  } // If we didn't hit the root, that means that we're in an disconnected tree
  // that has been unmounted.


  return null;
}
function getSuspenseInstanceFromFiber(fiber) {
  if (fiber.tag === SuspenseComponent) {
    var suspenseState = fiber.memoizedState;

    if (suspenseState === null) {
      var current = fiber.alternate;

      if (current !== null) {
        suspenseState = current.memoizedState;
      }
    }

    if (suspenseState !== null) {
      return suspenseState.dehydrated;
    }
  }

  return null;
}
function getContainerFromFiber(fiber) {
  return fiber.tag === HostRoot ? fiber.stateNode.containerInfo : null;
}
function isFiberMounted(fiber) {
  return getNearestMountedFiber(fiber) === fiber;
}
function isMounted(component) {
  {
    var owner = ReactCurrentOwner.current;

    if (owner !== null && owner.tag === ClassComponent) {
      var ownerFiber = owner;
      var instance = ownerFiber.stateNode;

      if (!instance._warnedAboutRefsInRender) {
        error('%s is accessing isMounted inside its render() function. ' + 'render() should be a pure function of props and state. It should ' + 'never access something that requires stale data from the previous ' + 'render, such as refs. Move this logic to componentDidMount and ' + 'componentDidUpdate instead.', getComponentName(ownerFiber.type) || 'A component');
      }

      instance._warnedAboutRefsInRender = true;
    }
  }

  var fiber = get(component);

  if (!fiber) {
    return false;
  }

  return getNearestMountedFiber(fiber) === fiber;
}

function assertIsMounted(fiber) {
  if (!(getNearestMountedFiber(fiber) === fiber)) {
    {
      throw Error( "Unable to find node on an unmounted component." );
    }
  }
}

function findCurrentFiberUsingSlowPath(fiber) {
  var alternate = fiber.alternate;

  if (!alternate) {
    // If there is no alternate, then we only need to check if it is mounted.
    var nearestMounted = getNearestMountedFiber(fiber);

    if (!(nearestMounted !== null)) {
      {
        throw Error( "Unable to find node on an unmounted component." );
      }
    }

    if (nearestMounted !== fiber) {
      return null;
    }

    return fiber;
  } // If we have two possible branches, we'll walk backwards up to the root
  // to see what path the root points to. On the way we may hit one of the
  // special cases and we'll deal with them.


  var a = fiber;
  var b = alternate;

  while (true) {
    var parentA = a.return;

    if (parentA === null) {
      // We're at the root.
      break;
    }

    var parentB = parentA.alternate;

    if (parentB === null) {
      // There is no alternate. This is an unusual case. Currently, it only
      // happens when a Suspense component is hidden. An extra fragment fiber
      // is inserted in between the Suspense fiber and its children. Skip
      // over this extra fragment fiber and proceed to the next parent.
      var nextParent = parentA.return;

      if (nextParent !== null) {
        a = b = nextParent;
        continue;
      } // If there's no parent, we're at the root.


      break;
    } // If both copies of the parent fiber point to the same child, we can
    // assume that the child is current. This happens when we bailout on low
    // priority: the bailed out fiber's child reuses the current child.


    if (parentA.child === parentB.child) {
      var child = parentA.child;

      while (child) {
        if (child === a) {
          // We've determined that A is the current branch.
          assertIsMounted(parentA);
          return fiber;
        }

        if (child === b) {
          // We've determined that B is the current branch.
          assertIsMounted(parentA);
          return alternate;
        }

        child = child.sibling;
      } // We should never have an alternate for any mounting node. So the only
      // way this could possibly happen is if this was unmounted, if at all.


      {
        {
          throw Error( "Unable to find node on an unmounted component." );
        }
      }
    }

    if (a.return !== b.return) {
      // The return pointer of A and the return pointer of B point to different
      // fibers. We assume that return pointers never criss-cross, so A must
      // belong to the child set of A.return, and B must belong to the child
      // set of B.return.
      a = parentA;
      b = parentB;
    } else {
      // The return pointers point to the same fiber. We'll have to use the
      // default, slow path: scan the child sets of each parent alternate to see
      // which child belongs to which set.
      //
      // Search parent A's child set
      var didFindChild = false;
      var _child = parentA.child;

      while (_child) {
        if (_child === a) {
          didFindChild = true;
          a = parentA;
          b = parentB;
          break;
        }

        if (_child === b) {
          didFindChild = true;
          b = parentA;
          a = parentB;
          break;
        }

        _child = _child.sibling;
      }

      if (!didFindChild) {
        // Search parent B's child set
        _child = parentB.child;

        while (_child) {
          if (_child === a) {
            didFindChild = true;
            a = parentB;
            b = parentA;
            break;
          }

          if (_child === b) {
            didFindChild = true;
            b = parentB;
            a = parentA;
            break;
          }

          _child = _child.sibling;
        }

        if (!didFindChild) {
          {
            throw Error( "Child was not found in either parent set. This indicates a bug in React related to the return pointer. Please file an issue." );
          }
        }
      }
    }

    if (!(a.alternate === b)) {
      {
        throw Error( "Return fibers should always be each others' alternates. This error is likely caused by a bug in React. Please file an issue." );
      }
    }
  } // If the root is not a host container, we're in a disconnected tree. I.e.
  // unmounted.


  if (!(a.tag === HostRoot)) {
    {
      throw Error( "Unable to find node on an unmounted component." );
    }
  }

  if (a.stateNode.current === a) {
    // We've determined that A is the current branch.
    return fiber;
  } // Otherwise B has to be current branch.


  return alternate;
}
function findCurrentHostFiber(parent) {
  var currentParent = findCurrentFiberUsingSlowPath(parent);

  if (!currentParent) {
    return null;
  } // Next we'll drill down this component to find the first HostComponent/Text.


  var node = currentParent;

  while (true) {
    if (node.tag === HostComponent || node.tag === HostText) {
      return node;
    } else if (node.child) {
      node.child.return = node;
      node = node.child;
      continue;
    }

    if (node === currentParent) {
      return null;
    }

    while (!node.sibling) {
      if (!node.return || node.return === currentParent) {
        return null;
      }

      node = node.return;
    }

    node.sibling.return = node.return;
    node = node.sibling;
  } // Flow needs the return null here, but ESLint complains about it.
  // eslint-disable-next-line no-unreachable


  return null;
}
function findCurrentHostFiberWithNoPortals(parent) {
  var currentParent = findCurrentFiberUsingSlowPath(parent);

  if (!currentParent) {
    return null;
  } // Next we'll drill down this component to find the first HostComponent/Text.


  var node = currentParent;

  while (true) {
    if (node.tag === HostComponent || node.tag === HostText || enableFundamentalAPI ) {
      return node;
    } else if (node.child && node.tag !== HostPortal) {
      node.child.return = node;
      node = node.child;
      continue;
    }

    if (node === currentParent) {
      return null;
    }

    while (!node.sibling) {
      if (!node.return || node.return === currentParent) {
        return null;
      }

      node = node.return;
    }

    node.sibling.return = node.return;
    node = node.sibling;
  } // Flow needs the return null here, but ESLint complains about it.
  // eslint-disable-next-line no-unreachable


  return null;
}

/**
 * Accumulates items that must not be null or undefined into the first one. This
 * is used to conserve memory by avoiding array allocations, and thus sacrifices
 * API cleanness. Since `current` can be null before being passed in and not
 * null after this function, make sure to assign it back to `current`:
 *
 * `a = accumulateInto(a, b);`
 *
 * This API should be sparingly used. Try `accumulate` for something cleaner.
 *
 * @return {*|array<*>} An accumulation of items.
 */

function accumulateInto(current, next) {
  if (!(next != null)) {
    {
      throw Error( "accumulateInto(...): Accumulated items must not be null or undefined." );
    }
  }

  if (current == null) {
    return next;
  } // Both are not empty. Warning: Never call x.concat(y) when you are not
  // certain that x is an Array (x could be a string with concat method).


  if (Array.isArray(current)) {
    if (Array.isArray(next)) {
      current.push.apply(current, next);
      return current;
    }

    current.push(next);
    return current;
  }

  if (Array.isArray(next)) {
    // A bit too dangerous to mutate `next`.
    return [current].concat(next);
  }

  return [current, next];
}

/**
 * @param {array} arr an "accumulation" of items which is either an Array or
 * a single item. Useful when paired with the `accumulate` module. This is a
 * simple utility that allows us to reason about a collection of items, but
 * handling the case when there is exactly one item (and we do not need to
 * allocate an array).
 * @param {function} cb Callback invoked with each element or a collection.
 * @param {?} [scope] Scope used as `this` in a callback.
 */
function forEachAccumulated(arr, cb, scope) {
  if (Array.isArray(arr)) {
    arr.forEach(cb, scope);
  } else if (arr) {
    cb.call(scope, arr);
  }
}

/**
 * Internal queue of events that have accumulated their dispatches and are
 * waiting to have their dispatches executed.
 */

var eventQueue = null;
/**
 * Dispatches an event and releases it back into the pool, unless persistent.
 *
 * @param {?object} event Synthetic event to be dispatched.
 * @private
 */

var executeDispatchesAndRelease = function (event) {
  if (event) {
    executeDispatchesInOrder(event);

    if (!event.isPersistent()) {
      event.constructor.release(event);
    }
  }
};

var executeDispatchesAndReleaseTopLevel = function (e) {
  return executeDispatchesAndRelease(e);
};

function runEventsInBatch(events) {
  if (events !== null) {
    eventQueue = accumulateInto(eventQueue, events);
  } // Set `eventQueue` to null before processing it so that we can tell if more
  // events get enqueued while processing.


  var processingEventQueue = eventQueue;
  eventQueue = null;

  if (!processingEventQueue) {
    return;
  }

  forEachAccumulated(processingEventQueue, executeDispatchesAndReleaseTopLevel);

  if (!!eventQueue) {
    {
      throw Error( "processEventQueue(): Additional events were enqueued while processing an event queue. Support for this has not yet been implemented." );
    }
  } // This would be a good time to rethrow if any of the event handlers threw.


  rethrowCaughtError();
}

/**
 * Gets the target node from a native browser event by accounting for
 * inconsistencies in browser DOM APIs.
 *
 * @param {object} nativeEvent Native browser event.
 * @return {DOMEventTarget} Target node.
 */

function getEventTarget(nativeEvent) {
  // Fallback to nativeEvent.srcElement for IE9
  // https://github.com/facebook/react/issues/12506
  var target = nativeEvent.target || nativeEvent.srcElement || window; // Normalize SVG <use> element events #4963

  if (target.correspondingUseElement) {
    target = target.correspondingUseElement;
  } // Safari may fire events on text nodes (Node.TEXT_NODE is 3).
  // @see http://www.quirksmode.org/js/events_properties.html


  return target.nodeType === TEXT_NODE ? target.parentNode : target;
}

/**
 * Checks if an event is supported in the current execution environment.
 *
 * NOTE: This will not work correctly for non-generic events such as `change`,
 * `reset`, `load`, `error`, and `select`.
 *
 * Borrows from Modernizr.
 *
 * @param {string} eventNameSuffix Event name, e.g. "click".
 * @return {boolean} True if the event is supported.
 * @internal
 * @license Modernizr 3.0.0pre (Custom Build) | MIT
 */

function isEventSupported(eventNameSuffix) {
  if (!canUseDOM) {
    return false;
  }

  var eventName = 'on' + eventNameSuffix;
  var isSupported = eventName in document;

  if (!isSupported) {
    var element = document.createElement('div');
    element.setAttribute(eventName, 'return;');
    isSupported = typeof element[eventName] === 'function';
  }

  return isSupported;
}

/**
 * Summary of `DOMEventPluginSystem` event handling:
 *
 *  - Top-level delegation is used to trap most native browser events. This
 *    may only occur in the main thread and is the responsibility of
 *    ReactDOMEventListener, which is injected and can therefore support
 *    pluggable event sources. This is the only work that occurs in the main
 *    thread.
 *
 *  - We normalize and de-duplicate events to account for browser quirks. This
 *    may be done in the worker thread.
 *
 *  - Forward these native events (with the associated top-level type used to
 *    trap it) to `EventPluginRegistry`, which in turn will ask plugins if they want
 *    to extract any synthetic events.
 *
 *  - The `EventPluginRegistry` will then process each event by annotating them with
 *    "dispatches", a sequence of listeners and IDs that care about that event.
 *
 *  - The `EventPluginRegistry` then dispatches the events.
 *
 * Overview of React and the event system:
 *
 * +------------+    .
 * |    DOM     |    .
 * +------------+    .
 *       |           .
 *       v           .
 * +------------+    .
 * | ReactEvent |    .
 * |  Listener  |    .
 * +------------+    .                         +-----------+
 *       |           .               +--------+|SimpleEvent|
 *       |           .               |         |Plugin     |
 * +-----|------+    .               v         +-----------+
 * |     |      |    .    +--------------+                    +------------+
 * |     +-----------.--->|PluginRegistry|                    |    Event   |
 * |            |    .    |              |     +-----------+  | Propagators|
 * | ReactEvent |    .    |              |     |TapEvent   |  |------------|
 * |  Emitter   |    .    |              |<---+|Plugin     |  |other plugin|
 * |            |    .    |              |     +-----------+  |  utilities |
 * |     +-----------.--->|              |                    +------------+
 * |     |      |    .    +--------------+
 * +-----|------+    .                ^        +-----------+
 *       |           .                |        |Enter/Leave|
 *       +           .                +-------+|Plugin     |
 * +-------------+   .                         +-----------+
 * | application |   .
 * |-------------|   .
 * |             |   .
 * |             |   .
 * +-------------+   .
 *                   .
 *    React Core     .  General Purpose Event Plugin System
 */

var CALLBACK_BOOKKEEPING_POOL_SIZE = 10;
var callbackBookkeepingPool = [];

function releaseTopLevelCallbackBookKeeping(instance) {
  instance.topLevelType = null;
  instance.nativeEvent = null;
  instance.targetInst = null;
  instance.ancestors.length = 0;

  if (callbackBookkeepingPool.length < CALLBACK_BOOKKEEPING_POOL_SIZE) {
    callbackBookkeepingPool.push(instance);
  }
} // Used to store ancestor hierarchy in top level callback


function getTopLevelCallbackBookKeeping(topLevelType, nativeEvent, targetInst, eventSystemFlags) {
  if (callbackBookkeepingPool.length) {
    var instance = callbackBookkeepingPool.pop();
    instance.topLevelType = topLevelType;
    instance.eventSystemFlags = eventSystemFlags;
    instance.nativeEvent = nativeEvent;
    instance.targetInst = targetInst;
    return instance;
  }

  return {
    topLevelType: topLevelType,
    eventSystemFlags: eventSystemFlags,
    nativeEvent: nativeEvent,
    targetInst: targetInst,
    ancestors: []
  };
}
/**
 * Find the deepest React component completely containing the root of the
 * passed-in instance (for use when entire React trees are nested within each
 * other). If React trees are not nested, returns null.
 */


function findRootContainerNode(inst) {
  if (inst.tag === HostRoot) {
    return inst.stateNode.containerInfo;
  } // TODO: It may be a good idea to cache this to prevent unnecessary DOM
  // traversal, but caching is difficult to do correctly without using a
  // mutation observer to listen for all DOM changes.


  while (inst.return) {
    inst = inst.return;
  }

  if (inst.tag !== HostRoot) {
    // This can happen if we're in a detached tree.
    return null;
  }

  return inst.stateNode.containerInfo;
}
/**
 * Allows registered plugins an opportunity to extract events from top-level
 * native browser events.
 *
 * @return {*} An accumulation of synthetic events.
 * @internal
 */


function extractPluginEvents(topLevelType, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags) {
  var events = null;

  for (var i = 0; i < plugins.length; i++) {
    // Not every plugin in the ordering may be loaded at runtime.
    var possiblePlugin = plugins[i];

    if (possiblePlugin) {
      var extractedEvents = possiblePlugin.extractEvents(topLevelType, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags);

      if (extractedEvents) {
        events = accumulateInto(events, extractedEvents);
      }
    }
  }

  return events;
}

function runExtractedPluginEventsInBatch(topLevelType, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags) {
  var events = extractPluginEvents(topLevelType, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags);
  runEventsInBatch(events);
}

function handleTopLevel(bookKeeping) {
  var targetInst = bookKeeping.targetInst; // Loop through the hierarchy, in case there's any nested components.
  // It's important that we build the array of ancestors before calling any
  // event handlers, because event handlers can modify the DOM, leading to
  // inconsistencies with ReactMount's node cache. See #1105.

  var ancestor = targetInst;

  do {
    if (!ancestor) {
      var ancestors = bookKeeping.ancestors;
      ancestors.push(ancestor);
      break;
    }

    var root = findRootContainerNode(ancestor);

    if (!root) {
      break;
    }

    var tag = ancestor.tag;

    if (tag === HostComponent || tag === HostText) {
      bookKeeping.ancestors.push(ancestor);
    }

    ancestor = getClosestInstanceFromNode(root);
  } while (ancestor);

  for (var i = 0; i < bookKeeping.ancestors.length; i++) {
    targetInst = bookKeeping.ancestors[i];
    var eventTarget = getEventTarget(bookKeeping.nativeEvent);
    var topLevelType = bookKeeping.topLevelType;
    var nativeEvent = bookKeeping.nativeEvent;
    var eventSystemFlags = bookKeeping.eventSystemFlags; // If this is the first ancestor, we mark it on the system flags

    if (i === 0) {
      eventSystemFlags |= IS_FIRST_ANCESTOR;
    }

    runExtractedPluginEventsInBatch(topLevelType, targetInst, nativeEvent, eventTarget, eventSystemFlags);
  }
}

function dispatchEventForLegacyPluginEventSystem(topLevelType, eventSystemFlags, nativeEvent, targetInst) {
  var bookKeeping = getTopLevelCallbackBookKeeping(topLevelType, nativeEvent, targetInst, eventSystemFlags);

  try {
    // Event queue being processed in the same cycle allows
    // `preventDefault`.
    batchedEventUpdates(handleTopLevel, bookKeeping);
  } finally {
    releaseTopLevelCallbackBookKeeping(bookKeeping);
  }
}
/**
 * We listen for bubbled touch events on the document object.
 *
 * Firefox v8.01 (and possibly others) exhibited strange behavior when
 * mounting `onmousemove` events at some node that was not the document
 * element. The symptoms were that if your mouse is not moving over something
 * contained within that mount point (for example on the background) the
 * top-level listeners for `onmousemove` won't be called. However, if you
 * register the `mousemove` on the document object, then it will of course
 * catch all `mousemove`s. This along with iOS quirks, justifies restricting
 * top-level listeners to the document object only, at least for these
 * movement types of events and possibly all events.
 *
 * @see http://www.quirksmode.org/blog/archives/2010/09/click_event_del.html
 *
 * Also, `keyup`/`keypress`/`keydown` do not bubble to the window on IE, but
 * they bubble to document.
 *
 * @param {string} registrationName Name of listener (e.g. `onClick`).
 * @param {object} mountAt Container where to mount the listener
 */

function legacyListenToEvent(registrationName, mountAt) {
  var listenerMap = getListenerMapForElement(mountAt);
  var dependencies = registrationNameDependencies[registrationName];

  for (var i = 0; i < dependencies.length; i++) {
    var dependency = dependencies[i];
    legacyListenToTopLevelEvent(dependency, mountAt, listenerMap);
  }
}
function legacyListenToTopLevelEvent(topLevelType, mountAt, listenerMap) {
  if (!listenerMap.has(topLevelType)) {
    switch (topLevelType) {
      case TOP_SCROLL:
        trapCapturedEvent(TOP_SCROLL, mountAt);
        break;

      case TOP_FOCUS:
      case TOP_BLUR:
        trapCapturedEvent(TOP_FOCUS, mountAt);
        trapCapturedEvent(TOP_BLUR, mountAt); // We set the flag for a single dependency later in this function,
        // but this ensures we mark both as attached rather than just one.

        listenerMap.set(TOP_BLUR, null);
        listenerMap.set(TOP_FOCUS, null);
        break;

      case TOP_CANCEL:
      case TOP_CLOSE:
        if (isEventSupported(getRawEventName(topLevelType))) {
          trapCapturedEvent(topLevelType, mountAt);
        }

        break;

      case TOP_INVALID:
      case TOP_SUBMIT:
      case TOP_RESET:
        // We listen to them on the target DOM elements.
        // Some of them bubble so we don't want them to fire twice.
        break;

      default:
        // By default, listen on the top level to all non-media events.
        // Media events don't bubble so adding the listener wouldn't do anything.
        var isMediaEvent = mediaEventTypes.indexOf(topLevelType) !== -1;

        if (!isMediaEvent) {
          trapBubbledEvent(topLevelType, mountAt);
        }

        break;
    }

    listenerMap.set(topLevelType, null);
  }
}
function isListeningToAllDependencies(registrationName, mountAt) {
  var listenerMap = getListenerMapForElement(mountAt);
  var dependencies = registrationNameDependencies[registrationName];

  for (var i = 0; i < dependencies.length; i++) {
    var dependency = dependencies[i];

    if (!listenerMap.has(dependency)) {
      return false;
    }
  }

  return true;
}

var attemptUserBlockingHydration;
function setAttemptUserBlockingHydration(fn) {
  attemptUserBlockingHydration = fn;
}
var attemptContinuousHydration;
function setAttemptContinuousHydration(fn) {
  attemptContinuousHydration = fn;
}
var attemptHydrationAtCurrentPriority;
function setAttemptHydrationAtCurrentPriority(fn) {
  attemptHydrationAtCurrentPriority = fn;
} // TODO: Upgrade this definition once we're on a newer version of Flow that
var hasScheduledReplayAttempt = false; // The queue of discrete events to be replayed.

var queuedDiscreteEvents = []; // Indicates if any continuous event targets are non-null for early bailout.
// if the last target was dehydrated.

var queuedFocus = null;
var queuedDrag = null;
var queuedMouse = null; // For pointer events there can be one latest event per pointerId.

var queuedPointers = new Map();
var queuedPointerCaptures = new Map(); // We could consider replaying selectionchange and touchmoves too.

var queuedExplicitHydrationTargets = [];
function hasQueuedDiscreteEvents() {
  return queuedDiscreteEvents.length > 0;
}
var discreteReplayableEvents = [TOP_MOUSE_DOWN, TOP_MOUSE_UP, TOP_TOUCH_CANCEL, TOP_TOUCH_END, TOP_TOUCH_START, TOP_AUX_CLICK, TOP_DOUBLE_CLICK, TOP_POINTER_CANCEL, TOP_POINTER_DOWN, TOP_POINTER_UP, TOP_DRAG_END, TOP_DRAG_START, TOP_DROP, TOP_COMPOSITION_END, TOP_COMPOSITION_START, TOP_KEY_DOWN, TOP_KEY_PRESS, TOP_KEY_UP, TOP_INPUT, TOP_TEXT_INPUT, TOP_CLOSE, TOP_CANCEL, TOP_COPY, TOP_CUT, TOP_PASTE, TOP_CLICK, TOP_CHANGE, TOP_CONTEXT_MENU, TOP_RESET, TOP_SUBMIT];
var continuousReplayableEvents = [TOP_FOCUS, TOP_BLUR, TOP_DRAG_ENTER, TOP_DRAG_LEAVE, TOP_MOUSE_OVER, TOP_MOUSE_OUT, TOP_POINTER_OVER, TOP_POINTER_OUT, TOP_GOT_POINTER_CAPTURE, TOP_LOST_POINTER_CAPTURE];
function isReplayableDiscreteEvent(eventType) {
  return discreteReplayableEvents.indexOf(eventType) > -1;
}

function trapReplayableEventForDocument(topLevelType, document, listenerMap) {
  legacyListenToTopLevelEvent(topLevelType, document, listenerMap);
}

function eagerlyTrapReplayableEvents(container, document) {
  var listenerMapForDoc = getListenerMapForElement(document); // Discrete

  discreteReplayableEvents.forEach(function (topLevelType) {
    trapReplayableEventForDocument(topLevelType, document, listenerMapForDoc);
  }); // Continuous

  continuousReplayableEvents.forEach(function (topLevelType) {
    trapReplayableEventForDocument(topLevelType, document, listenerMapForDoc);
  });
}

function createQueuedReplayableEvent(blockedOn, topLevelType, eventSystemFlags, container, nativeEvent) {
  return {
    blockedOn: blockedOn,
    topLevelType: topLevelType,
    eventSystemFlags: eventSystemFlags | IS_REPLAYED,
    nativeEvent: nativeEvent,
    container: container
  };
}

function queueDiscreteEvent(blockedOn, topLevelType, eventSystemFlags, container, nativeEvent) {
  var queuedEvent = createQueuedReplayableEvent(blockedOn, topLevelType, eventSystemFlags, container, nativeEvent);
  queuedDiscreteEvents.push(queuedEvent);
} // Resets the replaying for this type of continuous event to no event.

function clearIfContinuousEvent(topLevelType, nativeEvent) {
  switch (topLevelType) {
    case TOP_FOCUS:
    case TOP_BLUR:
      queuedFocus = null;
      break;

    case TOP_DRAG_ENTER:
    case TOP_DRAG_LEAVE:
      queuedDrag = null;
      break;

    case TOP_MOUSE_OVER:
    case TOP_MOUSE_OUT:
      queuedMouse = null;
      break;

    case TOP_POINTER_OVER:
    case TOP_POINTER_OUT:
      {
        var pointerId = nativeEvent.pointerId;
        queuedPointers.delete(pointerId);
        break;
      }

    case TOP_GOT_POINTER_CAPTURE:
    case TOP_LOST_POINTER_CAPTURE:
      {
        var _pointerId = nativeEvent.pointerId;
        queuedPointerCaptures.delete(_pointerId);
        break;
      }
  }
}

function accumulateOrCreateContinuousQueuedReplayableEvent(existingQueuedEvent, blockedOn, topLevelType, eventSystemFlags, container, nativeEvent) {
  if (existingQueuedEvent === null || existingQueuedEvent.nativeEvent !== nativeEvent) {
    var queuedEvent = createQueuedReplayableEvent(blockedOn, topLevelType, eventSystemFlags, container, nativeEvent);

    if (blockedOn !== null) {
      var _fiber2 = getInstanceFromNode$1(blockedOn);

      if (_fiber2 !== null) {
        // Attempt to increase the priority of this target.
        attemptContinuousHydration(_fiber2);
      }
    }

    return queuedEvent;
  } // If we have already queued this exact event, then it's because
  // the different event systems have different DOM event listeners.
  // We can accumulate the flags and store a single event to be
  // replayed.


  existingQueuedEvent.eventSystemFlags |= eventSystemFlags;
  return existingQueuedEvent;
}

function queueIfContinuousEvent(blockedOn, topLevelType, eventSystemFlags, container, nativeEvent) {
  // These set relatedTarget to null because the replayed event will be treated as if we
  // moved from outside the window (no target) onto the target once it hydrates.
  // Instead of mutating we could clone the event.
  switch (topLevelType) {
    case TOP_FOCUS:
      {
        var focusEvent = nativeEvent;
        queuedFocus = accumulateOrCreateContinuousQueuedReplayableEvent(queuedFocus, blockedOn, topLevelType, eventSystemFlags, container, focusEvent);
        return true;
      }

    case TOP_DRAG_ENTER:
      {
        var dragEvent = nativeEvent;
        queuedDrag = accumulateOrCreateContinuousQueuedReplayableEvent(queuedDrag, blockedOn, topLevelType, eventSystemFlags, container, dragEvent);
        return true;
      }

    case TOP_MOUSE_OVER:
      {
        var mouseEvent = nativeEvent;
        queuedMouse = accumulateOrCreateContinuousQueuedReplayableEvent(queuedMouse, blockedOn, topLevelType, eventSystemFlags, container, mouseEvent);
        return true;
      }

    case TOP_POINTER_OVER:
      {
        var pointerEvent = nativeEvent;
        var pointerId = pointerEvent.pointerId;
        queuedPointers.set(pointerId, accumulateOrCreateContinuousQueuedReplayableEvent(queuedPointers.get(pointerId) || null, blockedOn, topLevelType, eventSystemFlags, container, pointerEvent));
        return true;
      }

    case TOP_GOT_POINTER_CAPTURE:
      {
        var _pointerEvent = nativeEvent;
        var _pointerId2 = _pointerEvent.pointerId;
        queuedPointerCaptures.set(_pointerId2, accumulateOrCreateContinuousQueuedReplayableEvent(queuedPointerCaptures.get(_pointerId2) || null, blockedOn, topLevelType, eventSystemFlags, container, _pointerEvent));
        return true;
      }
  }

  return false;
} // Check if this target is unblocked. Returns true if it's unblocked.

function attemptExplicitHydrationTarget(queuedTarget) {
  // TODO: This function shares a lot of logic with attemptToDispatchEvent.
  // Try to unify them. It's a bit tricky since it would require two return
  // values.
  var targetInst = getClosestInstanceFromNode(queuedTarget.target);

  if (targetInst !== null) {
    var nearestMounted = getNearestMountedFiber(targetInst);

    if (nearestMounted !== null) {
      var tag = nearestMounted.tag;

      if (tag === SuspenseComponent) {
        var instance = getSuspenseInstanceFromFiber(nearestMounted);

        if (instance !== null) {
          // We're blocked on hydrating this boundary.
          // Increase its priority.
          queuedTarget.blockedOn = instance;
          Scheduler.unstable_runWithPriority(queuedTarget.priority, function () {
            attemptHydrationAtCurrentPriority(nearestMounted);
          });
          return;
        }
      } else if (tag === HostRoot) {
        var root = nearestMounted.stateNode;

        if (root.hydrate) {
          queuedTarget.blockedOn = getContainerFromFiber(nearestMounted); // We don't currently have a way to increase the priority of
          // a root other than sync.

          return;
        }
      }
    }
  }

  queuedTarget.blockedOn = null;
}

function attemptReplayContinuousQueuedEvent(queuedEvent) {
  if (queuedEvent.blockedOn !== null) {
    return false;
  }

  var nextBlockedOn = attemptToDispatchEvent(queuedEvent.topLevelType, queuedEvent.eventSystemFlags, queuedEvent.container, queuedEvent.nativeEvent);

  if (nextBlockedOn !== null) {
    // We're still blocked. Try again later.
    var _fiber3 = getInstanceFromNode$1(nextBlockedOn);

    if (_fiber3 !== null) {
      attemptContinuousHydration(_fiber3);
    }

    queuedEvent.blockedOn = nextBlockedOn;
    return false;
  }

  return true;
}

function attemptReplayContinuousQueuedEventInMap(queuedEvent, key, map) {
  if (attemptReplayContinuousQueuedEvent(queuedEvent)) {
    map.delete(key);
  }
}

function replayUnblockedEvents() {
  hasScheduledReplayAttempt = false; // First replay discrete events.

  while (queuedDiscreteEvents.length > 0) {
    var nextDiscreteEvent = queuedDiscreteEvents[0];

    if (nextDiscreteEvent.blockedOn !== null) {
      // We're still blocked.
      // Increase the priority of this boundary to unblock
      // the next discrete event.
      var _fiber4 = getInstanceFromNode$1(nextDiscreteEvent.blockedOn);

      if (_fiber4 !== null) {
        attemptUserBlockingHydration(_fiber4);
      }

      break;
    }

    var nextBlockedOn = attemptToDispatchEvent(nextDiscreteEvent.topLevelType, nextDiscreteEvent.eventSystemFlags, nextDiscreteEvent.container, nextDiscreteEvent.nativeEvent);

    if (nextBlockedOn !== null) {
      // We're still blocked. Try again later.
      nextDiscreteEvent.blockedOn = nextBlockedOn;
    } else {
      // We've successfully replayed the first event. Let's try the next one.
      queuedDiscreteEvents.shift();
    }
  } // Next replay any continuous events.


  if (queuedFocus !== null && attemptReplayContinuousQueuedEvent(queuedFocus)) {
    queuedFocus = null;
  }

  if (queuedDrag !== null && attemptReplayContinuousQueuedEvent(queuedDrag)) {
    queuedDrag = null;
  }

  if (queuedMouse !== null && attemptReplayContinuousQueuedEvent(queuedMouse)) {
    queuedMouse = null;
  }

  queuedPointers.forEach(attemptReplayContinuousQueuedEventInMap);
  queuedPointerCaptures.forEach(attemptReplayContinuousQueuedEventInMap);
}

function scheduleCallbackIfUnblocked(queuedEvent, unblocked) {
  if (queuedEvent.blockedOn === unblocked) {
    queuedEvent.blockedOn = null;

    if (!hasScheduledReplayAttempt) {
      hasScheduledReplayAttempt = true; // Schedule a callback to attempt replaying as many events as are
      // now unblocked. This first might not actually be unblocked yet.
      // We could check it early to avoid scheduling an unnecessary callback.

      Scheduler.unstable_scheduleCallback(Scheduler.unstable_NormalPriority, replayUnblockedEvents);
    }
  }
}

function retryIfBlockedOn(unblocked) {
  // Mark anything that was blocked on this as no longer blocked
  // and eligible for a replay.
  if (queuedDiscreteEvents.length > 0) {
    scheduleCallbackIfUnblocked(queuedDiscreteEvents[0], unblocked); // This is a exponential search for each boundary that commits. I think it's
    // worth it because we expect very few discrete events to queue up and once
    // we are actually fully unblocked it will be fast to replay them.

    for (var i = 1; i < queuedDiscreteEvents.length; i++) {
      var queuedEvent = queuedDiscreteEvents[i];

      if (queuedEvent.blockedOn === unblocked) {
        queuedEvent.blockedOn = null;
      }
    }
  }

  if (queuedFocus !== null) {
    scheduleCallbackIfUnblocked(queuedFocus, unblocked);
  }

  if (queuedDrag !== null) {
    scheduleCallbackIfUnblocked(queuedDrag, unblocked);
  }

  if (queuedMouse !== null) {
    scheduleCallbackIfUnblocked(queuedMouse, unblocked);
  }

  var unblock = function (queuedEvent) {
    return scheduleCallbackIfUnblocked(queuedEvent, unblocked);
  };

  queuedPointers.forEach(unblock);
  queuedPointerCaptures.forEach(unblock);

  for (var _i = 0; _i < queuedExplicitHydrationTargets.length; _i++) {
    var queuedTarget = queuedExplicitHydrationTargets[_i];

    if (queuedTarget.blockedOn === unblocked) {
      queuedTarget.blockedOn = null;
    }
  }

  while (queuedExplicitHydrationTargets.length > 0) {
    var nextExplicitTarget = queuedExplicitHydrationTargets[0];

    if (nextExplicitTarget.blockedOn !== null) {
      // We're still blocked.
      break;
    } else {
      attemptExplicitHydrationTarget(nextExplicitTarget);

      if (nextExplicitTarget.blockedOn === null) {
        // We're unblocked.
        queuedExplicitHydrationTargets.shift();
      }
    }
  }
}

function addEventBubbleListener(element, eventType, listener) {
  element.addEventListener(eventType, listener, false);
}
function addEventCaptureListener(element, eventType, listener) {
  element.addEventListener(eventType, listener, true);
}

// do it in two places, which duplicates logic
// and increases the bundle size, we do it all
// here once. If we remove or refactor the
// SimpleEventPlugin, we should also remove or
// update the below line.

var simpleEventPluginEventTypes = {};
var topLevelEventsToDispatchConfig = new Map();
var eventPriorities = new Map(); // We store most of the events in this module in pairs of two strings so we can re-use
// the code required to apply the same logic for event prioritization and that of the
// SimpleEventPlugin. This complicates things slightly, but the aim is to reduce code
// duplication (for which there would be quite a bit). For the events that are not needed
// for the SimpleEventPlugin (otherDiscreteEvents) we process them separately as an
// array of top level events.
// Lastly, we ignore prettier so we can keep the formatting sane.
// prettier-ignore

var discreteEventPairsForSimpleEventPlugin = [TOP_BLUR, 'blur', TOP_CANCEL, 'cancel', TOP_CLICK, 'click', TOP_CLOSE, 'close', TOP_CONTEXT_MENU, 'contextMenu', TOP_COPY, 'copy', TOP_CUT, 'cut', TOP_AUX_CLICK, 'auxClick', TOP_DOUBLE_CLICK, 'doubleClick', TOP_DRAG_END, 'dragEnd', TOP_DRAG_START, 'dragStart', TOP_DROP, 'drop', TOP_FOCUS, 'focus', TOP_INPUT, 'input', TOP_INVALID, 'invalid', TOP_KEY_DOWN, 'keyDown', TOP_KEY_PRESS, 'keyPress', TOP_KEY_UP, 'keyUp', TOP_MOUSE_DOWN, 'mouseDown', TOP_MOUSE_UP, 'mouseUp', TOP_PASTE, 'paste', TOP_PAUSE, 'pause', TOP_PLAY, 'play', TOP_POINTER_CANCEL, 'pointerCancel', TOP_POINTER_DOWN, 'pointerDown', TOP_POINTER_UP, 'pointerUp', TOP_RATE_CHANGE, 'rateChange', TOP_RESET, 'reset', TOP_SEEKED, 'seeked', TOP_SUBMIT, 'submit', TOP_TOUCH_CANCEL, 'touchCancel', TOP_TOUCH_END, 'touchEnd', TOP_TOUCH_START, 'touchStart', TOP_VOLUME_CHANGE, 'volumeChange'];
var otherDiscreteEvents = [TOP_CHANGE, TOP_SELECTION_CHANGE, TOP_TEXT_INPUT, TOP_COMPOSITION_START, TOP_COMPOSITION_END, TOP_COMPOSITION_UPDATE]; // prettier-ignore

var userBlockingPairsForSimpleEventPlugin = [TOP_DRAG, 'drag', TOP_DRAG_ENTER, 'dragEnter', TOP_DRAG_EXIT, 'dragExit', TOP_DRAG_LEAVE, 'dragLeave', TOP_DRAG_OVER, 'dragOver', TOP_MOUSE_MOVE, 'mouseMove', TOP_MOUSE_OUT, 'mouseOut', TOP_MOUSE_OVER, 'mouseOver', TOP_POINTER_MOVE, 'pointerMove', TOP_POINTER_OUT, 'pointerOut', TOP_POINTER_OVER, 'pointerOver', TOP_SCROLL, 'scroll', TOP_TOGGLE, 'toggle', TOP_TOUCH_MOVE, 'touchMove', TOP_WHEEL, 'wheel']; // prettier-ignore

var continuousPairsForSimpleEventPlugin = [TOP_ABORT, 'abort', TOP_ANIMATION_END, 'animationEnd', TOP_ANIMATION_ITERATION, 'animationIteration', TOP_ANIMATION_START, 'animationStart', TOP_CAN_PLAY, 'canPlay', TOP_CAN_PLAY_THROUGH, 'canPlayThrough', TOP_DURATION_CHANGE, 'durationChange', TOP_EMPTIED, 'emptied', TOP_ENCRYPTED, 'encrypted', TOP_ENDED, 'ended', TOP_ERROR, 'error', TOP_GOT_POINTER_CAPTURE, 'gotPointerCapture', TOP_LOAD, 'load', TOP_LOADED_DATA, 'loadedData', TOP_LOADED_METADATA, 'loadedMetadata', TOP_LOAD_START, 'loadStart', TOP_LOST_POINTER_CAPTURE, 'lostPointerCapture', TOP_PLAYING, 'playing', TOP_PROGRESS, 'progress', TOP_SEEKING, 'seeking', TOP_STALLED, 'stalled', TOP_SUSPEND, 'suspend', TOP_TIME_UPDATE, 'timeUpdate', TOP_TRANSITION_END, 'transitionEnd', TOP_WAITING, 'waiting'];
/**
 * Turns
 * ['abort', ...]
 * into
 * eventTypes = {
 *   'abort': {
 *     phasedRegistrationNames: {
 *       bubbled: 'onAbort',
 *       captured: 'onAbortCapture',
 *     },
 *     dependencies: [TOP_ABORT],
 *   },
 *   ...
 * };
 * topLevelEventsToDispatchConfig = new Map([
 *   [TOP_ABORT, { sameConfig }],
 * ]);
 */

function processSimpleEventPluginPairsByPriority(eventTypes, priority) {
  // As the event types are in pairs of two, we need to iterate
  // through in twos. The events are in pairs of two to save code
  // and improve init perf of processing this array, as it will
  // result in far fewer object allocations and property accesses
  // if we only use three arrays to process all the categories of
  // instead of tuples.
  for (var i = 0; i < eventTypes.length; i += 2) {
    var topEvent = eventTypes[i];
    var event = eventTypes[i + 1];
    var capitalizedEvent = event[0].toUpperCase() + event.slice(1);
    var onEvent = 'on' + capitalizedEvent;
    var config = {
      phasedRegistrationNames: {
        bubbled: onEvent,
        captured: onEvent + 'Capture'
      },
      dependencies: [topEvent],
      eventPriority: priority
    };
    eventPriorities.set(topEvent, priority);
    topLevelEventsToDispatchConfig.set(topEvent, config);
    simpleEventPluginEventTypes[event] = config;
  }
}

function processTopEventPairsByPriority(eventTypes, priority) {
  for (var i = 0; i < eventTypes.length; i++) {
    eventPriorities.set(eventTypes[i], priority);
  }
} // SimpleEventPlugin


processSimpleEventPluginPairsByPriority(discreteEventPairsForSimpleEventPlugin, DiscreteEvent);
processSimpleEventPluginPairsByPriority(userBlockingPairsForSimpleEventPlugin, UserBlockingEvent);
processSimpleEventPluginPairsByPriority(continuousPairsForSimpleEventPlugin, ContinuousEvent); // Not used by SimpleEventPlugin

processTopEventPairsByPriority(otherDiscreteEvents, DiscreteEvent);
function getEventPriorityForPluginSystem(topLevelType) {
  var priority = eventPriorities.get(topLevelType); // Default to a ContinuousEvent. Note: we might
  // want to warn if we can't detect the priority
  // for the event.

  return priority === undefined ? ContinuousEvent : priority;
}

// Intentionally not named imports because Rollup would use dynamic dispatch for
var UserBlockingPriority = Scheduler.unstable_UserBlockingPriority,
    runWithPriority = Scheduler.unstable_runWithPriority; // TODO: can we stop exporting these?

var _enabled = true;
function setEnabled(enabled) {
  _enabled = !!enabled;
}
function isEnabled() {
  return _enabled;
}
function trapBubbledEvent(topLevelType, element) {
  trapEventForPluginEventSystem(element, topLevelType, false);
}
function trapCapturedEvent(topLevelType, element) {
  trapEventForPluginEventSystem(element, topLevelType, true);
}

function trapEventForPluginEventSystem(container, topLevelType, capture) {
  var listener;

  switch (getEventPriorityForPluginSystem(topLevelType)) {
    case DiscreteEvent:
      listener = dispatchDiscreteEvent.bind(null, topLevelType, PLUGIN_EVENT_SYSTEM, container);
      break;

    case UserBlockingEvent:
      listener = dispatchUserBlockingUpdate.bind(null, topLevelType, PLUGIN_EVENT_SYSTEM, container);
      break;

    case ContinuousEvent:
    default:
      listener = dispatchEvent.bind(null, topLevelType, PLUGIN_EVENT_SYSTEM, container);
      break;
  }

  var rawEventName = getRawEventName(topLevelType);

  if (capture) {
    addEventCaptureListener(container, rawEventName, listener);
  } else {
    addEventBubbleListener(container, rawEventName, listener);
  }
}

function dispatchDiscreteEvent(topLevelType, eventSystemFlags, container, nativeEvent) {
  flushDiscreteUpdatesIfNeeded(nativeEvent.timeStamp);
  discreteUpdates(dispatchEvent, topLevelType, eventSystemFlags, container, nativeEvent);
}

function dispatchUserBlockingUpdate(topLevelType, eventSystemFlags, container, nativeEvent) {
  runWithPriority(UserBlockingPriority, dispatchEvent.bind(null, topLevelType, eventSystemFlags, container, nativeEvent));
}

function dispatchEvent(topLevelType, eventSystemFlags, container, nativeEvent) {
  if (!_enabled) {
    return;
  }

  if (hasQueuedDiscreteEvents() && isReplayableDiscreteEvent(topLevelType)) {
    // If we already have a queue of discrete events, and this is another discrete
    // event, then we can't dispatch it regardless of its target, since they
    // need to dispatch in order.
    queueDiscreteEvent(null, // Flags that we're not actually blocked on anything as far as we know.
    topLevelType, eventSystemFlags, container, nativeEvent);
    return;
  }

  var blockedOn = attemptToDispatchEvent(topLevelType, eventSystemFlags, container, nativeEvent);

  if (blockedOn === null) {
    // We successfully dispatched this event.
    clearIfContinuousEvent(topLevelType, nativeEvent);
    return;
  }

  if (isReplayableDiscreteEvent(topLevelType)) {
    // This this to be replayed later once the target is available.
    queueDiscreteEvent(blockedOn, topLevelType, eventSystemFlags, container, nativeEvent);
    return;
  }

  if (queueIfContinuousEvent(blockedOn, topLevelType, eventSystemFlags, container, nativeEvent)) {
    return;
  } // We need to clear only if we didn't queue because
  // queueing is accummulative.


  clearIfContinuousEvent(topLevelType, nativeEvent); // This is not replayable so we'll invoke it but without a target,
  // in case the event system needs to trace it.

  {
    dispatchEventForLegacyPluginEventSystem(topLevelType, eventSystemFlags, nativeEvent, null);
  }
} // Attempt dispatching an event. Returns a SuspenseInstance or Container if it's blocked.

function attemptToDispatchEvent(topLevelType, eventSystemFlags, container, nativeEvent) {
  // TODO: Warn if _enabled is false.
  var nativeEventTarget = getEventTarget(nativeEvent);
  var targetInst = getClosestInstanceFromNode(nativeEventTarget);

  if (targetInst !== null) {
    var nearestMounted = getNearestMountedFiber(targetInst);

    if (nearestMounted === null) {
      // This tree has been unmounted already. Dispatch without a target.
      targetInst = null;
    } else {
      var tag = nearestMounted.tag;

      if (tag === SuspenseComponent) {
        var instance = getSuspenseInstanceFromFiber(nearestMounted);

        if (instance !== null) {
          // Queue the event to be replayed later. Abort dispatching since we
          // don't want this event dispatched twice through the event system.
          // TODO: If this is the first discrete event in the queue. Schedule an increased
          // priority for this boundary.
          return instance;
        } // This shouldn't happen, something went wrong but to avoid blocking
        // the whole system, dispatch the event without a target.
        // TODO: Warn.


        targetInst = null;
      } else if (tag === HostRoot) {
        var root = nearestMounted.stateNode;

        if (root.hydrate) {
          // If this happens during a replay something went wrong and it might block
          // the whole system.
          return getContainerFromFiber(nearestMounted);
        }

        targetInst = null;
      } else if (nearestMounted !== targetInst) {
        // If we get an event (ex: img onload) before committing that
        // component's mount, ignore it for now (that is, treat it as if it was an
        // event on a non-React tree). We might also consider queueing events and
        // dispatching them after the mount.
        targetInst = null;
      }
    }
  }

  {
    dispatchEventForLegacyPluginEventSystem(topLevelType, eventSystemFlags, nativeEvent, targetInst);
  } // We're not blocked on anything.


  return null;
}

// List derived from Gecko source code:
// https://github.com/mozilla/gecko-dev/blob/4e638efc71/layout/style/test/property_database.js
var shorthandToLonghand = {
  animation: ['animationDelay', 'animationDirection', 'animationDuration', 'animationFillMode', 'animationIterationCount', 'animationName', 'animationPlayState', 'animationTimingFunction'],
  background: ['backgroundAttachment', 'backgroundClip', 'backgroundColor', 'backgroundImage', 'backgroundOrigin', 'backgroundPositionX', 'backgroundPositionY', 'backgroundRepeat', 'backgroundSize'],
  backgroundPosition: ['backgroundPositionX', 'backgroundPositionY'],
  border: ['borderBottomColor', 'borderBottomStyle', 'borderBottomWidth', 'borderImageOutset', 'borderImageRepeat', 'borderImageSlice', 'borderImageSource', 'borderImageWidth', 'borderLeftColor', 'borderLeftStyle', 'borderLeftWidth', 'borderRightColor', 'borderRightStyle', 'borderRightWidth', 'borderTopColor', 'borderTopStyle', 'borderTopWidth'],
  borderBlockEnd: ['borderBlockEndColor', 'borderBlockEndStyle', 'borderBlockEndWidth'],
  borderBlockStart: ['borderBlockStartColor', 'borderBlockStartStyle', 'borderBlockStartWidth'],
  borderBottom: ['borderBottomColor', 'borderBottomStyle', 'borderBottomWidth'],
  borderColor: ['borderBottomColor', 'borderLeftColor', 'borderRightColor', 'borderTopColor'],
  borderImage: ['borderImageOutset', 'borderImageRepeat', 'borderImageSlice', 'borderImageSource', 'borderImageWidth'],
  borderInlineEnd: ['borderInlineEndColor', 'borderInlineEndStyle', 'borderInlineEndWidth'],
  borderInlineStart: ['borderInlineStartColor', 'borderInlineStartStyle', 'borderInlineStartWidth'],
  borderLeft: ['borderLeftColor', 'borderLeftStyle', 'borderLeftWidth'],
  borderRadius: ['borderBottomLeftRadius', 'borderBottomRightRadius', 'borderTopLeftRadius', 'borderTopRightRadius'],
  borderRight: ['borderRightColor', 'borderRightStyle', 'borderRightWidth'],
  borderStyle: ['borderBottomStyle', 'borderLeftStyle', 'borderRightStyle', 'borderTopStyle'],
  borderTop: ['borderTopColor', 'borderTopStyle', 'borderTopWidth'],
  borderWidth: ['borderBottomWidth', 'borderLeftWidth', 'borderRightWidth', 'borderTopWidth'],
  columnRule: ['columnRuleColor', 'columnRuleStyle', 'columnRuleWidth'],
  columns: ['columnCount', 'columnWidth'],
  flex: ['flexBasis', 'flexGrow', 'flexShrink'],
  flexFlow: ['flexDirection', 'flexWrap'],
  font: ['fontFamily', 'fontFeatureSettings', 'fontKerning', 'fontLanguageOverride', 'fontSize', 'fontSizeAdjust', 'fontStretch', 'fontStyle', 'fontVariant', 'fontVariantAlternates', 'fontVariantCaps', 'fontVariantEastAsian', 'fontVariantLigatures', 'fontVariantNumeric', 'fontVariantPosition', 'fontWeight', 'lineHeight'],
  fontVariant: ['fontVariantAlternates', 'fontVariantCaps', 'fontVariantEastAsian', 'fontVariantLigatures', 'fontVariantNumeric', 'fontVariantPosition'],
  gap: ['columnGap', 'rowGap'],
  grid: ['gridAutoColumns', 'gridAutoFlow', 'gridAutoRows', 'gridTemplateAreas', 'gridTemplateColumns', 'gridTemplateRows'],
  gridArea: ['gridColumnEnd', 'gridColumnStart', 'gridRowEnd', 'gridRowStart'],
  gridColumn: ['gridColumnEnd', 'gridColumnStart'],
  gridColumnGap: ['columnGap'],
  gridGap: ['columnGap', 'rowGap'],
  gridRow: ['gridRowEnd', 'gridRowStart'],
  gridRowGap: ['rowGap'],
  gridTemplate: ['gridTemplateAreas', 'gridTemplateColumns', 'gridTemplateRows'],
  listStyle: ['listStyleImage', 'listStylePosition', 'listStyleType'],
  margin: ['marginBottom', 'marginLeft', 'marginRight', 'marginTop'],
  marker: ['markerEnd', 'markerMid', 'markerStart'],
  mask: ['maskClip', 'maskComposite', 'maskImage', 'maskMode', 'maskOrigin', 'maskPositionX', 'maskPositionY', 'maskRepeat', 'maskSize'],
  maskPosition: ['maskPositionX', 'maskPositionY'],
  outline: ['outlineColor', 'outlineStyle', 'outlineWidth'],
  overflow: ['overflowX', 'overflowY'],
  padding: ['paddingBottom', 'paddingLeft', 'paddingRight', 'paddingTop'],
  placeContent: ['alignContent', 'justifyContent'],
  placeItems: ['alignItems', 'justifyItems'],
  placeSelf: ['alignSelf', 'justifySelf'],
  textDecoration: ['textDecorationColor', 'textDecorationLine', 'textDecorationStyle'],
  textEmphasis: ['textEmphasisColor', 'textEmphasisStyle'],
  transition: ['transitionDelay', 'transitionDuration', 'transitionProperty', 'transitionTimingFunction'],
  wordWrap: ['overflowWrap']
};

/**
 * CSS properties which accept numbers but are not in units of "px".
 */
var isUnitlessNumber = {
  animationIterationCount: true,
  borderImageOutset: true,
  borderImageSlice: true,
  borderImageWidth: true,
  boxFlex: true,
  boxFlexGroup: true,
  boxOrdinalGroup: true,
  columnCount: true,
  columns: true,
  flex: true,
  flexGrow: true,
  flexPositive: true,
  flexShrink: true,
  flexNegative: true,
  flexOrder: true,
  gridArea: true,
  gridRow: true,
  gridRowEnd: true,
  gridRowSpan: true,
  gridRowStart: true,
  gridColumn: true,
  gridColumnEnd: true,
  gridColumnSpan: true,
  gridColumnStart: true,
  fontWeight: true,
  lineClamp: true,
  lineHeight: true,
  opacity: true,
  order: true,
  orphans: true,
  tabSize: true,
  widows: true,
  zIndex: true,
  zoom: true,
  // SVG-related properties
  fillOpacity: true,
  floodOpacity: true,
  stopOpacity: true,
  strokeDasharray: true,
  strokeDashoffset: true,
  strokeMiterlimit: true,
  strokeOpacity: true,
  strokeWidth: true
};
/**
 * @param {string} prefix vendor-specific prefix, eg: Webkit
 * @param {string} key style name, eg: transitionDuration
 * @return {string} style name prefixed with `prefix`, properly camelCased, eg:
 * WebkitTransitionDuration
 */

function prefixKey(prefix, key) {
  return prefix + key.charAt(0).toUpperCase() + key.substring(1);
}
/**
 * Support style names that may come passed in prefixed by adding permutations
 * of vendor prefixes.
 */


var prefixes = ['Webkit', 'ms', 'Moz', 'O']; // Using Object.keys here, or else the vanilla for-in loop makes IE8 go into an
// infinite loop, because it iterates over the newly added props too.

Object.keys(isUnitlessNumber).forEach(function (prop) {
  prefixes.forEach(function (prefix) {
    isUnitlessNumber[prefixKey(prefix, prop)] = isUnitlessNumber[prop];
  });
});

/**
 * Convert a value into the proper css writable value. The style name `name`
 * should be logical (no hyphens), as specified
 * in `CSSProperty.isUnitlessNumber`.
 *
 * @param {string} name CSS property name such as `topMargin`.
 * @param {*} value CSS property value such as `10px`.
 * @return {string} Normalized style value with dimensions applied.
 */

function dangerousStyleValue(name, value, isCustomProperty) {
  // Note that we've removed escapeTextForBrowser() calls here since the
  // whole string will be escaped when the attribute is injected into
  // the markup. If you provide unsafe user data here they can inject
  // arbitrary CSS which may be problematic (I couldn't repro this):
  // https://www.owasp.org/index.php/XSS_Filter_Evasion_Cheat_Sheet
  // http://www.thespanner.co.uk/2007/11/26/ultimate-xss-css-injection/
  // This is not an XSS hole but instead a potential CSS injection issue
  // which has lead to a greater discussion about how we're going to
  // trust URLs moving forward. See #2115901
  var isEmpty = value == null || typeof value === 'boolean' || value === '';

  if (isEmpty) {
    return '';
  }

  if (!isCustomProperty && typeof value === 'number' && value !== 0 && !(isUnitlessNumber.hasOwnProperty(name) && isUnitlessNumber[name])) {
    return value + 'px'; // Presumes implicit 'px' suffix for unitless numbers
  }

  return ('' + value).trim();
}

var uppercasePattern = /([A-Z])/g;
var msPattern = /^ms-/;
/**
 * Hyphenates a camelcased CSS property name, for example:
 *
 *   > hyphenateStyleName('backgroundColor')
 *   < "background-color"
 *   > hyphenateStyleName('MozTransition')
 *   < "-moz-transition"
 *   > hyphenateStyleName('msTransition')
 *   < "-ms-transition"
 *
 * As Modernizr suggests (http://modernizr.com/docs/#prefixed), an `ms` prefix
 * is converted to `-ms-`.
 */

function hyphenateStyleName(name) {
  return name.replace(uppercasePattern, '-$1').toLowerCase().replace(msPattern, '-ms-');
}

var warnValidStyle = function () {};

{
  // 'msTransform' is correct, but the other prefixes should be capitalized
  var badVendoredStyleNamePattern = /^(?:webkit|moz|o)[A-Z]/;
  var msPattern$1 = /^-ms-/;
  var hyphenPattern = /-(.)/g; // style values shouldn't contain a semicolon

  var badStyleValueWithSemicolonPattern = /;\s*$/;
  var warnedStyleNames = {};
  var warnedStyleValues = {};
  var warnedForNaNValue = false;
  var warnedForInfinityValue = false;

  var camelize = function (string) {
    return string.replace(hyphenPattern, function (_, character) {
      return character.toUpperCase();
    });
  };

  var warnHyphenatedStyleName = function (name) {
    if (warnedStyleNames.hasOwnProperty(name) && warnedStyleNames[name]) {
      return;
    }

    warnedStyleNames[name] = true;

    error('Unsupported style property %s. Did you mean %s?', name, // As Andi Smith suggests
    // (http://www.andismith.com/blog/2012/02/modernizr-prefixed/), an `-ms` prefix
    // is converted to lowercase `ms`.
    camelize(name.replace(msPattern$1, 'ms-')));
  };

  var warnBadVendoredStyleName = function (name) {
    if (warnedStyleNames.hasOwnProperty(name) && warnedStyleNames[name]) {
      return;
    }

    warnedStyleNames[name] = true;

    error('Unsupported vendor-prefixed style property %s. Did you mean %s?', name, name.charAt(0).toUpperCase() + name.slice(1));
  };

  var warnStyleValueWithSemicolon = function (name, value) {
    if (warnedStyleValues.hasOwnProperty(value) && warnedStyleValues[value]) {
      return;
    }

    warnedStyleValues[value] = true;

    error("Style property values shouldn't contain a semicolon. " + 'Try "%s: %s" instead.', name, value.replace(badStyleValueWithSemicolonPattern, ''));
  };

  var warnStyleValueIsNaN = function (name, value) {
    if (warnedForNaNValue) {
      return;
    }

    warnedForNaNValue = true;

    error('`NaN` is an invalid value for the `%s` css style property.', name);
  };

  var warnStyleValueIsInfinity = function (name, value) {
    if (warnedForInfinityValue) {
      return;
    }

    warnedForInfinityValue = true;

    error('`Infinity` is an invalid value for the `%s` css style property.', name);
  };

  warnValidStyle = function (name, value) {
    if (name.indexOf('-') > -1) {
      warnHyphenatedStyleName(name);
    } else if (badVendoredStyleNamePattern.test(name)) {
      warnBadVendoredStyleName(name);
    } else if (badStyleValueWithSemicolonPattern.test(value)) {
      warnStyleValueWithSemicolon(name, value);
    }

    if (typeof value === 'number') {
      if (isNaN(value)) {
        warnStyleValueIsNaN(name, value);
      } else if (!isFinite(value)) {
        warnStyleValueIsInfinity(name, value);
      }
    }
  };
}

var warnValidStyle$1 = warnValidStyle;

/**
 * Operations for dealing with CSS properties.
 */

/**
 * This creates a string that is expected to be equivalent to the style
 * attribute generated by server-side rendering. It by-passes warnings and
 * security checks so it's not safe to use this value for anything other than
 * comparison. It is only used in DEV for SSR validation.
 */

function createDangerousStringForStyles(styles) {
  {
    var serialized = '';
    var delimiter = '';

    for (var styleName in styles) {
      if (!styles.hasOwnProperty(styleName)) {
        continue;
      }

      var styleValue = styles[styleName];

      if (styleValue != null) {
        var isCustomProperty = styleName.indexOf('--') === 0;
        serialized += delimiter + (isCustomProperty ? styleName : hyphenateStyleName(styleName)) + ':';
        serialized += dangerousStyleValue(styleName, styleValue, isCustomProperty);
        delimiter = ';';
      }
    }

    return serialized || null;
  }
}
/**
 * Sets the value for multiple styles on a node.  If a value is specified as
 * '' (empty string), the corresponding style property will be unset.
 *
 * @param {DOMElement} node
 * @param {object} styles
 */

function setValueForStyles(node, styles) {
  var style = node.style;

  for (var styleName in styles) {
    if (!styles.hasOwnProperty(styleName)) {
      continue;
    }

    var isCustomProperty = styleName.indexOf('--') === 0;

    {
      if (!isCustomProperty) {
        warnValidStyle$1(styleName, styles[styleName]);
      }
    }

    var styleValue = dangerousStyleValue(styleName, styles[styleName], isCustomProperty);

    if (styleName === 'float') {
      styleName = 'cssFloat';
    }

    if (isCustomProperty) {
      style.setProperty(styleName, styleValue);
    } else {
      style[styleName] = styleValue;
    }
  }
}

function isValueEmpty(value) {
  return value == null || typeof value === 'boolean' || value === '';
}
/**
 * Given {color: 'red', overflow: 'hidden'} returns {
 *   color: 'color',
 *   overflowX: 'overflow',
 *   overflowY: 'overflow',
 * }. This can be read as "the overflowY property was set by the overflow
 * shorthand". That is, the values are the property that each was derived from.
 */


function expandShorthandMap(styles) {
  var expanded = {};

  for (var key in styles) {
    var longhands = shorthandToLonghand[key] || [key];

    for (var i = 0; i < longhands.length; i++) {
      expanded[longhands[i]] = key;
    }
  }

  return expanded;
}
/**
 * When mixing shorthand and longhand property names, we warn during updates if
 * we expect an incorrect result to occur. In particular, we warn for:
 *
 * Updating a shorthand property (longhand gets overwritten):
 *   {font: 'foo', fontVariant: 'bar'} -> {font: 'baz', fontVariant: 'bar'}
 *   becomes .style.font = 'baz'
 * Removing a shorthand property (longhand gets lost too):
 *   {font: 'foo', fontVariant: 'bar'} -> {fontVariant: 'bar'}
 *   becomes .style.font = ''
 * Removing a longhand property (should revert to shorthand; doesn't):
 *   {font: 'foo', fontVariant: 'bar'} -> {font: 'foo'}
 *   becomes .style.fontVariant = ''
 */


function validateShorthandPropertyCollisionInDev(styleUpdates, nextStyles) {
  {

    if (!nextStyles) {
      return;
    }

    var expandedUpdates = expandShorthandMap(styleUpdates);
    var expandedStyles = expandShorthandMap(nextStyles);
    var warnedAbout = {};

    for (var key in expandedUpdates) {
      var originalKey = expandedUpdates[key];
      var correctOriginalKey = expandedStyles[key];

      if (correctOriginalKey && originalKey !== correctOriginalKey) {
        var warningKey = originalKey + ',' + correctOriginalKey;

        if (warnedAbout[warningKey]) {
          continue;
        }

        warnedAbout[warningKey] = true;

        error('%s a style property during rerender (%s) when a ' + 'conflicting property is set (%s) can lead to styling bugs. To ' + "avoid this, don't mix shorthand and non-shorthand properties " + 'for the same value; instead, replace the shorthand with ' + 'separate values.', isValueEmpty(styleUpdates[originalKey]) ? 'Removing' : 'Updating', originalKey, correctOriginalKey);
      }
    }
  }
}

// For HTML, certain tags should omit their close tag. We keep a whitelist for
// those special-case tags.
var omittedCloseTags = {
  area: true,
  base: true,
  br: true,
  col: true,
  embed: true,
  hr: true,
  img: true,
  input: true,
  keygen: true,
  link: true,
  meta: true,
  param: true,
  source: true,
  track: true,
  wbr: true // NOTE: menuitem's close tag should be omitted, but that causes problems.

};

// `omittedCloseTags` except that `menuitem` should still have its closing tag.

var voidElementTags = _assign({
  menuitem: true
}, omittedCloseTags);

var HTML = '__html';
var ReactDebugCurrentFrame$3 = null;

{
  ReactDebugCurrentFrame$3 = ReactSharedInternals.ReactDebugCurrentFrame;
}

function assertValidProps(tag, props) {
  if (!props) {
    return;
  } // Note the use of `==` which checks for null or undefined.


  if (voidElementTags[tag]) {
    if (!(props.children == null && props.dangerouslySetInnerHTML == null)) {
      {
        throw Error( tag + " is a void element tag and must neither have `children` nor use `dangerouslySetInnerHTML`." + ( ReactDebugCurrentFrame$3.getStackAddendum() ) );
      }
    }
  }

  if (props.dangerouslySetInnerHTML != null) {
    if (!(props.children == null)) {
      {
        throw Error( "Can only set one of `children` or `props.dangerouslySetInnerHTML`." );
      }
    }

    if (!(typeof props.dangerouslySetInnerHTML === 'object' && HTML in props.dangerouslySetInnerHTML)) {
      {
        throw Error( "`props.dangerouslySetInnerHTML` must be in the form `{__html: ...}`. Please visit https://fb.me/react-invariant-dangerously-set-inner-html for more information." );
      }
    }
  }

  {
    if (!props.suppressContentEditableWarning && props.contentEditable && props.children != null) {
      error('A component is `contentEditable` and contains `children` managed by ' + 'React. It is now your responsibility to guarantee that none of ' + 'those nodes are unexpectedly modified or duplicated. This is ' + 'probably not intentional.');
    }
  }

  if (!(props.style == null || typeof props.style === 'object')) {
    {
      throw Error( "The `style` prop expects a mapping from style properties to values, not a string. For example, style={{marginRight: spacing + 'em'}} when using JSX." + ( ReactDebugCurrentFrame$3.getStackAddendum() ) );
    }
  }
}

function isCustomComponent(tagName, props) {
  if (tagName.indexOf('-') === -1) {
    return typeof props.is === 'string';
  }

  switch (tagName) {
    // These are reserved SVG and MathML elements.
    // We don't mind this whitelist too much because we expect it to never grow.
    // The alternative is to track the namespace in a few places which is convoluted.
    // https://w3c.github.io/webcomponents/spec/custom/#custom-elements-core-concepts
    case 'annotation-xml':
    case 'color-profile':
    case 'font-face':
    case 'font-face-src':
    case 'font-face-uri':
    case 'font-face-format':
    case 'font-face-name':
    case 'missing-glyph':
      return false;

    default:
      return true;
  }
}

// When adding attributes to the HTML or SVG whitelist, be sure to
// also add them to this module to ensure casing and incorrect name
// warnings.
var possibleStandardNames = {
  // HTML
  accept: 'accept',
  acceptcharset: 'acceptCharset',
  'accept-charset': 'acceptCharset',
  accesskey: 'accessKey',
  action: 'action',
  allowfullscreen: 'allowFullScreen',
  alt: 'alt',
  as: 'as',
  async: 'async',
  autocapitalize: 'autoCapitalize',
  autocomplete: 'autoComplete',
  autocorrect: 'autoCorrect',
  autofocus: 'autoFocus',
  autoplay: 'autoPlay',
  autosave: 'autoSave',
  capture: 'capture',
  cellpadding: 'cellPadding',
  cellspacing: 'cellSpacing',
  challenge: 'challenge',
  charset: 'charSet',
  checked: 'checked',
  children: 'children',
  cite: 'cite',
  class: 'className',
  classid: 'classID',
  classname: 'className',
  cols: 'cols',
  colspan: 'colSpan',
  content: 'content',
  contenteditable: 'contentEditable',
  contextmenu: 'contextMenu',
  controls: 'controls',
  controlslist: 'controlsList',
  coords: 'coords',
  crossorigin: 'crossOrigin',
  dangerouslysetinnerhtml: 'dangerouslySetInnerHTML',
  data: 'data',
  datetime: 'dateTime',
  default: 'default',
  defaultchecked: 'defaultChecked',
  defaultvalue: 'defaultValue',
  defer: 'defer',
  dir: 'dir',
  disabled: 'disabled',
  disablepictureinpicture: 'disablePictureInPicture',
  download: 'download',
  draggable: 'draggable',
  enctype: 'encType',
  for: 'htmlFor',
  form: 'form',
  formmethod: 'formMethod',
  formaction: 'formAction',
  formenctype: 'formEncType',
  formnovalidate: 'formNoValidate',
  formtarget: 'formTarget',
  frameborder: 'frameBorder',
  headers: 'headers',
  height: 'height',
  hidden: 'hidden',
  high: 'high',
  href: 'href',
  hreflang: 'hrefLang',
  htmlfor: 'htmlFor',
  httpequiv: 'httpEquiv',
  'http-equiv': 'httpEquiv',
  icon: 'icon',
  id: 'id',
  innerhtml: 'innerHTML',
  inputmode: 'inputMode',
  integrity: 'integrity',
  is: 'is',
  itemid: 'itemID',
  itemprop: 'itemProp',
  itemref: 'itemRef',
  itemscope: 'itemScope',
  itemtype: 'itemType',
  keyparams: 'keyParams',
  keytype: 'keyType',
  kind: 'kind',
  label: 'label',
  lang: 'lang',
  list: 'list',
  loop: 'loop',
  low: 'low',
  manifest: 'manifest',
  marginwidth: 'marginWidth',
  marginheight: 'marginHeight',
  max: 'max',
  maxlength: 'maxLength',
  media: 'media',
  mediagroup: 'mediaGroup',
  method: 'method',
  min: 'min',
  minlength: 'minLength',
  multiple: 'multiple',
  muted: 'muted',
  name: 'name',
  nomodule: 'noModule',
  nonce: 'nonce',
  novalidate: 'noValidate',
  open: 'open',
  optimum: 'optimum',
  pattern: 'pattern',
  placeholder: 'placeholder',
  playsinline: 'playsInline',
  poster: 'poster',
  preload: 'preload',
  profile: 'profile',
  radiogroup: 'radioGroup',
  readonly: 'readOnly',
  referrerpolicy: 'referrerPolicy',
  rel: 'rel',
  required: 'required',
  reversed: 'reversed',
  role: 'role',
  rows: 'rows',
  rowspan: 'rowSpan',
  sandbox: 'sandbox',
  scope: 'scope',
  scoped: 'scoped',
  scrolling: 'scrolling',
  seamless: 'seamless',
  selected: 'selected',
  shape: 'shape',
  size: 'size',
  sizes: 'sizes',
  span: 'span',
  spellcheck: 'spellCheck',
  src: 'src',
  srcdoc: 'srcDoc',
  srclang: 'srcLang',
  srcset: 'srcSet',
  start: 'start',
  step: 'step',
  style: 'style',
  summary: 'summary',
  tabindex: 'tabIndex',
  target: 'target',
  title: 'title',
  type: 'type',
  usemap: 'useMap',
  value: 'value',
  width: 'width',
  wmode: 'wmode',
  wrap: 'wrap',
  // SVG
  about: 'about',
  accentheight: 'accentHeight',
  'accent-height': 'accentHeight',
  accumulate: 'accumulate',
  additive: 'additive',
  alignmentbaseline: 'alignmentBaseline',
  'alignment-baseline': 'alignmentBaseline',
  allowreorder: 'allowReorder',
  alphabetic: 'alphabetic',
  amplitude: 'amplitude',
  arabicform: 'arabicForm',
  'arabic-form': 'arabicForm',
  ascent: 'ascent',
  attributename: 'attributeName',
  attributetype: 'attributeType',
  autoreverse: 'autoReverse',
  azimuth: 'azimuth',
  basefrequency: 'baseFrequency',
  baselineshift: 'baselineShift',
  'baseline-shift': 'baselineShift',
  baseprofile: 'baseProfile',
  bbox: 'bbox',
  begin: 'begin',
  bias: 'bias',
  by: 'by',
  calcmode: 'calcMode',
  capheight: 'capHeight',
  'cap-height': 'capHeight',
  clip: 'clip',
  clippath: 'clipPath',
  'clip-path': 'clipPath',
  clippathunits: 'clipPathUnits',
  cliprule: 'clipRule',
  'clip-rule': 'clipRule',
  color: 'color',
  colorinterpolation: 'colorInterpolation',
  'color-interpolation': 'colorInterpolation',
  colorinterpolationfilters: 'colorInterpolationFilters',
  'color-interpolation-filters': 'colorInterpolationFilters',
  colorprofile: 'colorProfile',
  'color-profile': 'colorProfile',
  colorrendering: 'colorRendering',
  'color-rendering': 'colorRendering',
  contentscripttype: 'contentScriptType',
  contentstyletype: 'contentStyleType',
  cursor: 'cursor',
  cx: 'cx',
  cy: 'cy',
  d: 'd',
  datatype: 'datatype',
  decelerate: 'decelerate',
  descent: 'descent',
  diffuseconstant: 'diffuseConstant',
  direction: 'direction',
  display: 'display',
  divisor: 'divisor',
  dominantbaseline: 'dominantBaseline',
  'dominant-baseline': 'dominantBaseline',
  dur: 'dur',
  dx: 'dx',
  dy: 'dy',
  edgemode: 'edgeMode',
  elevation: 'elevation',
  enablebackground: 'enableBackground',
  'enable-background': 'enableBackground',
  end: 'end',
  exponent: 'exponent',
  externalresourcesrequired: 'externalResourcesRequired',
  fill: 'fill',
  fillopacity: 'fillOpacity',
  'fill-opacity': 'fillOpacity',
  fillrule: 'fillRule',
  'fill-rule': 'fillRule',
  filter: 'filter',
  filterres: 'filterRes',
  filterunits: 'filterUnits',
  floodopacity: 'floodOpacity',
  'flood-opacity': 'floodOpacity',
  floodcolor: 'floodColor',
  'flood-color': 'floodColor',
  focusable: 'focusable',
  fontfamily: 'fontFamily',
  'font-family': 'fontFamily',
  fontsize: 'fontSize',
  'font-size': 'fontSize',
  fontsizeadjust: 'fontSizeAdjust',
  'font-size-adjust': 'fontSizeAdjust',
  fontstretch: 'fontStretch',
  'font-stretch': 'fontStretch',
  fontstyle: 'fontStyle',
  'font-style': 'fontStyle',
  fontvariant: 'fontVariant',
  'font-variant': 'fontVariant',
  fontweight: 'fontWeight',
  'font-weight': 'fontWeight',
  format: 'format',
  from: 'from',
  fx: 'fx',
  fy: 'fy',
  g1: 'g1',
  g2: 'g2',
  glyphname: 'glyphName',
  'glyph-name': 'glyphName',
  glyphorientationhorizontal: 'glyphOrientationHorizontal',
  'glyph-orientation-horizontal': 'glyphOrientationHorizontal',
  glyphorientationvertical: 'glyphOrientationVertical',
  'glyph-orientation-vertical': 'glyphOrientationVertical',
  glyphref: 'glyphRef',
  gradienttransform: 'gradientTransform',
  gradientunits: 'gradientUnits',
  hanging: 'hanging',
  horizadvx: 'horizAdvX',
  'horiz-adv-x': 'horizAdvX',
  horizoriginx: 'horizOriginX',
  'horiz-origin-x': 'horizOriginX',
  ideographic: 'ideographic',
  imagerendering: 'imageRendering',
  'image-rendering': 'imageRendering',
  in2: 'in2',
  in: 'in',
  inlist: 'inlist',
  intercept: 'intercept',
  k1: 'k1',
  k2: 'k2',
  k3: 'k3',
  k4: 'k4',
  k: 'k',
  kernelmatrix: 'kernelMatrix',
  kernelunitlength: 'kernelUnitLength',
  kerning: 'kerning',
  keypoints: 'keyPoints',
  keysplines: 'keySplines',
  keytimes: 'keyTimes',
  lengthadjust: 'lengthAdjust',
  letterspacing: 'letterSpacing',
  'letter-spacing': 'letterSpacing',
  lightingcolor: 'lightingColor',
  'lighting-color': 'lightingColor',
  limitingconeangle: 'limitingConeAngle',
  local: 'local',
  markerend: 'markerEnd',
  'marker-end': 'markerEnd',
  markerheight: 'markerHeight',
  markermid: 'markerMid',
  'marker-mid': 'markerMid',
  markerstart: 'markerStart',
  'marker-start': 'markerStart',
  markerunits: 'markerUnits',
  markerwidth: 'markerWidth',
  mask: 'mask',
  maskcontentunits: 'maskContentUnits',
  maskunits: 'maskUnits',
  mathematical: 'mathematical',
  mode: 'mode',
  numoctaves: 'numOctaves',
  offset: 'offset',
  opacity: 'opacity',
  operator: 'operator',
  order: 'order',
  orient: 'orient',
  orientation: 'orientation',
  origin: 'origin',
  overflow: 'overflow',
  overlineposition: 'overlinePosition',
  'overline-position': 'overlinePosition',
  overlinethickness: 'overlineThickness',
  'overline-thickness': 'overlineThickness',
  paintorder: 'paintOrder',
  'paint-order': 'paintOrder',
  panose1: 'panose1',
  'panose-1': 'panose1',
  pathlength: 'pathLength',
  patterncontentunits: 'patternContentUnits',
  patterntransform: 'patternTransform',
  patternunits: 'patternUnits',
  pointerevents: 'pointerEvents',
  'pointer-events': 'pointerEvents',
  points: 'points',
  pointsatx: 'pointsAtX',
  pointsaty: 'pointsAtY',
  pointsatz: 'pointsAtZ',
  prefix: 'prefix',
  preservealpha: 'preserveAlpha',
  preserveaspectratio: 'preserveAspectRatio',
  primitiveunits: 'primitiveUnits',
  property: 'property',
  r: 'r',
  radius: 'radius',
  refx: 'refX',
  refy: 'refY',
  renderingintent: 'renderingIntent',
  'rendering-intent': 'renderingIntent',
  repeatcount: 'repeatCount',
  repeatdur: 'repeatDur',
  requiredextensions: 'requiredExtensions',
  requiredfeatures: 'requiredFeatures',
  resource: 'resource',
  restart: 'restart',
  result: 'result',
  results: 'results',
  rotate: 'rotate',
  rx: 'rx',
  ry: 'ry',
  scale: 'scale',
  security: 'security',
  seed: 'seed',
  shaperendering: 'shapeRendering',
  'shape-rendering': 'shapeRendering',
  slope: 'slope',
  spacing: 'spacing',
  specularconstant: 'specularConstant',
  specularexponent: 'specularExponent',
  speed: 'speed',
  spreadmethod: 'spreadMethod',
  startoffset: 'startOffset',
  stddeviation: 'stdDeviation',
  stemh: 'stemh',
  stemv: 'stemv',
  stitchtiles: 'stitchTiles',
  stopcolor: 'stopColor',
  'stop-color': 'stopColor',
  stopopacity: 'stopOpacity',
  'stop-opacity': 'stopOpacity',
  strikethroughposition: 'strikethroughPosition',
  'strikethrough-position': 'strikethroughPosition',
  strikethroughthickness: 'strikethroughThickness',
  'strikethrough-thickness': 'strikethroughThickness',
  string: 'string',
  stroke: 'stroke',
  strokedasharray: 'strokeDasharray',
  'stroke-dasharray': 'strokeDasharray',
  strokedashoffset: 'strokeDashoffset',
  'stroke-dashoffset': 'strokeDashoffset',
  strokelinecap: 'strokeLinecap',
  'stroke-linecap': 'strokeLinecap',
  strokelinejoin: 'strokeLinejoin',
  'stroke-linejoin': 'strokeLinejoin',
  strokemiterlimit: 'strokeMiterlimit',
  'stroke-miterlimit': 'strokeMiterlimit',
  strokewidth: 'strokeWidth',
  'stroke-width': 'strokeWidth',
  strokeopacity: 'strokeOpacity',
  'stroke-opacity': 'strokeOpacity',
  suppresscontenteditablewarning: 'suppressContentEditableWarning',
  suppresshydrationwarning: 'suppressHydrationWarning',
  surfacescale: 'surfaceScale',
  systemlanguage: 'systemLanguage',
  tablevalues: 'tableValues',
  targetx: 'targetX',
  targety: 'targetY',
  textanchor: 'textAnchor',
  'text-anchor': 'textAnchor',
  textdecoration: 'textDecoration',
  'text-decoration': 'textDecoration',
  textlength: 'textLength',
  textrendering: 'textRendering',
  'text-rendering': 'textRendering',
  to: 'to',
  transform: 'transform',
  typeof: 'typeof',
  u1: 'u1',
  u2: 'u2',
  underlineposition: 'underlinePosition',
  'underline-position': 'underlinePosition',
  underlinethickness: 'underlineThickness',
  'underline-thickness': 'underlineThickness',
  unicode: 'unicode',
  unicodebidi: 'unicodeBidi',
  'unicode-bidi': 'unicodeBidi',
  unicoderange: 'unicodeRange',
  'unicode-range': 'unicodeRange',
  unitsperem: 'unitsPerEm',
  'units-per-em': 'unitsPerEm',
  unselectable: 'unselectable',
  valphabetic: 'vAlphabetic',
  'v-alphabetic': 'vAlphabetic',
  values: 'values',
  vectoreffect: 'vectorEffect',
  'vector-effect': 'vectorEffect',
  version: 'version',
  vertadvy: 'vertAdvY',
  'vert-adv-y': 'vertAdvY',
  vertoriginx: 'vertOriginX',
  'vert-origin-x': 'vertOriginX',
  vertoriginy: 'vertOriginY',
  'vert-origin-y': 'vertOriginY',
  vhanging: 'vHanging',
  'v-hanging': 'vHanging',
  videographic: 'vIdeographic',
  'v-ideographic': 'vIdeographic',
  viewbox: 'viewBox',
  viewtarget: 'viewTarget',
  visibility: 'visibility',
  vmathematical: 'vMathematical',
  'v-mathematical': 'vMathematical',
  vocab: 'vocab',
  widths: 'widths',
  wordspacing: 'wordSpacing',
  'word-spacing': 'wordSpacing',
  writingmode: 'writingMode',
  'writing-mode': 'writingMode',
  x1: 'x1',
  x2: 'x2',
  x: 'x',
  xchannelselector: 'xChannelSelector',
  xheight: 'xHeight',
  'x-height': 'xHeight',
  xlinkactuate: 'xlinkActuate',
  'xlink:actuate': 'xlinkActuate',
  xlinkarcrole: 'xlinkArcrole',
  'xlink:arcrole': 'xlinkArcrole',
  xlinkhref: 'xlinkHref',
  'xlink:href': 'xlinkHref',
  xlinkrole: 'xlinkRole',
  'xlink:role': 'xlinkRole',
  xlinkshow: 'xlinkShow',
  'xlink:show': 'xlinkShow',
  xlinktitle: 'xlinkTitle',
  'xlink:title': 'xlinkTitle',
  xlinktype: 'xlinkType',
  'xlink:type': 'xlinkType',
  xmlbase: 'xmlBase',
  'xml:base': 'xmlBase',
  xmllang: 'xmlLang',
  'xml:lang': 'xmlLang',
  xmlns: 'xmlns',
  'xml:space': 'xmlSpace',
  xmlnsxlink: 'xmlnsXlink',
  'xmlns:xlink': 'xmlnsXlink',
  xmlspace: 'xmlSpace',
  y1: 'y1',
  y2: 'y2',
  y: 'y',
  ychannelselector: 'yChannelSelector',
  z: 'z',
  zoomandpan: 'zoomAndPan'
};

var ariaProperties = {
  'aria-current': 0,
  // state
  'aria-details': 0,
  'aria-disabled': 0,
  // state
  'aria-hidden': 0,
  // state
  'aria-invalid': 0,
  // state
  'aria-keyshortcuts': 0,
  'aria-label': 0,
  'aria-roledescription': 0,
  // Widget Attributes
  'aria-autocomplete': 0,
  'aria-checked': 0,
  'aria-expanded': 0,
  'aria-haspopup': 0,
  'aria-level': 0,
  'aria-modal': 0,
  'aria-multiline': 0,
  'aria-multiselectable': 0,
  'aria-orientation': 0,
  'aria-placeholder': 0,
  'aria-pressed': 0,
  'aria-readonly': 0,
  'aria-required': 0,
  'aria-selected': 0,
  'aria-sort': 0,
  'aria-valuemax': 0,
  'aria-valuemin': 0,
  'aria-valuenow': 0,
  'aria-valuetext': 0,
  // Live Region Attributes
  'aria-atomic': 0,
  'aria-busy': 0,
  'aria-live': 0,
  'aria-relevant': 0,
  // Drag-and-Drop Attributes
  'aria-dropeffect': 0,
  'aria-grabbed': 0,
  // Relationship Attributes
  'aria-activedescendant': 0,
  'aria-colcount': 0,
  'aria-colindex': 0,
  'aria-colspan': 0,
  'aria-controls': 0,
  'aria-describedby': 0,
  'aria-errormessage': 0,
  'aria-flowto': 0,
  'aria-labelledby': 0,
  'aria-owns': 0,
  'aria-posinset': 0,
  'aria-rowcount': 0,
  'aria-rowindex': 0,
  'aria-rowspan': 0,
  'aria-setsize': 0
};

var warnedProperties = {};
var rARIA = new RegExp('^(aria)-[' + ATTRIBUTE_NAME_CHAR + ']*$');
var rARIACamel = new RegExp('^(aria)[A-Z][' + ATTRIBUTE_NAME_CHAR + ']*$');
var hasOwnProperty$1 = Object.prototype.hasOwnProperty;

function validateProperty(tagName, name) {
  {
    if (hasOwnProperty$1.call(warnedProperties, name) && warnedProperties[name]) {
      return true;
    }

    if (rARIACamel.test(name)) {
      var ariaName = 'aria-' + name.slice(4).toLowerCase();
      var correctName = ariaProperties.hasOwnProperty(ariaName) ? ariaName : null; // If this is an aria-* attribute, but is not listed in the known DOM
      // DOM properties, then it is an invalid aria-* attribute.

      if (correctName == null) {
        error('Invalid ARIA attribute `%s`. ARIA attributes follow the pattern aria-* and must be lowercase.', name);

        warnedProperties[name] = true;
        return true;
      } // aria-* attributes should be lowercase; suggest the lowercase version.


      if (name !== correctName) {
        error('Invalid ARIA attribute `%s`. Did you mean `%s`?', name, correctName);

        warnedProperties[name] = true;
        return true;
      }
    }

    if (rARIA.test(name)) {
      var lowerCasedName = name.toLowerCase();
      var standardName = ariaProperties.hasOwnProperty(lowerCasedName) ? lowerCasedName : null; // If this is an aria-* attribute, but is not listed in the known DOM
      // DOM properties, then it is an invalid aria-* attribute.

      if (standardName == null) {
        warnedProperties[name] = true;
        return false;
      } // aria-* attributes should be lowercase; suggest the lowercase version.


      if (name !== standardName) {
        error('Unknown ARIA attribute `%s`. Did you mean `%s`?', name, standardName);

        warnedProperties[name] = true;
        return true;
      }
    }
  }

  return true;
}

function warnInvalidARIAProps(type, props) {
  {
    var invalidProps = [];

    for (var key in props) {
      var isValid = validateProperty(type, key);

      if (!isValid) {
        invalidProps.push(key);
      }
    }

    var unknownPropString = invalidProps.map(function (prop) {
      return '`' + prop + '`';
    }).join(', ');

    if (invalidProps.length === 1) {
      error('Invalid aria prop %s on <%s> tag. ' + 'For details, see https://fb.me/invalid-aria-prop', unknownPropString, type);
    } else if (invalidProps.length > 1) {
      error('Invalid aria props %s on <%s> tag. ' + 'For details, see https://fb.me/invalid-aria-prop', unknownPropString, type);
    }
  }
}

function validateProperties(type, props) {
  if (isCustomComponent(type, props)) {
    return;
  }

  warnInvalidARIAProps(type, props);
}

var didWarnValueNull = false;
function validateProperties$1(type, props) {
  {
    if (type !== 'input' && type !== 'textarea' && type !== 'select') {
      return;
    }

    if (props != null && props.value === null && !didWarnValueNull) {
      didWarnValueNull = true;

      if (type === 'select' && props.multiple) {
        error('`value` prop on `%s` should not be null. ' + 'Consider using an empty array when `multiple` is set to `true` ' + 'to clear the component or `undefined` for uncontrolled components.', type);
      } else {
        error('`value` prop on `%s` should not be null. ' + 'Consider using an empty string to clear the component or `undefined` ' + 'for uncontrolled components.', type);
      }
    }
  }
}

var validateProperty$1 = function () {};

{
  var warnedProperties$1 = {};
  var _hasOwnProperty = Object.prototype.hasOwnProperty;
  var EVENT_NAME_REGEX = /^on./;
  var INVALID_EVENT_NAME_REGEX = /^on[^A-Z]/;
  var rARIA$1 = new RegExp('^(aria)-[' + ATTRIBUTE_NAME_CHAR + ']*$');
  var rARIACamel$1 = new RegExp('^(aria)[A-Z][' + ATTRIBUTE_NAME_CHAR + ']*$');

  validateProperty$1 = function (tagName, name, value, canUseEventSystem) {
    if (_hasOwnProperty.call(warnedProperties$1, name) && warnedProperties$1[name]) {
      return true;
    }

    var lowerCasedName = name.toLowerCase();

    if (lowerCasedName === 'onfocusin' || lowerCasedName === 'onfocusout') {
      error('React uses onFocus and onBlur instead of onFocusIn and onFocusOut. ' + 'All React events are normalized to bubble, so onFocusIn and onFocusOut ' + 'are not needed/supported by React.');

      warnedProperties$1[name] = true;
      return true;
    } // We can't rely on the event system being injected on the server.


    if (canUseEventSystem) {
      if (registrationNameModules.hasOwnProperty(name)) {
        return true;
      }

      var registrationName = possibleRegistrationNames.hasOwnProperty(lowerCasedName) ? possibleRegistrationNames[lowerCasedName] : null;

      if (registrationName != null) {
        error('Invalid event handler property `%s`. Did you mean `%s`?', name, registrationName);

        warnedProperties$1[name] = true;
        return true;
      }

      if (EVENT_NAME_REGEX.test(name)) {
        error('Unknown event handler property `%s`. It will be ignored.', name);

        warnedProperties$1[name] = true;
        return true;
      }
    } else if (EVENT_NAME_REGEX.test(name)) {
      // If no event plugins have been injected, we are in a server environment.
      // So we can't tell if the event name is correct for sure, but we can filter
      // out known bad ones like `onclick`. We can't suggest a specific replacement though.
      if (INVALID_EVENT_NAME_REGEX.test(name)) {
        error('Invalid event handler property `%s`. ' + 'React events use the camelCase naming convention, for example `onClick`.', name);
      }

      warnedProperties$1[name] = true;
      return true;
    } // Let the ARIA attribute hook validate ARIA attributes


    if (rARIA$1.test(name) || rARIACamel$1.test(name)) {
      return true;
    }

    if (lowerCasedName === 'innerhtml') {
      error('Directly setting property `innerHTML` is not permitted. ' + 'For more information, lookup documentation on `dangerouslySetInnerHTML`.');

      warnedProperties$1[name] = true;
      return true;
    }

    if (lowerCasedName === 'aria') {
      error('The `aria` attribute is reserved for future use in React. ' + 'Pass individual `aria-` attributes instead.');

      warnedProperties$1[name] = true;
      return true;
    }

    if (lowerCasedName === 'is' && value !== null && value !== undefined && typeof value !== 'string') {
      error('Received a `%s` for a string attribute `is`. If this is expected, cast ' + 'the value to a string.', typeof value);

      warnedProperties$1[name] = true;
      return true;
    }

    if (typeof value === 'number' && isNaN(value)) {
      error('Received NaN for the `%s` attribute. If this is expected, cast ' + 'the value to a string.', name);

      warnedProperties$1[name] = true;
      return true;
    }

    var propertyInfo = getPropertyInfo(name);
    var isReserved = propertyInfo !== null && propertyInfo.type === RESERVED; // Known attributes should match the casing specified in the property config.

    if (possibleStandardNames.hasOwnProperty(lowerCasedName)) {
      var standardName = possibleStandardNames[lowerCasedName];

      if (standardName !== name) {
        error('Invalid DOM property `%s`. Did you mean `%s`?', name, standardName);

        warnedProperties$1[name] = true;
        return true;
      }
    } else if (!isReserved && name !== lowerCasedName) {
      // Unknown attributes should have lowercase casing since that's how they
      // will be cased anyway with server rendering.
      error('React does not recognize the `%s` prop on a DOM element. If you ' + 'intentionally want it to appear in the DOM as a custom ' + 'attribute, spell it as lowercase `%s` instead. ' + 'If you accidentally passed it from a parent component, remove ' + 'it from the DOM element.', name, lowerCasedName);

      warnedProperties$1[name] = true;
      return true;
    }

    if (typeof value === 'boolean' && shouldRemoveAttributeWithWarning(name, value, propertyInfo, false)) {
      if (value) {
        error('Received `%s` for a non-boolean attribute `%s`.\n\n' + 'If you want to write it to the DOM, pass a string instead: ' + '%s="%s" or %s={value.toString()}.', value, name, name, value, name);
      } else {
        error('Received `%s` for a non-boolean attribute `%s`.\n\n' + 'If you want to write it to the DOM, pass a string instead: ' + '%s="%s" or %s={value.toString()}.\n\n' + 'If you used to conditionally omit it with %s={condition && value}, ' + 'pass %s={condition ? value : undefined} instead.', value, name, name, value, name, name, name);
      }

      warnedProperties$1[name] = true;
      return true;
    } // Now that we've validated casing, do not validate
    // data types for reserved props


    if (isReserved) {
      return true;
    } // Warn when a known attribute is a bad type


    if (shouldRemoveAttributeWithWarning(name, value, propertyInfo, false)) {
      warnedProperties$1[name] = true;
      return false;
    } // Warn when passing the strings 'false' or 'true' into a boolean prop


    if ((value === 'false' || value === 'true') && propertyInfo !== null && propertyInfo.type === BOOLEAN) {
      error('Received the string `%s` for the boolean attribute `%s`. ' + '%s ' + 'Did you mean %s={%s}?', value, name, value === 'false' ? 'The browser will interpret it as a truthy value.' : 'Although this works, it will not work as expected if you pass the string "false".', name, value);

      warnedProperties$1[name] = true;
      return true;
    }

    return true;
  };
}

var warnUnknownProperties = function (type, props, canUseEventSystem) {
  {
    var unknownProps = [];

    for (var key in props) {
      var isValid = validateProperty$1(type, key, props[key], canUseEventSystem);

      if (!isValid) {
        unknownProps.push(key);
      }
    }

    var unknownPropString = unknownProps.map(function (prop) {
      return '`' + prop + '`';
    }).join(', ');

    if (unknownProps.length === 1) {
      error('Invalid value for prop %s on <%s> tag. Either remove it from the element, ' + 'or pass a string or number value to keep it in the DOM. ' + 'For details, see https://fb.me/react-attribute-behavior', unknownPropString, type);
    } else if (unknownProps.length > 1) {
      error('Invalid values for props %s on <%s> tag. Either remove them from the element, ' + 'or pass a string or number value to keep them in the DOM. ' + 'For details, see https://fb.me/react-attribute-behavior', unknownPropString, type);
    }
  }
};

function validateProperties$2(type, props, canUseEventSystem) {
  if (isCustomComponent(type, props)) {
    return;
  }

  warnUnknownProperties(type, props, canUseEventSystem);
}

var didWarnInvalidHydration = false;
var DANGEROUSLY_SET_INNER_HTML = 'dangerouslySetInnerHTML';
var SUPPRESS_CONTENT_EDITABLE_WARNING = 'suppressContentEditableWarning';
var SUPPRESS_HYDRATION_WARNING = 'suppressHydrationWarning';
var AUTOFOCUS = 'autoFocus';
var CHILDREN = 'children';
var STYLE = 'style';
var HTML$1 = '__html';
var HTML_NAMESPACE$1 = Namespaces.html;
var warnedUnknownTags;
var suppressHydrationWarning;
var validatePropertiesInDevelopment;
var warnForTextDifference;
var warnForPropDifference;
var warnForExtraAttributes;
var warnForInvalidEventListener;
var canDiffStyleForHydrationWarning;
var normalizeMarkupForTextOrAttribute;
var normalizeHTML;

{
  warnedUnknownTags = {
    // Chrome is the only major browser not shipping <time>. But as of July
    // 2017 it intends to ship it due to widespread usage. We intentionally
    // *don't* warn for <time> even if it's unrecognized by Chrome because
    // it soon will be, and many apps have been using it anyway.
    time: true,
    // There are working polyfills for <dialog>. Let people use it.
    dialog: true,
    // Electron ships a custom <webview> tag to display external web content in
    // an isolated frame and process.
    // This tag is not present in non Electron environments such as JSDom which
    // is often used for testing purposes.
    // @see https://electronjs.org/docs/api/webview-tag
    webview: true
  };

  validatePropertiesInDevelopment = function (type, props) {
    validateProperties(type, props);
    validateProperties$1(type, props);
    validateProperties$2(type, props,
    /* canUseEventSystem */
    true);
  }; // IE 11 parses & normalizes the style attribute as opposed to other
  // browsers. It adds spaces and sorts the properties in some
  // non-alphabetical order. Handling that would require sorting CSS
  // properties in the client & server versions or applying
  // `expectedStyle` to a temporary DOM node to read its `style` attribute
  // normalized. Since it only affects IE, we're skipping style warnings
  // in that browser completely in favor of doing all that work.
  // See https://github.com/facebook/react/issues/11807


  canDiffStyleForHydrationWarning = canUseDOM && !document.documentMode; // HTML parsing normalizes CR and CRLF to LF.
  // It also can turn \u0000 into \uFFFD inside attributes.
  // https://www.w3.org/TR/html5/single-page.html#preprocessing-the-input-stream
  // If we have a mismatch, it might be caused by that.
  // We will still patch up in this case but not fire the warning.

  var NORMALIZE_NEWLINES_REGEX = /\r\n?/g;
  var NORMALIZE_NULL_AND_REPLACEMENT_REGEX = /\u0000|\uFFFD/g;

  normalizeMarkupForTextOrAttribute = function (markup) {
    var markupString = typeof markup === 'string' ? markup : '' + markup;
    return markupString.replace(NORMALIZE_NEWLINES_REGEX, '\n').replace(NORMALIZE_NULL_AND_REPLACEMENT_REGEX, '');
  };

  warnForTextDifference = function (serverText, clientText) {
    if (didWarnInvalidHydration) {
      return;
    }

    var normalizedClientText = normalizeMarkupForTextOrAttribute(clientText);
    var normalizedServerText = normalizeMarkupForTextOrAttribute(serverText);

    if (normalizedServerText === normalizedClientText) {
      return;
    }

    didWarnInvalidHydration = true;

    error('Text content did not match. Server: "%s" Client: "%s"', normalizedServerText, normalizedClientText);
  };

  warnForPropDifference = function (propName, serverValue, clientValue) {
    if (didWarnInvalidHydration) {
      return;
    }

    var normalizedClientValue = normalizeMarkupForTextOrAttribute(clientValue);
    var normalizedServerValue = normalizeMarkupForTextOrAttribute(serverValue);

    if (normalizedServerValue === normalizedClientValue) {
      return;
    }

    didWarnInvalidHydration = true;

    error('Prop `%s` did not match. Server: %s Client: %s', propName, JSON.stringify(normalizedServerValue), JSON.stringify(normalizedClientValue));
  };

  warnForExtraAttributes = function (attributeNames) {
    if (didWarnInvalidHydration) {
      return;
    }

    didWarnInvalidHydration = true;
    var names = [];
    attributeNames.forEach(function (name) {
      names.push(name);
    });

    error('Extra attributes from the server: %s', names);
  };

  warnForInvalidEventListener = function (registrationName, listener) {
    if (listener === false) {
      error('Expected `%s` listener to be a function, instead got `false`.\n\n' + 'If you used to conditionally omit it with %s={condition && value}, ' + 'pass %s={condition ? value : undefined} instead.', registrationName, registrationName, registrationName);
    } else {
      error('Expected `%s` listener to be a function, instead got a value of `%s` type.', registrationName, typeof listener);
    }
  }; // Parse the HTML and read it back to normalize the HTML string so that it
  // can be used for comparison.


  normalizeHTML = function (parent, html) {
    // We could have created a separate document here to avoid
    // re-initializing custom elements if they exist. But this breaks
    // how <noscript> is being handled. So we use the same document.
    // See the discussion in https://github.com/facebook/react/pull/11157.
    var testElement = parent.namespaceURI === HTML_NAMESPACE$1 ? parent.ownerDocument.createElement(parent.tagName) : parent.ownerDocument.createElementNS(parent.namespaceURI, parent.tagName);
    testElement.innerHTML = html;
    return testElement.innerHTML;
  };
}

function ensureListeningTo(rootContainerElement, registrationName) {
  var isDocumentOrFragment = rootContainerElement.nodeType === DOCUMENT_NODE || rootContainerElement.nodeType === DOCUMENT_FRAGMENT_NODE;
  var doc = isDocumentOrFragment ? rootContainerElement : rootContainerElement.ownerDocument;
  legacyListenToEvent(registrationName, doc);
}

function getOwnerDocumentFromRootContainer(rootContainerElement) {
  return rootContainerElement.nodeType === DOCUMENT_NODE ? rootContainerElement : rootContainerElement.ownerDocument;
}

function noop() {}

function trapClickOnNonInteractiveElement(node) {
  // Mobile Safari does not fire properly bubble click events on
  // non-interactive elements, which means delegated click listeners do not
  // fire. The workaround for this bug involves attaching an empty click
  // listener on the target node.
  // http://www.quirksmode.org/blog/archives/2010/09/click_event_del.html
  // Just set it using the onclick property so that we don't have to manage any
  // bookkeeping for it. Not sure if we need to clear it when the listener is
  // removed.
  // TODO: Only do this for the relevant Safaris maybe?
  node.onclick = noop;
}

function setInitialDOMProperties(tag, domElement, rootContainerElement, nextProps, isCustomComponentTag) {
  for (var propKey in nextProps) {
    if (!nextProps.hasOwnProperty(propKey)) {
      continue;
    }

    var nextProp = nextProps[propKey];

    if (propKey === STYLE) {
      {
        if (nextProp) {
          // Freeze the next style object so that we can assume it won't be
          // mutated. We have already warned for this in the past.
          Object.freeze(nextProp);
        }
      } // Relies on `updateStylesByID` not mutating `styleUpdates`.


      setValueForStyles(domElement, nextProp);
    } else if (propKey === DANGEROUSLY_SET_INNER_HTML) {
      var nextHtml = nextProp ? nextProp[HTML$1] : undefined;

      if (nextHtml != null) {
        setInnerHTML(domElement, nextHtml);
      }
    } else if (propKey === CHILDREN) {
      if (typeof nextProp === 'string') {
        // Avoid setting initial textContent when the text is empty. In IE11 setting
        // textContent on a <textarea> will cause the placeholder to not
        // show within the <textarea> until it has been focused and blurred again.
        // https://github.com/facebook/react/issues/6731#issuecomment-254874553
        var canSetTextContent = tag !== 'textarea' || nextProp !== '';

        if (canSetTextContent) {
          setTextContent(domElement, nextProp);
        }
      } else if (typeof nextProp === 'number') {
        setTextContent(domElement, '' + nextProp);
      }
    } else if ( propKey === SUPPRESS_CONTENT_EDITABLE_WARNING || propKey === SUPPRESS_HYDRATION_WARNING) ; else if (propKey === AUTOFOCUS) ; else if (registrationNameModules.hasOwnProperty(propKey)) {
      if (nextProp != null) {
        if ( typeof nextProp !== 'function') {
          warnForInvalidEventListener(propKey, nextProp);
        }

        ensureListeningTo(rootContainerElement, propKey);
      }
    } else if (nextProp != null) {
      setValueForProperty(domElement, propKey, nextProp, isCustomComponentTag);
    }
  }
}

function updateDOMProperties(domElement, updatePayload, wasCustomComponentTag, isCustomComponentTag) {
  // TODO: Handle wasCustomComponentTag
  for (var i = 0; i < updatePayload.length; i += 2) {
    var propKey = updatePayload[i];
    var propValue = updatePayload[i + 1];

    if (propKey === STYLE) {
      setValueForStyles(domElement, propValue);
    } else if (propKey === DANGEROUSLY_SET_INNER_HTML) {
      setInnerHTML(domElement, propValue);
    } else if (propKey === CHILDREN) {
      setTextContent(domElement, propValue);
    } else {
      setValueForProperty(domElement, propKey, propValue, isCustomComponentTag);
    }
  }
}

function createElement(type, props, rootContainerElement, parentNamespace) {
  var isCustomComponentTag; // We create tags in the namespace of their parent container, except HTML
  // tags get no namespace.

  var ownerDocument = getOwnerDocumentFromRootContainer(rootContainerElement);
  var domElement;
  var namespaceURI = parentNamespace;

  if (namespaceURI === HTML_NAMESPACE$1) {
    namespaceURI = getIntrinsicNamespace(type);
  }

  if (namespaceURI === HTML_NAMESPACE$1) {
    {
      isCustomComponentTag = isCustomComponent(type, props); // Should this check be gated by parent namespace? Not sure we want to
      // allow <SVG> or <mATH>.

      if (!isCustomComponentTag && type !== type.toLowerCase()) {
        error('<%s /> is using incorrect casing. ' + 'Use PascalCase for React components, ' + 'or lowercase for HTML elements.', type);
      }
    }

    if (type === 'script') {
      // Create the script via .innerHTML so its "parser-inserted" flag is
      // set to true and it does not execute
      var div = ownerDocument.createElement('div');

      div.innerHTML = '<script><' + '/script>'; // eslint-disable-line
      // This is guaranteed to yield a script element.

      var firstChild = div.firstChild;
      domElement = div.removeChild(firstChild);
    } else if (typeof props.is === 'string') {
      // $FlowIssue `createElement` should be updated for Web Components
      domElement = ownerDocument.createElement(type, {
        is: props.is
      });
    } else {
      // Separate else branch instead of using `props.is || undefined` above because of a Firefox bug.
      // See discussion in https://github.com/facebook/react/pull/6896
      // and discussion in https://bugzilla.mozilla.org/show_bug.cgi?id=1276240
      domElement = ownerDocument.createElement(type); // Normally attributes are assigned in `setInitialDOMProperties`, however the `multiple` and `size`
      // attributes on `select`s needs to be added before `option`s are inserted.
      // This prevents:
      // - a bug where the `select` does not scroll to the correct option because singular
      //  `select` elements automatically pick the first item #13222
      // - a bug where the `select` set the first item as selected despite the `size` attribute #14239
      // See https://github.com/facebook/react/issues/13222
      // and https://github.com/facebook/react/issues/14239

      if (type === 'select') {
        var node = domElement;

        if (props.multiple) {
          node.multiple = true;
        } else if (props.size) {
          // Setting a size greater than 1 causes a select to behave like `multiple=true`, where
          // it is possible that no option is selected.
          //
          // This is only necessary when a select in "single selection mode".
          node.size = props.size;
        }
      }
    }
  } else {
    domElement = ownerDocument.createElementNS(namespaceURI, type);
  }

  {
    if (namespaceURI === HTML_NAMESPACE$1) {
      if (!isCustomComponentTag && Object.prototype.toString.call(domElement) === '[object HTMLUnknownElement]' && !Object.prototype.hasOwnProperty.call(warnedUnknownTags, type)) {
        warnedUnknownTags[type] = true;

        error('The tag <%s> is unrecognized in this browser. ' + 'If you meant to render a React component, start its name with ' + 'an uppercase letter.', type);
      }
    }
  }

  return domElement;
}
function createTextNode(text, rootContainerElement) {
  return getOwnerDocumentFromRootContainer(rootContainerElement).createTextNode(text);
}
function setInitialProperties(domElement, tag, rawProps, rootContainerElement) {
  var isCustomComponentTag = isCustomComponent(tag, rawProps);

  {
    validatePropertiesInDevelopment(tag, rawProps);
  } // TODO: Make sure that we check isMounted before firing any of these events.


  var props;

  switch (tag) {
    case 'iframe':
    case 'object':
    case 'embed':
      trapBubbledEvent(TOP_LOAD, domElement);
      props = rawProps;
      break;

    case 'video':
    case 'audio':
      // Create listener for each media event
      for (var i = 0; i < mediaEventTypes.length; i++) {
        trapBubbledEvent(mediaEventTypes[i], domElement);
      }

      props = rawProps;
      break;

    case 'source':
      trapBubbledEvent(TOP_ERROR, domElement);
      props = rawProps;
      break;

    case 'img':
    case 'image':
    case 'link':
      trapBubbledEvent(TOP_ERROR, domElement);
      trapBubbledEvent(TOP_LOAD, domElement);
      props = rawProps;
      break;

    case 'form':
      trapBubbledEvent(TOP_RESET, domElement);
      trapBubbledEvent(TOP_SUBMIT, domElement);
      props = rawProps;
      break;

    case 'details':
      trapBubbledEvent(TOP_TOGGLE, domElement);
      props = rawProps;
      break;

    case 'input':
      initWrapperState(domElement, rawProps);
      props = getHostProps(domElement, rawProps);
      trapBubbledEvent(TOP_INVALID, domElement); // For controlled components we always need to ensure we're listening
      // to onChange. Even if there is no listener.

      ensureListeningTo(rootContainerElement, 'onChange');
      break;

    case 'option':
      validateProps(domElement, rawProps);
      props = getHostProps$1(domElement, rawProps);
      break;

    case 'select':
      initWrapperState$1(domElement, rawProps);
      props = getHostProps$2(domElement, rawProps);
      trapBubbledEvent(TOP_INVALID, domElement); // For controlled components we always need to ensure we're listening
      // to onChange. Even if there is no listener.

      ensureListeningTo(rootContainerElement, 'onChange');
      break;

    case 'textarea':
      initWrapperState$2(domElement, rawProps);
      props = getHostProps$3(domElement, rawProps);
      trapBubbledEvent(TOP_INVALID, domElement); // For controlled components we always need to ensure we're listening
      // to onChange. Even if there is no listener.

      ensureListeningTo(rootContainerElement, 'onChange');
      break;

    default:
      props = rawProps;
  }

  assertValidProps(tag, props);
  setInitialDOMProperties(tag, domElement, rootContainerElement, props, isCustomComponentTag);

  switch (tag) {
    case 'input':
      // TODO: Make sure we check if this is still unmounted or do any clean
      // up necessary since we never stop tracking anymore.
      track(domElement);
      postMountWrapper(domElement, rawProps, false);
      break;

    case 'textarea':
      // TODO: Make sure we check if this is still unmounted or do any clean
      // up necessary since we never stop tracking anymore.
      track(domElement);
      postMountWrapper$3(domElement);
      break;

    case 'option':
      postMountWrapper$1(domElement, rawProps);
      break;

    case 'select':
      postMountWrapper$2(domElement, rawProps);
      break;

    default:
      if (typeof props.onClick === 'function') {
        // TODO: This cast may not be sound for SVG, MathML or custom elements.
        trapClickOnNonInteractiveElement(domElement);
      }

      break;
  }
} // Calculate the diff between the two objects.

function diffProperties(domElement, tag, lastRawProps, nextRawProps, rootContainerElement) {
  {
    validatePropertiesInDevelopment(tag, nextRawProps);
  }

  var updatePayload = null;
  var lastProps;
  var nextProps;

  switch (tag) {
    case 'input':
      lastProps = getHostProps(domElement, lastRawProps);
      nextProps = getHostProps(domElement, nextRawProps);
      updatePayload = [];
      break;

    case 'option':
      lastProps = getHostProps$1(domElement, lastRawProps);
      nextProps = getHostProps$1(domElement, nextRawProps);
      updatePayload = [];
      break;

    case 'select':
      lastProps = getHostProps$2(domElement, lastRawProps);
      nextProps = getHostProps$2(domElement, nextRawProps);
      updatePayload = [];
      break;

    case 'textarea':
      lastProps = getHostProps$3(domElement, lastRawProps);
      nextProps = getHostProps$3(domElement, nextRawProps);
      updatePayload = [];
      break;

    default:
      lastProps = lastRawProps;
      nextProps = nextRawProps;

      if (typeof lastProps.onClick !== 'function' && typeof nextProps.onClick === 'function') {
        // TODO: This cast may not be sound for SVG, MathML or custom elements.
        trapClickOnNonInteractiveElement(domElement);
      }

      break;
  }

  assertValidProps(tag, nextProps);
  var propKey;
  var styleName;
  var styleUpdates = null;

  for (propKey in lastProps) {
    if (nextProps.hasOwnProperty(propKey) || !lastProps.hasOwnProperty(propKey) || lastProps[propKey] == null) {
      continue;
    }

    if (propKey === STYLE) {
      var lastStyle = lastProps[propKey];

      for (styleName in lastStyle) {
        if (lastStyle.hasOwnProperty(styleName)) {
          if (!styleUpdates) {
            styleUpdates = {};
          }

          styleUpdates[styleName] = '';
        }
      }
    } else if (propKey === DANGEROUSLY_SET_INNER_HTML || propKey === CHILDREN) ; else if ( propKey === SUPPRESS_CONTENT_EDITABLE_WARNING || propKey === SUPPRESS_HYDRATION_WARNING) ; else if (propKey === AUTOFOCUS) ; else if (registrationNameModules.hasOwnProperty(propKey)) {
      // This is a special case. If any listener updates we need to ensure
      // that the "current" fiber pointer gets updated so we need a commit
      // to update this element.
      if (!updatePayload) {
        updatePayload = [];
      }
    } else {
      // For all other deleted properties we add it to the queue. We use
      // the whitelist in the commit phase instead.
      (updatePayload = updatePayload || []).push(propKey, null);
    }
  }

  for (propKey in nextProps) {
    var nextProp = nextProps[propKey];
    var lastProp = lastProps != null ? lastProps[propKey] : undefined;

    if (!nextProps.hasOwnProperty(propKey) || nextProp === lastProp || nextProp == null && lastProp == null) {
      continue;
    }

    if (propKey === STYLE) {
      {
        if (nextProp) {
          // Freeze the next style object so that we can assume it won't be
          // mutated. We have already warned for this in the past.
          Object.freeze(nextProp);
        }
      }

      if (lastProp) {
        // Unset styles on `lastProp` but not on `nextProp`.
        for (styleName in lastProp) {
          if (lastProp.hasOwnProperty(styleName) && (!nextProp || !nextProp.hasOwnProperty(styleName))) {
            if (!styleUpdates) {
              styleUpdates = {};
            }

            styleUpdates[styleName] = '';
          }
        } // Update styles that changed since `lastProp`.


        for (styleName in nextProp) {
          if (nextProp.hasOwnProperty(styleName) && lastProp[styleName] !== nextProp[styleName]) {
            if (!styleUpdates) {
              styleUpdates = {};
            }

            styleUpdates[styleName] = nextProp[styleName];
          }
        }
      } else {
        // Relies on `updateStylesByID` not mutating `styleUpdates`.
        if (!styleUpdates) {
          if (!updatePayload) {
            updatePayload = [];
          }

          updatePayload.push(propKey, styleUpdates);
        }

        styleUpdates = nextProp;
      }
    } else if (propKey === DANGEROUSLY_SET_INNER_HTML) {
      var nextHtml = nextProp ? nextProp[HTML$1] : undefined;
      var lastHtml = lastProp ? lastProp[HTML$1] : undefined;

      if (nextHtml != null) {
        if (lastHtml !== nextHtml) {
          (updatePayload = updatePayload || []).push(propKey, nextHtml);
        }
      }
    } else if (propKey === CHILDREN) {
      if (lastProp !== nextProp && (typeof nextProp === 'string' || typeof nextProp === 'number')) {
        (updatePayload = updatePayload || []).push(propKey, '' + nextProp);
      }
    } else if ( propKey === SUPPRESS_CONTENT_EDITABLE_WARNING || propKey === SUPPRESS_HYDRATION_WARNING) ; else if (registrationNameModules.hasOwnProperty(propKey)) {
      if (nextProp != null) {
        // We eagerly listen to this even though we haven't committed yet.
        if ( typeof nextProp !== 'function') {
          warnForInvalidEventListener(propKey, nextProp);
        }

        ensureListeningTo(rootContainerElement, propKey);
      }

      if (!updatePayload && lastProp !== nextProp) {
        // This is a special case. If any listener updates we need to ensure
        // that the "current" props pointer gets updated so we need a commit
        // to update this element.
        updatePayload = [];
      }
    } else {
      // For any other property we always add it to the queue and then we
      // filter it out using the whitelist during the commit.
      (updatePayload = updatePayload || []).push(propKey, nextProp);
    }
  }

  if (styleUpdates) {
    {
      validateShorthandPropertyCollisionInDev(styleUpdates, nextProps[STYLE]);
    }

    (updatePayload = updatePayload || []).push(STYLE, styleUpdates);
  }

  return updatePayload;
} // Apply the diff.

function updateProperties(domElement, updatePayload, tag, lastRawProps, nextRawProps) {
  // Update checked *before* name.
  // In the middle of an update, it is possible to have multiple checked.
  // When a checked radio tries to change name, browser makes another radio's checked false.
  if (tag === 'input' && nextRawProps.type === 'radio' && nextRawProps.name != null) {
    updateChecked(domElement, nextRawProps);
  }

  var wasCustomComponentTag = isCustomComponent(tag, lastRawProps);
  var isCustomComponentTag = isCustomComponent(tag, nextRawProps); // Apply the diff.

  updateDOMProperties(domElement, updatePayload, wasCustomComponentTag, isCustomComponentTag); // TODO: Ensure that an update gets scheduled if any of the special props
  // changed.

  switch (tag) {
    case 'input':
      // Update the wrapper around inputs *after* updating props. This has to
      // happen after `updateDOMProperties`. Otherwise HTML5 input validations
      // raise warnings and prevent the new value from being assigned.
      updateWrapper(domElement, nextRawProps);
      break;

    case 'textarea':
      updateWrapper$1(domElement, nextRawProps);
      break;

    case 'select':
      // <select> value update needs to occur after <option> children
      // reconciliation
      postUpdateWrapper(domElement, nextRawProps);
      break;
  }
}

function getPossibleStandardName(propName) {
  {
    var lowerCasedName = propName.toLowerCase();

    if (!possibleStandardNames.hasOwnProperty(lowerCasedName)) {
      return null;
    }

    return possibleStandardNames[lowerCasedName] || null;
  }
}

function diffHydratedProperties(domElement, tag, rawProps, parentNamespace, rootContainerElement) {
  var isCustomComponentTag;
  var extraAttributeNames;

  {
    suppressHydrationWarning = rawProps[SUPPRESS_HYDRATION_WARNING] === true;
    isCustomComponentTag = isCustomComponent(tag, rawProps);
    validatePropertiesInDevelopment(tag, rawProps);
  } // TODO: Make sure that we check isMounted before firing any of these events.


  switch (tag) {
    case 'iframe':
    case 'object':
    case 'embed':
      trapBubbledEvent(TOP_LOAD, domElement);
      break;

    case 'video':
    case 'audio':
      // Create listener for each media event
      for (var i = 0; i < mediaEventTypes.length; i++) {
        trapBubbledEvent(mediaEventTypes[i], domElement);
      }

      break;

    case 'source':
      trapBubbledEvent(TOP_ERROR, domElement);
      break;

    case 'img':
    case 'image':
    case 'link':
      trapBubbledEvent(TOP_ERROR, domElement);
      trapBubbledEvent(TOP_LOAD, domElement);
      break;

    case 'form':
      trapBubbledEvent(TOP_RESET, domElement);
      trapBubbledEvent(TOP_SUBMIT, domElement);
      break;

    case 'details':
      trapBubbledEvent(TOP_TOGGLE, domElement);
      break;

    case 'input':
      initWrapperState(domElement, rawProps);
      trapBubbledEvent(TOP_INVALID, domElement); // For controlled components we always need to ensure we're listening
      // to onChange. Even if there is no listener.

      ensureListeningTo(rootContainerElement, 'onChange');
      break;

    case 'option':
      validateProps(domElement, rawProps);
      break;

    case 'select':
      initWrapperState$1(domElement, rawProps);
      trapBubbledEvent(TOP_INVALID, domElement); // For controlled components we always need to ensure we're listening
      // to onChange. Even if there is no listener.

      ensureListeningTo(rootContainerElement, 'onChange');
      break;

    case 'textarea':
      initWrapperState$2(domElement, rawProps);
      trapBubbledEvent(TOP_INVALID, domElement); // For controlled components we always need to ensure we're listening
      // to onChange. Even if there is no listener.

      ensureListeningTo(rootContainerElement, 'onChange');
      break;
  }

  assertValidProps(tag, rawProps);

  {
    extraAttributeNames = new Set();
    var attributes = domElement.attributes;

    for (var _i = 0; _i < attributes.length; _i++) {
      var name = attributes[_i].name.toLowerCase();

      switch (name) {
        // Built-in SSR attribute is whitelisted
        case 'data-reactroot':
          break;
        // Controlled attributes are not validated
        // TODO: Only ignore them on controlled tags.

        case 'value':
          break;

        case 'checked':
          break;

        case 'selected':
          break;

        default:
          // Intentionally use the original name.
          // See discussion in https://github.com/facebook/react/pull/10676.
          extraAttributeNames.add(attributes[_i].name);
      }
    }
  }

  var updatePayload = null;

  for (var propKey in rawProps) {
    if (!rawProps.hasOwnProperty(propKey)) {
      continue;
    }

    var nextProp = rawProps[propKey];

    if (propKey === CHILDREN) {
      // For text content children we compare against textContent. This
      // might match additional HTML that is hidden when we read it using
      // textContent. E.g. "foo" will match "f<span>oo</span>" but that still
      // satisfies our requirement. Our requirement is not to produce perfect
      // HTML and attributes. Ideally we should preserve structure but it's
      // ok not to if the visible content is still enough to indicate what
      // even listeners these nodes might be wired up to.
      // TODO: Warn if there is more than a single textNode as a child.
      // TODO: Should we use domElement.firstChild.nodeValue to compare?
      if (typeof nextProp === 'string') {
        if (domElement.textContent !== nextProp) {
          if ( !suppressHydrationWarning) {
            warnForTextDifference(domElement.textContent, nextProp);
          }

          updatePayload = [CHILDREN, nextProp];
        }
      } else if (typeof nextProp === 'number') {
        if (domElement.textContent !== '' + nextProp) {
          if ( !suppressHydrationWarning) {
            warnForTextDifference(domElement.textContent, nextProp);
          }

          updatePayload = [CHILDREN, '' + nextProp];
        }
      }
    } else if (registrationNameModules.hasOwnProperty(propKey)) {
      if (nextProp != null) {
        if ( typeof nextProp !== 'function') {
          warnForInvalidEventListener(propKey, nextProp);
        }

        ensureListeningTo(rootContainerElement, propKey);
      }
    } else if ( // Convince Flow we've calculated it (it's DEV-only in this method.)
    typeof isCustomComponentTag === 'boolean') {
      // Validate that the properties correspond to their expected values.
      var serverValue = void 0;
      var propertyInfo = getPropertyInfo(propKey);

      if (suppressHydrationWarning) ; else if ( propKey === SUPPRESS_CONTENT_EDITABLE_WARNING || propKey === SUPPRESS_HYDRATION_WARNING || // Controlled attributes are not validated
      // TODO: Only ignore them on controlled tags.
      propKey === 'value' || propKey === 'checked' || propKey === 'selected') ; else if (propKey === DANGEROUSLY_SET_INNER_HTML) {
        var serverHTML = domElement.innerHTML;
        var nextHtml = nextProp ? nextProp[HTML$1] : undefined;
        var expectedHTML = normalizeHTML(domElement, nextHtml != null ? nextHtml : '');

        if (expectedHTML !== serverHTML) {
          warnForPropDifference(propKey, serverHTML, expectedHTML);
        }
      } else if (propKey === STYLE) {
        // $FlowFixMe - Should be inferred as not undefined.
        extraAttributeNames.delete(propKey);

        if (canDiffStyleForHydrationWarning) {
          var expectedStyle = createDangerousStringForStyles(nextProp);
          serverValue = domElement.getAttribute('style');

          if (expectedStyle !== serverValue) {
            warnForPropDifference(propKey, serverValue, expectedStyle);
          }
        }
      } else if (isCustomComponentTag) {
        // $FlowFixMe - Should be inferred as not undefined.
        extraAttributeNames.delete(propKey.toLowerCase());
        serverValue = getValueForAttribute(domElement, propKey, nextProp);

        if (nextProp !== serverValue) {
          warnForPropDifference(propKey, serverValue, nextProp);
        }
      } else if (!shouldIgnoreAttribute(propKey, propertyInfo, isCustomComponentTag) && !shouldRemoveAttribute(propKey, nextProp, propertyInfo, isCustomComponentTag)) {
        var isMismatchDueToBadCasing = false;

        if (propertyInfo !== null) {
          // $FlowFixMe - Should be inferred as not undefined.
          extraAttributeNames.delete(propertyInfo.attributeName);
          serverValue = getValueForProperty(domElement, propKey, nextProp, propertyInfo);
        } else {
          var ownNamespace = parentNamespace;

          if (ownNamespace === HTML_NAMESPACE$1) {
            ownNamespace = getIntrinsicNamespace(tag);
          }

          if (ownNamespace === HTML_NAMESPACE$1) {
            // $FlowFixMe - Should be inferred as not undefined.
            extraAttributeNames.delete(propKey.toLowerCase());
          } else {
            var standardName = getPossibleStandardName(propKey);

            if (standardName !== null && standardName !== propKey) {
              // If an SVG prop is supplied with bad casing, it will
              // be successfully parsed from HTML, but will produce a mismatch
              // (and would be incorrectly rendered on the client).
              // However, we already warn about bad casing elsewhere.
              // So we'll skip the misleading extra mismatch warning in this case.
              isMismatchDueToBadCasing = true; // $FlowFixMe - Should be inferred as not undefined.

              extraAttributeNames.delete(standardName);
            } // $FlowFixMe - Should be inferred as not undefined.


            extraAttributeNames.delete(propKey);
          }

          serverValue = getValueForAttribute(domElement, propKey, nextProp);
        }

        if (nextProp !== serverValue && !isMismatchDueToBadCasing) {
          warnForPropDifference(propKey, serverValue, nextProp);
        }
      }
    }
  }

  {
    // $FlowFixMe - Should be inferred as not undefined.
    if (extraAttributeNames.size > 0 && !suppressHydrationWarning) {
      // $FlowFixMe - Should be inferred as not undefined.
      warnForExtraAttributes(extraAttributeNames);
    }
  }

  switch (tag) {
    case 'input':
      // TODO: Make sure we check if this is still unmounted or do any clean
      // up necessary since we never stop tracking anymore.
      track(domElement);
      postMountWrapper(domElement, rawProps, true);
      break;

    case 'textarea':
      // TODO: Make sure we check if this is still unmounted or do any clean
      // up necessary since we never stop tracking anymore.
      track(domElement);
      postMountWrapper$3(domElement);
      break;

    case 'select':
    case 'option':
      // For input and textarea we current always set the value property at
      // post mount to force it to diverge from attributes. However, for
      // option and select we don't quite do the same thing and select
      // is not resilient to the DOM state changing so we don't do that here.
      // TODO: Consider not doing this for input and textarea.
      break;

    default:
      if (typeof rawProps.onClick === 'function') {
        // TODO: This cast may not be sound for SVG, MathML or custom elements.
        trapClickOnNonInteractiveElement(domElement);
      }

      break;
  }

  return updatePayload;
}
function diffHydratedText(textNode, text) {
  var isDifferent = textNode.nodeValue !== text;
  return isDifferent;
}
function warnForUnmatchedText(textNode, text) {
  {
    warnForTextDifference(textNode.nodeValue, text);
  }
}
function warnForDeletedHydratableElement(parentNode, child) {
  {
    if (didWarnInvalidHydration) {
      return;
    }

    didWarnInvalidHydration = true;

    error('Did not expect server HTML to contain a <%s> in <%s>.', child.nodeName.toLowerCase(), parentNode.nodeName.toLowerCase());
  }
}
function warnForDeletedHydratableText(parentNode, child) {
  {
    if (didWarnInvalidHydration) {
      return;
    }

    didWarnInvalidHydration = true;

    error('Did not expect server HTML to contain the text node "%s" in <%s>.', child.nodeValue, parentNode.nodeName.toLowerCase());
  }
}
function warnForInsertedHydratedElement(parentNode, tag, props) {
  {
    if (didWarnInvalidHydration) {
      return;
    }

    didWarnInvalidHydration = true;

    error('Expected server HTML to contain a matching <%s> in <%s>.', tag, parentNode.nodeName.toLowerCase());
  }
}
function warnForInsertedHydratedText(parentNode, text) {
  {
    if (text === '') {
      // We expect to insert empty text nodes since they're not represented in
      // the HTML.
      // TODO: Remove this special case if we can just avoid inserting empty
      // text nodes.
      return;
    }

    if (didWarnInvalidHydration) {
      return;
    }

    didWarnInvalidHydration = true;

    error('Expected server HTML to contain a matching text node for "%s" in <%s>.', text, parentNode.nodeName.toLowerCase());
  }
}
function restoreControlledState$3(domElement, tag, props) {
  switch (tag) {
    case 'input':
      restoreControlledState(domElement, props);
      return;

    case 'textarea':
      restoreControlledState$2(domElement, props);
      return;

    case 'select':
      restoreControlledState$1(domElement, props);
      return;
  }
}

function getActiveElement(doc) {
  doc = doc || (typeof document !== 'undefined' ? document : undefined);

  if (typeof doc === 'undefined') {
    return null;
  }

  try {
    return doc.activeElement || doc.body;
  } catch (e) {
    return doc.body;
  }
}

/**
 * Given any node return the first leaf node without children.
 *
 * @param {DOMElement|DOMTextNode} node
 * @return {DOMElement|DOMTextNode}
 */

function getLeafNode(node) {
  while (node && node.firstChild) {
    node = node.firstChild;
  }

  return node;
}
/**
 * Get the next sibling within a container. This will walk up the
 * DOM if a node's siblings have been exhausted.
 *
 * @param {DOMElement|DOMTextNode} node
 * @return {?DOMElement|DOMTextNode}
 */


function getSiblingNode(node) {
  while (node) {
    if (node.nextSibling) {
      return node.nextSibling;
    }

    node = node.parentNode;
  }
}
/**
 * Get object describing the nodes which contain characters at offset.
 *
 * @param {DOMElement|DOMTextNode} root
 * @param {number} offset
 * @return {?object}
 */


function getNodeForCharacterOffset(root, offset) {
  var node = getLeafNode(root);
  var nodeStart = 0;
  var nodeEnd = 0;

  while (node) {
    if (node.nodeType === TEXT_NODE) {
      nodeEnd = nodeStart + node.textContent.length;

      if (nodeStart <= offset && nodeEnd >= offset) {
        return {
          node: node,
          offset: offset - nodeStart
        };
      }

      nodeStart = nodeEnd;
    }

    node = getLeafNode(getSiblingNode(node));
  }
}

/**
 * @param {DOMElement} outerNode
 * @return {?object}
 */

function getOffsets(outerNode) {
  var ownerDocument = outerNode.ownerDocument;
  var win = ownerDocument && ownerDocument.defaultView || window;
  var selection = win.getSelection && win.getSelection();

  if (!selection || selection.rangeCount === 0) {
    return null;
  }

  var anchorNode = selection.anchorNode,
      anchorOffset = selection.anchorOffset,
      focusNode = selection.focusNode,
      focusOffset = selection.focusOffset; // In Firefox, anchorNode and focusNode can be "anonymous divs", e.g. the
  // up/down buttons on an <input type="number">. Anonymous divs do not seem to
  // expose properties, triggering a "Permission denied error" if any of its
  // properties are accessed. The only seemingly possible way to avoid erroring
  // is to access a property that typically works for non-anonymous divs and
  // catch any error that may otherwise arise. See
  // https://bugzilla.mozilla.org/show_bug.cgi?id=208427

  try {
    /* eslint-disable no-unused-expressions */
    anchorNode.nodeType;
    focusNode.nodeType;
    /* eslint-enable no-unused-expressions */
  } catch (e) {
    return null;
  }

  return getModernOffsetsFromPoints(outerNode, anchorNode, anchorOffset, focusNode, focusOffset);
}
/**
 * Returns {start, end} where `start` is the character/codepoint index of
 * (anchorNode, anchorOffset) within the textContent of `outerNode`, and
 * `end` is the index of (focusNode, focusOffset).
 *
 * Returns null if you pass in garbage input but we should probably just crash.
 *
 * Exported only for testing.
 */

function getModernOffsetsFromPoints(outerNode, anchorNode, anchorOffset, focusNode, focusOffset) {
  var length = 0;
  var start = -1;
  var end = -1;
  var indexWithinAnchor = 0;
  var indexWithinFocus = 0;
  var node = outerNode;
  var parentNode = null;

  outer: while (true) {
    var next = null;

    while (true) {
      if (node === anchorNode && (anchorOffset === 0 || node.nodeType === TEXT_NODE)) {
        start = length + anchorOffset;
      }

      if (node === focusNode && (focusOffset === 0 || node.nodeType === TEXT_NODE)) {
        end = length + focusOffset;
      }

      if (node.nodeType === TEXT_NODE) {
        length += node.nodeValue.length;
      }

      if ((next = node.firstChild) === null) {
        break;
      } // Moving from `node` to its first child `next`.


      parentNode = node;
      node = next;
    }

    while (true) {
      if (node === outerNode) {
        // If `outerNode` has children, this is always the second time visiting
        // it. If it has no children, this is still the first loop, and the only
        // valid selection is anchorNode and focusNode both equal to this node
        // and both offsets 0, in which case we will have handled above.
        break outer;
      }

      if (parentNode === anchorNode && ++indexWithinAnchor === anchorOffset) {
        start = length;
      }

      if (parentNode === focusNode && ++indexWithinFocus === focusOffset) {
        end = length;
      }

      if ((next = node.nextSibling) !== null) {
        break;
      }

      node = parentNode;
      parentNode = node.parentNode;
    } // Moving from `node` to its next sibling `next`.


    node = next;
  }

  if (start === -1 || end === -1) {
    // This should never happen. (Would happen if the anchor/focus nodes aren't
    // actually inside the passed-in node.)
    return null;
  }

  return {
    start: start,
    end: end
  };
}
/**
 * In modern non-IE browsers, we can support both forward and backward
 * selections.
 *
 * Note: IE10+ supports the Selection object, but it does not support
 * the `extend` method, which means that even in modern IE, it's not possible
 * to programmatically create a backward selection. Thus, for all IE
 * versions, we use the old IE API to create our selections.
 *
 * @param {DOMElement|DOMTextNode} node
 * @param {object} offsets
 */

function setOffsets(node, offsets) {
  var doc = node.ownerDocument || document;
  var win = doc && doc.defaultView || window; // Edge fails with "Object expected" in some scenarios.
  // (For instance: TinyMCE editor used in a list component that supports pasting to add more,
  // fails when pasting 100+ items)

  if (!win.getSelection) {
    return;
  }

  var selection = win.getSelection();
  var length = node.textContent.length;
  var start = Math.min(offsets.start, length);
  var end = offsets.end === undefined ? start : Math.min(offsets.end, length); // IE 11 uses modern selection, but doesn't support the extend method.
  // Flip backward selections, so we can set with a single range.

  if (!selection.extend && start > end) {
    var temp = end;
    end = start;
    start = temp;
  }

  var startMarker = getNodeForCharacterOffset(node, start);
  var endMarker = getNodeForCharacterOffset(node, end);

  if (startMarker && endMarker) {
    if (selection.rangeCount === 1 && selection.anchorNode === startMarker.node && selection.anchorOffset === startMarker.offset && selection.focusNode === endMarker.node && selection.focusOffset === endMarker.offset) {
      return;
    }

    var range = doc.createRange();
    range.setStart(startMarker.node, startMarker.offset);
    selection.removeAllRanges();

    if (start > end) {
      selection.addRange(range);
      selection.extend(endMarker.node, endMarker.offset);
    } else {
      range.setEnd(endMarker.node, endMarker.offset);
      selection.addRange(range);
    }
  }
}

function isTextNode(node) {
  return node && node.nodeType === TEXT_NODE;
}

function containsNode(outerNode, innerNode) {
  if (!outerNode || !innerNode) {
    return false;
  } else if (outerNode === innerNode) {
    return true;
  } else if (isTextNode(outerNode)) {
    return false;
  } else if (isTextNode(innerNode)) {
    return containsNode(outerNode, innerNode.parentNode);
  } else if ('contains' in outerNode) {
    return outerNode.contains(innerNode);
  } else if (outerNode.compareDocumentPosition) {
    return !!(outerNode.compareDocumentPosition(innerNode) & 16);
  } else {
    return false;
  }
}

function isInDocument(node) {
  return node && node.ownerDocument && containsNode(node.ownerDocument.documentElement, node);
}

function isSameOriginFrame(iframe) {
  try {
    // Accessing the contentDocument of a HTMLIframeElement can cause the browser
    // to throw, e.g. if it has a cross-origin src attribute.
    // Safari will show an error in the console when the access results in "Blocked a frame with origin". e.g:
    // iframe.contentDocument.defaultView;
    // A safety way is to access one of the cross origin properties: Window or Location
    // Which might result in "SecurityError" DOM Exception and it is compatible to Safari.
    // https://html.spec.whatwg.org/multipage/browsers.html#integration-with-idl
    return typeof iframe.contentWindow.location.href === 'string';
  } catch (err) {
    return false;
  }
}

function getActiveElementDeep() {
  var win = window;
  var element = getActiveElement();

  while (element instanceof win.HTMLIFrameElement) {
    if (isSameOriginFrame(element)) {
      win = element.contentWindow;
    } else {
      return element;
    }

    element = getActiveElement(win.document);
  }

  return element;
}
/**
 * @ReactInputSelection: React input selection module. Based on Selection.js,
 * but modified to be suitable for react and has a couple of bug fixes (doesn't
 * assume buttons have range selections allowed).
 * Input selection module for React.
 */

/**
 * @hasSelectionCapabilities: we get the element types that support selection
 * from https://html.spec.whatwg.org/#do-not-apply, looking at `selectionStart`
 * and `selectionEnd` rows.
 */


function hasSelectionCapabilities(elem) {
  var nodeName = elem && elem.nodeName && elem.nodeName.toLowerCase();
  return nodeName && (nodeName === 'input' && (elem.type === 'text' || elem.type === 'search' || elem.type === 'tel' || elem.type === 'url' || elem.type === 'password') || nodeName === 'textarea' || elem.contentEditable === 'true');
}
function getSelectionInformation() {
  var focusedElem = getActiveElementDeep();
  return {
    // Used by Flare
    activeElementDetached: null,
    focusedElem: focusedElem,
    selectionRange: hasSelectionCapabilities(focusedElem) ? getSelection(focusedElem) : null
  };
}
/**
 * @restoreSelection: If any selection information was potentially lost,
 * restore it. This is useful when performing operations that could remove dom
 * nodes and place them back in, resulting in focus being lost.
 */

function restoreSelection(priorSelectionInformation) {
  var curFocusedElem = getActiveElementDeep();
  var priorFocusedElem = priorSelectionInformation.focusedElem;
  var priorSelectionRange = priorSelectionInformation.selectionRange;

  if (curFocusedElem !== priorFocusedElem && isInDocument(priorFocusedElem)) {
    if (priorSelectionRange !== null && hasSelectionCapabilities(priorFocusedElem)) {
      setSelection(priorFocusedElem, priorSelectionRange);
    } // Focusing a node can change the scroll position, which is undesirable


    var ancestors = [];
    var ancestor = priorFocusedElem;

    while (ancestor = ancestor.parentNode) {
      if (ancestor.nodeType === ELEMENT_NODE) {
        ancestors.push({
          element: ancestor,
          left: ancestor.scrollLeft,
          top: ancestor.scrollTop
        });
      }
    }

    if (typeof priorFocusedElem.focus === 'function') {
      priorFocusedElem.focus();
    }

    for (var i = 0; i < ancestors.length; i++) {
      var info = ancestors[i];
      info.element.scrollLeft = info.left;
      info.element.scrollTop = info.top;
    }
  }
}
/**
 * @getSelection: Gets the selection bounds of a focused textarea, input or
 * contentEditable node.
 * -@input: Look up selection bounds of this input
 * -@return {start: selectionStart, end: selectionEnd}
 */

function getSelection(input) {
  var selection;

  if ('selectionStart' in input) {
    // Modern browser with input or textarea.
    selection = {
      start: input.selectionStart,
      end: input.selectionEnd
    };
  } else {
    // Content editable or old IE textarea.
    selection = getOffsets(input);
  }

  return selection || {
    start: 0,
    end: 0
  };
}
/**
 * @setSelection: Sets the selection bounds of a textarea or input and focuses
 * the input.
 * -@input     Set selection bounds of this input or textarea
 * -@offsets   Object of same form that is returned from get*
 */

function setSelection(input, offsets) {
  var start = offsets.start,
      end = offsets.end;

  if (end === undefined) {
    end = start;
  }

  if ('selectionStart' in input) {
    input.selectionStart = start;
    input.selectionEnd = Math.min(end, input.value.length);
  } else {
    setOffsets(input, offsets);
  }
}

var validateDOMNesting = function () {};

var updatedAncestorInfo = function () {};

{
  // This validation code was written based on the HTML5 parsing spec:
  // https://html.spec.whatwg.org/multipage/syntax.html#has-an-element-in-scope
  //
  // Note: this does not catch all invalid nesting, nor does it try to (as it's
  // not clear what practical benefit doing so provides); instead, we warn only
  // for cases where the parser will give a parse tree differing from what React
  // intended. For example, <b><div></div></b> is invalid but we don't warn
  // because it still parses correctly; we do warn for other cases like nested
  // <p> tags where the beginning of the second element implicitly closes the
  // first, causing a confusing mess.
  // https://html.spec.whatwg.org/multipage/syntax.html#special
  var specialTags = ['address', 'applet', 'area', 'article', 'aside', 'base', 'basefont', 'bgsound', 'blockquote', 'body', 'br', 'button', 'caption', 'center', 'col', 'colgroup', 'dd', 'details', 'dir', 'div', 'dl', 'dt', 'embed', 'fieldset', 'figcaption', 'figure', 'footer', 'form', 'frame', 'frameset', 'h1', 'h2', 'h3', 'h4', 'h5', 'h6', 'head', 'header', 'hgroup', 'hr', 'html', 'iframe', 'img', 'input', 'isindex', 'li', 'link', 'listing', 'main', 'marquee', 'menu', 'menuitem', 'meta', 'nav', 'noembed', 'noframes', 'noscript', 'object', 'ol', 'p', 'param', 'plaintext', 'pre', 'script', 'section', 'select', 'source', 'style', 'summary', 'table', 'tbody', 'td', 'template', 'textarea', 'tfoot', 'th', 'thead', 'title', 'tr', 'track', 'ul', 'wbr', 'xmp']; // https://html.spec.whatwg.org/multipage/syntax.html#has-an-element-in-scope

  var inScopeTags = ['applet', 'caption', 'html', 'table', 'td', 'th', 'marquee', 'object', 'template', // https://html.spec.whatwg.org/multipage/syntax.html#html-integration-point
  // TODO: Distinguish by namespace here -- for <title>, including it here
  // errs on the side of fewer warnings
  'foreignObject', 'desc', 'title']; // https://html.spec.whatwg.org/multipage/syntax.html#has-an-element-in-button-scope

  var buttonScopeTags = inScopeTags.concat(['button']); // https://html.spec.whatwg.org/multipage/syntax.html#generate-implied-end-tags

  var impliedEndTags = ['dd', 'dt', 'li', 'option', 'optgroup', 'p', 'rp', 'rt'];
  var emptyAncestorInfo = {
    current: null,
    formTag: null,
    aTagInScope: null,
    buttonTagInScope: null,
    nobrTagInScope: null,
    pTagInButtonScope: null,
    listItemTagAutoclosing: null,
    dlItemTagAutoclosing: null
  };

  updatedAncestorInfo = function (oldInfo, tag) {
    var ancestorInfo = _assign({}, oldInfo || emptyAncestorInfo);

    var info = {
      tag: tag
    };

    if (inScopeTags.indexOf(tag) !== -1) {
      ancestorInfo.aTagInScope = null;
      ancestorInfo.buttonTagInScope = null;
      ancestorInfo.nobrTagInScope = null;
    }

    if (buttonScopeTags.indexOf(tag) !== -1) {
      ancestorInfo.pTagInButtonScope = null;
    } // See rules for 'li', 'dd', 'dt' start tags in
    // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-inbody


    if (specialTags.indexOf(tag) !== -1 && tag !== 'address' && tag !== 'div' && tag !== 'p') {
      ancestorInfo.listItemTagAutoclosing = null;
      ancestorInfo.dlItemTagAutoclosing = null;
    }

    ancestorInfo.current = info;

    if (tag === 'form') {
      ancestorInfo.formTag = info;
    }

    if (tag === 'a') {
      ancestorInfo.aTagInScope = info;
    }

    if (tag === 'button') {
      ancestorInfo.buttonTagInScope = info;
    }

    if (tag === 'nobr') {
      ancestorInfo.nobrTagInScope = info;
    }

    if (tag === 'p') {
      ancestorInfo.pTagInButtonScope = info;
    }

    if (tag === 'li') {
      ancestorInfo.listItemTagAutoclosing = info;
    }

    if (tag === 'dd' || tag === 'dt') {
      ancestorInfo.dlItemTagAutoclosing = info;
    }

    return ancestorInfo;
  };
  /**
   * Returns whether
   */


  var isTagValidWithParent = function (tag, parentTag) {
    // First, let's check if we're in an unusual parsing mode...
    switch (parentTag) {
      // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-inselect
      case 'select':
        return tag === 'option' || tag === 'optgroup' || tag === '#text';

      case 'optgroup':
        return tag === 'option' || tag === '#text';
      // Strictly speaking, seeing an <option> doesn't mean we're in a <select>
      // but

      case 'option':
        return tag === '#text';
      // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-intd
      // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-incaption
      // No special behavior since these rules fall back to "in body" mode for
      // all except special table nodes which cause bad parsing behavior anyway.
      // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-intr

      case 'tr':
        return tag === 'th' || tag === 'td' || tag === 'style' || tag === 'script' || tag === 'template';
      // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-intbody

      case 'tbody':
      case 'thead':
      case 'tfoot':
        return tag === 'tr' || tag === 'style' || tag === 'script' || tag === 'template';
      // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-incolgroup

      case 'colgroup':
        return tag === 'col' || tag === 'template';
      // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-intable

      case 'table':
        return tag === 'caption' || tag === 'colgroup' || tag === 'tbody' || tag === 'tfoot' || tag === 'thead' || tag === 'style' || tag === 'script' || tag === 'template';
      // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-inhead

      case 'head':
        return tag === 'base' || tag === 'basefont' || tag === 'bgsound' || tag === 'link' || tag === 'meta' || tag === 'title' || tag === 'noscript' || tag === 'noframes' || tag === 'style' || tag === 'script' || tag === 'template';
      // https://html.spec.whatwg.org/multipage/semantics.html#the-html-element

      case 'html':
        return tag === 'head' || tag === 'body' || tag === 'frameset';

      case 'frameset':
        return tag === 'frame';

      case '#document':
        return tag === 'html';
    } // Probably in the "in body" parsing mode, so we outlaw only tag combos
    // where the parsing rules cause implicit opens or closes to be added.
    // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-inbody


    switch (tag) {
      case 'h1':
      case 'h2':
      case 'h3':
      case 'h4':
      case 'h5':
      case 'h6':
        return parentTag !== 'h1' && parentTag !== 'h2' && parentTag !== 'h3' && parentTag !== 'h4' && parentTag !== 'h5' && parentTag !== 'h6';

      case 'rp':
      case 'rt':
        return impliedEndTags.indexOf(parentTag) === -1;

      case 'body':
      case 'caption':
      case 'col':
      case 'colgroup':
      case 'frameset':
      case 'frame':
      case 'head':
      case 'html':
      case 'tbody':
      case 'td':
      case 'tfoot':
      case 'th':
      case 'thead':
      case 'tr':
        // These tags are only valid with a few parents that have special child
        // parsing rules -- if we're down here, then none of those matched and
        // so we allow it only if we don't know what the parent is, as all other
        // cases are invalid.
        return parentTag == null;
    }

    return true;
  };
  /**
   * Returns whether
   */


  var findInvalidAncestorForTag = function (tag, ancestorInfo) {
    switch (tag) {
      case 'address':
      case 'article':
      case 'aside':
      case 'blockquote':
      case 'center':
      case 'details':
      case 'dialog':
      case 'dir':
      case 'div':
      case 'dl':
      case 'fieldset':
      case 'figcaption':
      case 'figure':
      case 'footer':
      case 'header':
      case 'hgroup':
      case 'main':
      case 'menu':
      case 'nav':
      case 'ol':
      case 'p':
      case 'section':
      case 'summary':
      case 'ul':
      case 'pre':
      case 'listing':
      case 'table':
      case 'hr':
      case 'xmp':
      case 'h1':
      case 'h2':
      case 'h3':
      case 'h4':
      case 'h5':
      case 'h6':
        return ancestorInfo.pTagInButtonScope;

      case 'form':
        return ancestorInfo.formTag || ancestorInfo.pTagInButtonScope;

      case 'li':
        return ancestorInfo.listItemTagAutoclosing;

      case 'dd':
      case 'dt':
        return ancestorInfo.dlItemTagAutoclosing;

      case 'button':
        return ancestorInfo.buttonTagInScope;

      case 'a':
        // Spec says something about storing a list of markers, but it sounds
        // equivalent to this check.
        return ancestorInfo.aTagInScope;

      case 'nobr':
        return ancestorInfo.nobrTagInScope;
    }

    return null;
  };

  var didWarn$1 = {};

  validateDOMNesting = function (childTag, childText, ancestorInfo) {
    ancestorInfo = ancestorInfo || emptyAncestorInfo;
    var parentInfo = ancestorInfo.current;
    var parentTag = parentInfo && parentInfo.tag;

    if (childText != null) {
      if (childTag != null) {
        error('validateDOMNesting: when childText is passed, childTag should be null');
      }

      childTag = '#text';
    }

    var invalidParent = isTagValidWithParent(childTag, parentTag) ? null : parentInfo;
    var invalidAncestor = invalidParent ? null : findInvalidAncestorForTag(childTag, ancestorInfo);
    var invalidParentOrAncestor = invalidParent || invalidAncestor;

    if (!invalidParentOrAncestor) {
      return;
    }

    var ancestorTag = invalidParentOrAncestor.tag;
    var addendum = getCurrentFiberStackInDev();
    var warnKey = !!invalidParent + '|' + childTag + '|' + ancestorTag + '|' + addendum;

    if (didWarn$1[warnKey]) {
      return;
    }

    didWarn$1[warnKey] = true;
    var tagDisplayName = childTag;
    var whitespaceInfo = '';

    if (childTag === '#text') {
      if (/\S/.test(childText)) {
        tagDisplayName = 'Text nodes';
      } else {
        tagDisplayName = 'Whitespace text nodes';
        whitespaceInfo = " Make sure you don't have any extra whitespace between tags on " + 'each line of your source code.';
      }
    } else {
      tagDisplayName = '<' + childTag + '>';
    }

    if (invalidParent) {
      var info = '';

      if (ancestorTag === 'table' && childTag === 'tr') {
        info += ' Add a <tbody>, <thead> or <tfoot> to your code to match the DOM tree generated by ' + 'the browser.';
      }

      error('validateDOMNesting(...): %s cannot appear as a child of <%s>.%s%s', tagDisplayName, ancestorTag, whitespaceInfo, info);
    } else {
      error('validateDOMNesting(...): %s cannot appear as a descendant of ' + '<%s>.', tagDisplayName, ancestorTag);
    }
  };
}

var SUPPRESS_HYDRATION_WARNING$1;

{
  SUPPRESS_HYDRATION_WARNING$1 = 'suppressHydrationWarning';
}

var SUSPENSE_START_DATA = '$';
var SUSPENSE_END_DATA = '/$';
var SUSPENSE_PENDING_START_DATA = '$?';
var SUSPENSE_FALLBACK_START_DATA = '$!';
var STYLE$1 = 'style';
var eventsEnabled = null;
var selectionInformation = null;

function shouldAutoFocusHostComponent(type, props) {
  switch (type) {
    case 'button':
    case 'input':
    case 'select':
    case 'textarea':
      return !!props.autoFocus;
  }

  return false;
}
function getRootHostContext(rootContainerInstance) {
  var type;
  var namespace;
  var nodeType = rootContainerInstance.nodeType;

  switch (nodeType) {
    case DOCUMENT_NODE:
    case DOCUMENT_FRAGMENT_NODE:
      {
        type = nodeType === DOCUMENT_NODE ? '#document' : '#fragment';
        var root = rootContainerInstance.documentElement;
        namespace = root ? root.namespaceURI : getChildNamespace(null, '');
        break;
      }

    default:
      {
        var container = nodeType === COMMENT_NODE ? rootContainerInstance.parentNode : rootContainerInstance;
        var ownNamespace = container.namespaceURI || null;
        type = container.tagName;
        namespace = getChildNamespace(ownNamespace, type);
        break;
      }
  }

  {
    var validatedTag = type.toLowerCase();
    var ancestorInfo = updatedAncestorInfo(null, validatedTag);
    return {
      namespace: namespace,
      ancestorInfo: ancestorInfo
    };
  }
}
function getChildHostContext(parentHostContext, type, rootContainerInstance) {
  {
    var parentHostContextDev = parentHostContext;
    var namespace = getChildNamespace(parentHostContextDev.namespace, type);
    var ancestorInfo = updatedAncestorInfo(parentHostContextDev.ancestorInfo, type);
    return {
      namespace: namespace,
      ancestorInfo: ancestorInfo
    };
  }
}
function getPublicInstance(instance) {
  return instance;
}
function prepareForCommit(containerInfo) {
  eventsEnabled = isEnabled();
  selectionInformation = getSelectionInformation();
  setEnabled(false);
}
function resetAfterCommit(containerInfo) {
  restoreSelection(selectionInformation);
  setEnabled(eventsEnabled);
  eventsEnabled = null;

  selectionInformation = null;
}
function createInstance(type, props, rootContainerInstance, hostContext, internalInstanceHandle) {
  var parentNamespace;

  {
    // TODO: take namespace into account when validating.
    var hostContextDev = hostContext;
    validateDOMNesting(type, null, hostContextDev.ancestorInfo);

    if (typeof props.children === 'string' || typeof props.children === 'number') {
      var string = '' + props.children;
      var ownAncestorInfo = updatedAncestorInfo(hostContextDev.ancestorInfo, type);
      validateDOMNesting(null, string, ownAncestorInfo);
    }

    parentNamespace = hostContextDev.namespace;
  }

  var domElement = createElement(type, props, rootContainerInstance, parentNamespace);
  precacheFiberNode(internalInstanceHandle, domElement);
  updateFiberProps(domElement, props);
  return domElement;
}
function appendInitialChild(parentInstance, child) {
  parentInstance.appendChild(child);
}
function finalizeInitialChildren(domElement, type, props, rootContainerInstance, hostContext) {
  setInitialProperties(domElement, type, props, rootContainerInstance);
  return shouldAutoFocusHostComponent(type, props);
}
function prepareUpdate(domElement, type, oldProps, newProps, rootContainerInstance, hostContext) {
  {
    var hostContextDev = hostContext;

    if (typeof newProps.children !== typeof oldProps.children && (typeof newProps.children === 'string' || typeof newProps.children === 'number')) {
      var string = '' + newProps.children;
      var ownAncestorInfo = updatedAncestorInfo(hostContextDev.ancestorInfo, type);
      validateDOMNesting(null, string, ownAncestorInfo);
    }
  }

  return diffProperties(domElement, type, oldProps, newProps, rootContainerInstance);
}
function shouldSetTextContent(type, props) {
  return type === 'textarea' || type === 'option' || type === 'noscript' || typeof props.children === 'string' || typeof props.children === 'number' || typeof props.dangerouslySetInnerHTML === 'object' && props.dangerouslySetInnerHTML !== null && props.dangerouslySetInnerHTML.__html != null;
}
function shouldDeprioritizeSubtree(type, props) {
  return !!props.hidden;
}
function createTextInstance(text, rootContainerInstance, hostContext, internalInstanceHandle) {
  {
    var hostContextDev = hostContext;
    validateDOMNesting(null, text, hostContextDev.ancestorInfo);
  }

  var textNode = createTextNode(text, rootContainerInstance);
  precacheFiberNode(internalInstanceHandle, textNode);
  return textNode;
}
// if a component just imports ReactDOM (e.g. for findDOMNode).
// Some environments might not have setTimeout or clearTimeout.

var scheduleTimeout = typeof setTimeout === 'function' ? setTimeout : undefined;
var cancelTimeout = typeof clearTimeout === 'function' ? clearTimeout : undefined;
var noTimeout = -1; // -------------------
function commitMount(domElement, type, newProps, internalInstanceHandle) {
  // Despite the naming that might imply otherwise, this method only
  // fires if there is an `Update` effect scheduled during mounting.
  // This happens if `finalizeInitialChildren` returns `true` (which it
  // does to implement the `autoFocus` attribute on the client). But
  // there are also other cases when this might happen (such as patching
  // up text content during hydration mismatch). So we'll check this again.
  if (shouldAutoFocusHostComponent(type, newProps)) {
    domElement.focus();
  }
}
function commitUpdate(domElement, updatePayload, type, oldProps, newProps, internalInstanceHandle) {
  // Update the props handle so that we know which props are the ones with
  // with current event handlers.
  updateFiberProps(domElement, newProps); // Apply the diff to the DOM node.

  updateProperties(domElement, updatePayload, type, oldProps, newProps);
}
function resetTextContent(domElement) {
  setTextContent(domElement, '');
}
function commitTextUpdate(textInstance, oldText, newText) {
  textInstance.nodeValue = newText;
}
function appendChild(parentInstance, child) {
  parentInstance.appendChild(child);
}
function appendChildToContainer(container, child) {
  var parentNode;

  if (container.nodeType === COMMENT_NODE) {
    parentNode = container.parentNode;
    parentNode.insertBefore(child, container);
  } else {
    parentNode = container;
    parentNode.appendChild(child);
  } // This container might be used for a portal.
  // If something inside a portal is clicked, that click should bubble
  // through the React tree. However, on Mobile Safari the click would
  // never bubble through the *DOM* tree unless an ancestor with onclick
  // event exists. So we wouldn't see it and dispatch it.
  // This is why we ensure that non React root containers have inline onclick
  // defined.
  // https://github.com/facebook/react/issues/11918


  var reactRootContainer = container._reactRootContainer;

  if ((reactRootContainer === null || reactRootContainer === undefined) && parentNode.onclick === null) {
    // TODO: This cast may not be sound for SVG, MathML or custom elements.
    trapClickOnNonInteractiveElement(parentNode);
  }
}
function insertBefore(parentInstance, child, beforeChild) {
  parentInstance.insertBefore(child, beforeChild);
}
function insertInContainerBefore(container, child, beforeChild) {
  if (container.nodeType === COMMENT_NODE) {
    container.parentNode.insertBefore(child, beforeChild);
  } else {
    container.insertBefore(child, beforeChild);
  }
}
function removeChild(parentInstance, child) {
  parentInstance.removeChild(child);
}
function removeChildFromContainer(container, child) {
  if (container.nodeType === COMMENT_NODE) {
    container.parentNode.removeChild(child);
  } else {
    container.removeChild(child);
  }
}

function hideInstance(instance) {
  // pass host context to this method?


  instance = instance;
  var style = instance.style;

  if (typeof style.setProperty === 'function') {
    style.setProperty('display', 'none', 'important');
  } else {
    style.display = 'none';
  }
}
function hideTextInstance(textInstance) {
  textInstance.nodeValue = '';
}
function unhideInstance(instance, props) {
  instance = instance;
  var styleProp = props[STYLE$1];
  var display = styleProp !== undefined && styleProp !== null && styleProp.hasOwnProperty('display') ? styleProp.display : null;
  instance.style.display = dangerousStyleValue('display', display);
}
function unhideTextInstance(textInstance, text) {
  textInstance.nodeValue = text;
} // -------------------
function canHydrateInstance(instance, type, props) {
  if (instance.nodeType !== ELEMENT_NODE || type.toLowerCase() !== instance.nodeName.toLowerCase()) {
    return null;
  } // This has now been refined to an element node.


  return instance;
}
function canHydrateTextInstance(instance, text) {
  if (text === '' || instance.nodeType !== TEXT_NODE) {
    // Empty strings are not parsed by HTML so there won't be a correct match here.
    return null;
  } // This has now been refined to a text node.


  return instance;
}
function isSuspenseInstancePending(instance) {
  return instance.data === SUSPENSE_PENDING_START_DATA;
}
function isSuspenseInstanceFallback(instance) {
  return instance.data === SUSPENSE_FALLBACK_START_DATA;
}

function getNextHydratable(node) {
  // Skip non-hydratable nodes.
  for (; node != null; node = node.nextSibling) {
    var nodeType = node.nodeType;

    if (nodeType === ELEMENT_NODE || nodeType === TEXT_NODE) {
      break;
    }
  }

  return node;
}

function getNextHydratableSibling(instance) {
  return getNextHydratable(instance.nextSibling);
}
function getFirstHydratableChild(parentInstance) {
  return getNextHydratable(parentInstance.firstChild);
}
function hydrateInstance(instance, type, props, rootContainerInstance, hostContext, internalInstanceHandle) {
  precacheFiberNode(internalInstanceHandle, instance); // TODO: Possibly defer this until the commit phase where all the events
  // get attached.

  updateFiberProps(instance, props);
  var parentNamespace;

  {
    var hostContextDev = hostContext;
    parentNamespace = hostContextDev.namespace;
  }

  return diffHydratedProperties(instance, type, props, parentNamespace, rootContainerInstance);
}
function hydrateTextInstance(textInstance, text, internalInstanceHandle) {
  precacheFiberNode(internalInstanceHandle, textInstance);
  return diffHydratedText(textInstance, text);
}
function getNextHydratableInstanceAfterSuspenseInstance(suspenseInstance) {
  var node = suspenseInstance.nextSibling; // Skip past all nodes within this suspense boundary.
  // There might be nested nodes so we need to keep track of how
  // deep we are and only break out when we're back on top.

  var depth = 0;

  while (node) {
    if (node.nodeType === COMMENT_NODE) {
      var data = node.data;

      if (data === SUSPENSE_END_DATA) {
        if (depth === 0) {
          return getNextHydratableSibling(node);
        } else {
          depth--;
        }
      } else if (data === SUSPENSE_START_DATA || data === SUSPENSE_FALLBACK_START_DATA || data === SUSPENSE_PENDING_START_DATA) {
        depth++;
      }
    }

    node = node.nextSibling;
  } // TODO: Warn, we didn't find the end comment boundary.


  return null;
} // Returns the SuspenseInstance if this node is a direct child of a
// SuspenseInstance. I.e. if its previous sibling is a Comment with
// SUSPENSE_x_START_DATA. Otherwise, null.

function getParentSuspenseInstance(targetInstance) {
  var node = targetInstance.previousSibling; // Skip past all nodes within this suspense boundary.
  // There might be nested nodes so we need to keep track of how
  // deep we are and only break out when we're back on top.

  var depth = 0;

  while (node) {
    if (node.nodeType === COMMENT_NODE) {
      var data = node.data;

      if (data === SUSPENSE_START_DATA || data === SUSPENSE_FALLBACK_START_DATA || data === SUSPENSE_PENDING_START_DATA) {
        if (depth === 0) {
          return node;
        } else {
          depth--;
        }
      } else if (data === SUSPENSE_END_DATA) {
        depth++;
      }
    }

    node = node.previousSibling;
  }

  return null;
}
function commitHydratedContainer(container) {
  // Retry if any event replaying was blocked on this.
  retryIfBlockedOn(container);
}
function commitHydratedSuspenseInstance(suspenseInstance) {
  // Retry if any event replaying was blocked on this.
  retryIfBlockedOn(suspenseInstance);
}
function didNotMatchHydratedContainerTextInstance(parentContainer, textInstance, text) {
  {
    warnForUnmatchedText(textInstance, text);
  }
}
function didNotMatchHydratedTextInstance(parentType, parentProps, parentInstance, textInstance, text) {
  if ( parentProps[SUPPRESS_HYDRATION_WARNING$1] !== true) {
    warnForUnmatchedText(textInstance, text);
  }
}
function didNotHydrateContainerInstance(parentContainer, instance) {
  {
    if (instance.nodeType === ELEMENT_NODE) {
      warnForDeletedHydratableElement(parentContainer, instance);
    } else if (instance.nodeType === COMMENT_NODE) ; else {
      warnForDeletedHydratableText(parentContainer, instance);
    }
  }
}
function didNotHydrateInstance(parentType, parentProps, parentInstance, instance) {
  if ( parentProps[SUPPRESS_HYDRATION_WARNING$1] !== true) {
    if (instance.nodeType === ELEMENT_NODE) {
      warnForDeletedHydratableElement(parentInstance, instance);
    } else if (instance.nodeType === COMMENT_NODE) ; else {
      warnForDeletedHydratableText(parentInstance, instance);
    }
  }
}
function didNotFindHydratableContainerInstance(parentContainer, type, props) {
  {
    warnForInsertedHydratedElement(parentContainer, type);
  }
}
function didNotFindHydratableContainerTextInstance(parentContainer, text) {
  {
    warnForInsertedHydratedText(parentContainer, text);
  }
}
function didNotFindHydratableInstance(parentType, parentProps, parentInstance, type, props) {
  if ( parentProps[SUPPRESS_HYDRATION_WARNING$1] !== true) {
    warnForInsertedHydratedElement(parentInstance, type);
  }
}
function didNotFindHydratableTextInstance(parentType, parentProps, parentInstance, text) {
  if ( parentProps[SUPPRESS_HYDRATION_WARNING$1] !== true) {
    warnForInsertedHydratedText(parentInstance, text);
  }
}
function didNotFindHydratableSuspenseInstance(parentType, parentProps, parentInstance) {
  if ( parentProps[SUPPRESS_HYDRATION_WARNING$1] !== true) ;
}

var randomKey = Math.random().toString(36).slice(2);
var internalInstanceKey = '__reactInternalInstance$' + randomKey;
var internalEventHandlersKey = '__reactEventHandlers$' + randomKey;
var internalContainerInstanceKey = '__reactContainere$' + randomKey;
function precacheFiberNode(hostInst, node) {
  node[internalInstanceKey] = hostInst;
}
function markContainerAsRoot(hostRoot, node) {
  node[internalContainerInstanceKey] = hostRoot;
}
function unmarkContainerAsRoot(node) {
  node[internalContainerInstanceKey] = null;
}
function isContainerMarkedAsRoot(node) {
  return !!node[internalContainerInstanceKey];
} // Given a DOM node, return the closest HostComponent or HostText fiber ancestor.
// If the target node is part of a hydrated or not yet rendered subtree, then
// this may also return a SuspenseComponent or HostRoot to indicate that.
// Conceptually the HostRoot fiber is a child of the Container node. So if you
// pass the Container node as the targetNode, you will not actually get the
// HostRoot back. To get to the HostRoot, you need to pass a child of it.
// The same thing applies to Suspense boundaries.

function getClosestInstanceFromNode(targetNode) {
  var targetInst = targetNode[internalInstanceKey];

  if (targetInst) {
    // Don't return HostRoot or SuspenseComponent here.
    return targetInst;
  } // If the direct event target isn't a React owned DOM node, we need to look
  // to see if one of its parents is a React owned DOM node.


  var parentNode = targetNode.parentNode;

  while (parentNode) {
    // We'll check if this is a container root that could include
    // React nodes in the future. We need to check this first because
    // if we're a child of a dehydrated container, we need to first
    // find that inner container before moving on to finding the parent
    // instance. Note that we don't check this field on  the targetNode
    // itself because the fibers are conceptually between the container
    // node and the first child. It isn't surrounding the container node.
    // If it's not a container, we check if it's an instance.
    targetInst = parentNode[internalContainerInstanceKey] || parentNode[internalInstanceKey];

    if (targetInst) {
      // Since this wasn't the direct target of the event, we might have
      // stepped past dehydrated DOM nodes to get here. However they could
      // also have been non-React nodes. We need to answer which one.
      // If we the instance doesn't have any children, then there can't be
      // a nested suspense boundary within it. So we can use this as a fast
      // bailout. Most of the time, when people add non-React children to
      // the tree, it is using a ref to a child-less DOM node.
      // Normally we'd only need to check one of the fibers because if it
      // has ever gone from having children to deleting them or vice versa
      // it would have deleted the dehydrated boundary nested inside already.
      // However, since the HostRoot starts out with an alternate it might
      // have one on the alternate so we need to check in case this was a
      // root.
      var alternate = targetInst.alternate;

      if (targetInst.child !== null || alternate !== null && alternate.child !== null) {
        // Next we need to figure out if the node that skipped past is
        // nested within a dehydrated boundary and if so, which one.
        var suspenseInstance = getParentSuspenseInstance(targetNode);

        while (suspenseInstance !== null) {
          // We found a suspense instance. That means that we haven't
          // hydrated it yet. Even though we leave the comments in the
          // DOM after hydrating, and there are boundaries in the DOM
          // that could already be hydrated, we wouldn't have found them
          // through this pass since if the target is hydrated it would
          // have had an internalInstanceKey on it.
          // Let's get the fiber associated with the SuspenseComponent
          // as the deepest instance.
          var targetSuspenseInst = suspenseInstance[internalInstanceKey];

          if (targetSuspenseInst) {
            return targetSuspenseInst;
          } // If we don't find a Fiber on the comment, it might be because
          // we haven't gotten to hydrate it yet. There might still be a
          // parent boundary that hasn't above this one so we need to find
          // the outer most that is known.


          suspenseInstance = getParentSuspenseInstance(suspenseInstance); // If we don't find one, then that should mean that the parent
          // host component also hasn't hydrated yet. We can return it
          // below since it will bail out on the isMounted check later.
        }
      }

      return targetInst;
    }

    targetNode = parentNode;
    parentNode = targetNode.parentNode;
  }

  return null;
}
/**
 * Given a DOM node, return the ReactDOMComponent or ReactDOMTextComponent
 * instance, or null if the node was not rendered by this React.
 */

function getInstanceFromNode$1(node) {
  var inst = node[internalInstanceKey] || node[internalContainerInstanceKey];

  if (inst) {
    if (inst.tag === HostComponent || inst.tag === HostText || inst.tag === SuspenseComponent || inst.tag === HostRoot) {
      return inst;
    } else {
      return null;
    }
  }

  return null;
}
/**
 * Given a ReactDOMComponent or ReactDOMTextComponent, return the corresponding
 * DOM node.
 */

function getNodeFromInstance$1(inst) {
  if (inst.tag === HostComponent || inst.tag === HostText) {
    // In Fiber this, is just the state node right now. We assume it will be
    // a host component or host text.
    return inst.stateNode;
  } // Without this first invariant, passing a non-DOM-component triggers the next
  // invariant for a missing parent, which is super confusing.


  {
    {
      throw Error( "getNodeFromInstance: Invalid argument." );
    }
  }
}
function getFiberCurrentPropsFromNode$1(node) {
  return node[internalEventHandlersKey] || null;
}
function updateFiberProps(node, props) {
  node[internalEventHandlersKey] = props;
}

function getParent(inst) {
  do {
    inst = inst.return; // TODO: If this is a HostRoot we might want to bail out.
    // That is depending on if we want nested subtrees (layers) to bubble
    // events to their parent. We could also go through parentNode on the
    // host node but that wouldn't work for React Native and doesn't let us
    // do the portal feature.
  } while (inst && inst.tag !== HostComponent);

  if (inst) {
    return inst;
  }

  return null;
}
/**
 * Return the lowest common ancestor of A and B, or null if they are in
 * different trees.
 */


function getLowestCommonAncestor(instA, instB) {
  var depthA = 0;

  for (var tempA = instA; tempA; tempA = getParent(tempA)) {
    depthA++;
  }

  var depthB = 0;

  for (var tempB = instB; tempB; tempB = getParent(tempB)) {
    depthB++;
  } // If A is deeper, crawl up.


  while (depthA - depthB > 0) {
    instA = getParent(instA);
    depthA--;
  } // If B is deeper, crawl up.


  while (depthB - depthA > 0) {
    instB = getParent(instB);
    depthB--;
  } // Walk in lockstep until we find a match.


  var depth = depthA;

  while (depth--) {
    if (instA === instB || instA === instB.alternate) {
      return instA;
    }

    instA = getParent(instA);
    instB = getParent(instB);
  }

  return null;
}
/**
 * Simulates the traversal of a two-phase, capture/bubble event dispatch.
 */

function traverseTwoPhase(inst, fn, arg) {
  var path = [];

  while (inst) {
    path.push(inst);
    inst = getParent(inst);
  }

  var i;

  for (i = path.length; i-- > 0;) {
    fn(path[i], 'captured', arg);
  }

  for (i = 0; i < path.length; i++) {
    fn(path[i], 'bubbled', arg);
  }
}
/**
 * Traverses the ID hierarchy and invokes the supplied `cb` on any IDs that
 * should would receive a `mouseEnter` or `mouseLeave` event.
 *
 * Does not invoke the callback on the nearest common ancestor because nothing
 * "entered" or "left" that element.
 */

function traverseEnterLeave(from, to, fn, argFrom, argTo) {
  var common = from && to ? getLowestCommonAncestor(from, to) : null;
  var pathFrom = [];

  while (true) {
    if (!from) {
      break;
    }

    if (from === common) {
      break;
    }

    var alternate = from.alternate;

    if (alternate !== null && alternate === common) {
      break;
    }

    pathFrom.push(from);
    from = getParent(from);
  }

  var pathTo = [];

  while (true) {
    if (!to) {
      break;
    }

    if (to === common) {
      break;
    }

    var _alternate = to.alternate;

    if (_alternate !== null && _alternate === common) {
      break;
    }

    pathTo.push(to);
    to = getParent(to);
  }

  for (var i = 0; i < pathFrom.length; i++) {
    fn(pathFrom[i], 'bubbled', argFrom);
  }

  for (var _i = pathTo.length; _i-- > 0;) {
    fn(pathTo[_i], 'captured', argTo);
  }
}

function isInteractive(tag) {
  return tag === 'button' || tag === 'input' || tag === 'select' || tag === 'textarea';
}

function shouldPreventMouseEvent(name, type, props) {
  switch (name) {
    case 'onClick':
    case 'onClickCapture':
    case 'onDoubleClick':
    case 'onDoubleClickCapture':
    case 'onMouseDown':
    case 'onMouseDownCapture':
    case 'onMouseMove':
    case 'onMouseMoveCapture':
    case 'onMouseUp':
    case 'onMouseUpCapture':
    case 'onMouseEnter':
      return !!(props.disabled && isInteractive(type));

    default:
      return false;
  }
}
/**
 * @param {object} inst The instance, which is the source of events.
 * @param {string} registrationName Name of listener (e.g. `onClick`).
 * @return {?function} The stored callback.
 */


function getListener(inst, registrationName) {
  var listener; // TODO: shouldPreventMouseEvent is DOM-specific and definitely should not
  // live here; needs to be moved to a better place soon

  var stateNode = inst.stateNode;

  if (!stateNode) {
    // Work in progress (ex: onload events in incremental mode).
    return null;
  }

  var props = getFiberCurrentPropsFromNode(stateNode);

  if (!props) {
    // Work in progress.
    return null;
  }

  listener = props[registrationName];

  if (shouldPreventMouseEvent(registrationName, inst.type, props)) {
    return null;
  }

  if (!(!listener || typeof listener === 'function')) {
    {
      throw Error( "Expected `" + registrationName + "` listener to be a function, instead got a value of `" + typeof listener + "` type." );
    }
  }

  return listener;
}

/**
 * Some event types have a notion of different registration names for different
 * "phases" of propagation. This finds listeners by a given phase.
 */
function listenerAtPhase(inst, event, propagationPhase) {
  var registrationName = event.dispatchConfig.phasedRegistrationNames[propagationPhase];
  return getListener(inst, registrationName);
}
/**
 * A small set of propagation patterns, each of which will accept a small amount
 * of information, and generate a set of "dispatch ready event objects" - which
 * are sets of events that have already been annotated with a set of dispatched
 * listener functions/ids. The API is designed this way to discourage these
 * propagation strategies from actually executing the dispatches, since we
 * always want to collect the entire set of dispatches before executing even a
 * single one.
 */

/**
 * Tags a `SyntheticEvent` with dispatched listeners. Creating this function
 * here, allows us to not have to bind or create functions for each event.
 * Mutating the event's members allows us to not have to create a wrapping
 * "dispatch" object that pairs the event with the listener.
 */


function accumulateDirectionalDispatches(inst, phase, event) {
  {
    if (!inst) {
      error('Dispatching inst must not be null');
    }
  }

  var listener = listenerAtPhase(inst, event, phase);

  if (listener) {
    event._dispatchListeners = accumulateInto(event._dispatchListeners, listener);
    event._dispatchInstances = accumulateInto(event._dispatchInstances, inst);
  }
}
/**
 * Collect dispatches (must be entirely collected before dispatching - see unit
 * tests). Lazily allocate the array to conserve memory.  We must loop through
 * each event and perform the traversal for each one. We cannot perform a
 * single traversal for the entire collection of events because each event may
 * have a different target.
 */


function accumulateTwoPhaseDispatchesSingle(event) {
  if (event && event.dispatchConfig.phasedRegistrationNames) {
    traverseTwoPhase(event._targetInst, accumulateDirectionalDispatches, event);
  }
}
/**
 * Accumulates without regard to direction, does not look for phased
 * registration names. Same as `accumulateDirectDispatchesSingle` but without
 * requiring that the `dispatchMarker` be the same as the dispatched ID.
 */


function accumulateDispatches(inst, ignoredDirection, event) {
  if (inst && event && event.dispatchConfig.registrationName) {
    var registrationName = event.dispatchConfig.registrationName;
    var listener = getListener(inst, registrationName);

    if (listener) {
      event._dispatchListeners = accumulateInto(event._dispatchListeners, listener);
      event._dispatchInstances = accumulateInto(event._dispatchInstances, inst);
    }
  }
}
/**
 * Accumulates dispatches on an `SyntheticEvent`, but only for the
 * `dispatchMarker`.
 * @param {SyntheticEvent} event
 */


function accumulateDirectDispatchesSingle(event) {
  if (event && event.dispatchConfig.registrationName) {
    accumulateDispatches(event._targetInst, null, event);
  }
}

function accumulateTwoPhaseDispatches(events) {
  forEachAccumulated(events, accumulateTwoPhaseDispatchesSingle);
}
function accumulateEnterLeaveDispatches(leave, enter, from, to) {
  traverseEnterLeave(from, to, accumulateDispatches, leave, enter);
}
function accumulateDirectDispatches(events) {
  forEachAccumulated(events, accumulateDirectDispatchesSingle);
}

/**
 * These variables store information about text content of a target node,
 * allowing comparison of content before and after a given event.
 *
 * Identify the node where selection currently begins, then observe
 * both its text content and its current position in the DOM. Since the
 * browser may natively replace the target node during composition, we can
 * use its position to find its replacement.
 *
 *
 */
var root = null;
var startText = null;
var fallbackText = null;
function initialize(nativeEventTarget) {
  root = nativeEventTarget;
  startText = getText();
  return true;
}
function reset() {
  root = null;
  startText = null;
  fallbackText = null;
}
function getData() {
  if (fallbackText) {
    return fallbackText;
  }

  var start;
  var startValue = startText;
  var startLength = startValue.length;
  var end;
  var endValue = getText();
  var endLength = endValue.length;

  for (start = 0; start < startLength; start++) {
    if (startValue[start] !== endValue[start]) {
      break;
    }
  }

  var minEnd = startLength - start;

  for (end = 1; end <= minEnd; end++) {
    if (startValue[startLength - end] !== endValue[endLength - end]) {
      break;
    }
  }

  var sliceTail = end > 1 ? 1 - end : undefined;
  fallbackText = endValue.slice(start, sliceTail);
  return fallbackText;
}
function getText() {
  if ('value' in root) {
    return root.value;
  }

  return root.textContent;
}

var EVENT_POOL_SIZE = 10;
/**
 * @interface Event
 * @see http://www.w3.org/TR/DOM-Level-3-Events/
 */

var EventInterface = {
  type: null,
  target: null,
  // currentTarget is set when dispatching; no use in copying it here
  currentTarget: function () {
    return null;
  },
  eventPhase: null,
  bubbles: null,
  cancelable: null,
  timeStamp: function (event) {
    return event.timeStamp || Date.now();
  },
  defaultPrevented: null,
  isTrusted: null
};

function functionThatReturnsTrue() {
  return true;
}

function functionThatReturnsFalse() {
  return false;
}
/**
 * Synthetic events are dispatched by event plugins, typically in response to a
 * top-level event delegation handler.
 *
 * These systems should generally use pooling to reduce the frequency of garbage
 * collection. The system should check `isPersistent` to determine whether the
 * event should be released into the pool after being dispatched. Users that
 * need a persisted event should invoke `persist`.
 *
 * Synthetic events (and subclasses) implement the DOM Level 3 Events API by
 * normalizing browser quirks. Subclasses do not necessarily have to implement a
 * DOM interface; custom application-specific events can also subclass this.
 *
 * @param {object} dispatchConfig Configuration used to dispatch this event.
 * @param {*} targetInst Marker identifying the event target.
 * @param {object} nativeEvent Native browser event.
 * @param {DOMEventTarget} nativeEventTarget Target node.
 */


function SyntheticEvent(dispatchConfig, targetInst, nativeEvent, nativeEventTarget) {
  {
    // these have a getter/setter for warnings
    delete this.nativeEvent;
    delete this.preventDefault;
    delete this.stopPropagation;
    delete this.isDefaultPrevented;
    delete this.isPropagationStopped;
  }

  this.dispatchConfig = dispatchConfig;
  this._targetInst = targetInst;
  this.nativeEvent = nativeEvent;
  var Interface = this.constructor.Interface;

  for (var propName in Interface) {
    if (!Interface.hasOwnProperty(propName)) {
      continue;
    }

    {
      delete this[propName]; // this has a getter/setter for warnings
    }

    var normalize = Interface[propName];

    if (normalize) {
      this[propName] = normalize(nativeEvent);
    } else {
      if (propName === 'target') {
        this.target = nativeEventTarget;
      } else {
        this[propName] = nativeEvent[propName];
      }
    }
  }

  var defaultPrevented = nativeEvent.defaultPrevented != null ? nativeEvent.defaultPrevented : nativeEvent.returnValue === false;

  if (defaultPrevented) {
    this.isDefaultPrevented = functionThatReturnsTrue;
  } else {
    this.isDefaultPrevented = functionThatReturnsFalse;
  }

  this.isPropagationStopped = functionThatReturnsFalse;
  return this;
}

_assign(SyntheticEvent.prototype, {
  preventDefault: function () {
    this.defaultPrevented = true;
    var event = this.nativeEvent;

    if (!event) {
      return;
    }

    if (event.preventDefault) {
      event.preventDefault();
    } else if (typeof event.returnValue !== 'unknown') {
      event.returnValue = false;
    }

    this.isDefaultPrevented = functionThatReturnsTrue;
  },
  stopPropagation: function () {
    var event = this.nativeEvent;

    if (!event) {
      return;
    }

    if (event.stopPropagation) {
      event.stopPropagation();
    } else if (typeof event.cancelBubble !== 'unknown') {
      // The ChangeEventPlugin registers a "propertychange" event for
      // IE. This event does not support bubbling or cancelling, and
      // any references to cancelBubble throw "Member not found".  A
      // typeof check of "unknown" circumvents this issue (and is also
      // IE specific).
      event.cancelBubble = true;
    }

    this.isPropagationStopped = functionThatReturnsTrue;
  },

  /**
   * We release all dispatched `SyntheticEvent`s after each event loop, adding
   * them back into the pool. This allows a way to hold onto a reference that
   * won't be added back into the pool.
   */
  persist: function () {
    this.isPersistent = functionThatReturnsTrue;
  },

  /**
   * Checks if this event should be released back into the pool.
   *
   * @return {boolean} True if this should not be released, false otherwise.
   */
  isPersistent: functionThatReturnsFalse,

  /**
   * `PooledClass` looks for `destructor` on each instance it releases.
   */
  destructor: function () {
    var Interface = this.constructor.Interface;

    for (var propName in Interface) {
      {
        Object.defineProperty(this, propName, getPooledWarningPropertyDefinition(propName, Interface[propName]));
      }
    }

    this.dispatchConfig = null;
    this._targetInst = null;
    this.nativeEvent = null;
    this.isDefaultPrevented = functionThatReturnsFalse;
    this.isPropagationStopped = functionThatReturnsFalse;
    this._dispatchListeners = null;
    this._dispatchInstances = null;

    {
      Object.defineProperty(this, 'nativeEvent', getPooledWarningPropertyDefinition('nativeEvent', null));
      Object.defineProperty(this, 'isDefaultPrevented', getPooledWarningPropertyDefinition('isDefaultPrevented', functionThatReturnsFalse));
      Object.defineProperty(this, 'isPropagationStopped', getPooledWarningPropertyDefinition('isPropagationStopped', functionThatReturnsFalse));
      Object.defineProperty(this, 'preventDefault', getPooledWarningPropertyDefinition('preventDefault', function () {}));
      Object.defineProperty(this, 'stopPropagation', getPooledWarningPropertyDefinition('stopPropagation', function () {}));
    }
  }
});

SyntheticEvent.Interface = EventInterface;
/**
 * Helper to reduce boilerplate when creating subclasses.
 */

SyntheticEvent.extend = function (Interface) {
  var Super = this;

  var E = function () {};

  E.prototype = Super.prototype;
  var prototype = new E();

  function Class() {
    return Super.apply(this, arguments);
  }

  _assign(prototype, Class.prototype);

  Class.prototype = prototype;
  Class.prototype.constructor = Class;
  Class.Interface = _assign({}, Super.Interface, Interface);
  Class.extend = Super.extend;
  addEventPoolingTo(Class);
  return Class;
};

addEventPoolingTo(SyntheticEvent);
/**
 * Helper to nullify syntheticEvent instance properties when destructing
 *
 * @param {String} propName
 * @param {?object} getVal
 * @return {object} defineProperty object
 */

function getPooledWarningPropertyDefinition(propName, getVal) {
  var isFunction = typeof getVal === 'function';
  return {
    configurable: true,
    set: set,
    get: get
  };

  function set(val) {
    var action = isFunction ? 'setting the method' : 'setting the property';
    warn(action, 'This is effectively a no-op');
    return val;
  }

  function get() {
    var action = isFunction ? 'accessing the method' : 'accessing the property';
    var result = isFunction ? 'This is a no-op function' : 'This is set to null';
    warn(action, result);
    return getVal;
  }

  function warn(action, result) {
    {
      error("This synthetic event is reused for performance reasons. If you're seeing this, " + "you're %s `%s` on a released/nullified synthetic event. %s. " + 'If you must keep the original synthetic event around, use event.persist(). ' + 'See https://fb.me/react-event-pooling for more information.', action, propName, result);
    }
  }
}

function getPooledEvent(dispatchConfig, targetInst, nativeEvent, nativeInst) {
  var EventConstructor = this;

  if (EventConstructor.eventPool.length) {
    var instance = EventConstructor.eventPool.pop();
    EventConstructor.call(instance, dispatchConfig, targetInst, nativeEvent, nativeInst);
    return instance;
  }

  return new EventConstructor(dispatchConfig, targetInst, nativeEvent, nativeInst);
}

function releasePooledEvent(event) {
  var EventConstructor = this;

  if (!(event instanceof EventConstructor)) {
    {
      throw Error( "Trying to release an event instance into a pool of a different type." );
    }
  }

  event.destructor();

  if (EventConstructor.eventPool.length < EVENT_POOL_SIZE) {
    EventConstructor.eventPool.push(event);
  }
}

function addEventPoolingTo(EventConstructor) {
  EventConstructor.eventPool = [];
  EventConstructor.getPooled = getPooledEvent;
  EventConstructor.release = releasePooledEvent;
}

/**
 * @interface Event
 * @see http://www.w3.org/TR/DOM-Level-3-Events/#events-compositionevents
 */

var SyntheticCompositionEvent = SyntheticEvent.extend({
  data: null
});

/**
 * @interface Event
 * @see http://www.w3.org/TR/2013/WD-DOM-Level-3-Events-20131105
 *      /#events-inputevents
 */

var SyntheticInputEvent = SyntheticEvent.extend({
  data: null
});

var END_KEYCODES = [9, 13, 27, 32]; // Tab, Return, Esc, Space

var START_KEYCODE = 229;
var canUseCompositionEvent = canUseDOM && 'CompositionEvent' in window;
var documentMode = null;

if (canUseDOM && 'documentMode' in document) {
  documentMode = document.documentMode;
} // Webkit offers a very useful `textInput` event that can be used to
// directly represent `beforeInput`. The IE `textinput` event is not as
// useful, so we don't use it.


var canUseTextInputEvent = canUseDOM && 'TextEvent' in window && !documentMode; // In IE9+, we have access to composition events, but the data supplied
// by the native compositionend event may be incorrect. Japanese ideographic
// spaces, for instance (\u3000) are not recorded correctly.

var useFallbackCompositionData = canUseDOM && (!canUseCompositionEvent || documentMode && documentMode > 8 && documentMode <= 11);
var SPACEBAR_CODE = 32;
var SPACEBAR_CHAR = String.fromCharCode(SPACEBAR_CODE); // Events and their corresponding property names.

var eventTypes = {
  beforeInput: {
    phasedRegistrationNames: {
      bubbled: 'onBeforeInput',
      captured: 'onBeforeInputCapture'
    },
    dependencies: [TOP_COMPOSITION_END, TOP_KEY_PRESS, TOP_TEXT_INPUT, TOP_PASTE]
  },
  compositionEnd: {
    phasedRegistrationNames: {
      bubbled: 'onCompositionEnd',
      captured: 'onCompositionEndCapture'
    },
    dependencies: [TOP_BLUR, TOP_COMPOSITION_END, TOP_KEY_DOWN, TOP_KEY_PRESS, TOP_KEY_UP, TOP_MOUSE_DOWN]
  },
  compositionStart: {
    phasedRegistrationNames: {
      bubbled: 'onCompositionStart',
      captured: 'onCompositionStartCapture'
    },
    dependencies: [TOP_BLUR, TOP_COMPOSITION_START, TOP_KEY_DOWN, TOP_KEY_PRESS, TOP_KEY_UP, TOP_MOUSE_DOWN]
  },
  compositionUpdate: {
    phasedRegistrationNames: {
      bubbled: 'onCompositionUpdate',
      captured: 'onCompositionUpdateCapture'
    },
    dependencies: [TOP_BLUR, TOP_COMPOSITION_UPDATE, TOP_KEY_DOWN, TOP_KEY_PRESS, TOP_KEY_UP, TOP_MOUSE_DOWN]
  }
}; // Track whether we've ever handled a keypress on the space key.

var hasSpaceKeypress = false;
/**
 * Return whether a native keypress event is assumed to be a command.
 * This is required because Firefox fires `keypress` events for key commands
 * (cut, copy, select-all, etc.) even though no character is inserted.
 */

function isKeypressCommand(nativeEvent) {
  return (nativeEvent.ctrlKey || nativeEvent.altKey || nativeEvent.metaKey) && // ctrlKey && altKey is equivalent to AltGr, and is not a command.
  !(nativeEvent.ctrlKey && nativeEvent.altKey);
}
/**
 * Translate native top level events into event types.
 *
 * @param {string} topLevelType
 * @return {object}
 */


function getCompositionEventType(topLevelType) {
  switch (topLevelType) {
    case TOP_COMPOSITION_START:
      return eventTypes.compositionStart;

    case TOP_COMPOSITION_END:
      return eventTypes.compositionEnd;

    case TOP_COMPOSITION_UPDATE:
      return eventTypes.compositionUpdate;
  }
}
/**
 * Does our fallback best-guess model think this event signifies that
 * composition has begun?
 *
 * @param {string} topLevelType
 * @param {object} nativeEvent
 * @return {boolean}
 */


function isFallbackCompositionStart(topLevelType, nativeEvent) {
  return topLevelType === TOP_KEY_DOWN && nativeEvent.keyCode === START_KEYCODE;
}
/**
 * Does our fallback mode think that this event is the end of composition?
 *
 * @param {string} topLevelType
 * @param {object} nativeEvent
 * @return {boolean}
 */


function isFallbackCompositionEnd(topLevelType, nativeEvent) {
  switch (topLevelType) {
    case TOP_KEY_UP:
      // Command keys insert or clear IME input.
      return END_KEYCODES.indexOf(nativeEvent.keyCode) !== -1;

    case TOP_KEY_DOWN:
      // Expect IME keyCode on each keydown. If we get any other
      // code we must have exited earlier.
      return nativeEvent.keyCode !== START_KEYCODE;

    case TOP_KEY_PRESS:
    case TOP_MOUSE_DOWN:
    case TOP_BLUR:
      // Events are not possible without cancelling IME.
      return true;

    default:
      return false;
  }
}
/**
 * Google Input Tools provides composition data via a CustomEvent,
 * with the `data` property populated in the `detail` object. If this
 * is available on the event object, use it. If not, this is a plain
 * composition event and we have nothing special to extract.
 *
 * @param {object} nativeEvent
 * @return {?string}
 */


function getDataFromCustomEvent(nativeEvent) {
  var detail = nativeEvent.detail;

  if (typeof detail === 'object' && 'data' in detail) {
    return detail.data;
  }

  return null;
}
/**
 * Check if a composition event was triggered by Korean IME.
 * Our fallback mode does not work well with IE's Korean IME,
 * so just use native composition events when Korean IME is used.
 * Although CompositionEvent.locale property is deprecated,
 * it is available in IE, where our fallback mode is enabled.
 *
 * @param {object} nativeEvent
 * @return {boolean}
 */


function isUsingKoreanIME(nativeEvent) {
  return nativeEvent.locale === 'ko';
} // Track the current IME composition status, if any.


var isComposing = false;
/**
 * @return {?object} A SyntheticCompositionEvent.
 */

function extractCompositionEvent(topLevelType, targetInst, nativeEvent, nativeEventTarget) {
  var eventType;
  var fallbackData;

  if (canUseCompositionEvent) {
    eventType = getCompositionEventType(topLevelType);
  } else if (!isComposing) {
    if (isFallbackCompositionStart(topLevelType, nativeEvent)) {
      eventType = eventTypes.compositionStart;
    }
  } else if (isFallbackCompositionEnd(topLevelType, nativeEvent)) {
    eventType = eventTypes.compositionEnd;
  }

  if (!eventType) {
    return null;
  }

  if (useFallbackCompositionData && !isUsingKoreanIME(nativeEvent)) {
    // The current composition is stored statically and must not be
    // overwritten while composition continues.
    if (!isComposing && eventType === eventTypes.compositionStart) {
      isComposing = initialize(nativeEventTarget);
    } else if (eventType === eventTypes.compositionEnd) {
      if (isComposing) {
        fallbackData = getData();
      }
    }
  }

  var event = SyntheticCompositionEvent.getPooled(eventType, targetInst, nativeEvent, nativeEventTarget);

  if (fallbackData) {
    // Inject data generated from fallback path into the synthetic event.
    // This matches the property of native CompositionEventInterface.
    event.data = fallbackData;
  } else {
    var customData = getDataFromCustomEvent(nativeEvent);

    if (customData !== null) {
      event.data = customData;
    }
  }

  accumulateTwoPhaseDispatches(event);
  return event;
}
/**
 * @param {TopLevelType} topLevelType Number from `TopLevelType`.
 * @param {object} nativeEvent Native browser event.
 * @return {?string} The string corresponding to this `beforeInput` event.
 */


function getNativeBeforeInputChars(topLevelType, nativeEvent) {
  switch (topLevelType) {
    case TOP_COMPOSITION_END:
      return getDataFromCustomEvent(nativeEvent);

    case TOP_KEY_PRESS:
      /**
       * If native `textInput` events are available, our goal is to make
       * use of them. However, there is a special case: the spacebar key.
       * In Webkit, preventing default on a spacebar `textInput` event
       * cancels character insertion, but it *also* causes the browser
       * to fall back to its default spacebar behavior of scrolling the
       * page.
       *
       * Tracking at:
       * https://code.google.com/p/chromium/issues/detail?id=355103
       *
       * To avoid this issue, use the keypress event as if no `textInput`
       * event is available.
       */
      var which = nativeEvent.which;

      if (which !== SPACEBAR_CODE) {
        return null;
      }

      hasSpaceKeypress = true;
      return SPACEBAR_CHAR;

    case TOP_TEXT_INPUT:
      // Record the characters to be added to the DOM.
      var chars = nativeEvent.data; // If it's a spacebar character, assume that we have already handled
      // it at the keypress level and bail immediately. Android Chrome
      // doesn't give us keycodes, so we need to ignore it.

      if (chars === SPACEBAR_CHAR && hasSpaceKeypress) {
        return null;
      }

      return chars;

    default:
      // For other native event types, do nothing.
      return null;
  }
}
/**
 * For browsers that do not provide the `textInput` event, extract the
 * appropriate string to use for SyntheticInputEvent.
 *
 * @param {number} topLevelType Number from `TopLevelEventTypes`.
 * @param {object} nativeEvent Native browser event.
 * @return {?string} The fallback string for this `beforeInput` event.
 */


function getFallbackBeforeInputChars(topLevelType, nativeEvent) {
  // If we are currently composing (IME) and using a fallback to do so,
  // try to extract the composed characters from the fallback object.
  // If composition event is available, we extract a string only at
  // compositionevent, otherwise extract it at fallback events.
  if (isComposing) {
    if (topLevelType === TOP_COMPOSITION_END || !canUseCompositionEvent && isFallbackCompositionEnd(topLevelType, nativeEvent)) {
      var chars = getData();
      reset();
      isComposing = false;
      return chars;
    }

    return null;
  }

  switch (topLevelType) {
    case TOP_PASTE:
      // If a paste event occurs after a keypress, throw out the input
      // chars. Paste events should not lead to BeforeInput events.
      return null;

    case TOP_KEY_PRESS:
      /**
       * As of v27, Firefox may fire keypress events even when no character
       * will be inserted. A few possibilities:
       *
       * - `which` is `0`. Arrow keys, Esc key, etc.
       *
       * - `which` is the pressed key code, but no char is available.
       *   Ex: 'AltGr + d` in Polish. There is no modified character for
       *   this key combination and no character is inserted into the
       *   document, but FF fires the keypress for char code `100` anyway.
       *   No `input` event will occur.
       *
       * - `which` is the pressed key code, but a command combination is
       *   being used. Ex: `Cmd+C`. No character is inserted, and no
       *   `input` event will occur.
       */
      if (!isKeypressCommand(nativeEvent)) {
        // IE fires the `keypress` event when a user types an emoji via
        // Touch keyboard of Windows.  In such a case, the `char` property
        // holds an emoji character like `\uD83D\uDE0A`.  Because its length
        // is 2, the property `which` does not represent an emoji correctly.
        // In such a case, we directly return the `char` property instead of
        // using `which`.
        if (nativeEvent.char && nativeEvent.char.length > 1) {
          return nativeEvent.char;
        } else if (nativeEvent.which) {
          return String.fromCharCode(nativeEvent.which);
        }
      }

      return null;

    case TOP_COMPOSITION_END:
      return useFallbackCompositionData && !isUsingKoreanIME(nativeEvent) ? null : nativeEvent.data;

    default:
      return null;
  }
}
/**
 * Extract a SyntheticInputEvent for `beforeInput`, based on either native
 * `textInput` or fallback behavior.
 *
 * @return {?object} A SyntheticInputEvent.
 */


function extractBeforeInputEvent(topLevelType, targetInst, nativeEvent, nativeEventTarget) {
  var chars;

  if (canUseTextInputEvent) {
    chars = getNativeBeforeInputChars(topLevelType, nativeEvent);
  } else {
    chars = getFallbackBeforeInputChars(topLevelType, nativeEvent);
  } // If no characters are being inserted, no BeforeInput event should
  // be fired.


  if (!chars) {
    return null;
  }

  var event = SyntheticInputEvent.getPooled(eventTypes.beforeInput, targetInst, nativeEvent, nativeEventTarget);
  event.data = chars;
  accumulateTwoPhaseDispatches(event);
  return event;
}
/**
 * Create an `onBeforeInput` event to match
 * http://www.w3.org/TR/2013/WD-DOM-Level-3-Events-20131105/#events-inputevents.
 *
 * This event plugin is based on the native `textInput` event
 * available in Chrome, Safari, Opera, and IE. This event fires after
 * `onKeyPress` and `onCompositionEnd`, but before `onInput`.
 *
 * `beforeInput` is spec'd but not implemented in any browsers, and
 * the `input` event does not provide any useful information about what has
 * actually been added, contrary to the spec. Thus, `textInput` is the best
 * available event to identify the characters that have actually been inserted
 * into the target node.
 *
 * This plugin is also responsible for emitting `composition` events, thus
 * allowing us to share composition fallback code for both `beforeInput` and
 * `composition` event types.
 */


var BeforeInputEventPlugin = {
  eventTypes: eventTypes,
  extractEvents: function (topLevelType, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags) {
    var composition = extractCompositionEvent(topLevelType, targetInst, nativeEvent, nativeEventTarget);
    var beforeInput = extractBeforeInputEvent(topLevelType, targetInst, nativeEvent, nativeEventTarget);

    if (composition === null) {
      return beforeInput;
    }

    if (beforeInput === null) {
      return composition;
    }

    return [composition, beforeInput];
  }
};

/**
 * @see http://www.whatwg.org/specs/web-apps/current-work/multipage/the-input-element.html#input-type-attr-summary
 */
var supportedInputTypes = {
  color: true,
  date: true,
  datetime: true,
  'datetime-local': true,
  email: true,
  month: true,
  number: true,
  password: true,
  range: true,
  search: true,
  tel: true,
  text: true,
  time: true,
  url: true,
  week: true
};

function isTextInputElement(elem) {
  var nodeName = elem && elem.nodeName && elem.nodeName.toLowerCase();

  if (nodeName === 'input') {
    return !!supportedInputTypes[elem.type];
  }

  if (nodeName === 'textarea') {
    return true;
  }

  return false;
}

var eventTypes$1 = {
  change: {
    phasedRegistrationNames: {
      bubbled: 'onChange',
      captured: 'onChangeCapture'
    },
    dependencies: [TOP_BLUR, TOP_CHANGE, TOP_CLICK, TOP_FOCUS, TOP_INPUT, TOP_KEY_DOWN, TOP_KEY_UP, TOP_SELECTION_CHANGE]
  }
};

function createAndAccumulateChangeEvent(inst, nativeEvent, target) {
  var event = SyntheticEvent.getPooled(eventTypes$1.change, inst, nativeEvent, target);
  event.type = 'change'; // Flag this event loop as needing state restore.

  enqueueStateRestore(target);
  accumulateTwoPhaseDispatches(event);
  return event;
}
/**
 * For IE shims
 */


var activeElement = null;
var activeElementInst = null;
/**
 * SECTION: handle `change` event
 */

function shouldUseChangeEvent(elem) {
  var nodeName = elem.nodeName && elem.nodeName.toLowerCase();
  return nodeName === 'select' || nodeName === 'input' && elem.type === 'file';
}

function manualDispatchChangeEvent(nativeEvent) {
  var event = createAndAccumulateChangeEvent(activeElementInst, nativeEvent, getEventTarget(nativeEvent)); // If change and propertychange bubbled, we'd just bind to it like all the
  // other events and have it go through ReactBrowserEventEmitter. Since it
  // doesn't, we manually listen for the events and so we have to enqueue and
  // process the abstract event manually.
  //
  // Batching is necessary here in order to ensure that all event handlers run
  // before the next rerender (including event handlers attached to ancestor
  // elements instead of directly on the input). Without this, controlled
  // components don't work properly in conjunction with event bubbling because
  // the component is rerendered and the value reverted before all the event
  // handlers can run. See https://github.com/facebook/react/issues/708.

  batchedUpdates(runEventInBatch, event);
}

function runEventInBatch(event) {
  runEventsInBatch(event);
}

function getInstIfValueChanged(targetInst) {
  var targetNode = getNodeFromInstance$1(targetInst);

  if (updateValueIfChanged(targetNode)) {
    return targetInst;
  }
}

function getTargetInstForChangeEvent(topLevelType, targetInst) {
  if (topLevelType === TOP_CHANGE) {
    return targetInst;
  }
}
/**
 * SECTION: handle `input` event
 */


var isInputEventSupported = false;

if (canUseDOM) {
  // IE9 claims to support the input event but fails to trigger it when
  // deleting text, so we ignore its input events.
  isInputEventSupported = isEventSupported('input') && (!document.documentMode || document.documentMode > 9);
}
/**
 * (For IE <=9) Starts tracking propertychange events on the passed-in element
 * and override the value property so that we can distinguish user events from
 * value changes in JS.
 */


function startWatchingForValueChange(target, targetInst) {
  activeElement = target;
  activeElementInst = targetInst;
  activeElement.attachEvent('onpropertychange', handlePropertyChange);
}
/**
 * (For IE <=9) Removes the event listeners from the currently-tracked element,
 * if any exists.
 */


function stopWatchingForValueChange() {
  if (!activeElement) {
    return;
  }

  activeElement.detachEvent('onpropertychange', handlePropertyChange);
  activeElement = null;
  activeElementInst = null;
}
/**
 * (For IE <=9) Handles a propertychange event, sending a `change` event if
 * the value of the active element has changed.
 */


function handlePropertyChange(nativeEvent) {
  if (nativeEvent.propertyName !== 'value') {
    return;
  }

  if (getInstIfValueChanged(activeElementInst)) {
    manualDispatchChangeEvent(nativeEvent);
  }
}

function handleEventsForInputEventPolyfill(topLevelType, target, targetInst) {
  if (topLevelType === TOP_FOCUS) {
    // In IE9, propertychange fires for most input events but is buggy and
    // doesn't fire when text is deleted, but conveniently, selectionchange
    // appears to fire in all of the remaining cases so we catch those and
    // forward the event if the value has changed
    // In either case, we don't want to call the event handler if the value
    // is changed from JS so we redefine a setter for `.value` that updates
    // our activeElementValue variable, allowing us to ignore those changes
    //
    // stopWatching() should be a noop here but we call it just in case we
    // missed a blur event somehow.
    stopWatchingForValueChange();
    startWatchingForValueChange(target, targetInst);
  } else if (topLevelType === TOP_BLUR) {
    stopWatchingForValueChange();
  }
} // For IE8 and IE9.


function getTargetInstForInputEventPolyfill(topLevelType, targetInst) {
  if (topLevelType === TOP_SELECTION_CHANGE || topLevelType === TOP_KEY_UP || topLevelType === TOP_KEY_DOWN) {
    // On the selectionchange event, the target is just document which isn't
    // helpful for us so just check activeElement instead.
    //
    // 99% of the time, keydown and keyup aren't necessary. IE8 fails to fire
    // propertychange on the first input event after setting `value` from a
    // script and fires only keydown, keypress, keyup. Catching keyup usually
    // gets it and catching keydown lets us fire an event for the first
    // keystroke if user does a key repeat (it'll be a little delayed: right
    // before the second keystroke). Other input methods (e.g., paste) seem to
    // fire selectionchange normally.
    return getInstIfValueChanged(activeElementInst);
  }
}
/**
 * SECTION: handle `click` event
 */


function shouldUseClickEvent(elem) {
  // Use the `click` event to detect changes to checkbox and radio inputs.
  // This approach works across all browsers, whereas `change` does not fire
  // until `blur` in IE8.
  var nodeName = elem.nodeName;
  return nodeName && nodeName.toLowerCase() === 'input' && (elem.type === 'checkbox' || elem.type === 'radio');
}

function getTargetInstForClickEvent(topLevelType, targetInst) {
  if (topLevelType === TOP_CLICK) {
    return getInstIfValueChanged(targetInst);
  }
}

function getTargetInstForInputOrChangeEvent(topLevelType, targetInst) {
  if (topLevelType === TOP_INPUT || topLevelType === TOP_CHANGE) {
    return getInstIfValueChanged(targetInst);
  }
}

function handleControlledInputBlur(node) {
  var state = node._wrapperState;

  if (!state || !state.controlled || node.type !== 'number') {
    return;
  }

  {
    // If controlled, assign the value attribute to the current value on blur
    setDefaultValue(node, 'number', node.value);
  }
}
/**
 * This plugin creates an `onChange` event that normalizes change events
 * across form elements. This event fires at a time when it's possible to
 * change the element's value without seeing a flicker.
 *
 * Supported elements are:
 * - input (see `isTextInputElement`)
 * - textarea
 * - select
 */


var ChangeEventPlugin = {
  eventTypes: eventTypes$1,
  _isInputEventSupported: isInputEventSupported,
  extractEvents: function (topLevelType, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags) {
    var targetNode = targetInst ? getNodeFromInstance$1(targetInst) : window;
    var getTargetInstFunc, handleEventFunc;

    if (shouldUseChangeEvent(targetNode)) {
      getTargetInstFunc = getTargetInstForChangeEvent;
    } else if (isTextInputElement(targetNode)) {
      if (isInputEventSupported) {
        getTargetInstFunc = getTargetInstForInputOrChangeEvent;
      } else {
        getTargetInstFunc = getTargetInstForInputEventPolyfill;
        handleEventFunc = handleEventsForInputEventPolyfill;
      }
    } else if (shouldUseClickEvent(targetNode)) {
      getTargetInstFunc = getTargetInstForClickEvent;
    }

    if (getTargetInstFunc) {
      var inst = getTargetInstFunc(topLevelType, targetInst);

      if (inst) {
        var event = createAndAccumulateChangeEvent(inst, nativeEvent, nativeEventTarget);
        return event;
      }
    }

    if (handleEventFunc) {
      handleEventFunc(topLevelType, targetNode, targetInst);
    } // When blurring, set the value attribute for number inputs


    if (topLevelType === TOP_BLUR) {
      handleControlledInputBlur(targetNode);
    }
  }
};

var SyntheticUIEvent = SyntheticEvent.extend({
  view: null,
  detail: null
});

/**
 * Translation from modifier key to the associated property in the event.
 * @see http://www.w3.org/TR/DOM-Level-3-Events/#keys-Modifiers
 */
var modifierKeyToProp = {
  Alt: 'altKey',
  Control: 'ctrlKey',
  Meta: 'metaKey',
  Shift: 'shiftKey'
}; // Older browsers (Safari <= 10, iOS Safari <= 10.2) do not support
// getModifierState. If getModifierState is not supported, we map it to a set of
// modifier keys exposed by the event. In this case, Lock-keys are not supported.

function modifierStateGetter(keyArg) {
  var syntheticEvent = this;
  var nativeEvent = syntheticEvent.nativeEvent;

  if (nativeEvent.getModifierState) {
    return nativeEvent.getModifierState(keyArg);
  }

  var keyProp = modifierKeyToProp[keyArg];
  return keyProp ? !!nativeEvent[keyProp] : false;
}

function getEventModifierState(nativeEvent) {
  return modifierStateGetter;
}

var previousScreenX = 0;
var previousScreenY = 0; // Use flags to signal movementX/Y has already been set

var isMovementXSet = false;
var isMovementYSet = false;
/**
 * @interface MouseEvent
 * @see http://www.w3.org/TR/DOM-Level-3-Events/
 */

var SyntheticMouseEvent = SyntheticUIEvent.extend({
  screenX: null,
  screenY: null,
  clientX: null,
  clientY: null,
  pageX: null,
  pageY: null,
  ctrlKey: null,
  shiftKey: null,
  altKey: null,
  metaKey: null,
  getModifierState: getEventModifierState,
  button: null,
  buttons: null,
  relatedTarget: function (event) {
    return event.relatedTarget || (event.fromElement === event.srcElement ? event.toElement : event.fromElement);
  },
  movementX: function (event) {
    if ('movementX' in event) {
      return event.movementX;
    }

    var screenX = previousScreenX;
    previousScreenX = event.screenX;

    if (!isMovementXSet) {
      isMovementXSet = true;
      return 0;
    }

    return event.type === 'mousemove' ? event.screenX - screenX : 0;
  },
  movementY: function (event) {
    if ('movementY' in event) {
      return event.movementY;
    }

    var screenY = previousScreenY;
    previousScreenY = event.screenY;

    if (!isMovementYSet) {
      isMovementYSet = true;
      return 0;
    }

    return event.type === 'mousemove' ? event.screenY - screenY : 0;
  }
});

/**
 * @interface PointerEvent
 * @see http://www.w3.org/TR/pointerevents/
 */

var SyntheticPointerEvent = SyntheticMouseEvent.extend({
  pointerId: null,
  width: null,
  height: null,
  pressure: null,
  tangentialPressure: null,
  tiltX: null,
  tiltY: null,
  twist: null,
  pointerType: null,
  isPrimary: null
});

var eventTypes$2 = {
  mouseEnter: {
    registrationName: 'onMouseEnter',
    dependencies: [TOP_MOUSE_OUT, TOP_MOUSE_OVER]
  },
  mouseLeave: {
    registrationName: 'onMouseLeave',
    dependencies: [TOP_MOUSE_OUT, TOP_MOUSE_OVER]
  },
  pointerEnter: {
    registrationName: 'onPointerEnter',
    dependencies: [TOP_POINTER_OUT, TOP_POINTER_OVER]
  },
  pointerLeave: {
    registrationName: 'onPointerLeave',
    dependencies: [TOP_POINTER_OUT, TOP_POINTER_OVER]
  }
};
var EnterLeaveEventPlugin = {
  eventTypes: eventTypes$2,

  /**
   * For almost every interaction we care about, there will be both a top-level
   * `mouseover` and `mouseout` event that occurs. Only use `mouseout` so that
   * we do not extract duplicate events. However, moving the mouse into the
   * browser from outside will not fire a `mouseout` event. In this case, we use
   * the `mouseover` top-level event.
   */
  extractEvents: function (topLevelType, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags) {
    var isOverEvent = topLevelType === TOP_MOUSE_OVER || topLevelType === TOP_POINTER_OVER;
    var isOutEvent = topLevelType === TOP_MOUSE_OUT || topLevelType === TOP_POINTER_OUT;

    if (isOverEvent && (eventSystemFlags & IS_REPLAYED) === 0 && (nativeEvent.relatedTarget || nativeEvent.fromElement)) {
      // If this is an over event with a target, then we've already dispatched
      // the event in the out event of the other target. If this is replayed,
      // then it's because we couldn't dispatch against this target previously
      // so we have to do it now instead.
      return null;
    }

    if (!isOutEvent && !isOverEvent) {
      // Must not be a mouse or pointer in or out - ignoring.
      return null;
    }

    var win;

    if (nativeEventTarget.window === nativeEventTarget) {
      // `nativeEventTarget` is probably a window object.
      win = nativeEventTarget;
    } else {
      // TODO: Figure out why `ownerDocument` is sometimes undefined in IE8.
      var doc = nativeEventTarget.ownerDocument;

      if (doc) {
        win = doc.defaultView || doc.parentWindow;
      } else {
        win = window;
      }
    }

    var from;
    var to;

    if (isOutEvent) {
      from = targetInst;
      var related = nativeEvent.relatedTarget || nativeEvent.toElement;
      to = related ? getClosestInstanceFromNode(related) : null;

      if (to !== null) {
        var nearestMounted = getNearestMountedFiber(to);

        if (to !== nearestMounted || to.tag !== HostComponent && to.tag !== HostText) {
          to = null;
        }
      }
    } else {
      // Moving to a node from outside the window.
      from = null;
      to = targetInst;
    }

    if (from === to) {
      // Nothing pertains to our managed components.
      return null;
    }

    var eventInterface, leaveEventType, enterEventType, eventTypePrefix;

    if (topLevelType === TOP_MOUSE_OUT || topLevelType === TOP_MOUSE_OVER) {
      eventInterface = SyntheticMouseEvent;
      leaveEventType = eventTypes$2.mouseLeave;
      enterEventType = eventTypes$2.mouseEnter;
      eventTypePrefix = 'mouse';
    } else if (topLevelType === TOP_POINTER_OUT || topLevelType === TOP_POINTER_OVER) {
      eventInterface = SyntheticPointerEvent;
      leaveEventType = eventTypes$2.pointerLeave;
      enterEventType = eventTypes$2.pointerEnter;
      eventTypePrefix = 'pointer';
    }

    var fromNode = from == null ? win : getNodeFromInstance$1(from);
    var toNode = to == null ? win : getNodeFromInstance$1(to);
    var leave = eventInterface.getPooled(leaveEventType, from, nativeEvent, nativeEventTarget);
    leave.type = eventTypePrefix + 'leave';
    leave.target = fromNode;
    leave.relatedTarget = toNode;
    var enter = eventInterface.getPooled(enterEventType, to, nativeEvent, nativeEventTarget);
    enter.type = eventTypePrefix + 'enter';
    enter.target = toNode;
    enter.relatedTarget = fromNode;
    accumulateEnterLeaveDispatches(leave, enter, from, to); // If we are not processing the first ancestor, then we
    // should not process the same nativeEvent again, as we
    // will have already processed it in the first ancestor.

    if ((eventSystemFlags & IS_FIRST_ANCESTOR) === 0) {
      return [leave];
    }

    return [leave, enter];
  }
};

/**
 * inlined Object.is polyfill to avoid requiring consumers ship their own
 * https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/is
 */
function is(x, y) {
  return x === y && (x !== 0 || 1 / x === 1 / y) || x !== x && y !== y // eslint-disable-line no-self-compare
  ;
}

var objectIs = typeof Object.is === 'function' ? Object.is : is;

var hasOwnProperty$2 = Object.prototype.hasOwnProperty;
/**
 * Performs equality by iterating through keys on an object and returning false
 * when any key has values which are not strictly equal between the arguments.
 * Returns true when the values of all keys are strictly equal.
 */

function shallowEqual(objA, objB) {
  if (objectIs(objA, objB)) {
    return true;
  }

  if (typeof objA !== 'object' || objA === null || typeof objB !== 'object' || objB === null) {
    return false;
  }

  var keysA = Object.keys(objA);
  var keysB = Object.keys(objB);

  if (keysA.length !== keysB.length) {
    return false;
  } // Test for A's keys different from B.


  for (var i = 0; i < keysA.length; i++) {
    if (!hasOwnProperty$2.call(objB, keysA[i]) || !objectIs(objA[keysA[i]], objB[keysA[i]])) {
      return false;
    }
  }

  return true;
}

var skipSelectionChangeEvent = canUseDOM && 'documentMode' in document && document.documentMode <= 11;
var eventTypes$3 = {
  select: {
    phasedRegistrationNames: {
      bubbled: 'onSelect',
      captured: 'onSelectCapture'
    },
    dependencies: [TOP_BLUR, TOP_CONTEXT_MENU, TOP_DRAG_END, TOP_FOCUS, TOP_KEY_DOWN, TOP_KEY_UP, TOP_MOUSE_DOWN, TOP_MOUSE_UP, TOP_SELECTION_CHANGE]
  }
};
var activeElement$1 = null;
var activeElementInst$1 = null;
var lastSelection = null;
var mouseDown = false;
/**
 * Get an object which is a unique representation of the current selection.
 *
 * The return value will not be consistent across nodes or browsers, but
 * two identical selections on the same node will return identical objects.
 *
 * @param {DOMElement} node
 * @return {object}
 */

function getSelection$1(node) {
  if ('selectionStart' in node && hasSelectionCapabilities(node)) {
    return {
      start: node.selectionStart,
      end: node.selectionEnd
    };
  } else {
    var win = node.ownerDocument && node.ownerDocument.defaultView || window;
    var selection = win.getSelection();
    return {
      anchorNode: selection.anchorNode,
      anchorOffset: selection.anchorOffset,
      focusNode: selection.focusNode,
      focusOffset: selection.focusOffset
    };
  }
}
/**
 * Get document associated with the event target.
 *
 * @param {object} nativeEventTarget
 * @return {Document}
 */


function getEventTargetDocument(eventTarget) {
  return eventTarget.window === eventTarget ? eventTarget.document : eventTarget.nodeType === DOCUMENT_NODE ? eventTarget : eventTarget.ownerDocument;
}
/**
 * Poll selection to see whether it's changed.
 *
 * @param {object} nativeEvent
 * @param {object} nativeEventTarget
 * @return {?SyntheticEvent}
 */


function constructSelectEvent(nativeEvent, nativeEventTarget) {
  // Ensure we have the right element, and that the user is not dragging a
  // selection (this matches native `select` event behavior). In HTML5, select
  // fires only on input and textarea thus if there's no focused element we
  // won't dispatch.
  var doc = getEventTargetDocument(nativeEventTarget);

  if (mouseDown || activeElement$1 == null || activeElement$1 !== getActiveElement(doc)) {
    return null;
  } // Only fire when selection has actually changed.


  var currentSelection = getSelection$1(activeElement$1);

  if (!lastSelection || !shallowEqual(lastSelection, currentSelection)) {
    lastSelection = currentSelection;
    var syntheticEvent = SyntheticEvent.getPooled(eventTypes$3.select, activeElementInst$1, nativeEvent, nativeEventTarget);
    syntheticEvent.type = 'select';
    syntheticEvent.target = activeElement$1;
    accumulateTwoPhaseDispatches(syntheticEvent);
    return syntheticEvent;
  }

  return null;
}
/**
 * This plugin creates an `onSelect` event that normalizes select events
 * across form elements.
 *
 * Supported elements are:
 * - input (see `isTextInputElement`)
 * - textarea
 * - contentEditable
 *
 * This differs from native browser implementations in the following ways:
 * - Fires on contentEditable fields as well as inputs.
 * - Fires for collapsed selection.
 * - Fires after user input.
 */


var SelectEventPlugin = {
  eventTypes: eventTypes$3,
  extractEvents: function (topLevelType, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags, container) {
    var containerOrDoc = container || getEventTargetDocument(nativeEventTarget); // Track whether all listeners exists for this plugin. If none exist, we do
    // not extract events. See #3639.

    if (!containerOrDoc || !isListeningToAllDependencies('onSelect', containerOrDoc)) {
      return null;
    }

    var targetNode = targetInst ? getNodeFromInstance$1(targetInst) : window;

    switch (topLevelType) {
      // Track the input node that has focus.
      case TOP_FOCUS:
        if (isTextInputElement(targetNode) || targetNode.contentEditable === 'true') {
          activeElement$1 = targetNode;
          activeElementInst$1 = targetInst;
          lastSelection = null;
        }

        break;

      case TOP_BLUR:
        activeElement$1 = null;
        activeElementInst$1 = null;
        lastSelection = null;
        break;
      // Don't fire the event while the user is dragging. This matches the
      // semantics of the native select event.

      case TOP_MOUSE_DOWN:
        mouseDown = true;
        break;

      case TOP_CONTEXT_MENU:
      case TOP_MOUSE_UP:
      case TOP_DRAG_END:
        mouseDown = false;
        return constructSelectEvent(nativeEvent, nativeEventTarget);
      // Chrome and IE fire non-standard event when selection is changed (and
      // sometimes when it hasn't). IE's event fires out of order with respect
      // to key and input events on deletion, so we discard it.
      //
      // Firefox doesn't support selectionchange, so check selection status
      // after each key entry. The selection changes after keydown and before
      // keyup, but we check on keydown as well in the case of holding down a
      // key, when multiple keydown events are fired but only one keyup is.
      // This is also our approach for IE handling, for the reason above.

      case TOP_SELECTION_CHANGE:
        if (skipSelectionChangeEvent) {
          break;
        }

      // falls through

      case TOP_KEY_DOWN:
      case TOP_KEY_UP:
        return constructSelectEvent(nativeEvent, nativeEventTarget);
    }

    return null;
  }
};

/**
 * @interface Event
 * @see http://www.w3.org/TR/css3-animations/#AnimationEvent-interface
 * @see https://developer.mozilla.org/en-US/docs/Web/API/AnimationEvent
 */

var SyntheticAnimationEvent = SyntheticEvent.extend({
  animationName: null,
  elapsedTime: null,
  pseudoElement: null
});

/**
 * @interface Event
 * @see http://www.w3.org/TR/clipboard-apis/
 */

var SyntheticClipboardEvent = SyntheticEvent.extend({
  clipboardData: function (event) {
    return 'clipboardData' in event ? event.clipboardData : window.clipboardData;
  }
});

/**
 * @interface FocusEvent
 * @see http://www.w3.org/TR/DOM-Level-3-Events/
 */

var SyntheticFocusEvent = SyntheticUIEvent.extend({
  relatedTarget: null
});

/**
 * `charCode` represents the actual "character code" and is safe to use with
 * `String.fromCharCode`. As such, only keys that correspond to printable
 * characters produce a valid `charCode`, the only exception to this is Enter.
 * The Tab-key is considered non-printable and does not have a `charCode`,
 * presumably because it does not produce a tab-character in browsers.
 *
 * @param {object} nativeEvent Native browser event.
 * @return {number} Normalized `charCode` property.
 */
function getEventCharCode(nativeEvent) {
  var charCode;
  var keyCode = nativeEvent.keyCode;

  if ('charCode' in nativeEvent) {
    charCode = nativeEvent.charCode; // FF does not set `charCode` for the Enter-key, check against `keyCode`.

    if (charCode === 0 && keyCode === 13) {
      charCode = 13;
    }
  } else {
    // IE8 does not implement `charCode`, but `keyCode` has the correct value.
    charCode = keyCode;
  } // IE and Edge (on Windows) and Chrome / Safari (on Windows and Linux)
  // report Enter as charCode 10 when ctrl is pressed.


  if (charCode === 10) {
    charCode = 13;
  } // Some non-printable keys are reported in `charCode`/`keyCode`, discard them.
  // Must not discard the (non-)printable Enter-key.


  if (charCode >= 32 || charCode === 13) {
    return charCode;
  }

  return 0;
}

/**
 * Normalization of deprecated HTML5 `key` values
 * @see https://developer.mozilla.org/en-US/docs/Web/API/KeyboardEvent#Key_names
 */

var normalizeKey = {
  Esc: 'Escape',
  Spacebar: ' ',
  Left: 'ArrowLeft',
  Up: 'ArrowUp',
  Right: 'ArrowRight',
  Down: 'ArrowDown',
  Del: 'Delete',
  Win: 'OS',
  Menu: 'ContextMenu',
  Apps: 'ContextMenu',
  Scroll: 'ScrollLock',
  MozPrintableKey: 'Unidentified'
};
/**
 * Translation from legacy `keyCode` to HTML5 `key`
 * Only special keys supported, all others depend on keyboard layout or browser
 * @see https://developer.mozilla.org/en-US/docs/Web/API/KeyboardEvent#Key_names
 */

var translateToKey = {
  '8': 'Backspace',
  '9': 'Tab',
  '12': 'Clear',
  '13': 'Enter',
  '16': 'Shift',
  '17': 'Control',
  '18': 'Alt',
  '19': 'Pause',
  '20': 'CapsLock',
  '27': 'Escape',
  '32': ' ',
  '33': 'PageUp',
  '34': 'PageDown',
  '35': 'End',
  '36': 'Home',
  '37': 'ArrowLeft',
  '38': 'ArrowUp',
  '39': 'ArrowRight',
  '40': 'ArrowDown',
  '45': 'Insert',
  '46': 'Delete',
  '112': 'F1',
  '113': 'F2',
  '114': 'F3',
  '115': 'F4',
  '116': 'F5',
  '117': 'F6',
  '118': 'F7',
  '119': 'F8',
  '120': 'F9',
  '121': 'F10',
  '122': 'F11',
  '123': 'F12',
  '144': 'NumLock',
  '145': 'ScrollLock',
  '224': 'Meta'
};
/**
 * @param {object} nativeEvent Native browser event.
 * @return {string} Normalized `key` property.
 */

function getEventKey(nativeEvent) {
  if (nativeEvent.key) {
    // Normalize inconsistent values reported by browsers due to
    // implementations of a working draft specification.
    // FireFox implements `key` but returns `MozPrintableKey` for all
    // printable characters (normalized to `Unidentified`), ignore it.
    var key = normalizeKey[nativeEvent.key] || nativeEvent.key;

    if (key !== 'Unidentified') {
      return key;
    }
  } // Browser does not implement `key`, polyfill as much of it as we can.


  if (nativeEvent.type === 'keypress') {
    var charCode = getEventCharCode(nativeEvent); // The enter-key is technically both printable and non-printable and can
    // thus be captured by `keypress`, no other non-printable key should.

    return charCode === 13 ? 'Enter' : String.fromCharCode(charCode);
  }

  if (nativeEvent.type === 'keydown' || nativeEvent.type === 'keyup') {
    // While user keyboard layout determines the actual meaning of each
    // `keyCode` value, almost all function keys have a universal value.
    return translateToKey[nativeEvent.keyCode] || 'Unidentified';
  }

  return '';
}

/**
 * @interface KeyboardEvent
 * @see http://www.w3.org/TR/DOM-Level-3-Events/
 */

var SyntheticKeyboardEvent = SyntheticUIEvent.extend({
  key: getEventKey,
  location: null,
  ctrlKey: null,
  shiftKey: null,
  altKey: null,
  metaKey: null,
  repeat: null,
  locale: null,
  getModifierState: getEventModifierState,
  // Legacy Interface
  charCode: function (event) {
    // `charCode` is the result of a KeyPress event and represents the value of
    // the actual printable character.
    // KeyPress is deprecated, but its replacement is not yet final and not
    // implemented in any major browser. Only KeyPress has charCode.
    if (event.type === 'keypress') {
      return getEventCharCode(event);
    }

    return 0;
  },
  keyCode: function (event) {
    // `keyCode` is the result of a KeyDown/Up event and represents the value of
    // physical keyboard key.
    // The actual meaning of the value depends on the users' keyboard layout
    // which cannot be detected. Assuming that it is a US keyboard layout
    // provides a surprisingly accurate mapping for US and European users.
    // Due to this, it is left to the user to implement at this time.
    if (event.type === 'keydown' || event.type === 'keyup') {
      return event.keyCode;
    }

    return 0;
  },
  which: function (event) {
    // `which` is an alias for either `keyCode` or `charCode` depending on the
    // type of the event.
    if (event.type === 'keypress') {
      return getEventCharCode(event);
    }

    if (event.type === 'keydown' || event.type === 'keyup') {
      return event.keyCode;
    }

    return 0;
  }
});

/**
 * @interface DragEvent
 * @see http://www.w3.org/TR/DOM-Level-3-Events/
 */

var SyntheticDragEvent = SyntheticMouseEvent.extend({
  dataTransfer: null
});

/**
 * @interface TouchEvent
 * @see http://www.w3.org/TR/touch-events/
 */

var SyntheticTouchEvent = SyntheticUIEvent.extend({
  touches: null,
  targetTouches: null,
  changedTouches: null,
  altKey: null,
  metaKey: null,
  ctrlKey: null,
  shiftKey: null,
  getModifierState: getEventModifierState
});

/**
 * @interface Event
 * @see http://www.w3.org/TR/2009/WD-css3-transitions-20090320/#transition-events-
 * @see https://developer.mozilla.org/en-US/docs/Web/API/TransitionEvent
 */

var SyntheticTransitionEvent = SyntheticEvent.extend({
  propertyName: null,
  elapsedTime: null,
  pseudoElement: null
});

/**
 * @interface WheelEvent
 * @see http://www.w3.org/TR/DOM-Level-3-Events/
 */

var SyntheticWheelEvent = SyntheticMouseEvent.extend({
  deltaX: function (event) {
    return 'deltaX' in event ? event.deltaX : // Fallback to `wheelDeltaX` for Webkit and normalize (right is positive).
    'wheelDeltaX' in event ? -event.wheelDeltaX : 0;
  },
  deltaY: function (event) {
    return 'deltaY' in event ? event.deltaY : // Fallback to `wheelDeltaY` for Webkit and normalize (down is positive).
    'wheelDeltaY' in event ? -event.wheelDeltaY : // Fallback to `wheelDelta` for IE<9 and normalize (down is positive).
    'wheelDelta' in event ? -event.wheelDelta : 0;
  },
  deltaZ: null,
  // Browsers without "deltaMode" is reporting in raw wheel delta where one
  // notch on the scroll is always +/- 120, roughly equivalent to pixels.
  // A good approximation of DOM_DELTA_LINE (1) is 5% of viewport size or
  // ~40 pixels, for DOM_DELTA_SCREEN (2) it is 87.5% of viewport size.
  deltaMode: null
});

var knownHTMLTopLevelTypes = [TOP_ABORT, TOP_CANCEL, TOP_CAN_PLAY, TOP_CAN_PLAY_THROUGH, TOP_CLOSE, TOP_DURATION_CHANGE, TOP_EMPTIED, TOP_ENCRYPTED, TOP_ENDED, TOP_ERROR, TOP_INPUT, TOP_INVALID, TOP_LOAD, TOP_LOADED_DATA, TOP_LOADED_METADATA, TOP_LOAD_START, TOP_PAUSE, TOP_PLAY, TOP_PLAYING, TOP_PROGRESS, TOP_RATE_CHANGE, TOP_RESET, TOP_SEEKED, TOP_SEEKING, TOP_STALLED, TOP_SUBMIT, TOP_SUSPEND, TOP_TIME_UPDATE, TOP_TOGGLE, TOP_VOLUME_CHANGE, TOP_WAITING];
var SimpleEventPlugin = {
  // simpleEventPluginEventTypes gets populated from
  // the DOMEventProperties module.
  eventTypes: simpleEventPluginEventTypes,
  extractEvents: function (topLevelType, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags) {
    var dispatchConfig = topLevelEventsToDispatchConfig.get(topLevelType);

    if (!dispatchConfig) {
      return null;
    }

    var EventConstructor;

    switch (topLevelType) {
      case TOP_KEY_PRESS:
        // Firefox creates a keypress event for function keys too. This removes
        // the unwanted keypress events. Enter is however both printable and
        // non-printable. One would expect Tab to be as well (but it isn't).
        if (getEventCharCode(nativeEvent) === 0) {
          return null;
        }

      /* falls through */

      case TOP_KEY_DOWN:
      case TOP_KEY_UP:
        EventConstructor = SyntheticKeyboardEvent;
        break;

      case TOP_BLUR:
      case TOP_FOCUS:
        EventConstructor = SyntheticFocusEvent;
        break;

      case TOP_CLICK:
        // Firefox creates a click event on right mouse clicks. This removes the
        // unwanted click events.
        if (nativeEvent.button === 2) {
          return null;
        }

      /* falls through */

      case TOP_AUX_CLICK:
      case TOP_DOUBLE_CLICK:
      case TOP_MOUSE_DOWN:
      case TOP_MOUSE_MOVE:
      case TOP_MOUSE_UP: // TODO: Disabled elements should not respond to mouse events

      /* falls through */

      case TOP_MOUSE_OUT:
      case TOP_MOUSE_OVER:
      case TOP_CONTEXT_MENU:
        EventConstructor = SyntheticMouseEvent;
        break;

      case TOP_DRAG:
      case TOP_DRAG_END:
      case TOP_DRAG_ENTER:
      case TOP_DRAG_EXIT:
      case TOP_DRAG_LEAVE:
      case TOP_DRAG_OVER:
      case TOP_DRAG_START:
      case TOP_DROP:
        EventConstructor = SyntheticDragEvent;
        break;

      case TOP_TOUCH_CANCEL:
      case TOP_TOUCH_END:
      case TOP_TOUCH_MOVE:
      case TOP_TOUCH_START:
        EventConstructor = SyntheticTouchEvent;
        break;

      case TOP_ANIMATION_END:
      case TOP_ANIMATION_ITERATION:
      case TOP_ANIMATION_START:
        EventConstructor = SyntheticAnimationEvent;
        break;

      case TOP_TRANSITION_END:
        EventConstructor = SyntheticTransitionEvent;
        break;

      case TOP_SCROLL:
        EventConstructor = SyntheticUIEvent;
        break;

      case TOP_WHEEL:
        EventConstructor = SyntheticWheelEvent;
        break;

      case TOP_COPY:
      case TOP_CUT:
      case TOP_PASTE:
        EventConstructor = SyntheticClipboardEvent;
        break;

      case TOP_GOT_POINTER_CAPTURE:
      case TOP_LOST_POINTER_CAPTURE:
      case TOP_POINTER_CANCEL:
      case TOP_POINTER_DOWN:
      case TOP_POINTER_MOVE:
      case TOP_POINTER_OUT:
      case TOP_POINTER_OVER:
      case TOP_POINTER_UP:
        EventConstructor = SyntheticPointerEvent;
        break;

      default:
        {
          if (knownHTMLTopLevelTypes.indexOf(topLevelType) === -1) {
            error('SimpleEventPlugin: Unhandled event type, `%s`. This warning ' + 'is likely caused by a bug in React. Please file an issue.', topLevelType);
          }
        } // HTML Events
        // @see http://www.w3.org/TR/html5/index.html#events-0


        EventConstructor = SyntheticEvent;
        break;
    }

    var event = EventConstructor.getPooled(dispatchConfig, targetInst, nativeEvent, nativeEventTarget);
    accumulateTwoPhaseDispatches(event);
    return event;
  }
};

/**
 * Specifies a deterministic ordering of `EventPlugin`s. A convenient way to
 * reason about plugins, without having to package every one of them. This
 * is better than having plugins be ordered in the same order that they
 * are injected because that ordering would be influenced by the packaging order.
 * `ResponderEventPlugin` must occur before `SimpleEventPlugin` so that
 * preventing default on events is convenient in `SimpleEventPlugin` handlers.
 */

var DOMEventPluginOrder = ['ResponderEventPlugin', 'SimpleEventPlugin', 'EnterLeaveEventPlugin', 'ChangeEventPlugin', 'SelectEventPlugin', 'BeforeInputEventPlugin'];
/**
 * Inject modules for resolving DOM hierarchy and plugin ordering.
 */

injectEventPluginOrder(DOMEventPluginOrder);
setComponentTree(getFiberCurrentPropsFromNode$1, getInstanceFromNode$1, getNodeFromInstance$1);
/**
 * Some important event plugins included by default (without having to require
 * them).
 */

injectEventPluginsByName({
  SimpleEventPlugin: SimpleEventPlugin,
  EnterLeaveEventPlugin: EnterLeaveEventPlugin,
  ChangeEventPlugin: ChangeEventPlugin,
  SelectEventPlugin: SelectEventPlugin,
  BeforeInputEventPlugin: BeforeInputEventPlugin
});

// Prefix measurements so that it's possible to filter them.
// Longer prefixes are hard to read in DevTools.
var reactEmoji = "\u269B";
var warningEmoji = "\u26D4";
var supportsUserTiming = typeof performance !== 'undefined' && typeof performance.mark === 'function' && typeof performance.clearMarks === 'function' && typeof performance.measure === 'function' && typeof performance.clearMeasures === 'function'; // Keep track of current fiber so that we know the path to unwind on pause.
// TODO: this looks the same as nextUnitOfWork in scheduler. Can we unify them?

var currentFiber = null; // If we're in the middle of user code, which fiber and method is it?
// Reusing `currentFiber` would be confusing for this because user code fiber
// can change during commit phase too, but we don't need to unwind it (since
// lifecycles in the commit phase don't resemble a tree).

var currentPhase = null;
var currentPhaseFiber = null; // Did lifecycle hook schedule an update? This is often a performance problem,
// so we will keep track of it, and include it in the report.
// Track commits caused by cascading updates.

var isCommitting = false;
var hasScheduledUpdateInCurrentCommit = false;
var hasScheduledUpdateInCurrentPhase = false;
var commitCountInCurrentWorkLoop = 0;
var effectCountInCurrentCommit = 0;
// to avoid stretch the commit phase with measurement overhead.

var labelsInCurrentCommit = new Set();

var formatMarkName = function (markName) {
  return reactEmoji + " " + markName;
};

var formatLabel = function (label, warning) {
  var prefix = warning ? warningEmoji + " " : reactEmoji + " ";
  var suffix = warning ? " Warning: " + warning : '';
  return "" + prefix + label + suffix;
};

var beginMark = function (markName) {
  performance.mark(formatMarkName(markName));
};

var clearMark = function (markName) {
  performance.clearMarks(formatMarkName(markName));
};

var endMark = function (label, markName, warning) {
  var formattedMarkName = formatMarkName(markName);
  var formattedLabel = formatLabel(label, warning);

  try {
    performance.measure(formattedLabel, formattedMarkName);
  } catch (err) {} // If previous mark was missing for some reason, this will throw.
  // This could only happen if React crashed in an unexpected place earlier.
  // Don't pile on with more errors.
  // Clear marks immediately to avoid growing buffer.


  performance.clearMarks(formattedMarkName);
  performance.clearMeasures(formattedLabel);
};

var getFiberMarkName = function (label, debugID) {
  return label + " (#" + debugID + ")";
};

var getFiberLabel = function (componentName, isMounted, phase) {
  if (phase === null) {
    // These are composite component total time measurements.
    return componentName + " [" + (isMounted ? 'update' : 'mount') + "]";
  } else {
    // Composite component methods.
    return componentName + "." + phase;
  }
};

var beginFiberMark = function (fiber, phase) {
  var componentName = getComponentName(fiber.type) || 'Unknown';
  var debugID = fiber._debugID;
  var isMounted = fiber.alternate !== null;
  var label = getFiberLabel(componentName, isMounted, phase);

  if (isCommitting && labelsInCurrentCommit.has(label)) {
    // During the commit phase, we don't show duplicate labels because
    // there is a fixed overhead for every measurement, and we don't
    // want to stretch the commit phase beyond necessary.
    return false;
  }

  labelsInCurrentCommit.add(label);
  var markName = getFiberMarkName(label, debugID);
  beginMark(markName);
  return true;
};

var clearFiberMark = function (fiber, phase) {
  var componentName = getComponentName(fiber.type) || 'Unknown';
  var debugID = fiber._debugID;
  var isMounted = fiber.alternate !== null;
  var label = getFiberLabel(componentName, isMounted, phase);
  var markName = getFiberMarkName(label, debugID);
  clearMark(markName);
};

var endFiberMark = function (fiber, phase, warning) {
  var componentName = getComponentName(fiber.type) || 'Unknown';
  var debugID = fiber._debugID;
  var isMounted = fiber.alternate !== null;
  var label = getFiberLabel(componentName, isMounted, phase);
  var markName = getFiberMarkName(label, debugID);
  endMark(label, markName, warning);
};

var shouldIgnoreFiber = function (fiber) {
  // Host components should be skipped in the timeline.
  // We could check typeof fiber.type, but does this work with RN?
  switch (fiber.tag) {
    case HostRoot:
    case HostComponent:
    case HostText:
    case HostPortal:
    case Fragment:
    case ContextProvider:
    case ContextConsumer:
    case Mode:
      return true;

    default:
      return false;
  }
};

var clearPendingPhaseMeasurement = function () {
  if (currentPhase !== null && currentPhaseFiber !== null) {
    clearFiberMark(currentPhaseFiber, currentPhase);
  }

  currentPhaseFiber = null;
  currentPhase = null;
  hasScheduledUpdateInCurrentPhase = false;
};

var pauseTimers = function () {
  // Stops all currently active measurements so that they can be resumed
  // if we continue in a later deferred loop from the same unit of work.
  var fiber = currentFiber;

  while (fiber) {
    if (fiber._debugIsCurrentlyTiming) {
      endFiberMark(fiber, null, null);
    }

    fiber = fiber.return;
  }
};

var resumeTimersRecursively = function (fiber) {
  if (fiber.return !== null) {
    resumeTimersRecursively(fiber.return);
  }

  if (fiber._debugIsCurrentlyTiming) {
    beginFiberMark(fiber, null);
  }
};

var resumeTimers = function () {
  // Resumes all measurements that were active during the last deferred loop.
  if (currentFiber !== null) {
    resumeTimersRecursively(currentFiber);
  }
};

function recordEffect() {
  {
    effectCountInCurrentCommit++;
  }
}
function recordScheduleUpdate() {
  {
    if (isCommitting) {
      hasScheduledUpdateInCurrentCommit = true;
    }

    if (currentPhase !== null && currentPhase !== 'componentWillMount' && currentPhase !== 'componentWillReceiveProps') {
      hasScheduledUpdateInCurrentPhase = true;
    }
  }
}
function startWorkTimer(fiber) {
  {
    if (!supportsUserTiming || shouldIgnoreFiber(fiber)) {
      return;
    } // If we pause, this is the fiber to unwind from.


    currentFiber = fiber;

    if (!beginFiberMark(fiber, null)) {
      return;
    }

    fiber._debugIsCurrentlyTiming = true;
  }
}
function cancelWorkTimer(fiber) {
  {
    if (!supportsUserTiming || shouldIgnoreFiber(fiber)) {
      return;
    } // Remember we shouldn't complete measurement for this fiber.
    // Otherwise flamechart will be deep even for small updates.


    fiber._debugIsCurrentlyTiming = false;
    clearFiberMark(fiber, null);
  }
}
function stopWorkTimer(fiber) {
  {
    if (!supportsUserTiming || shouldIgnoreFiber(fiber)) {
      return;
    } // If we pause, its parent is the fiber to unwind from.


    currentFiber = fiber.return;

    if (!fiber._debugIsCurrentlyTiming) {
      return;
    }

    fiber._debugIsCurrentlyTiming = false;
    endFiberMark(fiber, null, null);
  }
}
function stopFailedWorkTimer(fiber) {
  {
    if (!supportsUserTiming || shouldIgnoreFiber(fiber)) {
      return;
    } // If we pause, its parent is the fiber to unwind from.


    currentFiber = fiber.return;

    if (!fiber._debugIsCurrentlyTiming) {
      return;
    }

    fiber._debugIsCurrentlyTiming = false;
    var warning = fiber.tag === SuspenseComponent ? 'Rendering was suspended' : 'An error was thrown inside this error boundary';
    endFiberMark(fiber, null, warning);
  }
}
function startPhaseTimer(fiber, phase) {
  {
    if (!supportsUserTiming) {
      return;
    }

    clearPendingPhaseMeasurement();

    if (!beginFiberMark(fiber, phase)) {
      return;
    }

    currentPhaseFiber = fiber;
    currentPhase = phase;
  }
}
function stopPhaseTimer() {
  {
    if (!supportsUserTiming) {
      return;
    }

    if (currentPhase !== null && currentPhaseFiber !== null) {
      var warning = hasScheduledUpdateInCurrentPhase ? 'Scheduled a cascading update' : null;
      endFiberMark(currentPhaseFiber, currentPhase, warning);
    }

    currentPhase = null;
    currentPhaseFiber = null;
  }
}
function startWorkLoopTimer(nextUnitOfWork) {
  {
    currentFiber = nextUnitOfWork;

    if (!supportsUserTiming) {
      return;
    }

    commitCountInCurrentWorkLoop = 0; // This is top level call.
    // Any other measurements are performed within.

    beginMark('(React Tree Reconciliation)'); // Resume any measurements that were in progress during the last loop.

    resumeTimers();
  }
}
function stopWorkLoopTimer(interruptedBy, didCompleteRoot) {
  {
    if (!supportsUserTiming) {
      return;
    }

    var warning = null;

    if (interruptedBy !== null) {
      if (interruptedBy.tag === HostRoot) {
        warning = 'A top-level update interrupted the previous render';
      } else {
        var componentName = getComponentName(interruptedBy.type) || 'Unknown';
        warning = "An update to " + componentName + " interrupted the previous render";
      }
    } else if (commitCountInCurrentWorkLoop > 1) {
      warning = 'There were cascading updates';
    }

    commitCountInCurrentWorkLoop = 0;
    var label = didCompleteRoot ? '(React Tree Reconciliation: Completed Root)' : '(React Tree Reconciliation: Yielded)'; // Pause any measurements until the next loop.

    pauseTimers();
    endMark(label, '(React Tree Reconciliation)', warning);
  }
}
function startCommitTimer() {
  {
    if (!supportsUserTiming) {
      return;
    }

    isCommitting = true;
    hasScheduledUpdateInCurrentCommit = false;
    labelsInCurrentCommit.clear();
    beginMark('(Committing Changes)');
  }
}
function stopCommitTimer() {
  {
    if (!supportsUserTiming) {
      return;
    }

    var warning = null;

    if (hasScheduledUpdateInCurrentCommit) {
      warning = 'Lifecycle hook scheduled a cascading update';
    } else if (commitCountInCurrentWorkLoop > 0) {
      warning = 'Caused by a cascading update in earlier commit';
    }

    hasScheduledUpdateInCurrentCommit = false;
    commitCountInCurrentWorkLoop++;
    isCommitting = false;
    labelsInCurrentCommit.clear();
    endMark('(Committing Changes)', '(Committing Changes)', warning);
  }
}
function startCommitSnapshotEffectsTimer() {
  {
    if (!supportsUserTiming) {
      return;
    }

    effectCountInCurrentCommit = 0;
    beginMark('(Committing Snapshot Effects)');
  }
}
function stopCommitSnapshotEffectsTimer() {
  {
    if (!supportsUserTiming) {
      return;
    }

    var count = effectCountInCurrentCommit;
    effectCountInCurrentCommit = 0;
    endMark("(Committing Snapshot Effects: " + count + " Total)", '(Committing Snapshot Effects)', null);
  }
}
function startCommitHostEffectsTimer() {
  {
    if (!supportsUserTiming) {
      return;
    }

    effectCountInCurrentCommit = 0;
    beginMark('(Committing Host Effects)');
  }
}
function stopCommitHostEffectsTimer() {
  {
    if (!supportsUserTiming) {
      return;
    }

    var count = effectCountInCurrentCommit;
    effectCountInCurrentCommit = 0;
    endMark("(Committing Host Effects: " + count + " Total)", '(Committing Host Effects)', null);
  }
}
function startCommitLifeCyclesTimer() {
  {
    if (!supportsUserTiming) {
      return;
    }

    effectCountInCurrentCommit = 0;
    beginMark('(Calling Lifecycle Methods)');
  }
}
function stopCommitLifeCyclesTimer() {
  {
    if (!supportsUserTiming) {
      return;
    }

    var count = effectCountInCurrentCommit;
    effectCountInCurrentCommit = 0;
    endMark("(Calling Lifecycle Methods: " + count + " Total)", '(Calling Lifecycle Methods)', null);
  }
}

var valueStack = [];
var fiberStack;

{
  fiberStack = [];
}

var index = -1;

function createCursor(defaultValue) {
  return {
    current: defaultValue
  };
}

function pop(cursor, fiber) {
  if (index < 0) {
    {
      error('Unexpected pop.');
    }

    return;
  }

  {
    if (fiber !== fiberStack[index]) {
      error('Unexpected Fiber popped.');
    }
  }

  cursor.current = valueStack[index];
  valueStack[index] = null;

  {
    fiberStack[index] = null;
  }

  index--;
}

function push(cursor, value, fiber) {
  index++;
  valueStack[index] = cursor.current;

  {
    fiberStack[index] = fiber;
  }

  cursor.current = value;
}

var warnedAboutMissingGetChildContext;

{
  warnedAboutMissingGetChildContext = {};
}

var emptyContextObject = {};

{
  Object.freeze(emptyContextObject);
} // A cursor to the current merged context object on the stack.


var contextStackCursor = createCursor(emptyContextObject); // A cursor to a boolean indicating whether the context has changed.

var didPerformWorkStackCursor = createCursor(false); // Keep track of the previous context object that was on the stack.
// We use this to get access to the parent context after we have already
// pushed the next context provider, and now need to merge their contexts.

var previousContext = emptyContextObject;

function getUnmaskedContext(workInProgress, Component, didPushOwnContextIfProvider) {
  {
    if (didPushOwnContextIfProvider && isContextProvider(Component)) {
      // If the fiber is a context provider itself, when we read its context
      // we may have already pushed its own child context on the stack. A context
      // provider should not "see" its own child context. Therefore we read the
      // previous (parent) context instead for a context provider.
      return previousContext;
    }

    return contextStackCursor.current;
  }
}

function cacheContext(workInProgress, unmaskedContext, maskedContext) {
  {
    var instance = workInProgress.stateNode;
    instance.__reactInternalMemoizedUnmaskedChildContext = unmaskedContext;
    instance.__reactInternalMemoizedMaskedChildContext = maskedContext;
  }
}

function getMaskedContext(workInProgress, unmaskedContext) {
  {
    var type = workInProgress.type;
    var contextTypes = type.contextTypes;

    if (!contextTypes) {
      return emptyContextObject;
    } // Avoid recreating masked context unless unmasked context has changed.
    // Failing to do this will result in unnecessary calls to componentWillReceiveProps.
    // This may trigger infinite loops if componentWillReceiveProps calls setState.


    var instance = workInProgress.stateNode;

    if (instance && instance.__reactInternalMemoizedUnmaskedChildContext === unmaskedContext) {
      return instance.__reactInternalMemoizedMaskedChildContext;
    }

    var context = {};

    for (var key in contextTypes) {
      context[key] = unmaskedContext[key];
    }

    {
      var name = getComponentName(type) || 'Unknown';
      checkPropTypes(contextTypes, context, 'context', name, getCurrentFiberStackInDev);
    } // Cache unmasked context so we can avoid recreating masked context unless necessary.
    // Context is created before the class component is instantiated so check for instance.


    if (instance) {
      cacheContext(workInProgress, unmaskedContext, context);
    }

    return context;
  }
}

function hasContextChanged() {
  {
    return didPerformWorkStackCursor.current;
  }
}

function isContextProvider(type) {
  {
    var childContextTypes = type.childContextTypes;
    return childContextTypes !== null && childContextTypes !== undefined;
  }
}

function popContext(fiber) {
  {
    pop(didPerformWorkStackCursor, fiber);
    pop(contextStackCursor, fiber);
  }
}

function popTopLevelContextObject(fiber) {
  {
    pop(didPerformWorkStackCursor, fiber);
    pop(contextStackCursor, fiber);
  }
}

function pushTopLevelContextObject(fiber, context, didChange) {
  {
    if (!(contextStackCursor.current === emptyContextObject)) {
      {
        throw Error( "Unexpected context found on stack. This error is likely caused by a bug in React. Please file an issue." );
      }
    }

    push(contextStackCursor, context, fiber);
    push(didPerformWorkStackCursor, didChange, fiber);
  }
}

function processChildContext(fiber, type, parentContext) {
  {
    var instance = fiber.stateNode;
    var childContextTypes = type.childContextTypes; // TODO (bvaughn) Replace this behavior with an invariant() in the future.
    // It has only been added in Fiber to match the (unintentional) behavior in Stack.

    if (typeof instance.getChildContext !== 'function') {
      {
        var componentName = getComponentName(type) || 'Unknown';

        if (!warnedAboutMissingGetChildContext[componentName]) {
          warnedAboutMissingGetChildContext[componentName] = true;

          error('%s.childContextTypes is specified but there is no getChildContext() method ' + 'on the instance. You can either define getChildContext() on %s or remove ' + 'childContextTypes from it.', componentName, componentName);
        }
      }

      return parentContext;
    }

    var childContext;
    startPhaseTimer(fiber, 'getChildContext');
    childContext = instance.getChildContext();
    stopPhaseTimer();

    for (var contextKey in childContext) {
      if (!(contextKey in childContextTypes)) {
        {
          throw Error( (getComponentName(type) || 'Unknown') + ".getChildContext(): key \"" + contextKey + "\" is not defined in childContextTypes." );
        }
      }
    }

    {
      var name = getComponentName(type) || 'Unknown';
      checkPropTypes(childContextTypes, childContext, 'child context', name, // In practice, there is one case in which we won't get a stack. It's when
      // somebody calls unstable_renderSubtreeIntoContainer() and we process
      // context from the parent component instance. The stack will be missing
      // because it's outside of the reconciliation, and so the pointer has not
      // been set. This is rare and doesn't matter. We'll also remove that API.
      getCurrentFiberStackInDev);
    }

    return _assign({}, parentContext, {}, childContext);
  }
}

function pushContextProvider(workInProgress) {
  {
    var instance = workInProgress.stateNode; // We push the context as early as possible to ensure stack integrity.
    // If the instance does not exist yet, we will push null at first,
    // and replace it on the stack later when invalidating the context.

    var memoizedMergedChildContext = instance && instance.__reactInternalMemoizedMergedChildContext || emptyContextObject; // Remember the parent context so we can merge with it later.
    // Inherit the parent's did-perform-work value to avoid inadvertently blocking updates.

    previousContext = contextStackCursor.current;
    push(contextStackCursor, memoizedMergedChildContext, workInProgress);
    push(didPerformWorkStackCursor, didPerformWorkStackCursor.current, workInProgress);
    return true;
  }
}

function invalidateContextProvider(workInProgress, type, didChange) {
  {
    var instance = workInProgress.stateNode;

    if (!instance) {
      {
        throw Error( "Expected to have an instance by this point. This error is likely caused by a bug in React. Please file an issue." );
      }
    }

    if (didChange) {
      // Merge parent and own context.
      // Skip this if we're not updating due to sCU.
      // This avoids unnecessarily recomputing memoized values.
      var mergedContext = processChildContext(workInProgress, type, previousContext);
      instance.__reactInternalMemoizedMergedChildContext = mergedContext; // Replace the old (or empty) context with the new one.
      // It is important to unwind the context in the reverse order.

      pop(didPerformWorkStackCursor, workInProgress);
      pop(contextStackCursor, workInProgress); // Now push the new context and mark that it has changed.

      push(contextStackCursor, mergedContext, workInProgress);
      push(didPerformWorkStackCursor, didChange, workInProgress);
    } else {
      pop(didPerformWorkStackCursor, workInProgress);
      push(didPerformWorkStackCursor, didChange, workInProgress);
    }
  }
}

function findCurrentUnmaskedContext(fiber) {
  {
    // Currently this is only used with renderSubtreeIntoContainer; not sure if it
    // makes sense elsewhere
    if (!(isFiberMounted(fiber) && fiber.tag === ClassComponent)) {
      {
        throw Error( "Expected subtree parent to be a mounted class component. This error is likely caused by a bug in React. Please file an issue." );
      }
    }

    var node = fiber;

    do {
      switch (node.tag) {
        case HostRoot:
          return node.stateNode.context;

        case ClassComponent:
          {
            var Component = node.type;

            if (isContextProvider(Component)) {
              return node.stateNode.__reactInternalMemoizedMergedChildContext;
            }

            break;
          }
      }

      node = node.return;
    } while (node !== null);

    {
      {
        throw Error( "Found unexpected detached subtree parent. This error is likely caused by a bug in React. Please file an issue." );
      }
    }
  }
}

var LegacyRoot = 0;
var BlockingRoot = 1;
var ConcurrentRoot = 2;

var Scheduler_runWithPriority = Scheduler.unstable_runWithPriority,
    Scheduler_scheduleCallback = Scheduler.unstable_scheduleCallback,
    Scheduler_cancelCallback = Scheduler.unstable_cancelCallback,
    Scheduler_shouldYield = Scheduler.unstable_shouldYield,
    Scheduler_requestPaint = Scheduler.unstable_requestPaint,
    Scheduler_now = Scheduler.unstable_now,
    Scheduler_getCurrentPriorityLevel = Scheduler.unstable_getCurrentPriorityLevel,
    Scheduler_ImmediatePriority = Scheduler.unstable_ImmediatePriority,
    Scheduler_UserBlockingPriority = Scheduler.unstable_UserBlockingPriority,
    Scheduler_NormalPriority = Scheduler.unstable_NormalPriority,
    Scheduler_LowPriority = Scheduler.unstable_LowPriority,
    Scheduler_IdlePriority = Scheduler.unstable_IdlePriority;

{
  // Provide explicit error message when production+profiling bundle of e.g.
  // react-dom is used with production (non-profiling) bundle of
  // scheduler/tracing
  if (!(tracing.__interactionsRef != null && tracing.__interactionsRef.current != null)) {
    {
      throw Error( "It is not supported to run the profiling version of a renderer (for example, `react-dom/profiling`) without also replacing the `scheduler/tracing` module with `scheduler/tracing-profiling`. Your bundler might have a setting for aliasing both modules. Learn more at http://fb.me/react-profiling" );
    }
  }
}

var fakeCallbackNode = {}; // Except for NoPriority, these correspond to Scheduler priorities. We use
// ascending numbers so we can compare them like numbers. They start at 90 to
// avoid clashing with Scheduler's priorities.

var ImmediatePriority = 99;
var UserBlockingPriority$1 = 98;
var NormalPriority = 97;
var LowPriority = 96;
var IdlePriority = 95; // NoPriority is the absence of priority. Also React-only.

var NoPriority = 90;
var shouldYield = Scheduler_shouldYield;
var requestPaint = // Fall back gracefully if we're running an older version of Scheduler.
Scheduler_requestPaint !== undefined ? Scheduler_requestPaint : function () {};
var syncQueue = null;
var immediateQueueCallbackNode = null;
var isFlushingSyncQueue = false;
var initialTimeMs = Scheduler_now(); // If the initial timestamp is reasonably small, use Scheduler's `now` directly.
// This will be the case for modern browsers that support `performance.now`. In
// older browsers, Scheduler falls back to `Date.now`, which returns a Unix
// timestamp. In that case, subtract the module initialization time to simulate
// the behavior of performance.now and keep our times small enough to fit
// within 32 bits.
// TODO: Consider lifting this into Scheduler.

var now = initialTimeMs < 10000 ? Scheduler_now : function () {
  return Scheduler_now() - initialTimeMs;
};
function getCurrentPriorityLevel() {
  switch (Scheduler_getCurrentPriorityLevel()) {
    case Scheduler_ImmediatePriority:
      return ImmediatePriority;

    case Scheduler_UserBlockingPriority:
      return UserBlockingPriority$1;

    case Scheduler_NormalPriority:
      return NormalPriority;

    case Scheduler_LowPriority:
      return LowPriority;

    case Scheduler_IdlePriority:
      return IdlePriority;

    default:
      {
        {
          throw Error( "Unknown priority level." );
        }
      }

  }
}

function reactPriorityToSchedulerPriority(reactPriorityLevel) {
  switch (reactPriorityLevel) {
    case ImmediatePriority:
      return Scheduler_ImmediatePriority;

    case UserBlockingPriority$1:
      return Scheduler_UserBlockingPriority;

    case NormalPriority:
      return Scheduler_NormalPriority;

    case LowPriority:
      return Scheduler_LowPriority;

    case IdlePriority:
      return Scheduler_IdlePriority;

    default:
      {
        {
          throw Error( "Unknown priority level." );
        }
      }

  }
}

function runWithPriority$1(reactPriorityLevel, fn) {
  var priorityLevel = reactPriorityToSchedulerPriority(reactPriorityLevel);
  return Scheduler_runWithPriority(priorityLevel, fn);
}
function scheduleCallback(reactPriorityLevel, callback, options) {
  var priorityLevel = reactPriorityToSchedulerPriority(reactPriorityLevel);
  return Scheduler_scheduleCallback(priorityLevel, callback, options);
}
function scheduleSyncCallback(callback) {
  // Push this callback into an internal queue. We'll flush these either in
  // the next tick, or earlier if something calls `flushSyncCallbackQueue`.
  if (syncQueue === null) {
    syncQueue = [callback]; // Flush the queue in the next tick, at the earliest.

    immediateQueueCallbackNode = Scheduler_scheduleCallback(Scheduler_ImmediatePriority, flushSyncCallbackQueueImpl);
  } else {
    // Push onto existing queue. Don't need to schedule a callback because
    // we already scheduled one when we created the queue.
    syncQueue.push(callback);
  }

  return fakeCallbackNode;
}
function cancelCallback(callbackNode) {
  if (callbackNode !== fakeCallbackNode) {
    Scheduler_cancelCallback(callbackNode);
  }
}
function flushSyncCallbackQueue() {
  if (immediateQueueCallbackNode !== null) {
    var node = immediateQueueCallbackNode;
    immediateQueueCallbackNode = null;
    Scheduler_cancelCallback(node);
  }

  flushSyncCallbackQueueImpl();
}

function flushSyncCallbackQueueImpl() {
  if (!isFlushingSyncQueue && syncQueue !== null) {
    // Prevent re-entrancy.
    isFlushingSyncQueue = true;
    var i = 0;

    try {
      var _isSync = true;
      var queue = syncQueue;
      runWithPriority$1(ImmediatePriority, function () {
        for (; i < queue.length; i++) {
          var callback = queue[i];

          do {
            callback = callback(_isSync);
          } while (callback !== null);
        }
      });
      syncQueue = null;
    } catch (error) {
      // If something throws, leave the remaining callbacks on the queue.
      if (syncQueue !== null) {
        syncQueue = syncQueue.slice(i + 1);
      } // Resume flushing in the next tick


      Scheduler_scheduleCallback(Scheduler_ImmediatePriority, flushSyncCallbackQueue);
      throw error;
    } finally {
      isFlushingSyncQueue = false;
    }
  }
}

var NoMode = 0;
var StrictMode = 1; // TODO: Remove BlockingMode and ConcurrentMode by reading from the root
// tag instead

var BlockingMode = 2;
var ConcurrentMode = 4;
var ProfileMode = 8;

// Max 31 bit integer. The max integer size in V8 for 32-bit systems.
// Math.pow(2, 30) - 1
// 0b111111111111111111111111111111
var MAX_SIGNED_31_BIT_INT = 1073741823;

var NoWork = 0; // TODO: Think of a better name for Never. The key difference with Idle is that
// Never work can be committed in an inconsistent state without tearing the UI.
// The main example is offscreen content, like a hidden subtree. So one possible
// name is Offscreen. However, it also includes dehydrated Suspense boundaries,
// which are inconsistent in the sense that they haven't finished yet, but
// aren't visibly inconsistent because the server rendered HTML matches what the
// hydrated tree would look like.

var Never = 1; // Idle is slightly higher priority than Never. It must completely finish in
// order to be consistent.

var Idle = 2; // Continuous Hydration is slightly higher than Idle and is used to increase
// priority of hover targets.

var ContinuousHydration = 3;
var Sync = MAX_SIGNED_31_BIT_INT;
var Batched = Sync - 1;
var UNIT_SIZE = 10;
var MAGIC_NUMBER_OFFSET = Batched - 1; // 1 unit of expiration time represents 10ms.

function msToExpirationTime(ms) {
  // Always subtract from the offset so that we don't clash with the magic number for NoWork.
  return MAGIC_NUMBER_OFFSET - (ms / UNIT_SIZE | 0);
}
function expirationTimeToMs(expirationTime) {
  return (MAGIC_NUMBER_OFFSET - expirationTime) * UNIT_SIZE;
}

function ceiling(num, precision) {
  return ((num / precision | 0) + 1) * precision;
}

function computeExpirationBucket(currentTime, expirationInMs, bucketSizeMs) {
  return MAGIC_NUMBER_OFFSET - ceiling(MAGIC_NUMBER_OFFSET - currentTime + expirationInMs / UNIT_SIZE, bucketSizeMs / UNIT_SIZE);
} // TODO: This corresponds to Scheduler's NormalPriority, not LowPriority. Update
// the names to reflect.


var LOW_PRIORITY_EXPIRATION = 5000;
var LOW_PRIORITY_BATCH_SIZE = 250;
function computeAsyncExpiration(currentTime) {
  return computeExpirationBucket(currentTime, LOW_PRIORITY_EXPIRATION, LOW_PRIORITY_BATCH_SIZE);
}
function computeSuspenseExpiration(currentTime, timeoutMs) {
  // TODO: Should we warn if timeoutMs is lower than the normal pri expiration time?
  return computeExpirationBucket(currentTime, timeoutMs, LOW_PRIORITY_BATCH_SIZE);
} // We intentionally set a higher expiration time for interactive updates in
// dev than in production.
//
// If the main thread is being blocked so long that you hit the expiration,
// it's a problem that could be solved with better scheduling.
//
// People will be more likely to notice this and fix it with the long
// expiration time in development.
//
// In production we opt for better UX at the risk of masking scheduling
// problems, by expiring fast.

var HIGH_PRIORITY_EXPIRATION =  500 ;
var HIGH_PRIORITY_BATCH_SIZE = 100;
function computeInteractiveExpiration(currentTime) {
  return computeExpirationBucket(currentTime, HIGH_PRIORITY_EXPIRATION, HIGH_PRIORITY_BATCH_SIZE);
}
function inferPriorityFromExpirationTime(currentTime, expirationTime) {
  if (expirationTime === Sync) {
    return ImmediatePriority;
  }

  if (expirationTime === Never || expirationTime === Idle) {
    return IdlePriority;
  }

  var msUntil = expirationTimeToMs(expirationTime) - expirationTimeToMs(currentTime);

  if (msUntil <= 0) {
    return ImmediatePriority;
  }

  if (msUntil <= HIGH_PRIORITY_EXPIRATION + HIGH_PRIORITY_BATCH_SIZE) {
    return UserBlockingPriority$1;
  }

  if (msUntil <= LOW_PRIORITY_EXPIRATION + LOW_PRIORITY_BATCH_SIZE) {
    return NormalPriority;
  } // TODO: Handle LowPriority
  // Assume anything lower has idle priority


  return IdlePriority;
}

var ReactStrictModeWarnings = {
  recordUnsafeLifecycleWarnings: function (fiber, instance) {},
  flushPendingUnsafeLifecycleWarnings: function () {},
  recordLegacyContextWarning: function (fiber, instance) {},
  flushLegacyContextWarning: function () {},
  discardPendingWarnings: function () {}
};

{
  var findStrictRoot = function (fiber) {
    var maybeStrictRoot = null;
    var node = fiber;

    while (node !== null) {
      if (node.mode & StrictMode) {
        maybeStrictRoot = node;
      }

      node = node.return;
    }

    return maybeStrictRoot;
  };

  var setToSortedString = function (set) {
    var array = [];
    set.forEach(function (value) {
      array.push(value);
    });
    return array.sort().join(', ');
  };

  var pendingComponentWillMountWarnings = [];
  var pendingUNSAFE_ComponentWillMountWarnings = [];
  var pendingComponentWillReceivePropsWarnings = [];
  var pendingUNSAFE_ComponentWillReceivePropsWarnings = [];
  var pendingComponentWillUpdateWarnings = [];
  var pendingUNSAFE_ComponentWillUpdateWarnings = []; // Tracks components we have already warned about.

  var didWarnAboutUnsafeLifecycles = new Set();

  ReactStrictModeWarnings.recordUnsafeLifecycleWarnings = function (fiber, instance) {
    // Dedup strategy: Warn once per component.
    if (didWarnAboutUnsafeLifecycles.has(fiber.type)) {
      return;
    }

    if (typeof instance.componentWillMount === 'function' && // Don't warn about react-lifecycles-compat polyfilled components.
    instance.componentWillMount.__suppressDeprecationWarning !== true) {
      pendingComponentWillMountWarnings.push(fiber);
    }

    if (fiber.mode & StrictMode && typeof instance.UNSAFE_componentWillMount === 'function') {
      pendingUNSAFE_ComponentWillMountWarnings.push(fiber);
    }

    if (typeof instance.componentWillReceiveProps === 'function' && instance.componentWillReceiveProps.__suppressDeprecationWarning !== true) {
      pendingComponentWillReceivePropsWarnings.push(fiber);
    }

    if (fiber.mode & StrictMode && typeof instance.UNSAFE_componentWillReceiveProps === 'function') {
      pendingUNSAFE_ComponentWillReceivePropsWarnings.push(fiber);
    }

    if (typeof instance.componentWillUpdate === 'function' && instance.componentWillUpdate.__suppressDeprecationWarning !== true) {
      pendingComponentWillUpdateWarnings.push(fiber);
    }

    if (fiber.mode & StrictMode && typeof instance.UNSAFE_componentWillUpdate === 'function') {
      pendingUNSAFE_ComponentWillUpdateWarnings.push(fiber);
    }
  };

  ReactStrictModeWarnings.flushPendingUnsafeLifecycleWarnings = function () {
    // We do an initial pass to gather component names
    var componentWillMountUniqueNames = new Set();

    if (pendingComponentWillMountWarnings.length > 0) {
      pendingComponentWillMountWarnings.forEach(function (fiber) {
        componentWillMountUniqueNames.add(getComponentName(fiber.type) || 'Component');
        didWarnAboutUnsafeLifecycles.add(fiber.type);
      });
      pendingComponentWillMountWarnings = [];
    }

    var UNSAFE_componentWillMountUniqueNames = new Set();

    if (pendingUNSAFE_ComponentWillMountWarnings.length > 0) {
      pendingUNSAFE_ComponentWillMountWarnings.forEach(function (fiber) {
        UNSAFE_componentWillMountUniqueNames.add(getComponentName(fiber.type) || 'Component');
        didWarnAboutUnsafeLifecycles.add(fiber.type);
      });
      pendingUNSAFE_ComponentWillMountWarnings = [];
    }

    var componentWillReceivePropsUniqueNames = new Set();

    if (pendingComponentWillReceivePropsWarnings.length > 0) {
      pendingComponentWillReceivePropsWarnings.forEach(function (fiber) {
        componentWillReceivePropsUniqueNames.add(getComponentName(fiber.type) || 'Component');
        didWarnAboutUnsafeLifecycles.add(fiber.type);
      });
      pendingComponentWillReceivePropsWarnings = [];
    }

    var UNSAFE_componentWillReceivePropsUniqueNames = new Set();

    if (pendingUNSAFE_ComponentWillReceivePropsWarnings.length > 0) {
      pendingUNSAFE_ComponentWillReceivePropsWarnings.forEach(function (fiber) {
        UNSAFE_componentWillReceivePropsUniqueNames.add(getComponentName(fiber.type) || 'Component');
        didWarnAboutUnsafeLifecycles.add(fiber.type);
      });
      pendingUNSAFE_ComponentWillReceivePropsWarnings = [];
    }

    var componentWillUpdateUniqueNames = new Set();

    if (pendingComponentWillUpdateWarnings.length > 0) {
      pendingComponentWillUpdateWarnings.forEach(function (fiber) {
        componentWillUpdateUniqueNames.add(getComponentName(fiber.type) || 'Component');
        didWarnAboutUnsafeLifecycles.add(fiber.type);
      });
      pendingComponentWillUpdateWarnings = [];
    }

    var UNSAFE_componentWillUpdateUniqueNames = new Set();

    if (pendingUNSAFE_ComponentWillUpdateWarnings.length > 0) {
      pendingUNSAFE_ComponentWillUpdateWarnings.forEach(function (fiber) {
        UNSAFE_componentWillUpdateUniqueNames.add(getComponentName(fiber.type) || 'Component');
        didWarnAboutUnsafeLifecycles.add(fiber.type);
      });
      pendingUNSAFE_ComponentWillUpdateWarnings = [];
    } // Finally, we flush all the warnings
    // UNSAFE_ ones before the deprecated ones, since they'll be 'louder'


    if (UNSAFE_componentWillMountUniqueNames.size > 0) {
      var sortedNames = setToSortedString(UNSAFE_componentWillMountUniqueNames);

      error('Using UNSAFE_componentWillMount in strict mode is not recommended and may indicate bugs in your code. ' + 'See https://fb.me/react-unsafe-component-lifecycles for details.\n\n' + '* Move code with side effects to componentDidMount, and set initial state in the constructor.\n' + '\nPlease update the following components: %s', sortedNames);
    }

    if (UNSAFE_componentWillReceivePropsUniqueNames.size > 0) {
      var _sortedNames = setToSortedString(UNSAFE_componentWillReceivePropsUniqueNames);

      error('Using UNSAFE_componentWillReceiveProps in strict mode is not recommended ' + 'and may indicate bugs in your code. ' + 'See https://fb.me/react-unsafe-component-lifecycles for details.\n\n' + '* Move data fetching code or side effects to componentDidUpdate.\n' + "* If you're updating state whenever props change, " + 'refactor your code to use memoization techniques or move it to ' + 'static getDerivedStateFromProps. Learn more at: https://fb.me/react-derived-state\n' + '\nPlease update the following components: %s', _sortedNames);
    }

    if (UNSAFE_componentWillUpdateUniqueNames.size > 0) {
      var _sortedNames2 = setToSortedString(UNSAFE_componentWillUpdateUniqueNames);

      error('Using UNSAFE_componentWillUpdate in strict mode is not recommended ' + 'and may indicate bugs in your code. ' + 'See https://fb.me/react-unsafe-component-lifecycles for details.\n\n' + '* Move data fetching code or side effects to componentDidUpdate.\n' + '\nPlease update the following components: %s', _sortedNames2);
    }

    if (componentWillMountUniqueNames.size > 0) {
      var _sortedNames3 = setToSortedString(componentWillMountUniqueNames);

      warn('componentWillMount has been renamed, and is not recommended for use. ' + 'See https://fb.me/react-unsafe-component-lifecycles for details.\n\n' + '* Move code with side effects to componentDidMount, and set initial state in the constructor.\n' + '* Rename componentWillMount to UNSAFE_componentWillMount to suppress ' + 'this warning in non-strict mode. In React 17.x, only the UNSAFE_ name will work. ' + 'To rename all deprecated lifecycles to their new names, you can run ' + '`npx react-codemod rename-unsafe-lifecycles` in your project source folder.\n' + '\nPlease update the following components: %s', _sortedNames3);
    }

    if (componentWillReceivePropsUniqueNames.size > 0) {
      var _sortedNames4 = setToSortedString(componentWillReceivePropsUniqueNames);

      warn('componentWillReceiveProps has been renamed, and is not recommended for use. ' + 'See https://fb.me/react-unsafe-component-lifecycles for details.\n\n' + '* Move data fetching code or side effects to componentDidUpdate.\n' + "* If you're updating state whenever props change, refactor your " + 'code to use memoization techniques or move it to ' + 'static getDerivedStateFromProps. Learn more at: https://fb.me/react-derived-state\n' + '* Rename componentWillReceiveProps to UNSAFE_componentWillReceiveProps to suppress ' + 'this warning in non-strict mode. In React 17.x, only the UNSAFE_ name will work. ' + 'To rename all deprecated lifecycles to their new names, you can run ' + '`npx react-codemod rename-unsafe-lifecycles` in your project source folder.\n' + '\nPlease update the following components: %s', _sortedNames4);
    }

    if (componentWillUpdateUniqueNames.size > 0) {
      var _sortedNames5 = setToSortedString(componentWillUpdateUniqueNames);

      warn('componentWillUpdate has been renamed, and is not recommended for use. ' + 'See https://fb.me/react-unsafe-component-lifecycles for details.\n\n' + '* Move data fetching code or side effects to componentDidUpdate.\n' + '* Rename componentWillUpdate to UNSAFE_componentWillUpdate to suppress ' + 'this warning in non-strict mode. In React 17.x, only the UNSAFE_ name will work. ' + 'To rename all deprecated lifecycles to their new names, you can run ' + '`npx react-codemod rename-unsafe-lifecycles` in your project source folder.\n' + '\nPlease update the following components: %s', _sortedNames5);
    }
  };

  var pendingLegacyContextWarning = new Map(); // Tracks components we have already warned about.

  var didWarnAboutLegacyContext = new Set();

  ReactStrictModeWarnings.recordLegacyContextWarning = function (fiber, instance) {
    var strictRoot = findStrictRoot(fiber);

    if (strictRoot === null) {
      error('Expected to find a StrictMode component in a strict mode tree. ' + 'This error is likely caused by a bug in React. Please file an issue.');

      return;
    } // Dedup strategy: Warn once per component.


    if (didWarnAboutLegacyContext.has(fiber.type)) {
      return;
    }

    var warningsForRoot = pendingLegacyContextWarning.get(strictRoot);

    if (fiber.type.contextTypes != null || fiber.type.childContextTypes != null || instance !== null && typeof instance.getChildContext === 'function') {
      if (warningsForRoot === undefined) {
        warningsForRoot = [];
        pendingLegacyContextWarning.set(strictRoot, warningsForRoot);
      }

      warningsForRoot.push(fiber);
    }
  };

  ReactStrictModeWarnings.flushLegacyContextWarning = function () {
    pendingLegacyContextWarning.forEach(function (fiberArray, strictRoot) {
      if (fiberArray.length === 0) {
        return;
      }

      var firstFiber = fiberArray[0];
      var uniqueNames = new Set();
      fiberArray.forEach(function (fiber) {
        uniqueNames.add(getComponentName(fiber.type) || 'Component');
        didWarnAboutLegacyContext.add(fiber.type);
      });
      var sortedNames = setToSortedString(uniqueNames);
      var firstComponentStack = getStackByFiberInDevAndProd(firstFiber);

      error('Legacy context API has been detected within a strict-mode tree.' + '\n\nThe old API will be supported in all 16.x releases, but applications ' + 'using it should migrate to the new version.' + '\n\nPlease update the following components: %s' + '\n\nLearn more about this warning here: https://fb.me/react-legacy-context' + '%s', sortedNames, firstComponentStack);
    });
  };

  ReactStrictModeWarnings.discardPendingWarnings = function () {
    pendingComponentWillMountWarnings = [];
    pendingUNSAFE_ComponentWillMountWarnings = [];
    pendingComponentWillReceivePropsWarnings = [];
    pendingUNSAFE_ComponentWillReceivePropsWarnings = [];
    pendingComponentWillUpdateWarnings = [];
    pendingUNSAFE_ComponentWillUpdateWarnings = [];
    pendingLegacyContextWarning = new Map();
  };
}

var resolveFamily = null; // $FlowFixMe Flow gets confused by a WeakSet feature check below.

var failedBoundaries = null;
var setRefreshHandler = function (handler) {
  {
    resolveFamily = handler;
  }
};
function resolveFunctionForHotReloading(type) {
  {
    if (resolveFamily === null) {
      // Hot reloading is disabled.
      return type;
    }

    var family = resolveFamily(type);

    if (family === undefined) {
      return type;
    } // Use the latest known implementation.


    return family.current;
  }
}
function resolveClassForHotReloading(type) {
  // No implementation differences.
  return resolveFunctionForHotReloading(type);
}
function resolveForwardRefForHotReloading(type) {
  {
    if (resolveFamily === null) {
      // Hot reloading is disabled.
      return type;
    }

    var family = resolveFamily(type);

    if (family === undefined) {
      // Check if we're dealing with a real forwardRef. Don't want to crash early.
      if (type !== null && type !== undefined && typeof type.render === 'function') {
        // ForwardRef is special because its resolved .type is an object,
        // but it's possible that we only have its inner render function in the map.
        // If that inner render function is different, we'll build a new forwardRef type.
        var currentRender = resolveFunctionForHotReloading(type.render);

        if (type.render !== currentRender) {
          var syntheticType = {
            $$typeof: REACT_FORWARD_REF_TYPE,
            render: currentRender
          };

          if (type.displayName !== undefined) {
            syntheticType.displayName = type.displayName;
          }

          return syntheticType;
        }
      }

      return type;
    } // Use the latest known implementation.


    return family.current;
  }
}
function isCompatibleFamilyForHotReloading(fiber, element) {
  {
    if (resolveFamily === null) {
      // Hot reloading is disabled.
      return false;
    }

    var prevType = fiber.elementType;
    var nextType = element.type; // If we got here, we know types aren't === equal.

    var needsCompareFamilies = false;
    var $$typeofNextType = typeof nextType === 'object' && nextType !== null ? nextType.$$typeof : null;

    switch (fiber.tag) {
      case ClassComponent:
        {
          if (typeof nextType === 'function') {
            needsCompareFamilies = true;
          }

          break;
        }

      case FunctionComponent:
        {
          if (typeof nextType === 'function') {
            needsCompareFamilies = true;
          } else if ($$typeofNextType === REACT_LAZY_TYPE) {
            // We don't know the inner type yet.
            // We're going to assume that the lazy inner type is stable,
            // and so it is sufficient to avoid reconciling it away.
            // We're not going to unwrap or actually use the new lazy type.
            needsCompareFamilies = true;
          }

          break;
        }

      case ForwardRef:
        {
          if ($$typeofNextType === REACT_FORWARD_REF_TYPE) {
            needsCompareFamilies = true;
          } else if ($$typeofNextType === REACT_LAZY_TYPE) {
            needsCompareFamilies = true;
          }

          break;
        }

      case MemoComponent:
      case SimpleMemoComponent:
        {
          if ($$typeofNextType === REACT_MEMO_TYPE) {
            // TODO: if it was but can no longer be simple,
            // we shouldn't set this.
            needsCompareFamilies = true;
          } else if ($$typeofNextType === REACT_LAZY_TYPE) {
            needsCompareFamilies = true;
          }

          break;
        }

      default:
        return false;
    } // Check if both types have a family and it's the same one.


    if (needsCompareFamilies) {
      // Note: memo() and forwardRef() we'll compare outer rather than inner type.
      // This means both of them need to be registered to preserve state.
      // If we unwrapped and compared the inner types for wrappers instead,
      // then we would risk falsely saying two separate memo(Foo)
      // calls are equivalent because they wrap the same Foo function.
      var prevFamily = resolveFamily(prevType);

      if (prevFamily !== undefined && prevFamily === resolveFamily(nextType)) {
        return true;
      }
    }

    return false;
  }
}
function markFailedErrorBoundaryForHotReloading(fiber) {
  {
    if (resolveFamily === null) {
      // Hot reloading is disabled.
      return;
    }

    if (typeof WeakSet !== 'function') {
      return;
    }

    if (failedBoundaries === null) {
      failedBoundaries = new WeakSet();
    }

    failedBoundaries.add(fiber);
  }
}
var scheduleRefresh = function (root, update) {
  {
    if (resolveFamily === null) {
      // Hot reloading is disabled.
      return;
    }

    var staleFamilies = update.staleFamilies,
        updatedFamilies = update.updatedFamilies;
    flushPassiveEffects();
    flushSync(function () {
      scheduleFibersWithFamiliesRecursively(root.current, updatedFamilies, staleFamilies);
    });
  }
};
var scheduleRoot = function (root, element) {
  {
    if (root.context !== emptyContextObject) {
      // Super edge case: root has a legacy _renderSubtree context
      // but we don't know the parentComponent so we can't pass it.
      // Just ignore. We'll delete this with _renderSubtree code path later.
      return;
    }

    flushPassiveEffects();
    syncUpdates(function () {
      updateContainer(element, root, null, null);
    });
  }
};

function scheduleFibersWithFamiliesRecursively(fiber, updatedFamilies, staleFamilies) {
  {
    var alternate = fiber.alternate,
        child = fiber.child,
        sibling = fiber.sibling,
        tag = fiber.tag,
        type = fiber.type;
    var candidateType = null;

    switch (tag) {
      case FunctionComponent:
      case SimpleMemoComponent:
      case ClassComponent:
        candidateType = type;
        break;

      case ForwardRef:
        candidateType = type.render;
        break;
    }

    if (resolveFamily === null) {
      throw new Error('Expected resolveFamily to be set during hot reload.');
    }

    var needsRender = false;
    var needsRemount = false;

    if (candidateType !== null) {
      var family = resolveFamily(candidateType);

      if (family !== undefined) {
        if (staleFamilies.has(family)) {
          needsRemount = true;
        } else if (updatedFamilies.has(family)) {
          if (tag === ClassComponent) {
            needsRemount = true;
          } else {
            needsRender = true;
          }
        }
      }
    }

    if (failedBoundaries !== null) {
      if (failedBoundaries.has(fiber) || alternate !== null && failedBoundaries.has(alternate)) {
        needsRemount = true;
      }
    }

    if (needsRemount) {
      fiber._debugNeedsRemount = true;
    }

    if (needsRemount || needsRender) {
      scheduleWork(fiber, Sync);
    }

    if (child !== null && !needsRemount) {
      scheduleFibersWithFamiliesRecursively(child, updatedFamilies, staleFamilies);
    }

    if (sibling !== null) {
      scheduleFibersWithFamiliesRecursively(sibling, updatedFamilies, staleFamilies);
    }
  }
}

var findHostInstancesForRefresh = function (root, families) {
  {
    var hostInstances = new Set();
    var types = new Set(families.map(function (family) {
      return family.current;
    }));
    findHostInstancesForMatchingFibersRecursively(root.current, types, hostInstances);
    return hostInstances;
  }
};

function findHostInstancesForMatchingFibersRecursively(fiber, types, hostInstances) {
  {
    var child = fiber.child,
        sibling = fiber.sibling,
        tag = fiber.tag,
        type = fiber.type;
    var candidateType = null;

    switch (tag) {
      case FunctionComponent:
      case SimpleMemoComponent:
      case ClassComponent:
        candidateType = type;
        break;

      case ForwardRef:
        candidateType = type.render;
        break;
    }

    var didMatch = false;

    if (candidateType !== null) {
      if (types.has(candidateType)) {
        didMatch = true;
      }
    }

    if (didMatch) {
      // We have a match. This only drills down to the closest host components.
      // There's no need to search deeper because for the purpose of giving
      // visual feedback, "flashing" outermost parent rectangles is sufficient.
      findHostInstancesForFiberShallowly(fiber, hostInstances);
    } else {
      // If there's no match, maybe there will be one further down in the child tree.
      if (child !== null) {
        findHostInstancesForMatchingFibersRecursively(child, types, hostInstances);
      }
    }

    if (sibling !== null) {
      findHostInstancesForMatchingFibersRecursively(sibling, types, hostInstances);
    }
  }
}

function findHostInstancesForFiberShallowly(fiber, hostInstances) {
  {
    var foundHostInstances = findChildHostInstancesForFiberShallowly(fiber, hostInstances);

    if (foundHostInstances) {
      return;
    } // If we didn't find any host children, fallback to closest host parent.


    var node = fiber;

    while (true) {
      switch (node.tag) {
        case HostComponent:
          hostInstances.add(node.stateNode);
          return;

        case HostPortal:
          hostInstances.add(node.stateNode.containerInfo);
          return;

        case HostRoot:
          hostInstances.add(node.stateNode.containerInfo);
          return;
      }

      if (node.return === null) {
        throw new Error('Expected to reach root first.');
      }

      node = node.return;
    }
  }
}

function findChildHostInstancesForFiberShallowly(fiber, hostInstances) {
  {
    var node = fiber;
    var foundHostInstances = false;

    while (true) {
      if (node.tag === HostComponent) {
        // We got a match.
        foundHostInstances = true;
        hostInstances.add(node.stateNode); // There may still be more, so keep searching.
      } else if (node.child !== null) {
        node.child.return = node;
        node = node.child;
        continue;
      }

      if (node === fiber) {
        return foundHostInstances;
      }

      while (node.sibling === null) {
        if (node.return === null || node.return === fiber) {
          return foundHostInstances;
        }

        node = node.return;
      }

      node.sibling.return = node.return;
      node = node.sibling;
    }
  }

  return false;
}

function resolveDefaultProps(Component, baseProps) {
  if (Component && Component.defaultProps) {
    // Resolve default props. Taken from ReactElement
    var props = _assign({}, baseProps);

    var defaultProps = Component.defaultProps;

    for (var propName in defaultProps) {
      if (props[propName] === undefined) {
        props[propName] = defaultProps[propName];
      }
    }

    return props;
  }

  return baseProps;
}
function readLazyComponentType(lazyComponent) {
  initializeLazyComponentType(lazyComponent);

  if (lazyComponent._status !== Resolved) {
    throw lazyComponent._result;
  }

  return lazyComponent._result;
}

var valueCursor = createCursor(null);
var rendererSigil;

{
  // Use this to detect multiple renderers using the same context
  rendererSigil = {};
}

var currentlyRenderingFiber = null;
var lastContextDependency = null;
var lastContextWithAllBitsObserved = null;
var isDisallowedContextReadInDEV = false;
function resetContextDependencies() {
  // This is called right before React yields execution, to ensure `readContext`
  // cannot be called outside the render phase.
  currentlyRenderingFiber = null;
  lastContextDependency = null;
  lastContextWithAllBitsObserved = null;

  {
    isDisallowedContextReadInDEV = false;
  }
}
function enterDisallowedContextReadInDEV() {
  {
    isDisallowedContextReadInDEV = true;
  }
}
function exitDisallowedContextReadInDEV() {
  {
    isDisallowedContextReadInDEV = false;
  }
}
function pushProvider(providerFiber, nextValue) {
  var context = providerFiber.type._context;

  {
    push(valueCursor, context._currentValue, providerFiber);
    context._currentValue = nextValue;

    {
      if (context._currentRenderer !== undefined && context._currentRenderer !== null && context._currentRenderer !== rendererSigil) {
        error('Detected multiple renderers concurrently rendering the ' + 'same context provider. This is currently unsupported.');
      }

      context._currentRenderer = rendererSigil;
    }
  }
}
function popProvider(providerFiber) {
  var currentValue = valueCursor.current;
  pop(valueCursor, providerFiber);
  var context = providerFiber.type._context;

  {
    context._currentValue = currentValue;
  }
}
function calculateChangedBits(context, newValue, oldValue) {
  if (objectIs(oldValue, newValue)) {
    // No change
    return 0;
  } else {
    var changedBits = typeof context._calculateChangedBits === 'function' ? context._calculateChangedBits(oldValue, newValue) : MAX_SIGNED_31_BIT_INT;

    {
      if ((changedBits & MAX_SIGNED_31_BIT_INT) !== changedBits) {
        error('calculateChangedBits: Expected the return value to be a ' + '31-bit integer. Instead received: %s', changedBits);
      }
    }

    return changedBits | 0;
  }
}
function scheduleWorkOnParentPath(parent, renderExpirationTime) {
  // Update the child expiration time of all the ancestors, including
  // the alternates.
  var node = parent;

  while (node !== null) {
    var alternate = node.alternate;

    if (node.childExpirationTime < renderExpirationTime) {
      node.childExpirationTime = renderExpirationTime;

      if (alternate !== null && alternate.childExpirationTime < renderExpirationTime) {
        alternate.childExpirationTime = renderExpirationTime;
      }
    } else if (alternate !== null && alternate.childExpirationTime < renderExpirationTime) {
      alternate.childExpirationTime = renderExpirationTime;
    } else {
      // Neither alternate was updated, which means the rest of the
      // ancestor path already has sufficient priority.
      break;
    }

    node = node.return;
  }
}
function propagateContextChange(workInProgress, context, changedBits, renderExpirationTime) {
  var fiber = workInProgress.child;

  if (fiber !== null) {
    // Set the return pointer of the child to the work-in-progress fiber.
    fiber.return = workInProgress;
  }

  while (fiber !== null) {
    var nextFiber = void 0; // Visit this fiber.

    var list = fiber.dependencies;

    if (list !== null) {
      nextFiber = fiber.child;
      var dependency = list.firstContext;

      while (dependency !== null) {
        // Check if the context matches.
        if (dependency.context === context && (dependency.observedBits & changedBits) !== 0) {
          // Match! Schedule an update on this fiber.
          if (fiber.tag === ClassComponent) {
            // Schedule a force update on the work-in-progress.
            var update = createUpdate(renderExpirationTime, null);
            update.tag = ForceUpdate; // TODO: Because we don't have a work-in-progress, this will add the
            // update to the current fiber, too, which means it will persist even if
            // this render is thrown away. Since it's a race condition, not sure it's
            // worth fixing.

            enqueueUpdate(fiber, update);
          }

          if (fiber.expirationTime < renderExpirationTime) {
            fiber.expirationTime = renderExpirationTime;
          }

          var alternate = fiber.alternate;

          if (alternate !== null && alternate.expirationTime < renderExpirationTime) {
            alternate.expirationTime = renderExpirationTime;
          }

          scheduleWorkOnParentPath(fiber.return, renderExpirationTime); // Mark the expiration time on the list, too.

          if (list.expirationTime < renderExpirationTime) {
            list.expirationTime = renderExpirationTime;
          } // Since we already found a match, we can stop traversing the
          // dependency list.


          break;
        }

        dependency = dependency.next;
      }
    } else if (fiber.tag === ContextProvider) {
      // Don't scan deeper if this is a matching provider
      nextFiber = fiber.type === workInProgress.type ? null : fiber.child;
    } else {
      // Traverse down.
      nextFiber = fiber.child;
    }

    if (nextFiber !== null) {
      // Set the return pointer of the child to the work-in-progress fiber.
      nextFiber.return = fiber;
    } else {
      // No child. Traverse to next sibling.
      nextFiber = fiber;

      while (nextFiber !== null) {
        if (nextFiber === workInProgress) {
          // We're back to the root of this subtree. Exit.
          nextFiber = null;
          break;
        }

        var sibling = nextFiber.sibling;

        if (sibling !== null) {
          // Set the return pointer of the sibling to the work-in-progress fiber.
          sibling.return = nextFiber.return;
          nextFiber = sibling;
          break;
        } // No more siblings. Traverse up.


        nextFiber = nextFiber.return;
      }
    }

    fiber = nextFiber;
  }
}
function prepareToReadContext(workInProgress, renderExpirationTime) {
  currentlyRenderingFiber = workInProgress;
  lastContextDependency = null;
  lastContextWithAllBitsObserved = null;
  var dependencies = workInProgress.dependencies;

  if (dependencies !== null) {
    var firstContext = dependencies.firstContext;

    if (firstContext !== null) {
      if (dependencies.expirationTime >= renderExpirationTime) {
        // Context list has a pending update. Mark that this fiber performed work.
        markWorkInProgressReceivedUpdate();
      } // Reset the work-in-progress list


      dependencies.firstContext = null;
    }
  }
}
function readContext(context, observedBits) {
  {
    // This warning would fire if you read context inside a Hook like useMemo.
    // Unlike the class check below, it's not enforced in production for perf.
    if (isDisallowedContextReadInDEV) {
      error('Context can only be read while React is rendering. ' + 'In classes, you can read it in the render method or getDerivedStateFromProps. ' + 'In function components, you can read it directly in the function body, but not ' + 'inside Hooks like useReducer() or useMemo().');
    }
  }

  if (lastContextWithAllBitsObserved === context) ; else if (observedBits === false || observedBits === 0) ; else {
    var resolvedObservedBits; // Avoid deopting on observable arguments or heterogeneous types.

    if (typeof observedBits !== 'number' || observedBits === MAX_SIGNED_31_BIT_INT) {
      // Observe all updates.
      lastContextWithAllBitsObserved = context;
      resolvedObservedBits = MAX_SIGNED_31_BIT_INT;
    } else {
      resolvedObservedBits = observedBits;
    }

    var contextItem = {
      context: context,
      observedBits: resolvedObservedBits,
      next: null
    };

    if (lastContextDependency === null) {
      if (!(currentlyRenderingFiber !== null)) {
        {
          throw Error( "Context can only be read while React is rendering. In classes, you can read it in the render method or getDerivedStateFromProps. In function components, you can read it directly in the function body, but not inside Hooks like useReducer() or useMemo()." );
        }
      } // This is the first dependency for this component. Create a new list.


      lastContextDependency = contextItem;
      currentlyRenderingFiber.dependencies = {
        expirationTime: NoWork,
        firstContext: contextItem,
        responders: null
      };
    } else {
      // Append a new context item.
      lastContextDependency = lastContextDependency.next = contextItem;
    }
  }

  return  context._currentValue ;
}

var UpdateState = 0;
var ReplaceState = 1;
var ForceUpdate = 2;
var CaptureUpdate = 3; // Global state that is reset at the beginning of calling `processUpdateQueue`.
// It should only be read right after calling `processUpdateQueue`, via
// `checkHasForceUpdateAfterProcessing`.

var hasForceUpdate = false;
var didWarnUpdateInsideUpdate;
var currentlyProcessingQueue;

{
  didWarnUpdateInsideUpdate = false;
  currentlyProcessingQueue = null;
}

function initializeUpdateQueue(fiber) {
  var queue = {
    baseState: fiber.memoizedState,
    baseQueue: null,
    shared: {
      pending: null
    },
    effects: null
  };
  fiber.updateQueue = queue;
}
function cloneUpdateQueue(current, workInProgress) {
  // Clone the update queue from current. Unless it's already a clone.
  var queue = workInProgress.updateQueue;
  var currentQueue = current.updateQueue;

  if (queue === currentQueue) {
    var clone = {
      baseState: currentQueue.baseState,
      baseQueue: currentQueue.baseQueue,
      shared: currentQueue.shared,
      effects: currentQueue.effects
    };
    workInProgress.updateQueue = clone;
  }
}
function createUpdate(expirationTime, suspenseConfig) {
  var update = {
    expirationTime: expirationTime,
    suspenseConfig: suspenseConfig,
    tag: UpdateState,
    payload: null,
    callback: null,
    next: null
  };
  update.next = update;

  {
    update.priority = getCurrentPriorityLevel();
  }

  return update;
}
function enqueueUpdate(fiber, update) {
  var updateQueue = fiber.updateQueue;

  if (updateQueue === null) {
    // Only occurs if the fiber has been unmounted.
    return;
  }

  var sharedQueue = updateQueue.shared;
  var pending = sharedQueue.pending;

  if (pending === null) {
    // This is the first update. Create a circular list.
    update.next = update;
  } else {
    update.next = pending.next;
    pending.next = update;
  }

  sharedQueue.pending = update;

  {
    if (currentlyProcessingQueue === sharedQueue && !didWarnUpdateInsideUpdate) {
      error('An update (setState, replaceState, or forceUpdate) was scheduled ' + 'from inside an update function. Update functions should be pure, ' + 'with zero side-effects. Consider using componentDidUpdate or a ' + 'callback.');

      didWarnUpdateInsideUpdate = true;
    }
  }
}
function enqueueCapturedUpdate(workInProgress, update) {
  var current = workInProgress.alternate;

  if (current !== null) {
    // Ensure the work-in-progress queue is a clone
    cloneUpdateQueue(current, workInProgress);
  } // Captured updates go only on the work-in-progress queue.


  var queue = workInProgress.updateQueue; // Append the update to the end of the list.

  var last = queue.baseQueue;

  if (last === null) {
    queue.baseQueue = update.next = update;
    update.next = update;
  } else {
    update.next = last.next;
    last.next = update;
  }
}

function getStateFromUpdate(workInProgress, queue, update, prevState, nextProps, instance) {
  switch (update.tag) {
    case ReplaceState:
      {
        var payload = update.payload;

        if (typeof payload === 'function') {
          // Updater function
          {
            enterDisallowedContextReadInDEV();

            if ( workInProgress.mode & StrictMode) {
              payload.call(instance, prevState, nextProps);
            }
          }

          var nextState = payload.call(instance, prevState, nextProps);

          {
            exitDisallowedContextReadInDEV();
          }

          return nextState;
        } // State object


        return payload;
      }

    case CaptureUpdate:
      {
        workInProgress.effectTag = workInProgress.effectTag & ~ShouldCapture | DidCapture;
      }
    // Intentional fallthrough

    case UpdateState:
      {
        var _payload = update.payload;
        var partialState;

        if (typeof _payload === 'function') {
          // Updater function
          {
            enterDisallowedContextReadInDEV();

            if ( workInProgress.mode & StrictMode) {
              _payload.call(instance, prevState, nextProps);
            }
          }

          partialState = _payload.call(instance, prevState, nextProps);

          {
            exitDisallowedContextReadInDEV();
          }
        } else {
          // Partial state object
          partialState = _payload;
        }

        if (partialState === null || partialState === undefined) {
          // Null and undefined are treated as no-ops.
          return prevState;
        } // Merge the partial state and the previous state.


        return _assign({}, prevState, partialState);
      }

    case ForceUpdate:
      {
        hasForceUpdate = true;
        return prevState;
      }
  }

  return prevState;
}

function processUpdateQueue(workInProgress, props, instance, renderExpirationTime) {
  // This is always non-null on a ClassComponent or HostRoot
  var queue = workInProgress.updateQueue;
  hasForceUpdate = false;

  {
    currentlyProcessingQueue = queue.shared;
  } // The last rebase update that is NOT part of the base state.


  var baseQueue = queue.baseQueue; // The last pending update that hasn't been processed yet.

  var pendingQueue = queue.shared.pending;

  if (pendingQueue !== null) {
    // We have new updates that haven't been processed yet.
    // We'll add them to the base queue.
    if (baseQueue !== null) {
      // Merge the pending queue and the base queue.
      var baseFirst = baseQueue.next;
      var pendingFirst = pendingQueue.next;
      baseQueue.next = pendingFirst;
      pendingQueue.next = baseFirst;
    }

    baseQueue = pendingQueue;
    queue.shared.pending = null; // TODO: Pass `current` as argument

    var current = workInProgress.alternate;

    if (current !== null) {
      var currentQueue = current.updateQueue;

      if (currentQueue !== null) {
        currentQueue.baseQueue = pendingQueue;
      }
    }
  } // These values may change as we process the queue.


  if (baseQueue !== null) {
    var first = baseQueue.next; // Iterate through the list of updates to compute the result.

    var newState = queue.baseState;
    var newExpirationTime = NoWork;
    var newBaseState = null;
    var newBaseQueueFirst = null;
    var newBaseQueueLast = null;

    if (first !== null) {
      var update = first;

      do {
        var updateExpirationTime = update.expirationTime;

        if (updateExpirationTime < renderExpirationTime) {
          // Priority is insufficient. Skip this update. If this is the first
          // skipped update, the previous update/state is the new base
          // update/state.
          var clone = {
            expirationTime: update.expirationTime,
            suspenseConfig: update.suspenseConfig,
            tag: update.tag,
            payload: update.payload,
            callback: update.callback,
            next: null
          };

          if (newBaseQueueLast === null) {
            newBaseQueueFirst = newBaseQueueLast = clone;
            newBaseState = newState;
          } else {
            newBaseQueueLast = newBaseQueueLast.next = clone;
          } // Update the remaining priority in the queue.


          if (updateExpirationTime > newExpirationTime) {
            newExpirationTime = updateExpirationTime;
          }
        } else {
          // This update does have sufficient priority.
          if (newBaseQueueLast !== null) {
            var _clone = {
              expirationTime: Sync,
              // This update is going to be committed so we never want uncommit it.
              suspenseConfig: update.suspenseConfig,
              tag: update.tag,
              payload: update.payload,
              callback: update.callback,
              next: null
            };
            newBaseQueueLast = newBaseQueueLast.next = _clone;
          } // Mark the event time of this update as relevant to this render pass.
          // TODO: This should ideally use the true event time of this update rather than
          // its priority which is a derived and not reverseable value.
          // TODO: We should skip this update if it was already committed but currently
          // we have no way of detecting the difference between a committed and suspended
          // update here.


          markRenderEventTimeAndConfig(updateExpirationTime, update.suspenseConfig); // Process this update.

          newState = getStateFromUpdate(workInProgress, queue, update, newState, props, instance);
          var callback = update.callback;

          if (callback !== null) {
            workInProgress.effectTag |= Callback;
            var effects = queue.effects;

            if (effects === null) {
              queue.effects = [update];
            } else {
              effects.push(update);
            }
          }
        }

        update = update.next;

        if (update === null || update === first) {
          pendingQueue = queue.shared.pending;

          if (pendingQueue === null) {
            break;
          } else {
            // An update was scheduled from inside a reducer. Add the new
            // pending updates to the end of the list and keep processing.
            update = baseQueue.next = pendingQueue.next;
            pendingQueue.next = first;
            queue.baseQueue = baseQueue = pendingQueue;
            queue.shared.pending = null;
          }
        }
      } while (true);
    }

    if (newBaseQueueLast === null) {
      newBaseState = newState;
    } else {
      newBaseQueueLast.next = newBaseQueueFirst;
    }

    queue.baseState = newBaseState;
    queue.baseQueue = newBaseQueueLast; // Set the remaining expiration time to be whatever is remaining in the queue.
    // This should be fine because the only two other things that contribute to
    // expiration time are props and context. We're already in the middle of the
    // begin phase by the time we start processing the queue, so we've already
    // dealt with the props. Context in components that specify
    // shouldComponentUpdate is tricky; but we'll have to account for
    // that regardless.

    markUnprocessedUpdateTime(newExpirationTime);
    workInProgress.expirationTime = newExpirationTime;
    workInProgress.memoizedState = newState;
  }

  {
    currentlyProcessingQueue = null;
  }
}

function callCallback(callback, context) {
  if (!(typeof callback === 'function')) {
    {
      throw Error( "Invalid argument passed as callback. Expected a function. Instead received: " + callback );
    }
  }

  callback.call(context);
}

function resetHasForceUpdateBeforeProcessing() {
  hasForceUpdate = false;
}
function checkHasForceUpdateAfterProcessing() {
  return hasForceUpdate;
}
function commitUpdateQueue(finishedWork, finishedQueue, instance) {
  // Commit the effects
  var effects = finishedQueue.effects;
  finishedQueue.effects = null;

  if (effects !== null) {
    for (var i = 0; i < effects.length; i++) {
      var effect = effects[i];
      var callback = effect.callback;

      if (callback !== null) {
        effect.callback = null;
        callCallback(callback, instance);
      }
    }
  }
}

var ReactCurrentBatchConfig = ReactSharedInternals.ReactCurrentBatchConfig;
function requestCurrentSuspenseConfig() {
  return ReactCurrentBatchConfig.suspense;
}

var fakeInternalInstance = {};
var isArray = Array.isArray; // React.Component uses a shared frozen object by default.
// We'll use it to determine whether we need to initialize legacy refs.

var emptyRefsObject = new React.Component().refs;
var didWarnAboutStateAssignmentForComponent;
var didWarnAboutUninitializedState;
var didWarnAboutGetSnapshotBeforeUpdateWithoutDidUpdate;
var didWarnAboutLegacyLifecyclesAndDerivedState;
var didWarnAboutUndefinedDerivedState;
var warnOnUndefinedDerivedState;
var warnOnInvalidCallback;
var didWarnAboutDirectlyAssigningPropsToState;
var didWarnAboutContextTypeAndContextTypes;
var didWarnAboutInvalidateContextType;

{
  didWarnAboutStateAssignmentForComponent = new Set();
  didWarnAboutUninitializedState = new Set();
  didWarnAboutGetSnapshotBeforeUpdateWithoutDidUpdate = new Set();
  didWarnAboutLegacyLifecyclesAndDerivedState = new Set();
  didWarnAboutDirectlyAssigningPropsToState = new Set();
  didWarnAboutUndefinedDerivedState = new Set();
  didWarnAboutContextTypeAndContextTypes = new Set();
  didWarnAboutInvalidateContextType = new Set();
  var didWarnOnInvalidCallback = new Set();

  warnOnInvalidCallback = function (callback, callerName) {
    if (callback === null || typeof callback === 'function') {
      return;
    }

    var key = callerName + "_" + callback;

    if (!didWarnOnInvalidCallback.has(key)) {
      didWarnOnInvalidCallback.add(key);

      error('%s(...): Expected the last optional `callback` argument to be a ' + 'function. Instead received: %s.', callerName, callback);
    }
  };

  warnOnUndefinedDerivedState = function (type, partialState) {
    if (partialState === undefined) {
      var componentName = getComponentName(type) || 'Component';

      if (!didWarnAboutUndefinedDerivedState.has(componentName)) {
        didWarnAboutUndefinedDerivedState.add(componentName);

        error('%s.getDerivedStateFromProps(): A valid state object (or null) must be returned. ' + 'You have returned undefined.', componentName);
      }
    }
  }; // This is so gross but it's at least non-critical and can be removed if
  // it causes problems. This is meant to give a nicer error message for
  // ReactDOM15.unstable_renderSubtreeIntoContainer(reactDOM16Component,
  // ...)) which otherwise throws a "_processChildContext is not a function"
  // exception.


  Object.defineProperty(fakeInternalInstance, '_processChildContext', {
    enumerable: false,
    value: function () {
      {
        {
          throw Error( "_processChildContext is not available in React 16+. This likely means you have multiple copies of React and are attempting to nest a React 15 tree inside a React 16 tree using unstable_renderSubtreeIntoContainer, which isn't supported. Try to make sure you have only one copy of React (and ideally, switch to ReactDOM.createPortal)." );
        }
      }
    }
  });
  Object.freeze(fakeInternalInstance);
}

function applyDerivedStateFromProps(workInProgress, ctor, getDerivedStateFromProps, nextProps) {
  var prevState = workInProgress.memoizedState;

  {
    if ( workInProgress.mode & StrictMode) {
      // Invoke the function an extra time to help detect side-effects.
      getDerivedStateFromProps(nextProps, prevState);
    }
  }

  var partialState = getDerivedStateFromProps(nextProps, prevState);

  {
    warnOnUndefinedDerivedState(ctor, partialState);
  } // Merge the partial state and the previous state.


  var memoizedState = partialState === null || partialState === undefined ? prevState : _assign({}, prevState, partialState);
  workInProgress.memoizedState = memoizedState; // Once the update queue is empty, persist the derived state onto the
  // base state.

  if (workInProgress.expirationTime === NoWork) {
    // Queue is always non-null for classes
    var updateQueue = workInProgress.updateQueue;
    updateQueue.baseState = memoizedState;
  }
}
var classComponentUpdater = {
  isMounted: isMounted,
  enqueueSetState: function (inst, payload, callback) {
    var fiber = get(inst);
    var currentTime = requestCurrentTimeForUpdate();
    var suspenseConfig = requestCurrentSuspenseConfig();
    var expirationTime = computeExpirationForFiber(currentTime, fiber, suspenseConfig);
    var update = createUpdate(expirationTime, suspenseConfig);
    update.payload = payload;

    if (callback !== undefined && callback !== null) {
      {
        warnOnInvalidCallback(callback, 'setState');
      }

      update.callback = callback;
    }

    enqueueUpdate(fiber, update);
    scheduleWork(fiber, expirationTime);
  },
  enqueueReplaceState: function (inst, payload, callback) {
    var fiber = get(inst);
    var currentTime = requestCurrentTimeForUpdate();
    var suspenseConfig = requestCurrentSuspenseConfig();
    var expirationTime = computeExpirationForFiber(currentTime, fiber, suspenseConfig);
    var update = createUpdate(expirationTime, suspenseConfig);
    update.tag = ReplaceState;
    update.payload = payload;

    if (callback !== undefined && callback !== null) {
      {
        warnOnInvalidCallback(callback, 'replaceState');
      }

      update.callback = callback;
    }

    enqueueUpdate(fiber, update);
    scheduleWork(fiber, expirationTime);
  },
  enqueueForceUpdate: function (inst, callback) {
    var fiber = get(inst);
    var currentTime = requestCurrentTimeForUpdate();
    var suspenseConfig = requestCurrentSuspenseConfig();
    var expirationTime = computeExpirationForFiber(currentTime, fiber, suspenseConfig);
    var update = createUpdate(expirationTime, suspenseConfig);
    update.tag = ForceUpdate;

    if (callback !== undefined && callback !== null) {
      {
        warnOnInvalidCallback(callback, 'forceUpdate');
      }

      update.callback = callback;
    }

    enqueueUpdate(fiber, update);
    scheduleWork(fiber, expirationTime);
  }
};

function checkShouldComponentUpdate(workInProgress, ctor, oldProps, newProps, oldState, newState, nextContext) {
  var instance = workInProgress.stateNode;

  if (typeof instance.shouldComponentUpdate === 'function') {
    {
      if ( workInProgress.mode & StrictMode) {
        // Invoke the function an extra time to help detect side-effects.
        instance.shouldComponentUpdate(newProps, newState, nextContext);
      }
    }

    startPhaseTimer(workInProgress, 'shouldComponentUpdate');
    var shouldUpdate = instance.shouldComponentUpdate(newProps, newState, nextContext);
    stopPhaseTimer();

    {
      if (shouldUpdate === undefined) {
        error('%s.shouldComponentUpdate(): Returned undefined instead of a ' + 'boolean value. Make sure to return true or false.', getComponentName(ctor) || 'Component');
      }
    }

    return shouldUpdate;
  }

  if (ctor.prototype && ctor.prototype.isPureReactComponent) {
    return !shallowEqual(oldProps, newProps) || !shallowEqual(oldState, newState);
  }

  return true;
}

function checkClassInstance(workInProgress, ctor, newProps) {
  var instance = workInProgress.stateNode;

  {
    var name = getComponentName(ctor) || 'Component';
    var renderPresent = instance.render;

    if (!renderPresent) {
      if (ctor.prototype && typeof ctor.prototype.render === 'function') {
        error('%s(...): No `render` method found on the returned component ' + 'instance: did you accidentally return an object from the constructor?', name);
      } else {
        error('%s(...): No `render` method found on the returned component ' + 'instance: you may have forgotten to define `render`.', name);
      }
    }

    if (instance.getInitialState && !instance.getInitialState.isReactClassApproved && !instance.state) {
      error('getInitialState was defined on %s, a plain JavaScript class. ' + 'This is only supported for classes created using React.createClass. ' + 'Did you mean to define a state property instead?', name);
    }

    if (instance.getDefaultProps && !instance.getDefaultProps.isReactClassApproved) {
      error('getDefaultProps was defined on %s, a plain JavaScript class. ' + 'This is only supported for classes created using React.createClass. ' + 'Use a static property to define defaultProps instead.', name);
    }

    if (instance.propTypes) {
      error('propTypes was defined as an instance property on %s. Use a static ' + 'property to define propTypes instead.', name);
    }

    if (instance.contextType) {
      error('contextType was defined as an instance property on %s. Use a static ' + 'property to define contextType instead.', name);
    }

    {
      if (instance.contextTypes) {
        error('contextTypes was defined as an instance property on %s. Use a static ' + 'property to define contextTypes instead.', name);
      }

      if (ctor.contextType && ctor.contextTypes && !didWarnAboutContextTypeAndContextTypes.has(ctor)) {
        didWarnAboutContextTypeAndContextTypes.add(ctor);

        error('%s declares both contextTypes and contextType static properties. ' + 'The legacy contextTypes property will be ignored.', name);
      }
    }

    if (typeof instance.componentShouldUpdate === 'function') {
      error('%s has a method called ' + 'componentShouldUpdate(). Did you mean shouldComponentUpdate()? ' + 'The name is phrased as a question because the function is ' + 'expected to return a value.', name);
    }

    if (ctor.prototype && ctor.prototype.isPureReactComponent && typeof instance.shouldComponentUpdate !== 'undefined') {
      error('%s has a method called shouldComponentUpdate(). ' + 'shouldComponentUpdate should not be used when extending React.PureComponent. ' + 'Please extend React.Component if shouldComponentUpdate is used.', getComponentName(ctor) || 'A pure component');
    }

    if (typeof instance.componentDidUnmount === 'function') {
      error('%s has a method called ' + 'componentDidUnmount(). But there is no such lifecycle method. ' + 'Did you mean componentWillUnmount()?', name);
    }

    if (typeof instance.componentDidReceiveProps === 'function') {
      error('%s has a method called ' + 'componentDidReceiveProps(). But there is no such lifecycle method. ' + 'If you meant to update the state in response to changing props, ' + 'use componentWillReceiveProps(). If you meant to fetch data or ' + 'run side-effects or mutations after React has updated the UI, use componentDidUpdate().', name);
    }

    if (typeof instance.componentWillRecieveProps === 'function') {
      error('%s has a method called ' + 'componentWillRecieveProps(). Did you mean componentWillReceiveProps()?', name);
    }

    if (typeof instance.UNSAFE_componentWillRecieveProps === 'function') {
      error('%s has a method called ' + 'UNSAFE_componentWillRecieveProps(). Did you mean UNSAFE_componentWillReceiveProps()?', name);
    }

    var hasMutatedProps = instance.props !== newProps;

    if (instance.props !== undefined && hasMutatedProps) {
      error('%s(...): When calling super() in `%s`, make sure to pass ' + "up the same props that your component's constructor was passed.", name, name);
    }

    if (instance.defaultProps) {
      error('Setting defaultProps as an instance property on %s is not supported and will be ignored.' + ' Instead, define defaultProps as a static property on %s.', name, name);
    }

    if (typeof instance.getSnapshotBeforeUpdate === 'function' && typeof instance.componentDidUpdate !== 'function' && !didWarnAboutGetSnapshotBeforeUpdateWithoutDidUpdate.has(ctor)) {
      didWarnAboutGetSnapshotBeforeUpdateWithoutDidUpdate.add(ctor);

      error('%s: getSnapshotBeforeUpdate() should be used with componentDidUpdate(). ' + 'This component defines getSnapshotBeforeUpdate() only.', getComponentName(ctor));
    }

    if (typeof instance.getDerivedStateFromProps === 'function') {
      error('%s: getDerivedStateFromProps() is defined as an instance method ' + 'and will be ignored. Instead, declare it as a static method.', name);
    }

    if (typeof instance.getDerivedStateFromError === 'function') {
      error('%s: getDerivedStateFromError() is defined as an instance method ' + 'and will be ignored. Instead, declare it as a static method.', name);
    }

    if (typeof ctor.getSnapshotBeforeUpdate === 'function') {
      error('%s: getSnapshotBeforeUpdate() is defined as a static method ' + 'and will be ignored. Instead, declare it as an instance method.', name);
    }

    var _state = instance.state;

    if (_state && (typeof _state !== 'object' || isArray(_state))) {
      error('%s.state: must be set to an object or null', name);
    }

    if (typeof instance.getChildContext === 'function' && typeof ctor.childContextTypes !== 'object') {
      error('%s.getChildContext(): childContextTypes must be defined in order to ' + 'use getChildContext().', name);
    }
  }
}

function adoptClassInstance(workInProgress, instance) {
  instance.updater = classComponentUpdater;
  workInProgress.stateNode = instance; // The instance needs access to the fiber so that it can schedule updates

  set(instance, workInProgress);

  {
    instance._reactInternalInstance = fakeInternalInstance;
  }
}

function constructClassInstance(workInProgress, ctor, props) {
  var isLegacyContextConsumer = false;
  var unmaskedContext = emptyContextObject;
  var context = emptyContextObject;
  var contextType = ctor.contextType;

  {
    if ('contextType' in ctor) {
      var isValid = // Allow null for conditional declaration
      contextType === null || contextType !== undefined && contextType.$$typeof === REACT_CONTEXT_TYPE && contextType._context === undefined; // Not a <Context.Consumer>

      if (!isValid && !didWarnAboutInvalidateContextType.has(ctor)) {
        didWarnAboutInvalidateContextType.add(ctor);
        var addendum = '';

        if (contextType === undefined) {
          addendum = ' However, it is set to undefined. ' + 'This can be caused by a typo or by mixing up named and default imports. ' + 'This can also happen due to a circular dependency, so ' + 'try moving the createContext() call to a separate file.';
        } else if (typeof contextType !== 'object') {
          addendum = ' However, it is set to a ' + typeof contextType + '.';
        } else if (contextType.$$typeof === REACT_PROVIDER_TYPE) {
          addendum = ' Did you accidentally pass the Context.Provider instead?';
        } else if (contextType._context !== undefined) {
          // <Context.Consumer>
          addendum = ' Did you accidentally pass the Context.Consumer instead?';
        } else {
          addendum = ' However, it is set to an object with keys {' + Object.keys(contextType).join(', ') + '}.';
        }

        error('%s defines an invalid contextType. ' + 'contextType should point to the Context object returned by React.createContext().%s', getComponentName(ctor) || 'Component', addendum);
      }
    }
  }

  if (typeof contextType === 'object' && contextType !== null) {
    context = readContext(contextType);
  } else {
    unmaskedContext = getUnmaskedContext(workInProgress, ctor, true);
    var contextTypes = ctor.contextTypes;
    isLegacyContextConsumer = contextTypes !== null && contextTypes !== undefined;
    context = isLegacyContextConsumer ? getMaskedContext(workInProgress, unmaskedContext) : emptyContextObject;
  } // Instantiate twice to help detect side-effects.


  {
    if ( workInProgress.mode & StrictMode) {
      new ctor(props, context); // eslint-disable-line no-new
    }
  }

  var instance = new ctor(props, context);
  var state = workInProgress.memoizedState = instance.state !== null && instance.state !== undefined ? instance.state : null;
  adoptClassInstance(workInProgress, instance);

  {
    if (typeof ctor.getDerivedStateFromProps === 'function' && state === null) {
      var componentName = getComponentName(ctor) || 'Component';

      if (!didWarnAboutUninitializedState.has(componentName)) {
        didWarnAboutUninitializedState.add(componentName);

        error('`%s` uses `getDerivedStateFromProps` but its initial state is ' + '%s. This is not recommended. Instead, define the initial state by ' + 'assigning an object to `this.state` in the constructor of `%s`. ' + 'This ensures that `getDerivedStateFromProps` arguments have a consistent shape.', componentName, instance.state === null ? 'null' : 'undefined', componentName);
      }
    } // If new component APIs are defined, "unsafe" lifecycles won't be called.
    // Warn about these lifecycles if they are present.
    // Don't warn about react-lifecycles-compat polyfilled methods though.


    if (typeof ctor.getDerivedStateFromProps === 'function' || typeof instance.getSnapshotBeforeUpdate === 'function') {
      var foundWillMountName = null;
      var foundWillReceivePropsName = null;
      var foundWillUpdateName = null;

      if (typeof instance.componentWillMount === 'function' && instance.componentWillMount.__suppressDeprecationWarning !== true) {
        foundWillMountName = 'componentWillMount';
      } else if (typeof instance.UNSAFE_componentWillMount === 'function') {
        foundWillMountName = 'UNSAFE_componentWillMount';
      }

      if (typeof instance.componentWillReceiveProps === 'function' && instance.componentWillReceiveProps.__suppressDeprecationWarning !== true) {
        foundWillReceivePropsName = 'componentWillReceiveProps';
      } else if (typeof instance.UNSAFE_componentWillReceiveProps === 'function') {
        foundWillReceivePropsName = 'UNSAFE_componentWillReceiveProps';
      }

      if (typeof instance.componentWillUpdate === 'function' && instance.componentWillUpdate.__suppressDeprecationWarning !== true) {
        foundWillUpdateName = 'componentWillUpdate';
      } else if (typeof instance.UNSAFE_componentWillUpdate === 'function') {
        foundWillUpdateName = 'UNSAFE_componentWillUpdate';
      }

      if (foundWillMountName !== null || foundWillReceivePropsName !== null || foundWillUpdateName !== null) {
        var _componentName = getComponentName(ctor) || 'Component';

        var newApiName = typeof ctor.getDerivedStateFromProps === 'function' ? 'getDerivedStateFromProps()' : 'getSnapshotBeforeUpdate()';

        if (!didWarnAboutLegacyLifecyclesAndDerivedState.has(_componentName)) {
          didWarnAboutLegacyLifecyclesAndDerivedState.add(_componentName);

          error('Unsafe legacy lifecycles will not be called for components using new component APIs.\n\n' + '%s uses %s but also contains the following legacy lifecycles:%s%s%s\n\n' + 'The above lifecycles should be removed. Learn more about this warning here:\n' + 'https://fb.me/react-unsafe-component-lifecycles', _componentName, newApiName, foundWillMountName !== null ? "\n  " + foundWillMountName : '', foundWillReceivePropsName !== null ? "\n  " + foundWillReceivePropsName : '', foundWillUpdateName !== null ? "\n  " + foundWillUpdateName : '');
        }
      }
    }
  } // Cache unmasked context so we can avoid recreating masked context unless necessary.
  // ReactFiberContext usually updates this cache but can't for newly-created instances.


  if (isLegacyContextConsumer) {
    cacheContext(workInProgress, unmaskedContext, context);
  }

  return instance;
}

function callComponentWillMount(workInProgress, instance) {
  startPhaseTimer(workInProgress, 'componentWillMount');
  var oldState = instance.state;

  if (typeof instance.componentWillMount === 'function') {
    instance.componentWillMount();
  }

  if (typeof instance.UNSAFE_componentWillMount === 'function') {
    instance.UNSAFE_componentWillMount();
  }

  stopPhaseTimer();

  if (oldState !== instance.state) {
    {
      error('%s.componentWillMount(): Assigning directly to this.state is ' + "deprecated (except inside a component's " + 'constructor). Use setState instead.', getComponentName(workInProgress.type) || 'Component');
    }

    classComponentUpdater.enqueueReplaceState(instance, instance.state, null);
  }
}

function callComponentWillReceiveProps(workInProgress, instance, newProps, nextContext) {
  var oldState = instance.state;
  startPhaseTimer(workInProgress, 'componentWillReceiveProps');

  if (typeof instance.componentWillReceiveProps === 'function') {
    instance.componentWillReceiveProps(newProps, nextContext);
  }

  if (typeof instance.UNSAFE_componentWillReceiveProps === 'function') {
    instance.UNSAFE_componentWillReceiveProps(newProps, nextContext);
  }

  stopPhaseTimer();

  if (instance.state !== oldState) {
    {
      var componentName = getComponentName(workInProgress.type) || 'Component';

      if (!didWarnAboutStateAssignmentForComponent.has(componentName)) {
        didWarnAboutStateAssignmentForComponent.add(componentName);

        error('%s.componentWillReceiveProps(): Assigning directly to ' + "this.state is deprecated (except inside a component's " + 'constructor). Use setState instead.', componentName);
      }
    }

    classComponentUpdater.enqueueReplaceState(instance, instance.state, null);
  }
} // Invokes the mount life-cycles on a previously never rendered instance.


function mountClassInstance(workInProgress, ctor, newProps, renderExpirationTime) {
  {
    checkClassInstance(workInProgress, ctor, newProps);
  }

  var instance = workInProgress.stateNode;
  instance.props = newProps;
  instance.state = workInProgress.memoizedState;
  instance.refs = emptyRefsObject;
  initializeUpdateQueue(workInProgress);
  var contextType = ctor.contextType;

  if (typeof contextType === 'object' && contextType !== null) {
    instance.context = readContext(contextType);
  } else {
    var unmaskedContext = getUnmaskedContext(workInProgress, ctor, true);
    instance.context = getMaskedContext(workInProgress, unmaskedContext);
  }

  {
    if (instance.state === newProps) {
      var componentName = getComponentName(ctor) || 'Component';

      if (!didWarnAboutDirectlyAssigningPropsToState.has(componentName)) {
        didWarnAboutDirectlyAssigningPropsToState.add(componentName);

        error('%s: It is not recommended to assign props directly to state ' + "because updates to props won't be reflected in state. " + 'In most cases, it is better to use props directly.', componentName);
      }
    }

    if (workInProgress.mode & StrictMode) {
      ReactStrictModeWarnings.recordLegacyContextWarning(workInProgress, instance);
    }

    {
      ReactStrictModeWarnings.recordUnsafeLifecycleWarnings(workInProgress, instance);
    }
  }

  processUpdateQueue(workInProgress, newProps, instance, renderExpirationTime);
  instance.state = workInProgress.memoizedState;
  var getDerivedStateFromProps = ctor.getDerivedStateFromProps;

  if (typeof getDerivedStateFromProps === 'function') {
    applyDerivedStateFromProps(workInProgress, ctor, getDerivedStateFromProps, newProps);
    instance.state = workInProgress.memoizedState;
  } // In order to support react-lifecycles-compat polyfilled components,
  // Unsafe lifecycles should not be invoked for components using the new APIs.


  if (typeof ctor.getDerivedStateFromProps !== 'function' && typeof instance.getSnapshotBeforeUpdate !== 'function' && (typeof instance.UNSAFE_componentWillMount === 'function' || typeof instance.componentWillMount === 'function')) {
    callComponentWillMount(workInProgress, instance); // If we had additional state updates during this life-cycle, let's
    // process them now.

    processUpdateQueue(workInProgress, newProps, instance, renderExpirationTime);
    instance.state = workInProgress.memoizedState;
  }

  if (typeof instance.componentDidMount === 'function') {
    workInProgress.effectTag |= Update;
  }
}

function resumeMountClassInstance(workInProgress, ctor, newProps, renderExpirationTime) {
  var instance = workInProgress.stateNode;
  var oldProps = workInProgress.memoizedProps;
  instance.props = oldProps;
  var oldContext = instance.context;
  var contextType = ctor.contextType;
  var nextContext = emptyContextObject;

  if (typeof contextType === 'object' && contextType !== null) {
    nextContext = readContext(contextType);
  } else {
    var nextLegacyUnmaskedContext = getUnmaskedContext(workInProgress, ctor, true);
    nextContext = getMaskedContext(workInProgress, nextLegacyUnmaskedContext);
  }

  var getDerivedStateFromProps = ctor.getDerivedStateFromProps;
  var hasNewLifecycles = typeof getDerivedStateFromProps === 'function' || typeof instance.getSnapshotBeforeUpdate === 'function'; // Note: During these life-cycles, instance.props/instance.state are what
  // ever the previously attempted to render - not the "current". However,
  // during componentDidUpdate we pass the "current" props.
  // In order to support react-lifecycles-compat polyfilled components,
  // Unsafe lifecycles should not be invoked for components using the new APIs.

  if (!hasNewLifecycles && (typeof instance.UNSAFE_componentWillReceiveProps === 'function' || typeof instance.componentWillReceiveProps === 'function')) {
    if (oldProps !== newProps || oldContext !== nextContext) {
      callComponentWillReceiveProps(workInProgress, instance, newProps, nextContext);
    }
  }

  resetHasForceUpdateBeforeProcessing();
  var oldState = workInProgress.memoizedState;
  var newState = instance.state = oldState;
  processUpdateQueue(workInProgress, newProps, instance, renderExpirationTime);
  newState = workInProgress.memoizedState;

  if (oldProps === newProps && oldState === newState && !hasContextChanged() && !checkHasForceUpdateAfterProcessing()) {
    // If an update was already in progress, we should schedule an Update
    // effect even though we're bailing out, so that cWU/cDU are called.
    if (typeof instance.componentDidMount === 'function') {
      workInProgress.effectTag |= Update;
    }

    return false;
  }

  if (typeof getDerivedStateFromProps === 'function') {
    applyDerivedStateFromProps(workInProgress, ctor, getDerivedStateFromProps, newProps);
    newState = workInProgress.memoizedState;
  }

  var shouldUpdate = checkHasForceUpdateAfterProcessing() || checkShouldComponentUpdate(workInProgress, ctor, oldProps, newProps, oldState, newState, nextContext);

  if (shouldUpdate) {
    // In order to support react-lifecycles-compat polyfilled components,
    // Unsafe lifecycles should not be invoked for components using the new APIs.
    if (!hasNewLifecycles && (typeof instance.UNSAFE_componentWillMount === 'function' || typeof instance.componentWillMount === 'function')) {
      startPhaseTimer(workInProgress, 'componentWillMount');

      if (typeof instance.componentWillMount === 'function') {
        instance.componentWillMount();
      }

      if (typeof instance.UNSAFE_componentWillMount === 'function') {
        instance.UNSAFE_componentWillMount();
      }

      stopPhaseTimer();
    }

    if (typeof instance.componentDidMount === 'function') {
      workInProgress.effectTag |= Update;
    }
  } else {
    // If an update was already in progress, we should schedule an Update
    // effect even though we're bailing out, so that cWU/cDU are called.
    if (typeof instance.componentDidMount === 'function') {
      workInProgress.effectTag |= Update;
    } // If shouldComponentUpdate returned false, we should still update the
    // memoized state to indicate that this work can be reused.


    workInProgress.memoizedProps = newProps;
    workInProgress.memoizedState = newState;
  } // Update the existing instance's state, props, and context pointers even
  // if shouldComponentUpdate returns false.


  instance.props = newProps;
  instance.state = newState;
  instance.context = nextContext;
  return shouldUpdate;
} // Invokes the update life-cycles and returns false if it shouldn't rerender.


function updateClassInstance(current, workInProgress, ctor, newProps, renderExpirationTime) {
  var instance = workInProgress.stateNode;
  cloneUpdateQueue(current, workInProgress);
  var oldProps = workInProgress.memoizedProps;
  instance.props = workInProgress.type === workInProgress.elementType ? oldProps : resolveDefaultProps(workInProgress.type, oldProps);
  var oldContext = instance.context;
  var contextType = ctor.contextType;
  var nextContext = emptyContextObject;

  if (typeof contextType === 'object' && contextType !== null) {
    nextContext = readContext(contextType);
  } else {
    var nextUnmaskedContext = getUnmaskedContext(workInProgress, ctor, true);
    nextContext = getMaskedContext(workInProgress, nextUnmaskedContext);
  }

  var getDerivedStateFromProps = ctor.getDerivedStateFromProps;
  var hasNewLifecycles = typeof getDerivedStateFromProps === 'function' || typeof instance.getSnapshotBeforeUpdate === 'function'; // Note: During these life-cycles, instance.props/instance.state are what
  // ever the previously attempted to render - not the "current". However,
  // during componentDidUpdate we pass the "current" props.
  // In order to support react-lifecycles-compat polyfilled components,
  // Unsafe lifecycles should not be invoked for components using the new APIs.

  if (!hasNewLifecycles && (typeof instance.UNSAFE_componentWillReceiveProps === 'function' || typeof instance.componentWillReceiveProps === 'function')) {
    if (oldProps !== newProps || oldContext !== nextContext) {
      callComponentWillReceiveProps(workInProgress, instance, newProps, nextContext);
    }
  }

  resetHasForceUpdateBeforeProcessing();
  var oldState = workInProgress.memoizedState;
  var newState = instance.state = oldState;
  processUpdateQueue(workInProgress, newProps, instance, renderExpirationTime);
  newState = workInProgress.memoizedState;

  if (oldProps === newProps && oldState === newState && !hasContextChanged() && !checkHasForceUpdateAfterProcessing()) {
    // If an update was already in progress, we should schedule an Update
    // effect even though we're bailing out, so that cWU/cDU are called.
    if (typeof instance.componentDidUpdate === 'function') {
      if (oldProps !== current.memoizedProps || oldState !== current.memoizedState) {
        workInProgress.effectTag |= Update;
      }
    }

    if (typeof instance.getSnapshotBeforeUpdate === 'function') {
      if (oldProps !== current.memoizedProps || oldState !== current.memoizedState) {
        workInProgress.effectTag |= Snapshot;
      }
    }

    return false;
  }

  if (typeof getDerivedStateFromProps === 'function') {
    applyDerivedStateFromProps(workInProgress, ctor, getDerivedStateFromProps, newProps);
    newState = workInProgress.memoizedState;
  }

  var shouldUpdate = checkHasForceUpdateAfterProcessing() || checkShouldComponentUpdate(workInProgress, ctor, oldProps, newProps, oldState, newState, nextContext);

  if (shouldUpdate) {
    // In order to support react-lifecycles-compat polyfilled components,
    // Unsafe lifecycles should not be invoked for components using the new APIs.
    if (!hasNewLifecycles && (typeof instance.UNSAFE_componentWillUpdate === 'function' || typeof instance.componentWillUpdate === 'function')) {
      startPhaseTimer(workInProgress, 'componentWillUpdate');

      if (typeof instance.componentWillUpdate === 'function') {
        instance.componentWillUpdate(newProps, newState, nextContext);
      }

      if (typeof instance.UNSAFE_componentWillUpdate === 'function') {
        instance.UNSAFE_componentWillUpdate(newProps, newState, nextContext);
      }

      stopPhaseTimer();
    }

    if (typeof instance.componentDidUpdate === 'function') {
      workInProgress.effectTag |= Update;
    }

    if (typeof instance.getSnapshotBeforeUpdate === 'function') {
      workInProgress.effectTag |= Snapshot;
    }
  } else {
    // If an update was already in progress, we should schedule an Update
    // effect even though we're bailing out, so that cWU/cDU are called.
    if (typeof instance.componentDidUpdate === 'function') {
      if (oldProps !== current.memoizedProps || oldState !== current.memoizedState) {
        workInProgress.effectTag |= Update;
      }
    }

    if (typeof instance.getSnapshotBeforeUpdate === 'function') {
      if (oldProps !== current.memoizedProps || oldState !== current.memoizedState) {
        workInProgress.effectTag |= Snapshot;
      }
    } // If shouldComponentUpdate returned false, we should still update the
    // memoized props/state to indicate that this work can be reused.


    workInProgress.memoizedProps = newProps;
    workInProgress.memoizedState = newState;
  } // Update the existing instance's state, props, and context pointers even
  // if shouldComponentUpdate returns false.


  instance.props = newProps;
  instance.state = newState;
  instance.context = nextContext;
  return shouldUpdate;
}

var didWarnAboutMaps;
var didWarnAboutGenerators;
var didWarnAboutStringRefs;
var ownerHasKeyUseWarning;
var ownerHasFunctionTypeWarning;

var warnForMissingKey = function (child) {};

{
  didWarnAboutMaps = false;
  didWarnAboutGenerators = false;
  didWarnAboutStringRefs = {};
  /**
   * Warn if there's no key explicitly set on dynamic arrays of children or
   * object keys are not valid. This allows us to keep track of children between
   * updates.
   */

  ownerHasKeyUseWarning = {};
  ownerHasFunctionTypeWarning = {};

  warnForMissingKey = function (child) {
    if (child === null || typeof child !== 'object') {
      return;
    }

    if (!child._store || child._store.validated || child.key != null) {
      return;
    }

    if (!(typeof child._store === 'object')) {
      {
        throw Error( "React Component in warnForMissingKey should have a _store. This error is likely caused by a bug in React. Please file an issue." );
      }
    }

    child._store.validated = true;
    var currentComponentErrorInfo = 'Each child in a list should have a unique ' + '"key" prop. See https://fb.me/react-warning-keys for ' + 'more information.' + getCurrentFiberStackInDev();

    if (ownerHasKeyUseWarning[currentComponentErrorInfo]) {
      return;
    }

    ownerHasKeyUseWarning[currentComponentErrorInfo] = true;

    error('Each child in a list should have a unique ' + '"key" prop. See https://fb.me/react-warning-keys for ' + 'more information.');
  };
}

var isArray$1 = Array.isArray;

function coerceRef(returnFiber, current, element) {
  var mixedRef = element.ref;

  if (mixedRef !== null && typeof mixedRef !== 'function' && typeof mixedRef !== 'object') {
    {
      // TODO: Clean this up once we turn on the string ref warning for
      // everyone, because the strict mode case will no longer be relevant
      if ((returnFiber.mode & StrictMode || warnAboutStringRefs) && // We warn in ReactElement.js if owner and self are equal for string refs
      // because these cannot be automatically converted to an arrow function
      // using a codemod. Therefore, we don't have to warn about string refs again.
      !(element._owner && element._self && element._owner.stateNode !== element._self)) {
        var componentName = getComponentName(returnFiber.type) || 'Component';

        if (!didWarnAboutStringRefs[componentName]) {
          {
            error('A string ref, "%s", has been found within a strict mode tree. ' + 'String refs are a source of potential bugs and should be avoided. ' + 'We recommend using useRef() or createRef() instead. ' + 'Learn more about using refs safely here: ' + 'https://fb.me/react-strict-mode-string-ref%s', mixedRef, getStackByFiberInDevAndProd(returnFiber));
          }

          didWarnAboutStringRefs[componentName] = true;
        }
      }
    }

    if (element._owner) {
      var owner = element._owner;
      var inst;

      if (owner) {
        var ownerFiber = owner;

        if (!(ownerFiber.tag === ClassComponent)) {
          {
            throw Error( "Function components cannot have string refs. We recommend using useRef() instead. Learn more about using refs safely here: https://fb.me/react-strict-mode-string-ref" );
          }
        }

        inst = ownerFiber.stateNode;
      }

      if (!inst) {
        {
          throw Error( "Missing owner for string ref " + mixedRef + ". This error is likely caused by a bug in React. Please file an issue." );
        }
      }

      var stringRef = '' + mixedRef; // Check if previous string ref matches new string ref

      if (current !== null && current.ref !== null && typeof current.ref === 'function' && current.ref._stringRef === stringRef) {
        return current.ref;
      }

      var ref = function (value) {
        var refs = inst.refs;

        if (refs === emptyRefsObject) {
          // This is a lazy pooled frozen object, so we need to initialize.
          refs = inst.refs = {};
        }

        if (value === null) {
          delete refs[stringRef];
        } else {
          refs[stringRef] = value;
        }
      };

      ref._stringRef = stringRef;
      return ref;
    } else {
      if (!(typeof mixedRef === 'string')) {
        {
          throw Error( "Expected ref to be a function, a string, an object returned by React.createRef(), or null." );
        }
      }

      if (!element._owner) {
        {
          throw Error( "Element ref was specified as a string (" + mixedRef + ") but no owner was set. This could happen for one of the following reasons:\n1. You may be adding a ref to a function component\n2. You may be adding a ref to a component that was not created inside a component's render method\n3. You have multiple copies of React loaded\nSee https://fb.me/react-refs-must-have-owner for more information." );
        }
      }
    }
  }

  return mixedRef;
}

function throwOnInvalidObjectType(returnFiber, newChild) {
  if (returnFiber.type !== 'textarea') {
    var addendum = '';

    {
      addendum = ' If you meant to render a collection of children, use an array ' + 'instead.' + getCurrentFiberStackInDev();
    }

    {
      {
        throw Error( "Objects are not valid as a React child (found: " + (Object.prototype.toString.call(newChild) === '[object Object]' ? 'object with keys {' + Object.keys(newChild).join(', ') + '}' : newChild) + ")." + addendum );
      }
    }
  }
}

function warnOnFunctionType() {
  {
    var currentComponentErrorInfo = 'Functions are not valid as a React child. This may happen if ' + 'you return a Component instead of <Component /> from render. ' + 'Or maybe you meant to call this function rather than return it.' + getCurrentFiberStackInDev();

    if (ownerHasFunctionTypeWarning[currentComponentErrorInfo]) {
      return;
    }

    ownerHasFunctionTypeWarning[currentComponentErrorInfo] = true;

    error('Functions are not valid as a React child. This may happen if ' + 'you return a Component instead of <Component /> from render. ' + 'Or maybe you meant to call this function rather than return it.');
  }
} // This wrapper function exists because I expect to clone the code in each path
// to be able to optimize each path individually by branching early. This needs
// a compiler or we can do it manually. Helpers that don't need this branching
// live outside of this function.


function ChildReconciler(shouldTrackSideEffects) {
  function deleteChild(returnFiber, childToDelete) {
    if (!shouldTrackSideEffects) {
      // Noop.
      return;
    } // Deletions are added in reversed order so we add it to the front.
    // At this point, the return fiber's effect list is empty except for
    // deletions, so we can just append the deletion to the list. The remaining
    // effects aren't added until the complete phase. Once we implement
    // resuming, this may not be true.


    var last = returnFiber.lastEffect;

    if (last !== null) {
      last.nextEffect = childToDelete;
      returnFiber.lastEffect = childToDelete;
    } else {
      returnFiber.firstEffect = returnFiber.lastEffect = childToDelete;
    }

    childToDelete.nextEffect = null;
    childToDelete.effectTag = Deletion;
  }

  function deleteRemainingChildren(returnFiber, currentFirstChild) {
    if (!shouldTrackSideEffects) {
      // Noop.
      return null;
    } // TODO: For the shouldClone case, this could be micro-optimized a bit by
    // assuming that after the first child we've already added everything.


    var childToDelete = currentFirstChild;

    while (childToDelete !== null) {
      deleteChild(returnFiber, childToDelete);
      childToDelete = childToDelete.sibling;
    }

    return null;
  }

  function mapRemainingChildren(returnFiber, currentFirstChild) {
    // Add the remaining children to a temporary map so that we can find them by
    // keys quickly. Implicit (null) keys get added to this set with their index
    // instead.
    var existingChildren = new Map();
    var existingChild = currentFirstChild;

    while (existingChild !== null) {
      if (existingChild.key !== null) {
        existingChildren.set(existingChild.key, existingChild);
      } else {
        existingChildren.set(existingChild.index, existingChild);
      }

      existingChild = existingChild.sibling;
    }

    return existingChildren;
  }

  function useFiber(fiber, pendingProps) {
    // We currently set sibling to null and index to 0 here because it is easy
    // to forget to do before returning it. E.g. for the single child case.
    var clone = createWorkInProgress(fiber, pendingProps);
    clone.index = 0;
    clone.sibling = null;
    return clone;
  }

  function placeChild(newFiber, lastPlacedIndex, newIndex) {
    newFiber.index = newIndex;

    if (!shouldTrackSideEffects) {
      // Noop.
      return lastPlacedIndex;
    }

    var current = newFiber.alternate;

    if (current !== null) {
      var oldIndex = current.index;

      if (oldIndex < lastPlacedIndex) {
        // This is a move.
        newFiber.effectTag = Placement;
        return lastPlacedIndex;
      } else {
        // This item can stay in place.
        return oldIndex;
      }
    } else {
      // This is an insertion.
      newFiber.effectTag = Placement;
      return lastPlacedIndex;
    }
  }

  function placeSingleChild(newFiber) {
    // This is simpler for the single child case. We only need to do a
    // placement for inserting new children.
    if (shouldTrackSideEffects && newFiber.alternate === null) {
      newFiber.effectTag = Placement;
    }

    return newFiber;
  }

  function updateTextNode(returnFiber, current, textContent, expirationTime) {
    if (current === null || current.tag !== HostText) {
      // Insert
      var created = createFiberFromText(textContent, returnFiber.mode, expirationTime);
      created.return = returnFiber;
      return created;
    } else {
      // Update
      var existing = useFiber(current, textContent);
      existing.return = returnFiber;
      return existing;
    }
  }

  function updateElement(returnFiber, current, element, expirationTime) {
    if (current !== null) {
      if (current.elementType === element.type || ( // Keep this check inline so it only runs on the false path:
       isCompatibleFamilyForHotReloading(current, element) )) {
        // Move based on index
        var existing = useFiber(current, element.props);
        existing.ref = coerceRef(returnFiber, current, element);
        existing.return = returnFiber;

        {
          existing._debugSource = element._source;
          existing._debugOwner = element._owner;
        }

        return existing;
      }
    } // Insert


    var created = createFiberFromElement(element, returnFiber.mode, expirationTime);
    created.ref = coerceRef(returnFiber, current, element);
    created.return = returnFiber;
    return created;
  }

  function updatePortal(returnFiber, current, portal, expirationTime) {
    if (current === null || current.tag !== HostPortal || current.stateNode.containerInfo !== portal.containerInfo || current.stateNode.implementation !== portal.implementation) {
      // Insert
      var created = createFiberFromPortal(portal, returnFiber.mode, expirationTime);
      created.return = returnFiber;
      return created;
    } else {
      // Update
      var existing = useFiber(current, portal.children || []);
      existing.return = returnFiber;
      return existing;
    }
  }

  function updateFragment(returnFiber, current, fragment, expirationTime, key) {
    if (current === null || current.tag !== Fragment) {
      // Insert
      var created = createFiberFromFragment(fragment, returnFiber.mode, expirationTime, key);
      created.return = returnFiber;
      return created;
    } else {
      // Update
      var existing = useFiber(current, fragment);
      existing.return = returnFiber;
      return existing;
    }
  }

  function createChild(returnFiber, newChild, expirationTime) {
    if (typeof newChild === 'string' || typeof newChild === 'number') {
      // Text nodes don't have keys. If the previous node is implicitly keyed
      // we can continue to replace it without aborting even if it is not a text
      // node.
      var created = createFiberFromText('' + newChild, returnFiber.mode, expirationTime);
      created.return = returnFiber;
      return created;
    }

    if (typeof newChild === 'object' && newChild !== null) {
      switch (newChild.$$typeof) {
        case REACT_ELEMENT_TYPE:
          {
            var _created = createFiberFromElement(newChild, returnFiber.mode, expirationTime);

            _created.ref = coerceRef(returnFiber, null, newChild);
            _created.return = returnFiber;
            return _created;
          }

        case REACT_PORTAL_TYPE:
          {
            var _created2 = createFiberFromPortal(newChild, returnFiber.mode, expirationTime);

            _created2.return = returnFiber;
            return _created2;
          }
      }

      if (isArray$1(newChild) || getIteratorFn(newChild)) {
        var _created3 = createFiberFromFragment(newChild, returnFiber.mode, expirationTime, null);

        _created3.return = returnFiber;
        return _created3;
      }

      throwOnInvalidObjectType(returnFiber, newChild);
    }

    {
      if (typeof newChild === 'function') {
        warnOnFunctionType();
      }
    }

    return null;
  }

  function updateSlot(returnFiber, oldFiber, newChild, expirationTime) {
    // Update the fiber if the keys match, otherwise return null.
    var key = oldFiber !== null ? oldFiber.key : null;

    if (typeof newChild === 'string' || typeof newChild === 'number') {
      // Text nodes don't have keys. If the previous node is implicitly keyed
      // we can continue to replace it without aborting even if it is not a text
      // node.
      if (key !== null) {
        return null;
      }

      return updateTextNode(returnFiber, oldFiber, '' + newChild, expirationTime);
    }

    if (typeof newChild === 'object' && newChild !== null) {
      switch (newChild.$$typeof) {
        case REACT_ELEMENT_TYPE:
          {
            if (newChild.key === key) {
              if (newChild.type === REACT_FRAGMENT_TYPE) {
                return updateFragment(returnFiber, oldFiber, newChild.props.children, expirationTime, key);
              }

              return updateElement(returnFiber, oldFiber, newChild, expirationTime);
            } else {
              return null;
            }
          }

        case REACT_PORTAL_TYPE:
          {
            if (newChild.key === key) {
              return updatePortal(returnFiber, oldFiber, newChild, expirationTime);
            } else {
              return null;
            }
          }
      }

      if (isArray$1(newChild) || getIteratorFn(newChild)) {
        if (key !== null) {
          return null;
        }

        return updateFragment(returnFiber, oldFiber, newChild, expirationTime, null);
      }

      throwOnInvalidObjectType(returnFiber, newChild);
    }

    {
      if (typeof newChild === 'function') {
        warnOnFunctionType();
      }
    }

    return null;
  }

  function updateFromMap(existingChildren, returnFiber, newIdx, newChild, expirationTime) {
    if (typeof newChild === 'string' || typeof newChild === 'number') {
      // Text nodes don't have keys, so we neither have to check the old nor
      // new node for the key. If both are text nodes, they match.
      var matchedFiber = existingChildren.get(newIdx) || null;
      return updateTextNode(returnFiber, matchedFiber, '' + newChild, expirationTime);
    }

    if (typeof newChild === 'object' && newChild !== null) {
      switch (newChild.$$typeof) {
        case REACT_ELEMENT_TYPE:
          {
            var _matchedFiber = existingChildren.get(newChild.key === null ? newIdx : newChild.key) || null;

            if (newChild.type === REACT_FRAGMENT_TYPE) {
              return updateFragment(returnFiber, _matchedFiber, newChild.props.children, expirationTime, newChild.key);
            }

            return updateElement(returnFiber, _matchedFiber, newChild, expirationTime);
          }

        case REACT_PORTAL_TYPE:
          {
            var _matchedFiber2 = existingChildren.get(newChild.key === null ? newIdx : newChild.key) || null;

            return updatePortal(returnFiber, _matchedFiber2, newChild, expirationTime);
          }
      }

      if (isArray$1(newChild) || getIteratorFn(newChild)) {
        var _matchedFiber3 = existingChildren.get(newIdx) || null;

        return updateFragment(returnFiber, _matchedFiber3, newChild, expirationTime, null);
      }

      throwOnInvalidObjectType(returnFiber, newChild);
    }

    {
      if (typeof newChild === 'function') {
        warnOnFunctionType();
      }
    }

    return null;
  }
  /**
   * Warns if there is a duplicate or missing key
   */


  function warnOnInvalidKey(child, knownKeys) {
    {
      if (typeof child !== 'object' || child === null) {
        return knownKeys;
      }

      switch (child.$$typeof) {
        case REACT_ELEMENT_TYPE:
        case REACT_PORTAL_TYPE:
          warnForMissingKey(child);
          var key = child.key;

          if (typeof key !== 'string') {
            break;
          }

          if (knownKeys === null) {
            knownKeys = new Set();
            knownKeys.add(key);
            break;
          }

          if (!knownKeys.has(key)) {
            knownKeys.add(key);
            break;
          }

          error('Encountered two children with the same key, `%s`. ' + 'Keys should be unique so that components maintain their identity ' + 'across updates. Non-unique keys may cause children to be ' + 'duplicated and/or omitted — the behavior is unsupported and ' + 'could change in a future version.', key);

          break;
      }
    }

    return knownKeys;
  }

  function reconcileChildrenArray(returnFiber, currentFirstChild, newChildren, expirationTime) {
    // This algorithm can't optimize by searching from both ends since we
    // don't have backpointers on fibers. I'm trying to see how far we can get
    // with that model. If it ends up not being worth the tradeoffs, we can
    // add it later.
    // Even with a two ended optimization, we'd want to optimize for the case
    // where there are few changes and brute force the comparison instead of
    // going for the Map. It'd like to explore hitting that path first in
    // forward-only mode and only go for the Map once we notice that we need
    // lots of look ahead. This doesn't handle reversal as well as two ended
    // search but that's unusual. Besides, for the two ended optimization to
    // work on Iterables, we'd need to copy the whole set.
    // In this first iteration, we'll just live with hitting the bad case
    // (adding everything to a Map) in for every insert/move.
    // If you change this code, also update reconcileChildrenIterator() which
    // uses the same algorithm.
    {
      // First, validate keys.
      var knownKeys = null;

      for (var i = 0; i < newChildren.length; i++) {
        var child = newChildren[i];
        knownKeys = warnOnInvalidKey(child, knownKeys);
      }
    }

    var resultingFirstChild = null;
    var previousNewFiber = null;
    var oldFiber = currentFirstChild;
    var lastPlacedIndex = 0;
    var newIdx = 0;
    var nextOldFiber = null;

    for (; oldFiber !== null && newIdx < newChildren.length; newIdx++) {
      if (oldFiber.index > newIdx) {
        nextOldFiber = oldFiber;
        oldFiber = null;
      } else {
        nextOldFiber = oldFiber.sibling;
      }

      var newFiber = updateSlot(returnFiber, oldFiber, newChildren[newIdx], expirationTime);

      if (newFiber === null) {
        // TODO: This breaks on empty slots like null children. That's
        // unfortunate because it triggers the slow path all the time. We need
        // a better way to communicate whether this was a miss or null,
        // boolean, undefined, etc.
        if (oldFiber === null) {
          oldFiber = nextOldFiber;
        }

        break;
      }

      if (shouldTrackSideEffects) {
        if (oldFiber && newFiber.alternate === null) {
          // We matched the slot, but we didn't reuse the existing fiber, so we
          // need to delete the existing child.
          deleteChild(returnFiber, oldFiber);
        }
      }

      lastPlacedIndex = placeChild(newFiber, lastPlacedIndex, newIdx);

      if (previousNewFiber === null) {
        // TODO: Move out of the loop. This only happens for the first run.
        resultingFirstChild = newFiber;
      } else {
        // TODO: Defer siblings if we're not at the right index for this slot.
        // I.e. if we had null values before, then we want to defer this
        // for each null value. However, we also don't want to call updateSlot
        // with the previous one.
        previousNewFiber.sibling = newFiber;
      }

      previousNewFiber = newFiber;
      oldFiber = nextOldFiber;
    }

    if (newIdx === newChildren.length) {
      // We've reached the end of the new children. We can delete the rest.
      deleteRemainingChildren(returnFiber, oldFiber);
      return resultingFirstChild;
    }

    if (oldFiber === null) {
      // If we don't have any more existing children we can choose a fast path
      // since the rest will all be insertions.
      for (; newIdx < newChildren.length; newIdx++) {
        var _newFiber = createChild(returnFiber, newChildren[newIdx], expirationTime);

        if (_newFiber === null) {
          continue;
        }

        lastPlacedIndex = placeChild(_newFiber, lastPlacedIndex, newIdx);

        if (previousNewFiber === null) {
          // TODO: Move out of the loop. This only happens for the first run.
          resultingFirstChild = _newFiber;
        } else {
          previousNewFiber.sibling = _newFiber;
        }

        previousNewFiber = _newFiber;
      }

      return resultingFirstChild;
    } // Add all children to a key map for quick lookups.


    var existingChildren = mapRemainingChildren(returnFiber, oldFiber); // Keep scanning and use the map to restore deleted items as moves.

    for (; newIdx < newChildren.length; newIdx++) {
      var _newFiber2 = updateFromMap(existingChildren, returnFiber, newIdx, newChildren[newIdx], expirationTime);

      if (_newFiber2 !== null) {
        if (shouldTrackSideEffects) {
          if (_newFiber2.alternate !== null) {
            // The new fiber is a work in progress, but if there exists a
            // current, that means that we reused the fiber. We need to delete
            // it from the child list so that we don't add it to the deletion
            // list.
            existingChildren.delete(_newFiber2.key === null ? newIdx : _newFiber2.key);
          }
        }

        lastPlacedIndex = placeChild(_newFiber2, lastPlacedIndex, newIdx);

        if (previousNewFiber === null) {
          resultingFirstChild = _newFiber2;
        } else {
          previousNewFiber.sibling = _newFiber2;
        }

        previousNewFiber = _newFiber2;
      }
    }

    if (shouldTrackSideEffects) {
      // Any existing children that weren't consumed above were deleted. We need
      // to add them to the deletion list.
      existingChildren.forEach(function (child) {
        return deleteChild(returnFiber, child);
      });
    }

    return resultingFirstChild;
  }

  function reconcileChildrenIterator(returnFiber, currentFirstChild, newChildrenIterable, expirationTime) {
    // This is the same implementation as reconcileChildrenArray(),
    // but using the iterator instead.
    var iteratorFn = getIteratorFn(newChildrenIterable);

    if (!(typeof iteratorFn === 'function')) {
      {
        throw Error( "An object is not an iterable. This error is likely caused by a bug in React. Please file an issue." );
      }
    }

    {
      // We don't support rendering Generators because it's a mutation.
      // See https://github.com/facebook/react/issues/12995
      if (typeof Symbol === 'function' && // $FlowFixMe Flow doesn't know about toStringTag
      newChildrenIterable[Symbol.toStringTag] === 'Generator') {
        if (!didWarnAboutGenerators) {
          error('Using Generators as children is unsupported and will likely yield ' + 'unexpected results because enumerating a generator mutates it. ' + 'You may convert it to an array with `Array.from()` or the ' + '`[...spread]` operator before rendering. Keep in mind ' + 'you might need to polyfill these features for older browsers.');
        }

        didWarnAboutGenerators = true;
      } // Warn about using Maps as children


      if (newChildrenIterable.entries === iteratorFn) {
        if (!didWarnAboutMaps) {
          error('Using Maps as children is unsupported and will likely yield ' + 'unexpected results. Convert it to a sequence/iterable of keyed ' + 'ReactElements instead.');
        }

        didWarnAboutMaps = true;
      } // First, validate keys.
      // We'll get a different iterator later for the main pass.


      var _newChildren = iteratorFn.call(newChildrenIterable);

      if (_newChildren) {
        var knownKeys = null;

        var _step = _newChildren.next();

        for (; !_step.done; _step = _newChildren.next()) {
          var child = _step.value;
          knownKeys = warnOnInvalidKey(child, knownKeys);
        }
      }
    }

    var newChildren = iteratorFn.call(newChildrenIterable);

    if (!(newChildren != null)) {
      {
        throw Error( "An iterable object provided no iterator." );
      }
    }

    var resultingFirstChild = null;
    var previousNewFiber = null;
    var oldFiber = currentFirstChild;
    var lastPlacedIndex = 0;
    var newIdx = 0;
    var nextOldFiber = null;
    var step = newChildren.next();

    for (; oldFiber !== null && !step.done; newIdx++, step = newChildren.next()) {
      if (oldFiber.index > newIdx) {
        nextOldFiber = oldFiber;
        oldFiber = null;
      } else {
        nextOldFiber = oldFiber.sibling;
      }

      var newFiber = updateSlot(returnFiber, oldFiber, step.value, expirationTime);

      if (newFiber === null) {
        // TODO: This breaks on empty slots like null children. That's
        // unfortunate because it triggers the slow path all the time. We need
        // a better way to communicate whether this was a miss or null,
        // boolean, undefined, etc.
        if (oldFiber === null) {
          oldFiber = nextOldFiber;
        }

        break;
      }

      if (shouldTrackSideEffects) {
        if (oldFiber && newFiber.alternate === null) {
          // We matched the slot, but we didn't reuse the existing fiber, so we
          // need to delete the existing child.
          deleteChild(returnFiber, oldFiber);
        }
      }

      lastPlacedIndex = placeChild(newFiber, lastPlacedIndex, newIdx);

      if (previousNewFiber === null) {
        // TODO: Move out of the loop. This only happens for the first run.
        resultingFirstChild = newFiber;
      } else {
        // TODO: Defer siblings if we're not at the right index for this slot.
        // I.e. if we had null values before, then we want to defer this
        // for each null value. However, we also don't want to call updateSlot
        // with the previous one.
        previousNewFiber.sibling = newFiber;
      }

      previousNewFiber = newFiber;
      oldFiber = nextOldFiber;
    }

    if (step.done) {
      // We've reached the end of the new children. We can delete the rest.
      deleteRemainingChildren(returnFiber, oldFiber);
      return resultingFirstChild;
    }

    if (oldFiber === null) {
      // If we don't have any more existing children we can choose a fast path
      // since the rest will all be insertions.
      for (; !step.done; newIdx++, step = newChildren.next()) {
        var _newFiber3 = createChild(returnFiber, step.value, expirationTime);

        if (_newFiber3 === null) {
          continue;
        }

        lastPlacedIndex = placeChild(_newFiber3, lastPlacedIndex, newIdx);

        if (previousNewFiber === null) {
          // TODO: Move out of the loop. This only happens for the first run.
          resultingFirstChild = _newFiber3;
        } else {
          previousNewFiber.sibling = _newFiber3;
        }

        previousNewFiber = _newFiber3;
      }

      return resultingFirstChild;
    } // Add all children to a key map for quick lookups.


    var existingChildren = mapRemainingChildren(returnFiber, oldFiber); // Keep scanning and use the map to restore deleted items as moves.

    for (; !step.done; newIdx++, step = newChildren.next()) {
      var _newFiber4 = updateFromMap(existingChildren, returnFiber, newIdx, step.value, expirationTime);

      if (_newFiber4 !== null) {
        if (shouldTrackSideEffects) {
          if (_newFiber4.alternate !== null) {
            // The new fiber is a work in progress, but if there exists a
            // current, that means that we reused the fiber. We need to delete
            // it from the child list so that we don't add it to the deletion
            // list.
            existingChildren.delete(_newFiber4.key === null ? newIdx : _newFiber4.key);
          }
        }

        lastPlacedIndex = placeChild(_newFiber4, lastPlacedIndex, newIdx);

        if (previousNewFiber === null) {
          resultingFirstChild = _newFiber4;
        } else {
          previousNewFiber.sibling = _newFiber4;
        }

        previousNewFiber = _newFiber4;
      }
    }

    if (shouldTrackSideEffects) {
      // Any existing children that weren't consumed above were deleted. We need
      // to add them to the deletion list.
      existingChildren.forEach(function (child) {
        return deleteChild(returnFiber, child);
      });
    }

    return resultingFirstChild;
  }

  function reconcileSingleTextNode(returnFiber, currentFirstChild, textContent, expirationTime) {
    // There's no need to check for keys on text nodes since we don't have a
    // way to define them.
    if (currentFirstChild !== null && currentFirstChild.tag === HostText) {
      // We already have an existing node so let's just update it and delete
      // the rest.
      deleteRemainingChildren(returnFiber, currentFirstChild.sibling);
      var existing = useFiber(currentFirstChild, textContent);
      existing.return = returnFiber;
      return existing;
    } // The existing first child is not a text node so we need to create one
    // and delete the existing ones.


    deleteRemainingChildren(returnFiber, currentFirstChild);
    var created = createFiberFromText(textContent, returnFiber.mode, expirationTime);
    created.return = returnFiber;
    return created;
  }

  function reconcileSingleElement(returnFiber, currentFirstChild, element, expirationTime) {
    var key = element.key;
    var child = currentFirstChild;

    while (child !== null) {
      // TODO: If key === null and child.key === null, then this only applies to
      // the first item in the list.
      if (child.key === key) {
        switch (child.tag) {
          case Fragment:
            {
              if (element.type === REACT_FRAGMENT_TYPE) {
                deleteRemainingChildren(returnFiber, child.sibling);
                var existing = useFiber(child, element.props.children);
                existing.return = returnFiber;

                {
                  existing._debugSource = element._source;
                  existing._debugOwner = element._owner;
                }

                return existing;
              }

              break;
            }

          case Block:

          // We intentionally fallthrough here if enableBlocksAPI is not on.
          // eslint-disable-next-lined no-fallthrough

          default:
            {
              if (child.elementType === element.type || ( // Keep this check inline so it only runs on the false path:
               isCompatibleFamilyForHotReloading(child, element) )) {
                deleteRemainingChildren(returnFiber, child.sibling);

                var _existing3 = useFiber(child, element.props);

                _existing3.ref = coerceRef(returnFiber, child, element);
                _existing3.return = returnFiber;

                {
                  _existing3._debugSource = element._source;
                  _existing3._debugOwner = element._owner;
                }

                return _existing3;
              }

              break;
            }
        } // Didn't match.


        deleteRemainingChildren(returnFiber, child);
        break;
      } else {
        deleteChild(returnFiber, child);
      }

      child = child.sibling;
    }

    if (element.type === REACT_FRAGMENT_TYPE) {
      var created = createFiberFromFragment(element.props.children, returnFiber.mode, expirationTime, element.key);
      created.return = returnFiber;
      return created;
    } else {
      var _created4 = createFiberFromElement(element, returnFiber.mode, expirationTime);

      _created4.ref = coerceRef(returnFiber, currentFirstChild, element);
      _created4.return = returnFiber;
      return _created4;
    }
  }

  function reconcileSinglePortal(returnFiber, currentFirstChild, portal, expirationTime) {
    var key = portal.key;
    var child = currentFirstChild;

    while (child !== null) {
      // TODO: If key === null and child.key === null, then this only applies to
      // the first item in the list.
      if (child.key === key) {
        if (child.tag === HostPortal && child.stateNode.containerInfo === portal.containerInfo && child.stateNode.implementation === portal.implementation) {
          deleteRemainingChildren(returnFiber, child.sibling);
          var existing = useFiber(child, portal.children || []);
          existing.return = returnFiber;
          return existing;
        } else {
          deleteRemainingChildren(returnFiber, child);
          break;
        }
      } else {
        deleteChild(returnFiber, child);
      }

      child = child.sibling;
    }

    var created = createFiberFromPortal(portal, returnFiber.mode, expirationTime);
    created.return = returnFiber;
    return created;
  } // This API will tag the children with the side-effect of the reconciliation
  // itself. They will be added to the side-effect list as we pass through the
  // children and the parent.


  function reconcileChildFibers(returnFiber, currentFirstChild, newChild, expirationTime) {
    // This function is not recursive.
    // If the top level item is an array, we treat it as a set of children,
    // not as a fragment. Nested arrays on the other hand will be treated as
    // fragment nodes. Recursion happens at the normal flow.
    // Handle top level unkeyed fragments as if they were arrays.
    // This leads to an ambiguity between <>{[...]}</> and <>...</>.
    // We treat the ambiguous cases above the same.
    var isUnkeyedTopLevelFragment = typeof newChild === 'object' && newChild !== null && newChild.type === REACT_FRAGMENT_TYPE && newChild.key === null;

    if (isUnkeyedTopLevelFragment) {
      newChild = newChild.props.children;
    } // Handle object types


    var isObject = typeof newChild === 'object' && newChild !== null;

    if (isObject) {
      switch (newChild.$$typeof) {
        case REACT_ELEMENT_TYPE:
          return placeSingleChild(reconcileSingleElement(returnFiber, currentFirstChild, newChild, expirationTime));

        case REACT_PORTAL_TYPE:
          return placeSingleChild(reconcileSinglePortal(returnFiber, currentFirstChild, newChild, expirationTime));
      }
    }

    if (typeof newChild === 'string' || typeof newChild === 'number') {
      return placeSingleChild(reconcileSingleTextNode(returnFiber, currentFirstChild, '' + newChild, expirationTime));
    }

    if (isArray$1(newChild)) {
      return reconcileChildrenArray(returnFiber, currentFirstChild, newChild, expirationTime);
    }

    if (getIteratorFn(newChild)) {
      return reconcileChildrenIterator(returnFiber, currentFirstChild, newChild, expirationTime);
    }

    if (isObject) {
      throwOnInvalidObjectType(returnFiber, newChild);
    }

    {
      if (typeof newChild === 'function') {
        warnOnFunctionType();
      }
    }

    if (typeof newChild === 'undefined' && !isUnkeyedTopLevelFragment) {
      // If the new child is undefined, and the return fiber is a composite
      // component, throw an error. If Fiber return types are disabled,
      // we already threw above.
      switch (returnFiber.tag) {
        case ClassComponent:
          {
            {
              var instance = returnFiber.stateNode;

              if (instance.render._isMockFunction) {
                // We allow auto-mocks to proceed as if they're returning null.
                break;
              }
            }
          }
        // Intentionally fall through to the next case, which handles both
        // functions and classes
        // eslint-disable-next-lined no-fallthrough

        case FunctionComponent:
          {
            var Component = returnFiber.type;

            {
              {
                throw Error( (Component.displayName || Component.name || 'Component') + "(...): Nothing was returned from render. This usually means a return statement is missing. Or, to render nothing, return null." );
              }
            }
          }
      }
    } // Remaining cases are all treated as empty.


    return deleteRemainingChildren(returnFiber, currentFirstChild);
  }

  return reconcileChildFibers;
}

var reconcileChildFibers = ChildReconciler(true);
var mountChildFibers = ChildReconciler(false);
function cloneChildFibers(current, workInProgress) {
  if (!(current === null || workInProgress.child === current.child)) {
    {
      throw Error( "Resuming work not yet implemented." );
    }
  }

  if (workInProgress.child === null) {
    return;
  }

  var currentChild = workInProgress.child;
  var newChild = createWorkInProgress(currentChild, currentChild.pendingProps);
  workInProgress.child = newChild;
  newChild.return = workInProgress;

  while (currentChild.sibling !== null) {
    currentChild = currentChild.sibling;
    newChild = newChild.sibling = createWorkInProgress(currentChild, currentChild.pendingProps);
    newChild.return = workInProgress;
  }

  newChild.sibling = null;
} // Reset a workInProgress child set to prepare it for a second pass.

function resetChildFibers(workInProgress, renderExpirationTime) {
  var child = workInProgress.child;

  while (child !== null) {
    resetWorkInProgress(child, renderExpirationTime);
    child = child.sibling;
  }
}

var NO_CONTEXT = {};
var contextStackCursor$1 = createCursor(NO_CONTEXT);
var contextFiberStackCursor = createCursor(NO_CONTEXT);
var rootInstanceStackCursor = createCursor(NO_CONTEXT);

function requiredContext(c) {
  if (!(c !== NO_CONTEXT)) {
    {
      throw Error( "Expected host context to exist. This error is likely caused by a bug in React. Please file an issue." );
    }
  }

  return c;
}

function getRootHostContainer() {
  var rootInstance = requiredContext(rootInstanceStackCursor.current);
  return rootInstance;
}

function pushHostContainer(fiber, nextRootInstance) {
  // Push current root instance onto the stack;
  // This allows us to reset root when portals are popped.
  push(rootInstanceStackCursor, nextRootInstance, fiber); // Track the context and the Fiber that provided it.
  // This enables us to pop only Fibers that provide unique contexts.

  push(contextFiberStackCursor, fiber, fiber); // Finally, we need to push the host context to the stack.
  // However, we can't just call getRootHostContext() and push it because
  // we'd have a different number of entries on the stack depending on
  // whether getRootHostContext() throws somewhere in renderer code or not.
  // So we push an empty value first. This lets us safely unwind on errors.

  push(contextStackCursor$1, NO_CONTEXT, fiber);
  var nextRootContext = getRootHostContext(nextRootInstance); // Now that we know this function doesn't throw, replace it.

  pop(contextStackCursor$1, fiber);
  push(contextStackCursor$1, nextRootContext, fiber);
}

function popHostContainer(fiber) {
  pop(contextStackCursor$1, fiber);
  pop(contextFiberStackCursor, fiber);
  pop(rootInstanceStackCursor, fiber);
}

function getHostContext() {
  var context = requiredContext(contextStackCursor$1.current);
  return context;
}

function pushHostContext(fiber) {
  var rootInstance = requiredContext(rootInstanceStackCursor.current);
  var context = requiredContext(contextStackCursor$1.current);
  var nextContext = getChildHostContext(context, fiber.type); // Don't push this Fiber's context unless it's unique.

  if (context === nextContext) {
    return;
  } // Track the context and the Fiber that provided it.
  // This enables us to pop only Fibers that provide unique contexts.


  push(contextFiberStackCursor, fiber, fiber);
  push(contextStackCursor$1, nextContext, fiber);
}

function popHostContext(fiber) {
  // Do not pop unless this Fiber provided the current context.
  // pushHostContext() only pushes Fibers that provide unique contexts.
  if (contextFiberStackCursor.current !== fiber) {
    return;
  }

  pop(contextStackCursor$1, fiber);
  pop(contextFiberStackCursor, fiber);
}

var DefaultSuspenseContext = 0; // The Suspense Context is split into two parts. The lower bits is
// inherited deeply down the subtree. The upper bits only affect
// this immediate suspense boundary and gets reset each new
// boundary or suspense list.

var SubtreeSuspenseContextMask = 1; // Subtree Flags:
// InvisibleParentSuspenseContext indicates that one of our parent Suspense
// boundaries is not currently showing visible main content.
// Either because it is already showing a fallback or is not mounted at all.
// We can use this to determine if it is desirable to trigger a fallback at
// the parent. If not, then we might need to trigger undesirable boundaries
// and/or suspend the commit to avoid hiding the parent content.

var InvisibleParentSuspenseContext = 1; // Shallow Flags:
// ForceSuspenseFallback can be used by SuspenseList to force newly added
// items into their fallback state during one of the render passes.

var ForceSuspenseFallback = 2;
var suspenseStackCursor = createCursor(DefaultSuspenseContext);
function hasSuspenseContext(parentContext, flag) {
  return (parentContext & flag) !== 0;
}
function setDefaultShallowSuspenseContext(parentContext) {
  return parentContext & SubtreeSuspenseContextMask;
}
function setShallowSuspenseContext(parentContext, shallowContext) {
  return parentContext & SubtreeSuspenseContextMask | shallowContext;
}
function addSubtreeSuspenseContext(parentContext, subtreeContext) {
  return parentContext | subtreeContext;
}
function pushSuspenseContext(fiber, newContext) {
  push(suspenseStackCursor, newContext, fiber);
}
function popSuspenseContext(fiber) {
  pop(suspenseStackCursor, fiber);
}

function shouldCaptureSuspense(workInProgress, hasInvisibleParent) {
  // If it was the primary children that just suspended, capture and render the
  // fallback. Otherwise, don't capture and bubble to the next boundary.
  var nextState = workInProgress.memoizedState;

  if (nextState !== null) {
    if (nextState.dehydrated !== null) {
      // A dehydrated boundary always captures.
      return true;
    }

    return false;
  }

  var props = workInProgress.memoizedProps; // In order to capture, the Suspense component must have a fallback prop.

  if (props.fallback === undefined) {
    return false;
  } // Regular boundaries always capture.


  if (props.unstable_avoidThisFallback !== true) {
    return true;
  } // If it's a boundary we should avoid, then we prefer to bubble up to the
  // parent boundary if it is currently invisible.


  if (hasInvisibleParent) {
    return false;
  } // If the parent is not able to handle it, we must handle it.


  return true;
}
function findFirstSuspended(row) {
  var node = row;

  while (node !== null) {
    if (node.tag === SuspenseComponent) {
      var state = node.memoizedState;

      if (state !== null) {
        var dehydrated = state.dehydrated;

        if (dehydrated === null || isSuspenseInstancePending(dehydrated) || isSuspenseInstanceFallback(dehydrated)) {
          return node;
        }
      }
    } else if (node.tag === SuspenseListComponent && // revealOrder undefined can't be trusted because it don't
    // keep track of whether it suspended or not.
    node.memoizedProps.revealOrder !== undefined) {
      var didSuspend = (node.effectTag & DidCapture) !== NoEffect;

      if (didSuspend) {
        return node;
      }
    } else if (node.child !== null) {
      node.child.return = node;
      node = node.child;
      continue;
    }

    if (node === row) {
      return null;
    }

    while (node.sibling === null) {
      if (node.return === null || node.return === row) {
        return null;
      }

      node = node.return;
    }

    node.sibling.return = node.return;
    node = node.sibling;
  }

  return null;
}

function createDeprecatedResponderListener(responder, props) {
  var eventResponderListener = {
    responder: responder,
    props: props
  };

  {
    Object.freeze(eventResponderListener);
  }

  return eventResponderListener;
}

var HasEffect =
/* */
1; // Represents the phase in which the effect (not the clean-up) fires.

var Layout =
/*    */
2;
var Passive$1 =
/*   */
4;

var ReactCurrentDispatcher = ReactSharedInternals.ReactCurrentDispatcher,
    ReactCurrentBatchConfig$1 = ReactSharedInternals.ReactCurrentBatchConfig;
var didWarnAboutMismatchedHooksForComponent;

{
  didWarnAboutMismatchedHooksForComponent = new Set();
}

// These are set right before calling the component.
var renderExpirationTime = NoWork; // The work-in-progress fiber. I've named it differently to distinguish it from
// the work-in-progress hook.

var currentlyRenderingFiber$1 = null; // Hooks are stored as a linked list on the fiber's memoizedState field. The
// current hook list is the list that belongs to the current fiber. The
// work-in-progress hook list is a new list that will be added to the
// work-in-progress fiber.

var currentHook = null;
var workInProgressHook = null; // Whether an update was scheduled at any point during the render phase. This
// does not get reset if we do another render pass; only when we're completely
// finished evaluating this component. This is an optimization so we know
// whether we need to clear render phase updates after a throw.

var didScheduleRenderPhaseUpdate = false;
var RE_RENDER_LIMIT = 25; // In DEV, this is the name of the currently executing primitive hook

var currentHookNameInDev = null; // In DEV, this list ensures that hooks are called in the same order between renders.
// The list stores the order of hooks used during the initial render (mount).
// Subsequent renders (updates) reference this list.

var hookTypesDev = null;
var hookTypesUpdateIndexDev = -1; // In DEV, this tracks whether currently rendering component needs to ignore
// the dependencies for Hooks that need them (e.g. useEffect or useMemo).
// When true, such Hooks will always be "remounted". Only used during hot reload.

var ignorePreviousDependencies = false;

function mountHookTypesDev() {
  {
    var hookName = currentHookNameInDev;

    if (hookTypesDev === null) {
      hookTypesDev = [hookName];
    } else {
      hookTypesDev.push(hookName);
    }
  }
}

function updateHookTypesDev() {
  {
    var hookName = currentHookNameInDev;

    if (hookTypesDev !== null) {
      hookTypesUpdateIndexDev++;

      if (hookTypesDev[hookTypesUpdateIndexDev] !== hookName) {
        warnOnHookMismatchInDev(hookName);
      }
    }
  }
}

function checkDepsAreArrayDev(deps) {
  {
    if (deps !== undefined && deps !== null && !Array.isArray(deps)) {
      // Verify deps, but only on mount to avoid extra checks.
      // It's unlikely their type would change as usually you define them inline.
      error('%s received a final argument that is not an array (instead, received `%s`). When ' + 'specified, the final argument must be an array.', currentHookNameInDev, typeof deps);
    }
  }
}

function warnOnHookMismatchInDev(currentHookName) {
  {
    var componentName = getComponentName(currentlyRenderingFiber$1.type);

    if (!didWarnAboutMismatchedHooksForComponent.has(componentName)) {
      didWarnAboutMismatchedHooksForComponent.add(componentName);

      if (hookTypesDev !== null) {
        var table = '';
        var secondColumnStart = 30;

        for (var i = 0; i <= hookTypesUpdateIndexDev; i++) {
          var oldHookName = hookTypesDev[i];
          var newHookName = i === hookTypesUpdateIndexDev ? currentHookName : oldHookName;
          var row = i + 1 + ". " + oldHookName; // Extra space so second column lines up
          // lol @ IE not supporting String#repeat

          while (row.length < secondColumnStart) {
            row += ' ';
          }

          row += newHookName + '\n';
          table += row;
        }

        error('React has detected a change in the order of Hooks called by %s. ' + 'This will lead to bugs and errors if not fixed. ' + 'For more information, read the Rules of Hooks: https://fb.me/rules-of-hooks\n\n' + '   Previous render            Next render\n' + '   ------------------------------------------------------\n' + '%s' + '   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n', componentName, table);
      }
    }
  }
}

function throwInvalidHookError() {
  {
    {
      throw Error( "Invalid hook call. Hooks can only be called inside of the body of a function component. This could happen for one of the following reasons:\n1. You might have mismatching versions of React and the renderer (such as React DOM)\n2. You might be breaking the Rules of Hooks\n3. You might have more than one copy of React in the same app\nSee https://fb.me/react-invalid-hook-call for tips about how to debug and fix this problem." );
    }
  }
}

function areHookInputsEqual(nextDeps, prevDeps) {
  {
    if (ignorePreviousDependencies) {
      // Only true when this component is being hot reloaded.
      return false;
    }
  }

  if (prevDeps === null) {
    {
      error('%s received a final argument during this render, but not during ' + 'the previous render. Even though the final argument is optional, ' + 'its type cannot change between renders.', currentHookNameInDev);
    }

    return false;
  }

  {
    // Don't bother comparing lengths in prod because these arrays should be
    // passed inline.
    if (nextDeps.length !== prevDeps.length) {
      error('The final argument passed to %s changed size between renders. The ' + 'order and size of this array must remain constant.\n\n' + 'Previous: %s\n' + 'Incoming: %s', currentHookNameInDev, "[" + prevDeps.join(', ') + "]", "[" + nextDeps.join(', ') + "]");
    }
  }

  for (var i = 0; i < prevDeps.length && i < nextDeps.length; i++) {
    if (objectIs(nextDeps[i], prevDeps[i])) {
      continue;
    }

    return false;
  }

  return true;
}

function renderWithHooks(current, workInProgress, Component, props, secondArg, nextRenderExpirationTime) {
  renderExpirationTime = nextRenderExpirationTime;
  currentlyRenderingFiber$1 = workInProgress;

  {
    hookTypesDev = current !== null ? current._debugHookTypes : null;
    hookTypesUpdateIndexDev = -1; // Used for hot reloading:

    ignorePreviousDependencies = current !== null && current.type !== workInProgress.type;
  }

  workInProgress.memoizedState = null;
  workInProgress.updateQueue = null;
  workInProgress.expirationTime = NoWork; // The following should have already been reset
  // currentHook = null;
  // workInProgressHook = null;
  // didScheduleRenderPhaseUpdate = false;
  // TODO Warn if no hooks are used at all during mount, then some are used during update.
  // Currently we will identify the update render as a mount because memoizedState === null.
  // This is tricky because it's valid for certain types of components (e.g. React.lazy)
  // Using memoizedState to differentiate between mount/update only works if at least one stateful hook is used.
  // Non-stateful hooks (e.g. context) don't get added to memoizedState,
  // so memoizedState would be null during updates and mounts.

  {
    if (current !== null && current.memoizedState !== null) {
      ReactCurrentDispatcher.current = HooksDispatcherOnUpdateInDEV;
    } else if (hookTypesDev !== null) {
      // This dispatcher handles an edge case where a component is updating,
      // but no stateful hooks have been used.
      // We want to match the production code behavior (which will use HooksDispatcherOnMount),
      // but with the extra DEV validation to ensure hooks ordering hasn't changed.
      // This dispatcher does that.
      ReactCurrentDispatcher.current = HooksDispatcherOnMountWithHookTypesInDEV;
    } else {
      ReactCurrentDispatcher.current = HooksDispatcherOnMountInDEV;
    }
  }

  var children = Component(props, secondArg); // Check if there was a render phase update

  if (workInProgress.expirationTime === renderExpirationTime) {
    // Keep rendering in a loop for as long as render phase updates continue to
    // be scheduled. Use a counter to prevent infinite loops.
    var numberOfReRenders = 0;

    do {
      workInProgress.expirationTime = NoWork;

      if (!(numberOfReRenders < RE_RENDER_LIMIT)) {
        {
          throw Error( "Too many re-renders. React limits the number of renders to prevent an infinite loop." );
        }
      }

      numberOfReRenders += 1;

      {
        // Even when hot reloading, allow dependencies to stabilize
        // after first render to prevent infinite render phase updates.
        ignorePreviousDependencies = false;
      } // Start over from the beginning of the list


      currentHook = null;
      workInProgressHook = null;
      workInProgress.updateQueue = null;

      {
        // Also validate hook order for cascading updates.
        hookTypesUpdateIndexDev = -1;
      }

      ReactCurrentDispatcher.current =  HooksDispatcherOnRerenderInDEV ;
      children = Component(props, secondArg);
    } while (workInProgress.expirationTime === renderExpirationTime);
  } // We can assume the previous dispatcher is always this one, since we set it
  // at the beginning of the render phase and there's no re-entrancy.


  ReactCurrentDispatcher.current = ContextOnlyDispatcher;

  {
    workInProgress._debugHookTypes = hookTypesDev;
  } // This check uses currentHook so that it works the same in DEV and prod bundles.
  // hookTypesDev could catch more cases (e.g. context) but only in DEV bundles.


  var didRenderTooFewHooks = currentHook !== null && currentHook.next !== null;
  renderExpirationTime = NoWork;
  currentlyRenderingFiber$1 = null;
  currentHook = null;
  workInProgressHook = null;

  {
    currentHookNameInDev = null;
    hookTypesDev = null;
    hookTypesUpdateIndexDev = -1;
  }

  didScheduleRenderPhaseUpdate = false;

  if (!!didRenderTooFewHooks) {
    {
      throw Error( "Rendered fewer hooks than expected. This may be caused by an accidental early return statement." );
    }
  }

  return children;
}
function bailoutHooks(current, workInProgress, expirationTime) {
  workInProgress.updateQueue = current.updateQueue;
  workInProgress.effectTag &= ~(Passive | Update);

  if (current.expirationTime <= expirationTime) {
    current.expirationTime = NoWork;
  }
}
function resetHooksAfterThrow() {
  // We can assume the previous dispatcher is always this one, since we set it
  // at the beginning of the render phase and there's no re-entrancy.
  ReactCurrentDispatcher.current = ContextOnlyDispatcher;

  if (didScheduleRenderPhaseUpdate) {
    // There were render phase updates. These are only valid for this render
    // phase, which we are now aborting. Remove the updates from the queues so
    // they do not persist to the next render. Do not remove updates from hooks
    // that weren't processed.
    //
    // Only reset the updates from the queue if it has a clone. If it does
    // not have a clone, that means it wasn't processed, and the updates were
    // scheduled before we entered the render phase.
    var hook = currentlyRenderingFiber$1.memoizedState;

    while (hook !== null) {
      var queue = hook.queue;

      if (queue !== null) {
        queue.pending = null;
      }

      hook = hook.next;
    }
  }

  renderExpirationTime = NoWork;
  currentlyRenderingFiber$1 = null;
  currentHook = null;
  workInProgressHook = null;

  {
    hookTypesDev = null;
    hookTypesUpdateIndexDev = -1;
    currentHookNameInDev = null;
  }

  didScheduleRenderPhaseUpdate = false;
}

function mountWorkInProgressHook() {
  var hook = {
    memoizedState: null,
    baseState: null,
    baseQueue: null,
    queue: null,
    next: null
  };

  if (workInProgressHook === null) {
    // This is the first hook in the list
    currentlyRenderingFiber$1.memoizedState = workInProgressHook = hook;
  } else {
    // Append to the end of the list
    workInProgressHook = workInProgressHook.next = hook;
  }

  return workInProgressHook;
}

function updateWorkInProgressHook() {
  // This function is used both for updates and for re-renders triggered by a
  // render phase update. It assumes there is either a current hook we can
  // clone, or a work-in-progress hook from a previous render pass that we can
  // use as a base. When we reach the end of the base list, we must switch to
  // the dispatcher used for mounts.
  var nextCurrentHook;

  if (currentHook === null) {
    var current = currentlyRenderingFiber$1.alternate;

    if (current !== null) {
      nextCurrentHook = current.memoizedState;
    } else {
      nextCurrentHook = null;
    }
  } else {
    nextCurrentHook = currentHook.next;
  }

  var nextWorkInProgressHook;

  if (workInProgressHook === null) {
    nextWorkInProgressHook = currentlyRenderingFiber$1.memoizedState;
  } else {
    nextWorkInProgressHook = workInProgressHook.next;
  }

  if (nextWorkInProgressHook !== null) {
    // There's already a work-in-progress. Reuse it.
    workInProgressHook = nextWorkInProgressHook;
    nextWorkInProgressHook = workInProgressHook.next;
    currentHook = nextCurrentHook;
  } else {
    // Clone from the current hook.
    if (!(nextCurrentHook !== null)) {
      {
        throw Error( "Rendered more hooks than during the previous render." );
      }
    }

    currentHook = nextCurrentHook;
    var newHook = {
      memoizedState: currentHook.memoizedState,
      baseState: currentHook.baseState,
      baseQueue: currentHook.baseQueue,
      queue: currentHook.queue,
      next: null
    };

    if (workInProgressHook === null) {
      // This is the first hook in the list.
      currentlyRenderingFiber$1.memoizedState = workInProgressHook = newHook;
    } else {
      // Append to the end of the list.
      workInProgressHook = workInProgressHook.next = newHook;
    }
  }

  return workInProgressHook;
}

function createFunctionComponentUpdateQueue() {
  return {
    lastEffect: null
  };
}

function basicStateReducer(state, action) {
  // $FlowFixMe: Flow doesn't like mixed types
  return typeof action === 'function' ? action(state) : action;
}

function mountReducer(reducer, initialArg, init) {
  var hook = mountWorkInProgressHook();
  var initialState;

  if (init !== undefined) {
    initialState = init(initialArg);
  } else {
    initialState = initialArg;
  }

  hook.memoizedState = hook.baseState = initialState;
  var queue = hook.queue = {
    pending: null,
    dispatch: null,
    lastRenderedReducer: reducer,
    lastRenderedState: initialState
  };
  var dispatch = queue.dispatch = dispatchAction.bind(null, currentlyRenderingFiber$1, queue);
  return [hook.memoizedState, dispatch];
}

function updateReducer(reducer, initialArg, init) {
  var hook = updateWorkInProgressHook();
  var queue = hook.queue;

  if (!(queue !== null)) {
    {
      throw Error( "Should have a queue. This is likely a bug in React. Please file an issue." );
    }
  }

  queue.lastRenderedReducer = reducer;
  var current = currentHook; // The last rebase update that is NOT part of the base state.

  var baseQueue = current.baseQueue; // The last pending update that hasn't been processed yet.

  var pendingQueue = queue.pending;

  if (pendingQueue !== null) {
    // We have new updates that haven't been processed yet.
    // We'll add them to the base queue.
    if (baseQueue !== null) {
      // Merge the pending queue and the base queue.
      var baseFirst = baseQueue.next;
      var pendingFirst = pendingQueue.next;
      baseQueue.next = pendingFirst;
      pendingQueue.next = baseFirst;
    }

    current.baseQueue = baseQueue = pendingQueue;
    queue.pending = null;
  }

  if (baseQueue !== null) {
    // We have a queue to process.
    var first = baseQueue.next;
    var newState = current.baseState;
    var newBaseState = null;
    var newBaseQueueFirst = null;
    var newBaseQueueLast = null;
    var update = first;

    do {
      var updateExpirationTime = update.expirationTime;

      if (updateExpirationTime < renderExpirationTime) {
        // Priority is insufficient. Skip this update. If this is the first
        // skipped update, the previous update/state is the new base
        // update/state.
        var clone = {
          expirationTime: update.expirationTime,
          suspenseConfig: update.suspenseConfig,
          action: update.action,
          eagerReducer: update.eagerReducer,
          eagerState: update.eagerState,
          next: null
        };

        if (newBaseQueueLast === null) {
          newBaseQueueFirst = newBaseQueueLast = clone;
          newBaseState = newState;
        } else {
          newBaseQueueLast = newBaseQueueLast.next = clone;
        } // Update the remaining priority in the queue.


        if (updateExpirationTime > currentlyRenderingFiber$1.expirationTime) {
          currentlyRenderingFiber$1.expirationTime = updateExpirationTime;
          markUnprocessedUpdateTime(updateExpirationTime);
        }
      } else {
        // This update does have sufficient priority.
        if (newBaseQueueLast !== null) {
          var _clone = {
            expirationTime: Sync,
            // This update is going to be committed so we never want uncommit it.
            suspenseConfig: update.suspenseConfig,
            action: update.action,
            eagerReducer: update.eagerReducer,
            eagerState: update.eagerState,
            next: null
          };
          newBaseQueueLast = newBaseQueueLast.next = _clone;
        } // Mark the event time of this update as relevant to this render pass.
        // TODO: This should ideally use the true event time of this update rather than
        // its priority which is a derived and not reverseable value.
        // TODO: We should skip this update if it was already committed but currently
        // we have no way of detecting the difference between a committed and suspended
        // update here.


        markRenderEventTimeAndConfig(updateExpirationTime, update.suspenseConfig); // Process this update.

        if (update.eagerReducer === reducer) {
          // If this update was processed eagerly, and its reducer matches the
          // current reducer, we can use the eagerly computed state.
          newState = update.eagerState;
        } else {
          var action = update.action;
          newState = reducer(newState, action);
        }
      }

      update = update.next;
    } while (update !== null && update !== first);

    if (newBaseQueueLast === null) {
      newBaseState = newState;
    } else {
      newBaseQueueLast.next = newBaseQueueFirst;
    } // Mark that the fiber performed work, but only if the new state is
    // different from the current state.


    if (!objectIs(newState, hook.memoizedState)) {
      markWorkInProgressReceivedUpdate();
    }

    hook.memoizedState = newState;
    hook.baseState = newBaseState;
    hook.baseQueue = newBaseQueueLast;
    queue.lastRenderedState = newState;
  }

  var dispatch = queue.dispatch;
  return [hook.memoizedState, dispatch];
}

function rerenderReducer(reducer, initialArg, init) {
  var hook = updateWorkInProgressHook();
  var queue = hook.queue;

  if (!(queue !== null)) {
    {
      throw Error( "Should have a queue. This is likely a bug in React. Please file an issue." );
    }
  }

  queue.lastRenderedReducer = reducer; // This is a re-render. Apply the new render phase updates to the previous
  // work-in-progress hook.

  var dispatch = queue.dispatch;
  var lastRenderPhaseUpdate = queue.pending;
  var newState = hook.memoizedState;

  if (lastRenderPhaseUpdate !== null) {
    // The queue doesn't persist past this render pass.
    queue.pending = null;
    var firstRenderPhaseUpdate = lastRenderPhaseUpdate.next;
    var update = firstRenderPhaseUpdate;

    do {
      // Process this render phase update. We don't have to check the
      // priority because it will always be the same as the current
      // render's.
      var action = update.action;
      newState = reducer(newState, action);
      update = update.next;
    } while (update !== firstRenderPhaseUpdate); // Mark that the fiber performed work, but only if the new state is
    // different from the current state.


    if (!objectIs(newState, hook.memoizedState)) {
      markWorkInProgressReceivedUpdate();
    }

    hook.memoizedState = newState; // Don't persist the state accumulated from the render phase updates to
    // the base state unless the queue is empty.
    // TODO: Not sure if this is the desired semantics, but it's what we
    // do for gDSFP. I can't remember why.

    if (hook.baseQueue === null) {
      hook.baseState = newState;
    }

    queue.lastRenderedState = newState;
  }

  return [newState, dispatch];
}

function mountState(initialState) {
  var hook = mountWorkInProgressHook();

  if (typeof initialState === 'function') {
    // $FlowFixMe: Flow doesn't like mixed types
    initialState = initialState();
  }

  hook.memoizedState = hook.baseState = initialState;
  var queue = hook.queue = {
    pending: null,
    dispatch: null,
    lastRenderedReducer: basicStateReducer,
    lastRenderedState: initialState
  };
  var dispatch = queue.dispatch = dispatchAction.bind(null, currentlyRenderingFiber$1, queue);
  return [hook.memoizedState, dispatch];
}

function updateState(initialState) {
  return updateReducer(basicStateReducer);
}

function rerenderState(initialState) {
  return rerenderReducer(basicStateReducer);
}

function pushEffect(tag, create, destroy, deps) {
  var effect = {
    tag: tag,
    create: create,
    destroy: destroy,
    deps: deps,
    // Circular
    next: null
  };
  var componentUpdateQueue = currentlyRenderingFiber$1.updateQueue;

  if (componentUpdateQueue === null) {
    componentUpdateQueue = createFunctionComponentUpdateQueue();
    currentlyRenderingFiber$1.updateQueue = componentUpdateQueue;
    componentUpdateQueue.lastEffect = effect.next = effect;
  } else {
    var lastEffect = componentUpdateQueue.lastEffect;

    if (lastEffect === null) {
      componentUpdateQueue.lastEffect = effect.next = effect;
    } else {
      var firstEffect = lastEffect.next;
      lastEffect.next = effect;
      effect.next = firstEffect;
      componentUpdateQueue.lastEffect = effect;
    }
  }

  return effect;
}

function mountRef(initialValue) {
  var hook = mountWorkInProgressHook();
  var ref = {
    current: initialValue
  };

  {
    Object.seal(ref);
  }

  hook.memoizedState = ref;
  return ref;
}

function updateRef(initialValue) {
  var hook = updateWorkInProgressHook();
  return hook.memoizedState;
}

function mountEffectImpl(fiberEffectTag, hookEffectTag, create, deps) {
  var hook = mountWorkInProgressHook();
  var nextDeps = deps === undefined ? null : deps;
  currentlyRenderingFiber$1.effectTag |= fiberEffectTag;
  hook.memoizedState = pushEffect(HasEffect | hookEffectTag, create, undefined, nextDeps);
}

function updateEffectImpl(fiberEffectTag, hookEffectTag, create, deps) {
  var hook = updateWorkInProgressHook();
  var nextDeps = deps === undefined ? null : deps;
  var destroy = undefined;

  if (currentHook !== null) {
    var prevEffect = currentHook.memoizedState;
    destroy = prevEffect.destroy;

    if (nextDeps !== null) {
      var prevDeps = prevEffect.deps;

      if (areHookInputsEqual(nextDeps, prevDeps)) {
        pushEffect(hookEffectTag, create, destroy, nextDeps);
        return;
      }
    }
  }

  currentlyRenderingFiber$1.effectTag |= fiberEffectTag;
  hook.memoizedState = pushEffect(HasEffect | hookEffectTag, create, destroy, nextDeps);
}

function mountEffect(create, deps) {
  {
    // $FlowExpectedError - jest isn't a global, and isn't recognized outside of tests
    if ('undefined' !== typeof jest) {
      warnIfNotCurrentlyActingEffectsInDEV(currentlyRenderingFiber$1);
    }
  }

  return mountEffectImpl(Update | Passive, Passive$1, create, deps);
}

function updateEffect(create, deps) {
  {
    // $FlowExpectedError - jest isn't a global, and isn't recognized outside of tests
    if ('undefined' !== typeof jest) {
      warnIfNotCurrentlyActingEffectsInDEV(currentlyRenderingFiber$1);
    }
  }

  return updateEffectImpl(Update | Passive, Passive$1, create, deps);
}

function mountLayoutEffect(create, deps) {
  return mountEffectImpl(Update, Layout, create, deps);
}

function updateLayoutEffect(create, deps) {
  return updateEffectImpl(Update, Layout, create, deps);
}

function imperativeHandleEffect(create, ref) {
  if (typeof ref === 'function') {
    var refCallback = ref;

    var _inst = create();

    refCallback(_inst);
    return function () {
      refCallback(null);
    };
  } else if (ref !== null && ref !== undefined) {
    var refObject = ref;

    {
      if (!refObject.hasOwnProperty('current')) {
        error('Expected useImperativeHandle() first argument to either be a ' + 'ref callback or React.createRef() object. Instead received: %s.', 'an object with keys {' + Object.keys(refObject).join(', ') + '}');
      }
    }

    var _inst2 = create();

    refObject.current = _inst2;
    return function () {
      refObject.current = null;
    };
  }
}

function mountImperativeHandle(ref, create, deps) {
  {
    if (typeof create !== 'function') {
      error('Expected useImperativeHandle() second argument to be a function ' + 'that creates a handle. Instead received: %s.', create !== null ? typeof create : 'null');
    }
  } // TODO: If deps are provided, should we skip comparing the ref itself?


  var effectDeps = deps !== null && deps !== undefined ? deps.concat([ref]) : null;
  return mountEffectImpl(Update, Layout, imperativeHandleEffect.bind(null, create, ref), effectDeps);
}

function updateImperativeHandle(ref, create, deps) {
  {
    if (typeof create !== 'function') {
      error('Expected useImperativeHandle() second argument to be a function ' + 'that creates a handle. Instead received: %s.', create !== null ? typeof create : 'null');
    }
  } // TODO: If deps are provided, should we skip comparing the ref itself?


  var effectDeps = deps !== null && deps !== undefined ? deps.concat([ref]) : null;
  return updateEffectImpl(Update, Layout, imperativeHandleEffect.bind(null, create, ref), effectDeps);
}

function mountDebugValue(value, formatterFn) {// This hook is normally a no-op.
  // The react-debug-hooks package injects its own implementation
  // so that e.g. DevTools can display custom hook values.
}

var updateDebugValue = mountDebugValue;

function mountCallback(callback, deps) {
  var hook = mountWorkInProgressHook();
  var nextDeps = deps === undefined ? null : deps;
  hook.memoizedState = [callback, nextDeps];
  return callback;
}

function updateCallback(callback, deps) {
  var hook = updateWorkInProgressHook();
  var nextDeps = deps === undefined ? null : deps;
  var prevState = hook.memoizedState;

  if (prevState !== null) {
    if (nextDeps !== null) {
      var prevDeps = prevState[1];

      if (areHookInputsEqual(nextDeps, prevDeps)) {
        return prevState[0];
      }
    }
  }

  hook.memoizedState = [callback, nextDeps];
  return callback;
}

function mountMemo(nextCreate, deps) {
  var hook = mountWorkInProgressHook();
  var nextDeps = deps === undefined ? null : deps;
  var nextValue = nextCreate();
  hook.memoizedState = [nextValue, nextDeps];
  return nextValue;
}

function updateMemo(nextCreate, deps) {
  var hook = updateWorkInProgressHook();
  var nextDeps = deps === undefined ? null : deps;
  var prevState = hook.memoizedState;

  if (prevState !== null) {
    // Assume these are defined. If they're not, areHookInputsEqual will warn.
    if (nextDeps !== null) {
      var prevDeps = prevState[1];

      if (areHookInputsEqual(nextDeps, prevDeps)) {
        return prevState[0];
      }
    }
  }

  var nextValue = nextCreate();
  hook.memoizedState = [nextValue, nextDeps];
  return nextValue;
}

function mountDeferredValue(value, config) {
  var _mountState = mountState(value),
      prevValue = _mountState[0],
      setValue = _mountState[1];

  mountEffect(function () {
    var previousConfig = ReactCurrentBatchConfig$1.suspense;
    ReactCurrentBatchConfig$1.suspense = config === undefined ? null : config;

    try {
      setValue(value);
    } finally {
      ReactCurrentBatchConfig$1.suspense = previousConfig;
    }
  }, [value, config]);
  return prevValue;
}

function updateDeferredValue(value, config) {
  var _updateState = updateState(),
      prevValue = _updateState[0],
      setValue = _updateState[1];

  updateEffect(function () {
    var previousConfig = ReactCurrentBatchConfig$1.suspense;
    ReactCurrentBatchConfig$1.suspense = config === undefined ? null : config;

    try {
      setValue(value);
    } finally {
      ReactCurrentBatchConfig$1.suspense = previousConfig;
    }
  }, [value, config]);
  return prevValue;
}

function rerenderDeferredValue(value, config) {
  var _rerenderState = rerenderState(),
      prevValue = _rerenderState[0],
      setValue = _rerenderState[1];

  updateEffect(function () {
    var previousConfig = ReactCurrentBatchConfig$1.suspense;
    ReactCurrentBatchConfig$1.suspense = config === undefined ? null : config;

    try {
      setValue(value);
    } finally {
      ReactCurrentBatchConfig$1.suspense = previousConfig;
    }
  }, [value, config]);
  return prevValue;
}

function startTransition(setPending, config, callback) {
  var priorityLevel = getCurrentPriorityLevel();
  runWithPriority$1(priorityLevel < UserBlockingPriority$1 ? UserBlockingPriority$1 : priorityLevel, function () {
    setPending(true);
  });
  runWithPriority$1(priorityLevel > NormalPriority ? NormalPriority : priorityLevel, function () {
    var previousConfig = ReactCurrentBatchConfig$1.suspense;
    ReactCurrentBatchConfig$1.suspense = config === undefined ? null : config;

    try {
      setPending(false);
      callback();
    } finally {
      ReactCurrentBatchConfig$1.suspense = previousConfig;
    }
  });
}

function mountTransition(config) {
  var _mountState2 = mountState(false),
      isPending = _mountState2[0],
      setPending = _mountState2[1];

  var start = mountCallback(startTransition.bind(null, setPending, config), [setPending, config]);
  return [start, isPending];
}

function updateTransition(config) {
  var _updateState2 = updateState(),
      isPending = _updateState2[0],
      setPending = _updateState2[1];

  var start = updateCallback(startTransition.bind(null, setPending, config), [setPending, config]);
  return [start, isPending];
}

function rerenderTransition(config) {
  var _rerenderState2 = rerenderState(),
      isPending = _rerenderState2[0],
      setPending = _rerenderState2[1];

  var start = updateCallback(startTransition.bind(null, setPending, config), [setPending, config]);
  return [start, isPending];
}

function dispatchAction(fiber, queue, action) {
  {
    if (typeof arguments[3] === 'function') {
      error("State updates from the useState() and useReducer() Hooks don't support the " + 'second callback argument. To execute a side effect after ' + 'rendering, declare it in the component body with useEffect().');
    }
  }

  var currentTime = requestCurrentTimeForUpdate();
  var suspenseConfig = requestCurrentSuspenseConfig();
  var expirationTime = computeExpirationForFiber(currentTime, fiber, suspenseConfig);
  var update = {
    expirationTime: expirationTime,
    suspenseConfig: suspenseConfig,
    action: action,
    eagerReducer: null,
    eagerState: null,
    next: null
  };

  {
    update.priority = getCurrentPriorityLevel();
  } // Append the update to the end of the list.


  var pending = queue.pending;

  if (pending === null) {
    // This is the first update. Create a circular list.
    update.next = update;
  } else {
    update.next = pending.next;
    pending.next = update;
  }

  queue.pending = update;
  var alternate = fiber.alternate;

  if (fiber === currentlyRenderingFiber$1 || alternate !== null && alternate === currentlyRenderingFiber$1) {
    // This is a render phase update. Stash it in a lazily-created map of
    // queue -> linked list of updates. After this render pass, we'll restart
    // and apply the stashed updates on top of the work-in-progress hook.
    didScheduleRenderPhaseUpdate = true;
    update.expirationTime = renderExpirationTime;
    currentlyRenderingFiber$1.expirationTime = renderExpirationTime;
  } else {
    if (fiber.expirationTime === NoWork && (alternate === null || alternate.expirationTime === NoWork)) {
      // The queue is currently empty, which means we can eagerly compute the
      // next state before entering the render phase. If the new state is the
      // same as the current state, we may be able to bail out entirely.
      var lastRenderedReducer = queue.lastRenderedReducer;

      if (lastRenderedReducer !== null) {
        var prevDispatcher;

        {
          prevDispatcher = ReactCurrentDispatcher.current;
          ReactCurrentDispatcher.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
        }

        try {
          var currentState = queue.lastRenderedState;
          var eagerState = lastRenderedReducer(currentState, action); // Stash the eagerly computed state, and the reducer used to compute
          // it, on the update object. If the reducer hasn't changed by the
          // time we enter the render phase, then the eager state can be used
          // without calling the reducer again.

          update.eagerReducer = lastRenderedReducer;
          update.eagerState = eagerState;

          if (objectIs(eagerState, currentState)) {
            // Fast path. We can bail out without scheduling React to re-render.
            // It's still possible that we'll need to rebase this update later,
            // if the component re-renders for a different reason and by that
            // time the reducer has changed.
            return;
          }
        } catch (error) {// Suppress the error. It will throw again in the render phase.
        } finally {
          {
            ReactCurrentDispatcher.current = prevDispatcher;
          }
        }
      }
    }

    {
      // $FlowExpectedError - jest isn't a global, and isn't recognized outside of tests
      if ('undefined' !== typeof jest) {
        warnIfNotScopedWithMatchingAct(fiber);
        warnIfNotCurrentlyActingUpdatesInDev(fiber);
      }
    }

    scheduleWork(fiber, expirationTime);
  }
}

var ContextOnlyDispatcher = {
  readContext: readContext,
  useCallback: throwInvalidHookError,
  useContext: throwInvalidHookError,
  useEffect: throwInvalidHookError,
  useImperativeHandle: throwInvalidHookError,
  useLayoutEffect: throwInvalidHookError,
  useMemo: throwInvalidHookError,
  useReducer: throwInvalidHookError,
  useRef: throwInvalidHookError,
  useState: throwInvalidHookError,
  useDebugValue: throwInvalidHookError,
  useResponder: throwInvalidHookError,
  useDeferredValue: throwInvalidHookError,
  useTransition: throwInvalidHookError
};
var HooksDispatcherOnMountInDEV = null;
var HooksDispatcherOnMountWithHookTypesInDEV = null;
var HooksDispatcherOnUpdateInDEV = null;
var HooksDispatcherOnRerenderInDEV = null;
var InvalidNestedHooksDispatcherOnMountInDEV = null;
var InvalidNestedHooksDispatcherOnUpdateInDEV = null;
var InvalidNestedHooksDispatcherOnRerenderInDEV = null;

{
  var warnInvalidContextAccess = function () {
    error('Context can only be read while React is rendering. ' + 'In classes, you can read it in the render method or getDerivedStateFromProps. ' + 'In function components, you can read it directly in the function body, but not ' + 'inside Hooks like useReducer() or useMemo().');
  };

  var warnInvalidHookAccess = function () {
    error('Do not call Hooks inside useEffect(...), useMemo(...), or other built-in Hooks. ' + 'You can only call Hooks at the top level of your React function. ' + 'For more information, see ' + 'https://fb.me/rules-of-hooks');
  };

  HooksDispatcherOnMountInDEV = {
    readContext: function (context, observedBits) {
      return readContext(context, observedBits);
    },
    useCallback: function (callback, deps) {
      currentHookNameInDev = 'useCallback';
      mountHookTypesDev();
      checkDepsAreArrayDev(deps);
      return mountCallback(callback, deps);
    },
    useContext: function (context, observedBits) {
      currentHookNameInDev = 'useContext';
      mountHookTypesDev();
      return readContext(context, observedBits);
    },
    useEffect: function (create, deps) {
      currentHookNameInDev = 'useEffect';
      mountHookTypesDev();
      checkDepsAreArrayDev(deps);
      return mountEffect(create, deps);
    },
    useImperativeHandle: function (ref, create, deps) {
      currentHookNameInDev = 'useImperativeHandle';
      mountHookTypesDev();
      checkDepsAreArrayDev(deps);
      return mountImperativeHandle(ref, create, deps);
    },
    useLayoutEffect: function (create, deps) {
      currentHookNameInDev = 'useLayoutEffect';
      mountHookTypesDev();
      checkDepsAreArrayDev(deps);
      return mountLayoutEffect(create, deps);
    },
    useMemo: function (create, deps) {
      currentHookNameInDev = 'useMemo';
      mountHookTypesDev();
      checkDepsAreArrayDev(deps);
      var prevDispatcher = ReactCurrentDispatcher.current;
      ReactCurrentDispatcher.current = InvalidNestedHooksDispatcherOnMountInDEV;

      try {
        return mountMemo(create, deps);
      } finally {
        ReactCurrentDispatcher.current = prevDispatcher;
      }
    },
    useReducer: function (reducer, initialArg, init) {
      currentHookNameInDev = 'useReducer';
      mountHookTypesDev();
      var prevDispatcher = ReactCurrentDispatcher.current;
      ReactCurrentDispatcher.current = InvalidNestedHooksDispatcherOnMountInDEV;

      try {
        return mountReducer(reducer, initialArg, init);
      } finally {
        ReactCurrentDispatcher.current = prevDispatcher;
      }
    },
    useRef: function (initialValue) {
      currentHookNameInDev = 'useRef';
      mountHookTypesDev();
      return mountRef(initialValue);
    },
    useState: function (initialState) {
      currentHookNameInDev = 'useState';
      mountHookTypesDev();
      var prevDispatcher = ReactCurrentDispatcher.current;
      ReactCurrentDispatcher.current = InvalidNestedHooksDispatcherOnMountInDEV;

      try {
        return mountState(initialState);
      } finally {
        ReactCurrentDispatcher.current = prevDispatcher;
      }
    },
    useDebugValue: function (value, formatterFn) {
      currentHookNameInDev = 'useDebugValue';
      mountHookTypesDev();
      return mountDebugValue();
    },
    useResponder: function (responder, props) {
      currentHookNameInDev = 'useResponder';
      mountHookTypesDev();
      return createDeprecatedResponderListener(responder, props);
    },
    useDeferredValue: function (value, config) {
      currentHookNameInDev = 'useDeferredValue';
      mountHookTypesDev();
      return mountDeferredValue(value, config);
    },
    useTransition: function (config) {
      currentHookNameInDev = 'useTransition';
      mountHookTypesDev();
      return mountTransition(config);
    }
  };
  HooksDispatcherOnMountWithHookTypesInDEV = {
    readContext: function (context, observedBits) {
      return readContext(context, observedBits);
    },
    useCallback: function (callback, deps) {
      currentHookNameInDev = 'useCallback';
      updateHookTypesDev();
      return mountCallback(callback, deps);
    },
    useContext: function (context, observedBits) {
      currentHookNameInDev = 'useContext';
      updateHookTypesDev();
      return readContext(context, observedBits);
    },
    useEffect: function (create, deps) {
      currentHookNameInDev = 'useEffect';
      updateHookTypesDev();
      return mountEffect(create, deps);
    },
    useImperativeHandle: function (ref, create, deps) {
      currentHookNameInDev = 'useImperativeHandle';
      updateHookTypesDev();
      return mountImperativeHandle(ref, create, deps);
    },
    useLayoutEffect: function (create, deps) {
      currentHookNameInDev = 'useLayoutEffect';
      updateHookTypesDev();
      return mountLayoutEffect(create, deps);
    },
    useMemo: function (create, deps) {
      currentHookNameInDev = 'useMemo';
      updateHookTypesDev();
      var prevDispatcher = ReactCurrentDispatcher.current;
      ReactCurrentDispatcher.current = InvalidNestedHooksDispatcherOnMountInDEV;

      try {
        return mountMemo(create, deps);
      } finally {
        ReactCurrentDispatcher.current = prevDispatcher;
      }
    },
    useReducer: function (reducer, initialArg, init) {
      currentHookNameInDev = 'useReducer';
      updateHookTypesDev();
      var prevDispatcher = ReactCurrentDispatcher.current;
      ReactCurrentDispatcher.current = InvalidNestedHooksDispatcherOnMountInDEV;

      try {
        return mountReducer(reducer, initialArg, init);
      } finally {
        ReactCurrentDispatcher.current = prevDispatcher;
      }
    },
    useRef: function (initialValue) {
      currentHookNameInDev = 'useRef';
      updateHookTypesDev();
      return mountRef(initialValue);
    },
    useState: function (initialState) {
      currentHookNameInDev = 'useState';
      updateHookTypesDev();
      var prevDispatcher = ReactCurrentDispatcher.current;
      ReactCurrentDispatcher.current = InvalidNestedHooksDispatcherOnMountInDEV;

      try {
        return mountState(initialState);
      } finally {
        ReactCurrentDispatcher.current = prevDispatcher;
      }
    },
    useDebugValue: function (value, formatterFn) {
      currentHookNameInDev = 'useDebugValue';
      updateHookTypesDev();
      return mountDebugValue();
    },
    useResponder: function (responder, props) {
      currentHookNameInDev = 'useResponder';
      updateHookTypesDev();
      return createDeprecatedResponderListener(responder, props);
    },
    useDeferredValue: function (value, config) {
      currentHookNameInDev = 'useDeferredValue';
      updateHookTypesDev();
      return mountDeferredValue(value, config);
    },
    useTransition: function (config) {
      currentHookNameInDev = 'useTransition';
      updateHookTypesDev();
      return mountTransition(config);
    }
  };
  HooksDispatcherOnUpdateInDEV = {
    readContext: function (context, observedBits) {
      return readContext(context, observedBits);
    },
    useCallback: function (callback, deps) {
      currentHookNameInDev = 'useCallback';
      updateHookTypesDev();
      return updateCallback(callback, deps);
    },
    useContext: function (context, observedBits) {
      currentHookNameInDev = 'useContext';
      updateHookTypesDev();
      return readContext(context, observedBits);
    },
    useEffect: function (create, deps) {
      currentHookNameInDev = 'useEffect';
      updateHookTypesDev();
      return updateEffect(create, deps);
    },
    useImperativeHandle: function (ref, create, deps) {
      currentHookNameInDev = 'useImperativeHandle';
      updateHookTypesDev();
      return updateImperativeHandle(ref, create, deps);
    },
    useLayoutEffect: function (create, deps) {
      currentHookNameInDev = 'useLayoutEffect';
      updateHookTypesDev();
      return updateLayoutEffect(create, deps);
    },
    useMemo: function (create, deps) {
      currentHookNameInDev = 'useMemo';
      updateHookTypesDev();
      var prevDispatcher = ReactCurrentDispatcher.current;
      ReactCurrentDispatcher.current = InvalidNestedHooksDispatcherOnUpdateInDEV;

      try {
        return updateMemo(create, deps);
      } finally {
        ReactCurrentDispatcher.current = prevDispatcher;
      }
    },
    useReducer: function (reducer, initialArg, init) {
      currentHookNameInDev = 'useReducer';
      updateHookTypesDev();
      var prevDispatcher = ReactCurrentDispatcher.current;
      ReactCurrentDispatcher.current = InvalidNestedHooksDispatcherOnUpdateInDEV;

      try {
        return updateReducer(reducer, initialArg, init);
      } finally {
        ReactCurrentDispatcher.current = prevDispatcher;
      }
    },
    useRef: function (initialValue) {
      currentHookNameInDev = 'useRef';
      updateHookTypesDev();
      return updateRef();
    },
    useState: function (initialState) {
      currentHookNameInDev = 'useState';
      updateHookTypesDev();
      var prevDispatcher = ReactCurrentDispatcher.current;
      ReactCurrentDispatcher.current = InvalidNestedHooksDispatcherOnUpdateInDEV;

      try {
        return updateState(initialState);
      } finally {
        ReactCurrentDispatcher.current = prevDispatcher;
      }
    },
    useDebugValue: function (value, formatterFn) {
      currentHookNameInDev = 'useDebugValue';
      updateHookTypesDev();
      return updateDebugValue();
    },
    useResponder: function (responder, props) {
      currentHookNameInDev = 'useResponder';
      updateHookTypesDev();
      return createDeprecatedResponderListener(responder, props);
    },
    useDeferredValue: function (value, config) {
      currentHookNameInDev = 'useDeferredValue';
      updateHookTypesDev();
      return updateDeferredValue(value, config);
    },
    useTransition: function (config) {
      currentHookNameInDev = 'useTransition';
      updateHookTypesDev();
      return updateTransition(config);
    }
  };
  HooksDispatcherOnRerenderInDEV = {
    readContext: function (context, observedBits) {
      return readContext(context, observedBits);
    },
    useCallback: function (callback, deps) {
      currentHookNameInDev = 'useCallback';
      updateHookTypesDev();
      return updateCallback(callback, deps);
    },
    useContext: function (context, observedBits) {
      currentHookNameInDev = 'useContext';
      updateHookTypesDev();
      return readContext(context, observedBits);
    },
    useEffect: function (create, deps) {
      currentHookNameInDev = 'useEffect';
      updateHookTypesDev();
      return updateEffect(create, deps);
    },
    useImperativeHandle: function (ref, create, deps) {
      currentHookNameInDev = 'useImperativeHandle';
      updateHookTypesDev();
      return updateImperativeHandle(ref, create, deps);
    },
    useLayoutEffect: function (create, deps) {
      currentHookNameInDev = 'useLayoutEffect';
      updateHookTypesDev();
      return updateLayoutEffect(create, deps);
    },
    useMemo: function (create, deps) {
      currentHookNameInDev = 'useMemo';
      updateHookTypesDev();
      var prevDispatcher = ReactCurrentDispatcher.current;
      ReactCurrentDispatcher.current = InvalidNestedHooksDispatcherOnRerenderInDEV;

      try {
        return updateMemo(create, deps);
      } finally {
        ReactCurrentDispatcher.current = prevDispatcher;
      }
    },
    useReducer: function (reducer, initialArg, init) {
      currentHookNameInDev = 'useReducer';
      updateHookTypesDev();
      var prevDispatcher = ReactCurrentDispatcher.current;
      ReactCurrentDispatcher.current = InvalidNestedHooksDispatcherOnRerenderInDEV;

      try {
        return rerenderReducer(reducer, initialArg, init);
      } finally {
        ReactCurrentDispatcher.current = prevDispatcher;
      }
    },
    useRef: function (initialValue) {
      currentHookNameInDev = 'useRef';
      updateHookTypesDev();
      return updateRef();
    },
    useState: function (initialState) {
      currentHookNameInDev = 'useState';
      updateHookTypesDev();
      var prevDispatcher = ReactCurrentDispatcher.current;
      ReactCurrentDispatcher.current = InvalidNestedHooksDispatcherOnRerenderInDEV;

      try {
        return rerenderState(initialState);
      } finally {
        ReactCurrentDispatcher.current = prevDispatcher;
      }
    },
    useDebugValue: function (value, formatterFn) {
      currentHookNameInDev = 'useDebugValue';
      updateHookTypesDev();
      return updateDebugValue();
    },
    useResponder: function (responder, props) {
      currentHookNameInDev = 'useResponder';
      updateHookTypesDev();
      return createDeprecatedResponderListener(responder, props);
    },
    useDeferredValue: function (value, config) {
      currentHookNameInDev = 'useDeferredValue';
      updateHookTypesDev();
      return rerenderDeferredValue(value, config);
    },
    useTransition: function (config) {
      currentHookNameInDev = 'useTransition';
      updateHookTypesDev();
      return rerenderTransition(config);
    }
  };
  InvalidNestedHooksDispatcherOnMountInDEV = {
    readContext: function (context, observedBits) {
      warnInvalidContextAccess();
      return readContext(context, observedBits);
    },
    useCallback: function (callback, deps) {
      currentHookNameInDev = 'useCallback';
      warnInvalidHookAccess();
      mountHookTypesDev();
      return mountCallback(callback, deps);
    },
    useContext: function (context, observedBits) {
      currentHookNameInDev = 'useContext';
      warnInvalidHookAccess();
      mountHookTypesDev();
      return readContext(context, observedBits);
    },
    useEffect: function (create, deps) {
      currentHookNameInDev = 'useEffect';
      warnInvalidHookAccess();
      mountHookTypesDev();
      return mountEffect(create, deps);
    },
    useImperativeHandle: function (ref, create, deps) {
      currentHookNameInDev = 'useImperativeHandle';
      warnInvalidHookAccess();
      mountHookTypesDev();
      return mountImperativeHandle(ref, create, deps);
    },
    useLayoutEffect: function (create, deps) {
      currentHookNameInDev = 'useLayoutEffect';
      warnInvalidHookAccess();
      mountHookTypesDev();
      return mountLayoutEffect(create, deps);
    },
    useMemo: function (create, deps) {
      currentHookNameInDev = 'useMemo';
      warnInvalidHookAccess();
      mountHookTypesDev();
      var prevDispatcher = ReactCurrentDispatcher.current;
      ReactCurrentDispatcher.current = InvalidNestedHooksDispatcherOnMountInDEV;

      try {
        return mountMemo(create, deps);
      } finally {
        ReactCurrentDispatcher.current = prevDispatcher;
      }
    },
    useReducer: function (reducer, initialArg, init) {
      currentHookNameInDev = 'useReducer';
      warnInvalidHookAccess();
      mountHookTypesDev();
      var prevDispatcher = ReactCurrentDispatcher.current;
      ReactCurrentDispatcher.current = InvalidNestedHooksDispatcherOnMountInDEV;

      try {
        return mountReducer(reducer, initialArg, init);
      } finally {
        ReactCurrentDispatcher.current = prevDispatcher;
      }
    },
    useRef: function (initialValue) {
      currentHookNameInDev = 'useRef';
      warnInvalidHookAccess();
      mountHookTypesDev();
      return mountRef(initialValue);
    },
    useState: function (initialState) {
      currentHookNameInDev = 'useState';
      warnInvalidHookAccess();
      mountHookTypesDev();
      var prevDispatcher = ReactCurrentDispatcher.current;
      ReactCurrentDispatcher.current = InvalidNestedHooksDispatcherOnMountInDEV;

      try {
        return mountState(initialState);
      } finally {
        ReactCurrentDispatcher.current = prevDispatcher;
      }
    },
    useDebugValue: function (value, formatterFn) {
      currentHookNameInDev = 'useDebugValue';
      warnInvalidHookAccess();
      mountHookTypesDev();
      return mountDebugValue();
    },
    useResponder: function (responder, props) {
      currentHookNameInDev = 'useResponder';
      warnInvalidHookAccess();
      mountHookTypesDev();
      return createDeprecatedResponderListener(responder, props);
    },
    useDeferredValue: function (value, config) {
      currentHookNameInDev = 'useDeferredValue';
      warnInvalidHookAccess();
      mountHookTypesDev();
      return mountDeferredValue(value, config);
    },
    useTransition: function (config) {
      currentHookNameInDev = 'useTransition';
      warnInvalidHookAccess();
      mountHookTypesDev();
      return mountTransition(config);
    }
  };
  InvalidNestedHooksDispatcherOnUpdateInDEV = {
    readContext: function (context, observedBits) {
      warnInvalidContextAccess();
      return readContext(context, observedBits);
    },
    useCallback: function (callback, deps) {
      currentHookNameInDev = 'useCallback';
      warnInvalidHookAccess();
      updateHookTypesDev();
      return updateCallback(callback, deps);
    },
    useContext: function (context, observedBits) {
      currentHookNameInDev = 'useContext';
      warnInvalidHookAccess();
      updateHookTypesDev();
      return readContext(context, observedBits);
    },
    useEffect: function (create, deps) {
      currentHookNameInDev = 'useEffect';
      warnInvalidHookAccess();
      updateHookTypesDev();
      return updateEffect(create, deps);
    },
    useImperativeHandle: function (ref, create, deps) {
      currentHookNameInDev = 'useImperativeHandle';
      warnInvalidHookAccess();
      updateHookTypesDev();
      return updateImperativeHandle(ref, create, deps);
    },
    useLayoutEffect: function (create, deps) {
      currentHookNameInDev = 'useLayoutEffect';
      warnInvalidHookAccess();
      updateHookTypesDev();
      return updateLayoutEffect(create, deps);
    },
    useMemo: function (create, deps) {
      currentHookNameInDev = 'useMemo';
      warnInvalidHookAccess();
      updateHookTypesDev();
      var prevDispatcher = ReactCurrentDispatcher.current;
      ReactCurrentDispatcher.current = InvalidNestedHooksDispatcherOnUpdateInDEV;

      try {
        return updateMemo(create, deps);
      } finally {
        ReactCurrentDispatcher.current = prevDispatcher;
      }
    },
    useReducer: function (reducer, initialArg, init) {
      currentHookNameInDev = 'useReducer';
      warnInvalidHookAccess();
      updateHookTypesDev();
      var prevDispatcher = ReactCurrentDispatcher.current;
      ReactCurrentDispatcher.current = InvalidNestedHooksDispatcherOnUpdateInDEV;

      try {
        return updateReducer(reducer, initialArg, init);
      } finally {
        ReactCurrentDispatcher.current = prevDispatcher;
      }
    },
    useRef: function (initialValue) {
      currentHookNameInDev = 'useRef';
      warnInvalidHookAccess();
      updateHookTypesDev();
      return updateRef();
    },
    useState: function (initialState) {
      currentHookNameInDev = 'useState';
      warnInvalidHookAccess();
      updateHookTypesDev();
      var prevDispatcher = ReactCurrentDispatcher.current;
      ReactCurrentDispatcher.current = InvalidNestedHooksDispatcherOnUpdateInDEV;

      try {
        return updateState(initialState);
      } finally {
        ReactCurrentDispatcher.current = prevDispatcher;
      }
    },
    useDebugValue: function (value, formatterFn) {
      currentHookNameInDev = 'useDebugValue';
      warnInvalidHookAccess();
      updateHookTypesDev();
      return updateDebugValue();
    },
    useResponder: function (responder, props) {
      currentHookNameInDev = 'useResponder';
      warnInvalidHookAccess();
      updateHookTypesDev();
      return createDeprecatedResponderListener(responder, props);
    },
    useDeferredValue: function (value, config) {
      currentHookNameInDev = 'useDeferredValue';
      warnInvalidHookAccess();
      updateHookTypesDev();
      return updateDeferredValue(value, config);
    },
    useTransition: function (config) {
      currentHookNameInDev = 'useTransition';
      warnInvalidHookAccess();
      updateHookTypesDev();
      return updateTransition(config);
    }
  };
  InvalidNestedHooksDispatcherOnRerenderInDEV = {
    readContext: function (context, observedBits) {
      warnInvalidContextAccess();
      return readContext(context, observedBits);
    },
    useCallback: function (callback, deps) {
      currentHookNameInDev = 'useCallback';
      warnInvalidHookAccess();
      updateHookTypesDev();
      return updateCallback(callback, deps);
    },
    useContext: function (context, observedBits) {
      currentHookNameInDev = 'useContext';
      warnInvalidHookAccess();
      updateHookTypesDev();
      return readContext(context, observedBits);
    },
    useEffect: function (create, deps) {
      currentHookNameInDev = 'useEffect';
      warnInvalidHookAccess();
      updateHookTypesDev();
      return updateEffect(create, deps);
    },
    useImperativeHandle: function (ref, create, deps) {
      currentHookNameInDev = 'useImperativeHandle';
      warnInvalidHookAccess();
      updateHookTypesDev();
      return updateImperativeHandle(ref, create, deps);
    },
    useLayoutEffect: function (create, deps) {
      currentHookNameInDev = 'useLayoutEffect';
      warnInvalidHookAccess();
      updateHookTypesDev();
      return updateLayoutEffect(create, deps);
    },
    useMemo: function (create, deps) {
      currentHookNameInDev = 'useMemo';
      warnInvalidHookAccess();
      updateHookTypesDev();
      var prevDispatcher = ReactCurrentDispatcher.current;
      ReactCurrentDispatcher.current = InvalidNestedHooksDispatcherOnUpdateInDEV;

      try {
        return updateMemo(create, deps);
      } finally {
        ReactCurrentDispatcher.current = prevDispatcher;
      }
    },
    useReducer: function (reducer, initialArg, init) {
      currentHookNameInDev = 'useReducer';
      warnInvalidHookAccess();
      updateHookTypesDev();
      var prevDispatcher = ReactCurrentDispatcher.current;
      ReactCurrentDispatcher.current = InvalidNestedHooksDispatcherOnUpdateInDEV;

      try {
        return rerenderReducer(reducer, initialArg, init);
      } finally {
        ReactCurrentDispatcher.current = prevDispatcher;
      }
    },
    useRef: function (initialValue) {
      currentHookNameInDev = 'useRef';
      warnInvalidHookAccess();
      updateHookTypesDev();
      return updateRef();
    },
    useState: function (initialState) {
      currentHookNameInDev = 'useState';
      warnInvalidHookAccess();
      updateHookTypesDev();
      var prevDispatcher = ReactCurrentDispatcher.current;
      ReactCurrentDispatcher.current = InvalidNestedHooksDispatcherOnUpdateInDEV;

      try {
        return rerenderState(initialState);
      } finally {
        ReactCurrentDispatcher.current = prevDispatcher;
      }
    },
    useDebugValue: function (value, formatterFn) {
      currentHookNameInDev = 'useDebugValue';
      warnInvalidHookAccess();
      updateHookTypesDev();
      return updateDebugValue();
    },
    useResponder: function (responder, props) {
      currentHookNameInDev = 'useResponder';
      warnInvalidHookAccess();
      updateHookTypesDev();
      return createDeprecatedResponderListener(responder, props);
    },
    useDeferredValue: function (value, config) {
      currentHookNameInDev = 'useDeferredValue';
      warnInvalidHookAccess();
      updateHookTypesDev();
      return rerenderDeferredValue(value, config);
    },
    useTransition: function (config) {
      currentHookNameInDev = 'useTransition';
      warnInvalidHookAccess();
      updateHookTypesDev();
      return rerenderTransition(config);
    }
  };
}

var now$1 = Scheduler.unstable_now;
var commitTime = 0;
var profilerStartTime = -1;

function getCommitTime() {
  return commitTime;
}

function recordCommitTime() {

  commitTime = now$1();
}

function startProfilerTimer(fiber) {

  profilerStartTime = now$1();

  if (fiber.actualStartTime < 0) {
    fiber.actualStartTime = now$1();
  }
}

function stopProfilerTimerIfRunning(fiber) {

  profilerStartTime = -1;
}

function stopProfilerTimerIfRunningAndRecordDelta(fiber, overrideBaseTime) {

  if (profilerStartTime >= 0) {
    var elapsedTime = now$1() - profilerStartTime;
    fiber.actualDuration += elapsedTime;

    if (overrideBaseTime) {
      fiber.selfBaseDuration = elapsedTime;
    }

    profilerStartTime = -1;
  }
}

// This may have been an insertion or a hydration.

var hydrationParentFiber = null;
var nextHydratableInstance = null;
var isHydrating = false;

function enterHydrationState(fiber) {

  var parentInstance = fiber.stateNode.containerInfo;
  nextHydratableInstance = getFirstHydratableChild(parentInstance);
  hydrationParentFiber = fiber;
  isHydrating = true;
  return true;
}

function deleteHydratableInstance(returnFiber, instance) {
  {
    switch (returnFiber.tag) {
      case HostRoot:
        didNotHydrateContainerInstance(returnFiber.stateNode.containerInfo, instance);
        break;

      case HostComponent:
        didNotHydrateInstance(returnFiber.type, returnFiber.memoizedProps, returnFiber.stateNode, instance);
        break;
    }
  }

  var childToDelete = createFiberFromHostInstanceForDeletion();
  childToDelete.stateNode = instance;
  childToDelete.return = returnFiber;
  childToDelete.effectTag = Deletion; // This might seem like it belongs on progressedFirstDeletion. However,
  // these children are not part of the reconciliation list of children.
  // Even if we abort and rereconcile the children, that will try to hydrate
  // again and the nodes are still in the host tree so these will be
  // recreated.

  if (returnFiber.lastEffect !== null) {
    returnFiber.lastEffect.nextEffect = childToDelete;
    returnFiber.lastEffect = childToDelete;
  } else {
    returnFiber.firstEffect = returnFiber.lastEffect = childToDelete;
  }
}

function insertNonHydratedInstance(returnFiber, fiber) {
  fiber.effectTag = fiber.effectTag & ~Hydrating | Placement;

  {
    switch (returnFiber.tag) {
      case HostRoot:
        {
          var parentContainer = returnFiber.stateNode.containerInfo;

          switch (fiber.tag) {
            case HostComponent:
              var type = fiber.type;
              var props = fiber.pendingProps;
              didNotFindHydratableContainerInstance(parentContainer, type);
              break;

            case HostText:
              var text = fiber.pendingProps;
              didNotFindHydratableContainerTextInstance(parentContainer, text);
              break;
          }

          break;
        }

      case HostComponent:
        {
          var parentType = returnFiber.type;
          var parentProps = returnFiber.memoizedProps;
          var parentInstance = returnFiber.stateNode;

          switch (fiber.tag) {
            case HostComponent:
              var _type = fiber.type;
              var _props = fiber.pendingProps;
              didNotFindHydratableInstance(parentType, parentProps, parentInstance, _type);
              break;

            case HostText:
              var _text = fiber.pendingProps;
              didNotFindHydratableTextInstance(parentType, parentProps, parentInstance, _text);
              break;

            case SuspenseComponent:
              didNotFindHydratableSuspenseInstance(parentType, parentProps);
              break;
          }

          break;
        }

      default:
        return;
    }
  }
}

function tryHydrate(fiber, nextInstance) {
  switch (fiber.tag) {
    case HostComponent:
      {
        var type = fiber.type;
        var props = fiber.pendingProps;
        var instance = canHydrateInstance(nextInstance, type);

        if (instance !== null) {
          fiber.stateNode = instance;
          return true;
        }

        return false;
      }

    case HostText:
      {
        var text = fiber.pendingProps;
        var textInstance = canHydrateTextInstance(nextInstance, text);

        if (textInstance !== null) {
          fiber.stateNode = textInstance;
          return true;
        }

        return false;
      }

    case SuspenseComponent:
      {

        return false;
      }

    default:
      return false;
  }
}

function tryToClaimNextHydratableInstance(fiber) {
  if (!isHydrating) {
    return;
  }

  var nextInstance = nextHydratableInstance;

  if (!nextInstance) {
    // Nothing to hydrate. Make it an insertion.
    insertNonHydratedInstance(hydrationParentFiber, fiber);
    isHydrating = false;
    hydrationParentFiber = fiber;
    return;
  }

  var firstAttemptedInstance = nextInstance;

  if (!tryHydrate(fiber, nextInstance)) {
    // If we can't hydrate this instance let's try the next one.
    // We use this as a heuristic. It's based on intuition and not data so it
    // might be flawed or unnecessary.
    nextInstance = getNextHydratableSibling(firstAttemptedInstance);

    if (!nextInstance || !tryHydrate(fiber, nextInstance)) {
      // Nothing to hydrate. Make it an insertion.
      insertNonHydratedInstance(hydrationParentFiber, fiber);
      isHydrating = false;
      hydrationParentFiber = fiber;
      return;
    } // We matched the next one, we'll now assume that the first one was
    // superfluous and we'll delete it. Since we can't eagerly delete it
    // we'll have to schedule a deletion. To do that, this node needs a dummy
    // fiber associated with it.


    deleteHydratableInstance(hydrationParentFiber, firstAttemptedInstance);
  }

  hydrationParentFiber = fiber;
  nextHydratableInstance = getFirstHydratableChild(nextInstance);
}

function prepareToHydrateHostInstance(fiber, rootContainerInstance, hostContext) {

  var instance = fiber.stateNode;
  var updatePayload = hydrateInstance(instance, fiber.type, fiber.memoizedProps, rootContainerInstance, hostContext, fiber); // TODO: Type this specific to this type of component.

  fiber.updateQueue = updatePayload; // If the update payload indicates that there is a change or if there
  // is a new ref we mark this as an update.

  if (updatePayload !== null) {
    return true;
  }

  return false;
}

function prepareToHydrateHostTextInstance(fiber) {

  var textInstance = fiber.stateNode;
  var textContent = fiber.memoizedProps;
  var shouldUpdate = hydrateTextInstance(textInstance, textContent, fiber);

  {
    if (shouldUpdate) {
      // We assume that prepareToHydrateHostTextInstance is called in a context where the
      // hydration parent is the parent host component of this host text.
      var returnFiber = hydrationParentFiber;

      if (returnFiber !== null) {
        switch (returnFiber.tag) {
          case HostRoot:
            {
              var parentContainer = returnFiber.stateNode.containerInfo;
              didNotMatchHydratedContainerTextInstance(parentContainer, textInstance, textContent);
              break;
            }

          case HostComponent:
            {
              var parentType = returnFiber.type;
              var parentProps = returnFiber.memoizedProps;
              var parentInstance = returnFiber.stateNode;
              didNotMatchHydratedTextInstance(parentType, parentProps, parentInstance, textInstance, textContent);
              break;
            }
        }
      }
    }
  }

  return shouldUpdate;
}

function skipPastDehydratedSuspenseInstance(fiber) {

  var suspenseState = fiber.memoizedState;
  var suspenseInstance = suspenseState !== null ? suspenseState.dehydrated : null;

  if (!suspenseInstance) {
    {
      throw Error( "Expected to have a hydrated suspense instance. This error is likely caused by a bug in React. Please file an issue." );
    }
  }

  return getNextHydratableInstanceAfterSuspenseInstance(suspenseInstance);
}

function popToNextHostParent(fiber) {
  var parent = fiber.return;

  while (parent !== null && parent.tag !== HostComponent && parent.tag !== HostRoot && parent.tag !== SuspenseComponent) {
    parent = parent.return;
  }

  hydrationParentFiber = parent;
}

function popHydrationState(fiber) {

  if (fiber !== hydrationParentFiber) {
    // We're deeper than the current hydration context, inside an inserted
    // tree.
    return false;
  }

  if (!isHydrating) {
    // If we're not currently hydrating but we're in a hydration context, then
    // we were an insertion and now need to pop up reenter hydration of our
    // siblings.
    popToNextHostParent(fiber);
    isHydrating = true;
    return false;
  }

  var type = fiber.type; // If we have any remaining hydratable nodes, we need to delete them now.
  // We only do this deeper than head and body since they tend to have random
  // other nodes in them. We also ignore components with pure text content in
  // side of them.
  // TODO: Better heuristic.

  if (fiber.tag !== HostComponent || type !== 'head' && type !== 'body' && !shouldSetTextContent(type, fiber.memoizedProps)) {
    var nextInstance = nextHydratableInstance;

    while (nextInstance) {
      deleteHydratableInstance(fiber, nextInstance);
      nextInstance = getNextHydratableSibling(nextInstance);
    }
  }

  popToNextHostParent(fiber);

  if (fiber.tag === SuspenseComponent) {
    nextHydratableInstance = skipPastDehydratedSuspenseInstance(fiber);
  } else {
    nextHydratableInstance = hydrationParentFiber ? getNextHydratableSibling(fiber.stateNode) : null;
  }

  return true;
}

function resetHydrationState() {

  hydrationParentFiber = null;
  nextHydratableInstance = null;
  isHydrating = false;
}

var ReactCurrentOwner$1 = ReactSharedInternals.ReactCurrentOwner;
var didReceiveUpdate = false;
var didWarnAboutBadClass;
var didWarnAboutModulePatternComponent;
var didWarnAboutContextTypeOnFunctionComponent;
var didWarnAboutGetDerivedStateOnFunctionComponent;
var didWarnAboutFunctionRefs;
var didWarnAboutReassigningProps;
var didWarnAboutRevealOrder;
var didWarnAboutTailOptions;

{
  didWarnAboutBadClass = {};
  didWarnAboutModulePatternComponent = {};
  didWarnAboutContextTypeOnFunctionComponent = {};
  didWarnAboutGetDerivedStateOnFunctionComponent = {};
  didWarnAboutFunctionRefs = {};
  didWarnAboutReassigningProps = false;
  didWarnAboutRevealOrder = {};
  didWarnAboutTailOptions = {};
}

function reconcileChildren(current, workInProgress, nextChildren, renderExpirationTime) {
  if (current === null) {
    // If this is a fresh new component that hasn't been rendered yet, we
    // won't update its child set by applying minimal side-effects. Instead,
    // we will add them all to the child before it gets rendered. That means
    // we can optimize this reconciliation pass by not tracking side-effects.
    workInProgress.child = mountChildFibers(workInProgress, null, nextChildren, renderExpirationTime);
  } else {
    // If the current child is the same as the work in progress, it means that
    // we haven't yet started any work on these children. Therefore, we use
    // the clone algorithm to create a copy of all the current children.
    // If we had any progressed work already, that is invalid at this point so
    // let's throw it out.
    workInProgress.child = reconcileChildFibers(workInProgress, current.child, nextChildren, renderExpirationTime);
  }
}

function forceUnmountCurrentAndReconcile(current, workInProgress, nextChildren, renderExpirationTime) {
  // This function is fork of reconcileChildren. It's used in cases where we
  // want to reconcile without matching against the existing set. This has the
  // effect of all current children being unmounted; even if the type and key
  // are the same, the old child is unmounted and a new child is created.
  //
  // To do this, we're going to go through the reconcile algorithm twice. In
  // the first pass, we schedule a deletion for all the current children by
  // passing null.
  workInProgress.child = reconcileChildFibers(workInProgress, current.child, null, renderExpirationTime); // In the second pass, we mount the new children. The trick here is that we
  // pass null in place of where we usually pass the current child set. This has
  // the effect of remounting all children regardless of whether their
  // identities match.

  workInProgress.child = reconcileChildFibers(workInProgress, null, nextChildren, renderExpirationTime);
}

function updateForwardRef(current, workInProgress, Component, nextProps, renderExpirationTime) {
  // TODO: current can be non-null here even if the component
  // hasn't yet mounted. This happens after the first render suspends.
  // We'll need to figure out if this is fine or can cause issues.
  {
    if (workInProgress.type !== workInProgress.elementType) {
      // Lazy component props can't be validated in createElement
      // because they're only guaranteed to be resolved here.
      var innerPropTypes = Component.propTypes;

      if (innerPropTypes) {
        checkPropTypes(innerPropTypes, nextProps, // Resolved props
        'prop', getComponentName(Component), getCurrentFiberStackInDev);
      }
    }
  }

  var render = Component.render;
  var ref = workInProgress.ref; // The rest is a fork of updateFunctionComponent

  var nextChildren;
  prepareToReadContext(workInProgress, renderExpirationTime);

  {
    ReactCurrentOwner$1.current = workInProgress;
    setIsRendering(true);
    nextChildren = renderWithHooks(current, workInProgress, render, nextProps, ref, renderExpirationTime);

    if ( workInProgress.mode & StrictMode) {
      // Only double-render components with Hooks
      if (workInProgress.memoizedState !== null) {
        nextChildren = renderWithHooks(current, workInProgress, render, nextProps, ref, renderExpirationTime);
      }
    }

    setIsRendering(false);
  }

  if (current !== null && !didReceiveUpdate) {
    bailoutHooks(current, workInProgress, renderExpirationTime);
    return bailoutOnAlreadyFinishedWork(current, workInProgress, renderExpirationTime);
  } // React DevTools reads this flag.


  workInProgress.effectTag |= PerformedWork;
  reconcileChildren(current, workInProgress, nextChildren, renderExpirationTime);
  return workInProgress.child;
}

function updateMemoComponent(current, workInProgress, Component, nextProps, updateExpirationTime, renderExpirationTime) {
  if (current === null) {
    var type = Component.type;

    if (isSimpleFunctionComponent(type) && Component.compare === null && // SimpleMemoComponent codepath doesn't resolve outer props either.
    Component.defaultProps === undefined) {
      var resolvedType = type;

      {
        resolvedType = resolveFunctionForHotReloading(type);
      } // If this is a plain function component without default props,
      // and with only the default shallow comparison, we upgrade it
      // to a SimpleMemoComponent to allow fast path updates.


      workInProgress.tag = SimpleMemoComponent;
      workInProgress.type = resolvedType;

      {
        validateFunctionComponentInDev(workInProgress, type);
      }

      return updateSimpleMemoComponent(current, workInProgress, resolvedType, nextProps, updateExpirationTime, renderExpirationTime);
    }

    {
      var innerPropTypes = type.propTypes;

      if (innerPropTypes) {
        // Inner memo component props aren't currently validated in createElement.
        // We could move it there, but we'd still need this for lazy code path.
        checkPropTypes(innerPropTypes, nextProps, // Resolved props
        'prop', getComponentName(type), getCurrentFiberStackInDev);
      }
    }

    var child = createFiberFromTypeAndProps(Component.type, null, nextProps, null, workInProgress.mode, renderExpirationTime);
    child.ref = workInProgress.ref;
    child.return = workInProgress;
    workInProgress.child = child;
    return child;
  }

  {
    var _type = Component.type;
    var _innerPropTypes = _type.propTypes;

    if (_innerPropTypes) {
      // Inner memo component props aren't currently validated in createElement.
      // We could move it there, but we'd still need this for lazy code path.
      checkPropTypes(_innerPropTypes, nextProps, // Resolved props
      'prop', getComponentName(_type), getCurrentFiberStackInDev);
    }
  }

  var currentChild = current.child; // This is always exactly one child

  if (updateExpirationTime < renderExpirationTime) {
    // This will be the props with resolved defaultProps,
    // unlike current.memoizedProps which will be the unresolved ones.
    var prevProps = currentChild.memoizedProps; // Default to shallow comparison

    var compare = Component.compare;
    compare = compare !== null ? compare : shallowEqual;

    if (compare(prevProps, nextProps) && current.ref === workInProgress.ref) {
      return bailoutOnAlreadyFinishedWork(current, workInProgress, renderExpirationTime);
    }
  } // React DevTools reads this flag.


  workInProgress.effectTag |= PerformedWork;
  var newChild = createWorkInProgress(currentChild, nextProps);
  newChild.ref = workInProgress.ref;
  newChild.return = workInProgress;
  workInProgress.child = newChild;
  return newChild;
}

function updateSimpleMemoComponent(current, workInProgress, Component, nextProps, updateExpirationTime, renderExpirationTime) {
  // TODO: current can be non-null here even if the component
  // hasn't yet mounted. This happens when the inner render suspends.
  // We'll need to figure out if this is fine or can cause issues.
  {
    if (workInProgress.type !== workInProgress.elementType) {
      // Lazy component props can't be validated in createElement
      // because they're only guaranteed to be resolved here.
      var outerMemoType = workInProgress.elementType;

      if (outerMemoType.$$typeof === REACT_LAZY_TYPE) {
        // We warn when you define propTypes on lazy()
        // so let's just skip over it to find memo() outer wrapper.
        // Inner props for memo are validated later.
        outerMemoType = refineResolvedLazyComponent(outerMemoType);
      }

      var outerPropTypes = outerMemoType && outerMemoType.propTypes;

      if (outerPropTypes) {
        checkPropTypes(outerPropTypes, nextProps, // Resolved (SimpleMemoComponent has no defaultProps)
        'prop', getComponentName(outerMemoType), getCurrentFiberStackInDev);
      } // Inner propTypes will be validated in the function component path.

    }
  }

  if (current !== null) {
    var prevProps = current.memoizedProps;

    if (shallowEqual(prevProps, nextProps) && current.ref === workInProgress.ref && ( // Prevent bailout if the implementation changed due to hot reload.
     workInProgress.type === current.type )) {
      didReceiveUpdate = false;

      if (updateExpirationTime < renderExpirationTime) {
        // The pending update priority was cleared at the beginning of
        // beginWork. We're about to bail out, but there might be additional
        // updates at a lower priority. Usually, the priority level of the
        // remaining updates is accumlated during the evaluation of the
        // component (i.e. when processing the update queue). But since since
        // we're bailing out early *without* evaluating the component, we need
        // to account for it here, too. Reset to the value of the current fiber.
        // NOTE: This only applies to SimpleMemoComponent, not MemoComponent,
        // because a MemoComponent fiber does not have hooks or an update queue;
        // rather, it wraps around an inner component, which may or may not
        // contains hooks.
        // TODO: Move the reset at in beginWork out of the common path so that
        // this is no longer necessary.
        workInProgress.expirationTime = current.expirationTime;
        return bailoutOnAlreadyFinishedWork(current, workInProgress, renderExpirationTime);
      }
    }
  }

  return updateFunctionComponent(current, workInProgress, Component, nextProps, renderExpirationTime);
}

function updateFragment(current, workInProgress, renderExpirationTime) {
  var nextChildren = workInProgress.pendingProps;
  reconcileChildren(current, workInProgress, nextChildren, renderExpirationTime);
  return workInProgress.child;
}

function updateMode(current, workInProgress, renderExpirationTime) {
  var nextChildren = workInProgress.pendingProps.children;
  reconcileChildren(current, workInProgress, nextChildren, renderExpirationTime);
  return workInProgress.child;
}

function updateProfiler(current, workInProgress, renderExpirationTime) {
  {
    workInProgress.effectTag |= Update;
  }

  var nextProps = workInProgress.pendingProps;
  var nextChildren = nextProps.children;
  reconcileChildren(current, workInProgress, nextChildren, renderExpirationTime);
  return workInProgress.child;
}

function markRef(current, workInProgress) {
  var ref = workInProgress.ref;

  if (current === null && ref !== null || current !== null && current.ref !== ref) {
    // Schedule a Ref effect
    workInProgress.effectTag |= Ref;
  }
}

function updateFunctionComponent(current, workInProgress, Component, nextProps, renderExpirationTime) {
  {
    if (workInProgress.type !== workInProgress.elementType) {
      // Lazy component props can't be validated in createElement
      // because they're only guaranteed to be resolved here.
      var innerPropTypes = Component.propTypes;

      if (innerPropTypes) {
        checkPropTypes(innerPropTypes, nextProps, // Resolved props
        'prop', getComponentName(Component), getCurrentFiberStackInDev);
      }
    }
  }

  var context;

  {
    var unmaskedContext = getUnmaskedContext(workInProgress, Component, true);
    context = getMaskedContext(workInProgress, unmaskedContext);
  }

  var nextChildren;
  prepareToReadContext(workInProgress, renderExpirationTime);

  {
    ReactCurrentOwner$1.current = workInProgress;
    setIsRendering(true);
    nextChildren = renderWithHooks(current, workInProgress, Component, nextProps, context, renderExpirationTime);

    if ( workInProgress.mode & StrictMode) {
      // Only double-render components with Hooks
      if (workInProgress.memoizedState !== null) {
        nextChildren = renderWithHooks(current, workInProgress, Component, nextProps, context, renderExpirationTime);
      }
    }

    setIsRendering(false);
  }

  if (current !== null && !didReceiveUpdate) {
    bailoutHooks(current, workInProgress, renderExpirationTime);
    return bailoutOnAlreadyFinishedWork(current, workInProgress, renderExpirationTime);
  } // React DevTools reads this flag.


  workInProgress.effectTag |= PerformedWork;
  reconcileChildren(current, workInProgress, nextChildren, renderExpirationTime);
  return workInProgress.child;
}

function updateClassComponent(current, workInProgress, Component, nextProps, renderExpirationTime) {
  {
    if (workInProgress.type !== workInProgress.elementType) {
      // Lazy component props can't be validated in createElement
      // because they're only guaranteed to be resolved here.
      var innerPropTypes = Component.propTypes;

      if (innerPropTypes) {
        checkPropTypes(innerPropTypes, nextProps, // Resolved props
        'prop', getComponentName(Component), getCurrentFiberStackInDev);
      }
    }
  } // Push context providers early to prevent context stack mismatches.
  // During mounting we don't know the child context yet as the instance doesn't exist.
  // We will invalidate the child context in finishClassComponent() right after rendering.


  var hasContext;

  if (isContextProvider(Component)) {
    hasContext = true;
    pushContextProvider(workInProgress);
  } else {
    hasContext = false;
  }

  prepareToReadContext(workInProgress, renderExpirationTime);
  var instance = workInProgress.stateNode;
  var shouldUpdate;

  if (instance === null) {
    if (current !== null) {
      // A class component without an instance only mounts if it suspended
      // inside a non-concurrent tree, in an inconsistent state. We want to
      // treat it like a new mount, even though an empty version of it already
      // committed. Disconnect the alternate pointers.
      current.alternate = null;
      workInProgress.alternate = null; // Since this is conceptually a new fiber, schedule a Placement effect

      workInProgress.effectTag |= Placement;
    } // In the initial pass we might need to construct the instance.


    constructClassInstance(workInProgress, Component, nextProps);
    mountClassInstance(workInProgress, Component, nextProps, renderExpirationTime);
    shouldUpdate = true;
  } else if (current === null) {
    // In a resume, we'll already have an instance we can reuse.
    shouldUpdate = resumeMountClassInstance(workInProgress, Component, nextProps, renderExpirationTime);
  } else {
    shouldUpdate = updateClassInstance(current, workInProgress, Component, nextProps, renderExpirationTime);
  }

  var nextUnitOfWork = finishClassComponent(current, workInProgress, Component, shouldUpdate, hasContext, renderExpirationTime);

  {
    var inst = workInProgress.stateNode;

    if (inst.props !== nextProps) {
      if (!didWarnAboutReassigningProps) {
        error('It looks like %s is reassigning its own `this.props` while rendering. ' + 'This is not supported and can lead to confusing bugs.', getComponentName(workInProgress.type) || 'a component');
      }

      didWarnAboutReassigningProps = true;
    }
  }

  return nextUnitOfWork;
}

function finishClassComponent(current, workInProgress, Component, shouldUpdate, hasContext, renderExpirationTime) {
  // Refs should update even if shouldComponentUpdate returns false
  markRef(current, workInProgress);
  var didCaptureError = (workInProgress.effectTag & DidCapture) !== NoEffect;

  if (!shouldUpdate && !didCaptureError) {
    // Context providers should defer to sCU for rendering
    if (hasContext) {
      invalidateContextProvider(workInProgress, Component, false);
    }

    return bailoutOnAlreadyFinishedWork(current, workInProgress, renderExpirationTime);
  }

  var instance = workInProgress.stateNode; // Rerender

  ReactCurrentOwner$1.current = workInProgress;
  var nextChildren;

  if (didCaptureError && typeof Component.getDerivedStateFromError !== 'function') {
    // If we captured an error, but getDerivedStateFromError is not defined,
    // unmount all the children. componentDidCatch will schedule an update to
    // re-render a fallback. This is temporary until we migrate everyone to
    // the new API.
    // TODO: Warn in a future release.
    nextChildren = null;

    {
      stopProfilerTimerIfRunning();
    }
  } else {
    {
      setIsRendering(true);
      nextChildren = instance.render();

      if ( workInProgress.mode & StrictMode) {
        instance.render();
      }

      setIsRendering(false);
    }
  } // React DevTools reads this flag.


  workInProgress.effectTag |= PerformedWork;

  if (current !== null && didCaptureError) {
    // If we're recovering from an error, reconcile without reusing any of
    // the existing children. Conceptually, the normal children and the children
    // that are shown on error are two different sets, so we shouldn't reuse
    // normal children even if their identities match.
    forceUnmountCurrentAndReconcile(current, workInProgress, nextChildren, renderExpirationTime);
  } else {
    reconcileChildren(current, workInProgress, nextChildren, renderExpirationTime);
  } // Memoize state using the values we just used to render.
  // TODO: Restructure so we never read values from the instance.


  workInProgress.memoizedState = instance.state; // The context might have changed so we need to recalculate it.

  if (hasContext) {
    invalidateContextProvider(workInProgress, Component, true);
  }

  return workInProgress.child;
}

function pushHostRootContext(workInProgress) {
  var root = workInProgress.stateNode;

  if (root.pendingContext) {
    pushTopLevelContextObject(workInProgress, root.pendingContext, root.pendingContext !== root.context);
  } else if (root.context) {
    // Should always be set
    pushTopLevelContextObject(workInProgress, root.context, false);
  }

  pushHostContainer(workInProgress, root.containerInfo);
}

function updateHostRoot(current, workInProgress, renderExpirationTime) {
  pushHostRootContext(workInProgress);
  var updateQueue = workInProgress.updateQueue;

  if (!(current !== null && updateQueue !== null)) {
    {
      throw Error( "If the root does not have an updateQueue, we should have already bailed out. This error is likely caused by a bug in React. Please file an issue." );
    }
  }

  var nextProps = workInProgress.pendingProps;
  var prevState = workInProgress.memoizedState;
  var prevChildren = prevState !== null ? prevState.element : null;
  cloneUpdateQueue(current, workInProgress);
  processUpdateQueue(workInProgress, nextProps, null, renderExpirationTime);
  var nextState = workInProgress.memoizedState; // Caution: React DevTools currently depends on this property
  // being called "element".

  var nextChildren = nextState.element;

  if (nextChildren === prevChildren) {
    // If the state is the same as before, that's a bailout because we had
    // no work that expires at this time.
    resetHydrationState();
    return bailoutOnAlreadyFinishedWork(current, workInProgress, renderExpirationTime);
  }

  var root = workInProgress.stateNode;

  if (root.hydrate && enterHydrationState(workInProgress)) {
    // If we don't have any current children this might be the first pass.
    // We always try to hydrate. If this isn't a hydration pass there won't
    // be any children to hydrate which is effectively the same thing as
    // not hydrating.
    var child = mountChildFibers(workInProgress, null, nextChildren, renderExpirationTime);
    workInProgress.child = child;
    var node = child;

    while (node) {
      // Mark each child as hydrating. This is a fast path to know whether this
      // tree is part of a hydrating tree. This is used to determine if a child
      // node has fully mounted yet, and for scheduling event replaying.
      // Conceptually this is similar to Placement in that a new subtree is
      // inserted into the React tree here. It just happens to not need DOM
      // mutations because it already exists.
      node.effectTag = node.effectTag & ~Placement | Hydrating;
      node = node.sibling;
    }
  } else {
    // Otherwise reset hydration state in case we aborted and resumed another
    // root.
    reconcileChildren(current, workInProgress, nextChildren, renderExpirationTime);
    resetHydrationState();
  }

  return workInProgress.child;
}

function updateHostComponent(current, workInProgress, renderExpirationTime) {
  pushHostContext(workInProgress);

  if (current === null) {
    tryToClaimNextHydratableInstance(workInProgress);
  }

  var type = workInProgress.type;
  var nextProps = workInProgress.pendingProps;
  var prevProps = current !== null ? current.memoizedProps : null;
  var nextChildren = nextProps.children;
  var isDirectTextChild = shouldSetTextContent(type, nextProps);

  if (isDirectTextChild) {
    // We special case a direct text child of a host node. This is a common
    // case. We won't handle it as a reified child. We will instead handle
    // this in the host environment that also has access to this prop. That
    // avoids allocating another HostText fiber and traversing it.
    nextChildren = null;
  } else if (prevProps !== null && shouldSetTextContent(type, prevProps)) {
    // If we're switching from a direct text child to a normal child, or to
    // empty, we need to schedule the text content to be reset.
    workInProgress.effectTag |= ContentReset;
  }

  markRef(current, workInProgress); // Check the host config to see if the children are offscreen/hidden.

  if (workInProgress.mode & ConcurrentMode && renderExpirationTime !== Never && shouldDeprioritizeSubtree(type, nextProps)) {
    {
      markSpawnedWork(Never);
    } // Schedule this fiber to re-render at offscreen priority. Then bailout.


    workInProgress.expirationTime = workInProgress.childExpirationTime = Never;
    return null;
  }

  reconcileChildren(current, workInProgress, nextChildren, renderExpirationTime);
  return workInProgress.child;
}

function updateHostText(current, workInProgress) {
  if (current === null) {
    tryToClaimNextHydratableInstance(workInProgress);
  } // Nothing to do here. This is terminal. We'll do the completion step
  // immediately after.


  return null;
}

function mountLazyComponent(_current, workInProgress, elementType, updateExpirationTime, renderExpirationTime) {
  if (_current !== null) {
    // A lazy component only mounts if it suspended inside a non-
    // concurrent tree, in an inconsistent state. We want to treat it like
    // a new mount, even though an empty version of it already committed.
    // Disconnect the alternate pointers.
    _current.alternate = null;
    workInProgress.alternate = null; // Since this is conceptually a new fiber, schedule a Placement effect

    workInProgress.effectTag |= Placement;
  }

  var props = workInProgress.pendingProps; // We can't start a User Timing measurement with correct label yet.
  // Cancel and resume right after we know the tag.

  cancelWorkTimer(workInProgress);
  var Component = readLazyComponentType(elementType); // Store the unwrapped component in the type.

  workInProgress.type = Component;
  var resolvedTag = workInProgress.tag = resolveLazyComponentTag(Component);
  startWorkTimer(workInProgress);
  var resolvedProps = resolveDefaultProps(Component, props);
  var child;

  switch (resolvedTag) {
    case FunctionComponent:
      {
        {
          validateFunctionComponentInDev(workInProgress, Component);
          workInProgress.type = Component = resolveFunctionForHotReloading(Component);
        }

        child = updateFunctionComponent(null, workInProgress, Component, resolvedProps, renderExpirationTime);
        return child;
      }

    case ClassComponent:
      {
        {
          workInProgress.type = Component = resolveClassForHotReloading(Component);
        }

        child = updateClassComponent(null, workInProgress, Component, resolvedProps, renderExpirationTime);
        return child;
      }

    case ForwardRef:
      {
        {
          workInProgress.type = Component = resolveForwardRefForHotReloading(Component);
        }

        child = updateForwardRef(null, workInProgress, Component, resolvedProps, renderExpirationTime);
        return child;
      }

    case MemoComponent:
      {
        {
          if (workInProgress.type !== workInProgress.elementType) {
            var outerPropTypes = Component.propTypes;

            if (outerPropTypes) {
              checkPropTypes(outerPropTypes, resolvedProps, // Resolved for outer only
              'prop', getComponentName(Component), getCurrentFiberStackInDev);
            }
          }
        }

        child = updateMemoComponent(null, workInProgress, Component, resolveDefaultProps(Component.type, resolvedProps), // The inner type can have defaults too
        updateExpirationTime, renderExpirationTime);
        return child;
      }
  }

  var hint = '';

  {
    if (Component !== null && typeof Component === 'object' && Component.$$typeof === REACT_LAZY_TYPE) {
      hint = ' Did you wrap a component in React.lazy() more than once?';
    }
  } // This message intentionally doesn't mention ForwardRef or MemoComponent
  // because the fact that it's a separate type of work is an
  // implementation detail.


  {
    {
      throw Error( "Element type is invalid. Received a promise that resolves to: " + Component + ". Lazy element type must resolve to a class or function." + hint );
    }
  }
}

function mountIncompleteClassComponent(_current, workInProgress, Component, nextProps, renderExpirationTime) {
  if (_current !== null) {
    // An incomplete component only mounts if it suspended inside a non-
    // concurrent tree, in an inconsistent state. We want to treat it like
    // a new mount, even though an empty version of it already committed.
    // Disconnect the alternate pointers.
    _current.alternate = null;
    workInProgress.alternate = null; // Since this is conceptually a new fiber, schedule a Placement effect

    workInProgress.effectTag |= Placement;
  } // Promote the fiber to a class and try rendering again.


  workInProgress.tag = ClassComponent; // The rest of this function is a fork of `updateClassComponent`
  // Push context providers early to prevent context stack mismatches.
  // During mounting we don't know the child context yet as the instance doesn't exist.
  // We will invalidate the child context in finishClassComponent() right after rendering.

  var hasContext;

  if (isContextProvider(Component)) {
    hasContext = true;
    pushContextProvider(workInProgress);
  } else {
    hasContext = false;
  }

  prepareToReadContext(workInProgress, renderExpirationTime);
  constructClassInstance(workInProgress, Component, nextProps);
  mountClassInstance(workInProgress, Component, nextProps, renderExpirationTime);
  return finishClassComponent(null, workInProgress, Component, true, hasContext, renderExpirationTime);
}

function mountIndeterminateComponent(_current, workInProgress, Component, renderExpirationTime) {
  if (_current !== null) {
    // An indeterminate component only mounts if it suspended inside a non-
    // concurrent tree, in an inconsistent state. We want to treat it like
    // a new mount, even though an empty version of it already committed.
    // Disconnect the alternate pointers.
    _current.alternate = null;
    workInProgress.alternate = null; // Since this is conceptually a new fiber, schedule a Placement effect

    workInProgress.effectTag |= Placement;
  }

  var props = workInProgress.pendingProps;
  var context;

  {
    var unmaskedContext = getUnmaskedContext(workInProgress, Component, false);
    context = getMaskedContext(workInProgress, unmaskedContext);
  }

  prepareToReadContext(workInProgress, renderExpirationTime);
  var value;

  {
    if (Component.prototype && typeof Component.prototype.render === 'function') {
      var componentName = getComponentName(Component) || 'Unknown';

      if (!didWarnAboutBadClass[componentName]) {
        error("The <%s /> component appears to have a render method, but doesn't extend React.Component. " + 'This is likely to cause errors. Change %s to extend React.Component instead.', componentName, componentName);

        didWarnAboutBadClass[componentName] = true;
      }
    }

    if (workInProgress.mode & StrictMode) {
      ReactStrictModeWarnings.recordLegacyContextWarning(workInProgress, null);
    }

    setIsRendering(true);
    ReactCurrentOwner$1.current = workInProgress;
    value = renderWithHooks(null, workInProgress, Component, props, context, renderExpirationTime);
    setIsRendering(false);
  } // React DevTools reads this flag.


  workInProgress.effectTag |= PerformedWork;

  if (typeof value === 'object' && value !== null && typeof value.render === 'function' && value.$$typeof === undefined) {
    {
      var _componentName = getComponentName(Component) || 'Unknown';

      if (!didWarnAboutModulePatternComponent[_componentName]) {
        error('The <%s /> component appears to be a function component that returns a class instance. ' + 'Change %s to a class that extends React.Component instead. ' + "If you can't use a class try assigning the prototype on the function as a workaround. " + "`%s.prototype = React.Component.prototype`. Don't use an arrow function since it " + 'cannot be called with `new` by React.', _componentName, _componentName, _componentName);

        didWarnAboutModulePatternComponent[_componentName] = true;
      }
    } // Proceed under the assumption that this is a class instance


    workInProgress.tag = ClassComponent; // Throw out any hooks that were used.

    workInProgress.memoizedState = null;
    workInProgress.updateQueue = null; // Push context providers early to prevent context stack mismatches.
    // During mounting we don't know the child context yet as the instance doesn't exist.
    // We will invalidate the child context in finishClassComponent() right after rendering.

    var hasContext = false;

    if (isContextProvider(Component)) {
      hasContext = true;
      pushContextProvider(workInProgress);
    } else {
      hasContext = false;
    }

    workInProgress.memoizedState = value.state !== null && value.state !== undefined ? value.state : null;
    initializeUpdateQueue(workInProgress);
    var getDerivedStateFromProps = Component.getDerivedStateFromProps;

    if (typeof getDerivedStateFromProps === 'function') {
      applyDerivedStateFromProps(workInProgress, Component, getDerivedStateFromProps, props);
    }

    adoptClassInstance(workInProgress, value);
    mountClassInstance(workInProgress, Component, props, renderExpirationTime);
    return finishClassComponent(null, workInProgress, Component, true, hasContext, renderExpirationTime);
  } else {
    // Proceed under the assumption that this is a function component
    workInProgress.tag = FunctionComponent;

    {

      if ( workInProgress.mode & StrictMode) {
        // Only double-render components with Hooks
        if (workInProgress.memoizedState !== null) {
          value = renderWithHooks(null, workInProgress, Component, props, context, renderExpirationTime);
        }
      }
    }

    reconcileChildren(null, workInProgress, value, renderExpirationTime);

    {
      validateFunctionComponentInDev(workInProgress, Component);
    }

    return workInProgress.child;
  }
}

function validateFunctionComponentInDev(workInProgress, Component) {
  {
    if (Component) {
      if (Component.childContextTypes) {
        error('%s(...): childContextTypes cannot be defined on a function component.', Component.displayName || Component.name || 'Component');
      }
    }

    if (workInProgress.ref !== null) {
      var info = '';
      var ownerName = getCurrentFiberOwnerNameInDevOrNull();

      if (ownerName) {
        info += '\n\nCheck the render method of `' + ownerName + '`.';
      }

      var warningKey = ownerName || workInProgress._debugID || '';
      var debugSource = workInProgress._debugSource;

      if (debugSource) {
        warningKey = debugSource.fileName + ':' + debugSource.lineNumber;
      }

      if (!didWarnAboutFunctionRefs[warningKey]) {
        didWarnAboutFunctionRefs[warningKey] = true;

        error('Function components cannot be given refs. ' + 'Attempts to access this ref will fail. ' + 'Did you mean to use React.forwardRef()?%s', info);
      }
    }

    if (typeof Component.getDerivedStateFromProps === 'function') {
      var _componentName2 = getComponentName(Component) || 'Unknown';

      if (!didWarnAboutGetDerivedStateOnFunctionComponent[_componentName2]) {
        error('%s: Function components do not support getDerivedStateFromProps.', _componentName2);

        didWarnAboutGetDerivedStateOnFunctionComponent[_componentName2] = true;
      }
    }

    if (typeof Component.contextType === 'object' && Component.contextType !== null) {
      var _componentName3 = getComponentName(Component) || 'Unknown';

      if (!didWarnAboutContextTypeOnFunctionComponent[_componentName3]) {
        error('%s: Function components do not support contextType.', _componentName3);

        didWarnAboutContextTypeOnFunctionComponent[_componentName3] = true;
      }
    }
  }
}

var SUSPENDED_MARKER = {
  dehydrated: null,
  retryTime: NoWork
};

function shouldRemainOnFallback(suspenseContext, current, workInProgress) {
  // If the context is telling us that we should show a fallback, and we're not
  // already showing content, then we should show the fallback instead.
  return hasSuspenseContext(suspenseContext, ForceSuspenseFallback) && (current === null || current.memoizedState !== null);
}

function updateSuspenseComponent(current, workInProgress, renderExpirationTime) {
  var mode = workInProgress.mode;
  var nextProps = workInProgress.pendingProps; // This is used by DevTools to force a boundary to suspend.

  {
    if (shouldSuspend(workInProgress)) {
      workInProgress.effectTag |= DidCapture;
    }
  }

  var suspenseContext = suspenseStackCursor.current;
  var nextDidTimeout = false;
  var didSuspend = (workInProgress.effectTag & DidCapture) !== NoEffect;

  if (didSuspend || shouldRemainOnFallback(suspenseContext, current)) {
    // Something in this boundary's subtree already suspended. Switch to
    // rendering the fallback children.
    nextDidTimeout = true;
    workInProgress.effectTag &= ~DidCapture;
  } else {
    // Attempting the main content
    if (current === null || current.memoizedState !== null) {
      // This is a new mount or this boundary is already showing a fallback state.
      // Mark this subtree context as having at least one invisible parent that could
      // handle the fallback state.
      // Boundaries without fallbacks or should be avoided are not considered since
      // they cannot handle preferred fallback states.
      if (nextProps.fallback !== undefined && nextProps.unstable_avoidThisFallback !== true) {
        suspenseContext = addSubtreeSuspenseContext(suspenseContext, InvisibleParentSuspenseContext);
      }
    }
  }

  suspenseContext = setDefaultShallowSuspenseContext(suspenseContext);
  pushSuspenseContext(workInProgress, suspenseContext); // This next part is a bit confusing. If the children timeout, we switch to
  // showing the fallback children in place of the "primary" children.
  // However, we don't want to delete the primary children because then their
  // state will be lost (both the React state and the host state, e.g.
  // uncontrolled form inputs). Instead we keep them mounted and hide them.
  // Both the fallback children AND the primary children are rendered at the
  // same time. Once the primary children are un-suspended, we can delete
  // the fallback children — don't need to preserve their state.
  //
  // The two sets of children are siblings in the host environment, but
  // semantically, for purposes of reconciliation, they are two separate sets.
  // So we store them using two fragment fibers.
  //
  // However, we want to avoid allocating extra fibers for every placeholder.
  // They're only necessary when the children time out, because that's the
  // only time when both sets are mounted.
  //
  // So, the extra fragment fibers are only used if the children time out.
  // Otherwise, we render the primary children directly. This requires some
  // custom reconciliation logic to preserve the state of the primary
  // children. It's essentially a very basic form of re-parenting.

  if (current === null) {
    // If we're currently hydrating, try to hydrate this boundary.
    // But only if this has a fallback.
    if (nextProps.fallback !== undefined) {
      tryToClaimNextHydratableInstance(workInProgress); // This could've been a dehydrated suspense component.
    } // This is the initial mount. This branch is pretty simple because there's
    // no previous state that needs to be preserved.


    if (nextDidTimeout) {
      // Mount separate fragments for primary and fallback children.
      var nextFallbackChildren = nextProps.fallback;
      var primaryChildFragment = createFiberFromFragment(null, mode, NoWork, null);
      primaryChildFragment.return = workInProgress;

      if ((workInProgress.mode & BlockingMode) === NoMode) {
        // Outside of blocking mode, we commit the effects from the
        // partially completed, timed-out tree, too.
        var progressedState = workInProgress.memoizedState;
        var progressedPrimaryChild = progressedState !== null ? workInProgress.child.child : workInProgress.child;
        primaryChildFragment.child = progressedPrimaryChild;
        var progressedChild = progressedPrimaryChild;

        while (progressedChild !== null) {
          progressedChild.return = primaryChildFragment;
          progressedChild = progressedChild.sibling;
        }
      }

      var fallbackChildFragment = createFiberFromFragment(nextFallbackChildren, mode, renderExpirationTime, null);
      fallbackChildFragment.return = workInProgress;
      primaryChildFragment.sibling = fallbackChildFragment; // Skip the primary children, and continue working on the
      // fallback children.

      workInProgress.memoizedState = SUSPENDED_MARKER;
      workInProgress.child = primaryChildFragment;
      return fallbackChildFragment;
    } else {
      // Mount the primary children without an intermediate fragment fiber.
      var nextPrimaryChildren = nextProps.children;
      workInProgress.memoizedState = null;
      return workInProgress.child = mountChildFibers(workInProgress, null, nextPrimaryChildren, renderExpirationTime);
    }
  } else {
    // This is an update. This branch is more complicated because we need to
    // ensure the state of the primary children is preserved.
    var prevState = current.memoizedState;

    if (prevState !== null) {
      // wrapped in a fragment fiber.


      var currentPrimaryChildFragment = current.child;
      var currentFallbackChildFragment = currentPrimaryChildFragment.sibling;

      if (nextDidTimeout) {
        // Still timed out. Reuse the current primary children by cloning
        // its fragment. We're going to skip over these entirely.
        var _nextFallbackChildren2 = nextProps.fallback;

        var _primaryChildFragment2 = createWorkInProgress(currentPrimaryChildFragment, currentPrimaryChildFragment.pendingProps);

        _primaryChildFragment2.return = workInProgress;

        if ((workInProgress.mode & BlockingMode) === NoMode) {
          // Outside of blocking mode, we commit the effects from the
          // partially completed, timed-out tree, too.
          var _progressedState = workInProgress.memoizedState;

          var _progressedPrimaryChild = _progressedState !== null ? workInProgress.child.child : workInProgress.child;

          if (_progressedPrimaryChild !== currentPrimaryChildFragment.child) {
            _primaryChildFragment2.child = _progressedPrimaryChild;
            var _progressedChild2 = _progressedPrimaryChild;

            while (_progressedChild2 !== null) {
              _progressedChild2.return = _primaryChildFragment2;
              _progressedChild2 = _progressedChild2.sibling;
            }
          }
        } // Because primaryChildFragment is a new fiber that we're inserting as the
        // parent of a new tree, we need to set its treeBaseDuration.


        if ( workInProgress.mode & ProfileMode) {
          // treeBaseDuration is the sum of all the child tree base durations.
          var _treeBaseDuration = 0;
          var _hiddenChild = _primaryChildFragment2.child;

          while (_hiddenChild !== null) {
            _treeBaseDuration += _hiddenChild.treeBaseDuration;
            _hiddenChild = _hiddenChild.sibling;
          }

          _primaryChildFragment2.treeBaseDuration = _treeBaseDuration;
        } // Clone the fallback child fragment, too. These we'll continue
        // working on.


        var _fallbackChildFragment2 = createWorkInProgress(currentFallbackChildFragment, _nextFallbackChildren2);

        _fallbackChildFragment2.return = workInProgress;
        _primaryChildFragment2.sibling = _fallbackChildFragment2;
        _primaryChildFragment2.childExpirationTime = NoWork; // Skip the primary children, and continue working on the
        // fallback children.

        workInProgress.memoizedState = SUSPENDED_MARKER;
        workInProgress.child = _primaryChildFragment2;
        return _fallbackChildFragment2;
      } else {
        // No longer suspended. Switch back to showing the primary children,
        // and remove the intermediate fragment fiber.
        var _nextPrimaryChildren = nextProps.children;
        var currentPrimaryChild = currentPrimaryChildFragment.child;
        var primaryChild = reconcileChildFibers(workInProgress, currentPrimaryChild, _nextPrimaryChildren, renderExpirationTime); // If this render doesn't suspend, we need to delete the fallback
        // children. Wait until the complete phase, after we've confirmed the
        // fallback is no longer needed.
        // TODO: Would it be better to store the fallback fragment on
        // the stateNode?
        // Continue rendering the children, like we normally do.

        workInProgress.memoizedState = null;
        return workInProgress.child = primaryChild;
      }
    } else {
      // The current tree has not already timed out. That means the primary
      // children are not wrapped in a fragment fiber.
      var _currentPrimaryChild = current.child;

      if (nextDidTimeout) {
        // Timed out. Wrap the children in a fragment fiber to keep them
        // separate from the fallback children.
        var _nextFallbackChildren3 = nextProps.fallback;

        var _primaryChildFragment3 = createFiberFromFragment( // It shouldn't matter what the pending props are because we aren't
        // going to render this fragment.
        null, mode, NoWork, null);

        _primaryChildFragment3.return = workInProgress;
        _primaryChildFragment3.child = _currentPrimaryChild;

        if (_currentPrimaryChild !== null) {
          _currentPrimaryChild.return = _primaryChildFragment3;
        } // Even though we're creating a new fiber, there are no new children,
        // because we're reusing an already mounted tree. So we don't need to
        // schedule a placement.
        // primaryChildFragment.effectTag |= Placement;


        if ((workInProgress.mode & BlockingMode) === NoMode) {
          // Outside of blocking mode, we commit the effects from the
          // partially completed, timed-out tree, too.
          var _progressedState2 = workInProgress.memoizedState;

          var _progressedPrimaryChild2 = _progressedState2 !== null ? workInProgress.child.child : workInProgress.child;

          _primaryChildFragment3.child = _progressedPrimaryChild2;
          var _progressedChild3 = _progressedPrimaryChild2;

          while (_progressedChild3 !== null) {
            _progressedChild3.return = _primaryChildFragment3;
            _progressedChild3 = _progressedChild3.sibling;
          }
        } // Because primaryChildFragment is a new fiber that we're inserting as the
        // parent of a new tree, we need to set its treeBaseDuration.


        if ( workInProgress.mode & ProfileMode) {
          // treeBaseDuration is the sum of all the child tree base durations.
          var _treeBaseDuration2 = 0;
          var _hiddenChild2 = _primaryChildFragment3.child;

          while (_hiddenChild2 !== null) {
            _treeBaseDuration2 += _hiddenChild2.treeBaseDuration;
            _hiddenChild2 = _hiddenChild2.sibling;
          }

          _primaryChildFragment3.treeBaseDuration = _treeBaseDuration2;
        } // Create a fragment from the fallback children, too.


        var _fallbackChildFragment3 = createFiberFromFragment(_nextFallbackChildren3, mode, renderExpirationTime, null);

        _fallbackChildFragment3.return = workInProgress;
        _primaryChildFragment3.sibling = _fallbackChildFragment3;
        _fallbackChildFragment3.effectTag |= Placement;
        _primaryChildFragment3.childExpirationTime = NoWork; // Skip the primary children, and continue working on the
        // fallback children.

        workInProgress.memoizedState = SUSPENDED_MARKER;
        workInProgress.child = _primaryChildFragment3;
        return _fallbackChildFragment3;
      } else {
        // Still haven't timed out. Continue rendering the children, like we
        // normally do.
        workInProgress.memoizedState = null;
        var _nextPrimaryChildren2 = nextProps.children;
        return workInProgress.child = reconcileChildFibers(workInProgress, _currentPrimaryChild, _nextPrimaryChildren2, renderExpirationTime);
      }
    }
  }
}

function scheduleWorkOnFiber(fiber, renderExpirationTime) {
  if (fiber.expirationTime < renderExpirationTime) {
    fiber.expirationTime = renderExpirationTime;
  }

  var alternate = fiber.alternate;

  if (alternate !== null && alternate.expirationTime < renderExpirationTime) {
    alternate.expirationTime = renderExpirationTime;
  }

  scheduleWorkOnParentPath(fiber.return, renderExpirationTime);
}

function propagateSuspenseContextChange(workInProgress, firstChild, renderExpirationTime) {
  // Mark any Suspense boundaries with fallbacks as having work to do.
  // If they were previously forced into fallbacks, they may now be able
  // to unblock.
  var node = firstChild;

  while (node !== null) {
    if (node.tag === SuspenseComponent) {
      var state = node.memoizedState;

      if (state !== null) {
        scheduleWorkOnFiber(node, renderExpirationTime);
      }
    } else if (node.tag === SuspenseListComponent) {
      // If the tail is hidden there might not be an Suspense boundaries
      // to schedule work on. In this case we have to schedule it on the
      // list itself.
      // We don't have to traverse to the children of the list since
      // the list will propagate the change when it rerenders.
      scheduleWorkOnFiber(node, renderExpirationTime);
    } else if (node.child !== null) {
      node.child.return = node;
      node = node.child;
      continue;
    }

    if (node === workInProgress) {
      return;
    }

    while (node.sibling === null) {
      if (node.return === null || node.return === workInProgress) {
        return;
      }

      node = node.return;
    }

    node.sibling.return = node.return;
    node = node.sibling;
  }
}

function findLastContentRow(firstChild) {
  // This is going to find the last row among these children that is already
  // showing content on the screen, as opposed to being in fallback state or
  // new. If a row has multiple Suspense boundaries, any of them being in the
  // fallback state, counts as the whole row being in a fallback state.
  // Note that the "rows" will be workInProgress, but any nested children
  // will still be current since we haven't rendered them yet. The mounted
  // order may not be the same as the new order. We use the new order.
  var row = firstChild;
  var lastContentRow = null;

  while (row !== null) {
    var currentRow = row.alternate; // New rows can't be content rows.

    if (currentRow !== null && findFirstSuspended(currentRow) === null) {
      lastContentRow = row;
    }

    row = row.sibling;
  }

  return lastContentRow;
}

function validateRevealOrder(revealOrder) {
  {
    if (revealOrder !== undefined && revealOrder !== 'forwards' && revealOrder !== 'backwards' && revealOrder !== 'together' && !didWarnAboutRevealOrder[revealOrder]) {
      didWarnAboutRevealOrder[revealOrder] = true;

      if (typeof revealOrder === 'string') {
        switch (revealOrder.toLowerCase()) {
          case 'together':
          case 'forwards':
          case 'backwards':
            {
              error('"%s" is not a valid value for revealOrder on <SuspenseList />. ' + 'Use lowercase "%s" instead.', revealOrder, revealOrder.toLowerCase());

              break;
            }

          case 'forward':
          case 'backward':
            {
              error('"%s" is not a valid value for revealOrder on <SuspenseList />. ' + 'React uses the -s suffix in the spelling. Use "%ss" instead.', revealOrder, revealOrder.toLowerCase());

              break;
            }

          default:
            error('"%s" is not a supported revealOrder on <SuspenseList />. ' + 'Did you mean "together", "forwards" or "backwards"?', revealOrder);

            break;
        }
      } else {
        error('%s is not a supported value for revealOrder on <SuspenseList />. ' + 'Did you mean "together", "forwards" or "backwards"?', revealOrder);
      }
    }
  }
}

function validateTailOptions(tailMode, revealOrder) {
  {
    if (tailMode !== undefined && !didWarnAboutTailOptions[tailMode]) {
      if (tailMode !== 'collapsed' && tailMode !== 'hidden') {
        didWarnAboutTailOptions[tailMode] = true;

        error('"%s" is not a supported value for tail on <SuspenseList />. ' + 'Did you mean "collapsed" or "hidden"?', tailMode);
      } else if (revealOrder !== 'forwards' && revealOrder !== 'backwards') {
        didWarnAboutTailOptions[tailMode] = true;

        error('<SuspenseList tail="%s" /> is only valid if revealOrder is ' + '"forwards" or "backwards". ' + 'Did you mean to specify revealOrder="forwards"?', tailMode);
      }
    }
  }
}

function validateSuspenseListNestedChild(childSlot, index) {
  {
    var isArray = Array.isArray(childSlot);
    var isIterable = !isArray && typeof getIteratorFn(childSlot) === 'function';

    if (isArray || isIterable) {
      var type = isArray ? 'array' : 'iterable';

      error('A nested %s was passed to row #%s in <SuspenseList />. Wrap it in ' + 'an additional SuspenseList to configure its revealOrder: ' + '<SuspenseList revealOrder=...> ... ' + '<SuspenseList revealOrder=...>{%s}</SuspenseList> ... ' + '</SuspenseList>', type, index, type);

      return false;
    }
  }

  return true;
}

function validateSuspenseListChildren(children, revealOrder) {
  {
    if ((revealOrder === 'forwards' || revealOrder === 'backwards') && children !== undefined && children !== null && children !== false) {
      if (Array.isArray(children)) {
        for (var i = 0; i < children.length; i++) {
          if (!validateSuspenseListNestedChild(children[i], i)) {
            return;
          }
        }
      } else {
        var iteratorFn = getIteratorFn(children);

        if (typeof iteratorFn === 'function') {
          var childrenIterator = iteratorFn.call(children);

          if (childrenIterator) {
            var step = childrenIterator.next();
            var _i = 0;

            for (; !step.done; step = childrenIterator.next()) {
              if (!validateSuspenseListNestedChild(step.value, _i)) {
                return;
              }

              _i++;
            }
          }
        } else {
          error('A single row was passed to a <SuspenseList revealOrder="%s" />. ' + 'This is not useful since it needs multiple rows. ' + 'Did you mean to pass multiple children or an array?', revealOrder);
        }
      }
    }
  }
}

function initSuspenseListRenderState(workInProgress, isBackwards, tail, lastContentRow, tailMode, lastEffectBeforeRendering) {
  var renderState = workInProgress.memoizedState;

  if (renderState === null) {
    workInProgress.memoizedState = {
      isBackwards: isBackwards,
      rendering: null,
      renderingStartTime: 0,
      last: lastContentRow,
      tail: tail,
      tailExpiration: 0,
      tailMode: tailMode,
      lastEffect: lastEffectBeforeRendering
    };
  } else {
    // We can reuse the existing object from previous renders.
    renderState.isBackwards = isBackwards;
    renderState.rendering = null;
    renderState.renderingStartTime = 0;
    renderState.last = lastContentRow;
    renderState.tail = tail;
    renderState.tailExpiration = 0;
    renderState.tailMode = tailMode;
    renderState.lastEffect = lastEffectBeforeRendering;
  }
} // This can end up rendering this component multiple passes.
// The first pass splits the children fibers into two sets. A head and tail.
// We first render the head. If anything is in fallback state, we do another
// pass through beginWork to rerender all children (including the tail) with
// the force suspend context. If the first render didn't have anything in
// in fallback state. Then we render each row in the tail one-by-one.
// That happens in the completeWork phase without going back to beginWork.


function updateSuspenseListComponent(current, workInProgress, renderExpirationTime) {
  var nextProps = workInProgress.pendingProps;
  var revealOrder = nextProps.revealOrder;
  var tailMode = nextProps.tail;
  var newChildren = nextProps.children;
  validateRevealOrder(revealOrder);
  validateTailOptions(tailMode, revealOrder);
  validateSuspenseListChildren(newChildren, revealOrder);
  reconcileChildren(current, workInProgress, newChildren, renderExpirationTime);
  var suspenseContext = suspenseStackCursor.current;
  var shouldForceFallback = hasSuspenseContext(suspenseContext, ForceSuspenseFallback);

  if (shouldForceFallback) {
    suspenseContext = setShallowSuspenseContext(suspenseContext, ForceSuspenseFallback);
    workInProgress.effectTag |= DidCapture;
  } else {
    var didSuspendBefore = current !== null && (current.effectTag & DidCapture) !== NoEffect;

    if (didSuspendBefore) {
      // If we previously forced a fallback, we need to schedule work
      // on any nested boundaries to let them know to try to render
      // again. This is the same as context updating.
      propagateSuspenseContextChange(workInProgress, workInProgress.child, renderExpirationTime);
    }

    suspenseContext = setDefaultShallowSuspenseContext(suspenseContext);
  }

  pushSuspenseContext(workInProgress, suspenseContext);

  if ((workInProgress.mode & BlockingMode) === NoMode) {
    // Outside of blocking mode, SuspenseList doesn't work so we just
    // use make it a noop by treating it as the default revealOrder.
    workInProgress.memoizedState = null;
  } else {
    switch (revealOrder) {
      case 'forwards':
        {
          var lastContentRow = findLastContentRow(workInProgress.child);
          var tail;

          if (lastContentRow === null) {
            // The whole list is part of the tail.
            // TODO: We could fast path by just rendering the tail now.
            tail = workInProgress.child;
            workInProgress.child = null;
          } else {
            // Disconnect the tail rows after the content row.
            // We're going to render them separately later.
            tail = lastContentRow.sibling;
            lastContentRow.sibling = null;
          }

          initSuspenseListRenderState(workInProgress, false, // isBackwards
          tail, lastContentRow, tailMode, workInProgress.lastEffect);
          break;
        }

      case 'backwards':
        {
          // We're going to find the first row that has existing content.
          // At the same time we're going to reverse the list of everything
          // we pass in the meantime. That's going to be our tail in reverse
          // order.
          var _tail = null;
          var row = workInProgress.child;
          workInProgress.child = null;

          while (row !== null) {
            var currentRow = row.alternate; // New rows can't be content rows.

            if (currentRow !== null && findFirstSuspended(currentRow) === null) {
              // This is the beginning of the main content.
              workInProgress.child = row;
              break;
            }

            var nextRow = row.sibling;
            row.sibling = _tail;
            _tail = row;
            row = nextRow;
          } // TODO: If workInProgress.child is null, we can continue on the tail immediately.


          initSuspenseListRenderState(workInProgress, true, // isBackwards
          _tail, null, // last
          tailMode, workInProgress.lastEffect);
          break;
        }

      case 'together':
        {
          initSuspenseListRenderState(workInProgress, false, // isBackwards
          null, // tail
          null, // last
          undefined, workInProgress.lastEffect);
          break;
        }

      default:
        {
          // The default reveal order is the same as not having
          // a boundary.
          workInProgress.memoizedState = null;
        }
    }
  }

  return workInProgress.child;
}

function updatePortalComponent(current, workInProgress, renderExpirationTime) {
  pushHostContainer(workInProgress, workInProgress.stateNode.containerInfo);
  var nextChildren = workInProgress.pendingProps;

  if (current === null) {
    // Portals are special because we don't append the children during mount
    // but at commit. Therefore we need to track insertions which the normal
    // flow doesn't do during mount. This doesn't happen at the root because
    // the root always starts with a "current" with a null child.
    // TODO: Consider unifying this with how the root works.
    workInProgress.child = reconcileChildFibers(workInProgress, null, nextChildren, renderExpirationTime);
  } else {
    reconcileChildren(current, workInProgress, nextChildren, renderExpirationTime);
  }

  return workInProgress.child;
}

function updateContextProvider(current, workInProgress, renderExpirationTime) {
  var providerType = workInProgress.type;
  var context = providerType._context;
  var newProps = workInProgress.pendingProps;
  var oldProps = workInProgress.memoizedProps;
  var newValue = newProps.value;

  {
    var providerPropTypes = workInProgress.type.propTypes;

    if (providerPropTypes) {
      checkPropTypes(providerPropTypes, newProps, 'prop', 'Context.Provider', getCurrentFiberStackInDev);
    }
  }

  pushProvider(workInProgress, newValue);

  if (oldProps !== null) {
    var oldValue = oldProps.value;
    var changedBits = calculateChangedBits(context, newValue, oldValue);

    if (changedBits === 0) {
      // No change. Bailout early if children are the same.
      if (oldProps.children === newProps.children && !hasContextChanged()) {
        return bailoutOnAlreadyFinishedWork(current, workInProgress, renderExpirationTime);
      }
    } else {
      // The context value changed. Search for matching consumers and schedule
      // them to update.
      propagateContextChange(workInProgress, context, changedBits, renderExpirationTime);
    }
  }

  var newChildren = newProps.children;
  reconcileChildren(current, workInProgress, newChildren, renderExpirationTime);
  return workInProgress.child;
}

var hasWarnedAboutUsingContextAsConsumer = false;

function updateContextConsumer(current, workInProgress, renderExpirationTime) {
  var context = workInProgress.type; // The logic below for Context differs depending on PROD or DEV mode. In
  // DEV mode, we create a separate object for Context.Consumer that acts
  // like a proxy to Context. This proxy object adds unnecessary code in PROD
  // so we use the old behaviour (Context.Consumer references Context) to
  // reduce size and overhead. The separate object references context via
  // a property called "_context", which also gives us the ability to check
  // in DEV mode if this property exists or not and warn if it does not.

  {
    if (context._context === undefined) {
      // This may be because it's a Context (rather than a Consumer).
      // Or it may be because it's older React where they're the same thing.
      // We only want to warn if we're sure it's a new React.
      if (context !== context.Consumer) {
        if (!hasWarnedAboutUsingContextAsConsumer) {
          hasWarnedAboutUsingContextAsConsumer = true;

          error('Rendering <Context> directly is not supported and will be removed in ' + 'a future major release. Did you mean to render <Context.Consumer> instead?');
        }
      }
    } else {
      context = context._context;
    }
  }

  var newProps = workInProgress.pendingProps;
  var render = newProps.children;

  {
    if (typeof render !== 'function') {
      error('A context consumer was rendered with multiple children, or a child ' + "that isn't a function. A context consumer expects a single child " + 'that is a function. If you did pass a function, make sure there ' + 'is no trailing or leading whitespace around it.');
    }
  }

  prepareToReadContext(workInProgress, renderExpirationTime);
  var newValue = readContext(context, newProps.unstable_observedBits);
  var newChildren;

  {
    ReactCurrentOwner$1.current = workInProgress;
    setIsRendering(true);
    newChildren = render(newValue);
    setIsRendering(false);
  } // React DevTools reads this flag.


  workInProgress.effectTag |= PerformedWork;
  reconcileChildren(current, workInProgress, newChildren, renderExpirationTime);
  return workInProgress.child;
}

function markWorkInProgressReceivedUpdate() {
  didReceiveUpdate = true;
}

function bailoutOnAlreadyFinishedWork(current, workInProgress, renderExpirationTime) {
  cancelWorkTimer(workInProgress);

  if (current !== null) {
    // Reuse previous dependencies
    workInProgress.dependencies = current.dependencies;
  }

  {
    // Don't update "base" render times for bailouts.
    stopProfilerTimerIfRunning();
  }

  var updateExpirationTime = workInProgress.expirationTime;

  if (updateExpirationTime !== NoWork) {
    markUnprocessedUpdateTime(updateExpirationTime);
  } // Check if the children have any pending work.


  var childExpirationTime = workInProgress.childExpirationTime;

  if (childExpirationTime < renderExpirationTime) {
    // The children don't have any work either. We can skip them.
    // TODO: Once we add back resuming, we should check if the children are
    // a work-in-progress set. If so, we need to transfer their effects.
    return null;
  } else {
    // This fiber doesn't have work, but its subtree does. Clone the child
    // fibers and continue.
    cloneChildFibers(current, workInProgress);
    return workInProgress.child;
  }
}

function remountFiber(current, oldWorkInProgress, newWorkInProgress) {
  {
    var returnFiber = oldWorkInProgress.return;

    if (returnFiber === null) {
      throw new Error('Cannot swap the root fiber.');
    } // Disconnect from the old current.
    // It will get deleted.


    current.alternate = null;
    oldWorkInProgress.alternate = null; // Connect to the new tree.

    newWorkInProgress.index = oldWorkInProgress.index;
    newWorkInProgress.sibling = oldWorkInProgress.sibling;
    newWorkInProgress.return = oldWorkInProgress.return;
    newWorkInProgress.ref = oldWorkInProgress.ref; // Replace the child/sibling pointers above it.

    if (oldWorkInProgress === returnFiber.child) {
      returnFiber.child = newWorkInProgress;
    } else {
      var prevSibling = returnFiber.child;

      if (prevSibling === null) {
        throw new Error('Expected parent to have a child.');
      }

      while (prevSibling.sibling !== oldWorkInProgress) {
        prevSibling = prevSibling.sibling;

        if (prevSibling === null) {
          throw new Error('Expected to find the previous sibling.');
        }
      }

      prevSibling.sibling = newWorkInProgress;
    } // Delete the old fiber and place the new one.
    // Since the old fiber is disconnected, we have to schedule it manually.


    var last = returnFiber.lastEffect;

    if (last !== null) {
      last.nextEffect = current;
      returnFiber.lastEffect = current;
    } else {
      returnFiber.firstEffect = returnFiber.lastEffect = current;
    }

    current.nextEffect = null;
    current.effectTag = Deletion;
    newWorkInProgress.effectTag |= Placement; // Restart work from the new fiber.

    return newWorkInProgress;
  }
}

function beginWork(current, workInProgress, renderExpirationTime) {
  var updateExpirationTime = workInProgress.expirationTime;

  {
    if (workInProgress._debugNeedsRemount && current !== null) {
      // This will restart the begin phase with a new fiber.
      return remountFiber(current, workInProgress, createFiberFromTypeAndProps(workInProgress.type, workInProgress.key, workInProgress.pendingProps, workInProgress._debugOwner || null, workInProgress.mode, workInProgress.expirationTime));
    }
  }

  if (current !== null) {
    var oldProps = current.memoizedProps;
    var newProps = workInProgress.pendingProps;

    if (oldProps !== newProps || hasContextChanged() || ( // Force a re-render if the implementation changed due to hot reload:
     workInProgress.type !== current.type )) {
      // If props or context changed, mark the fiber as having performed work.
      // This may be unset if the props are determined to be equal later (memo).
      didReceiveUpdate = true;
    } else if (updateExpirationTime < renderExpirationTime) {
      didReceiveUpdate = false; // This fiber does not have any pending work. Bailout without entering
      // the begin phase. There's still some bookkeeping we that needs to be done
      // in this optimized path, mostly pushing stuff onto the stack.

      switch (workInProgress.tag) {
        case HostRoot:
          pushHostRootContext(workInProgress);
          resetHydrationState();
          break;

        case HostComponent:
          pushHostContext(workInProgress);

          if (workInProgress.mode & ConcurrentMode && renderExpirationTime !== Never && shouldDeprioritizeSubtree(workInProgress.type, newProps)) {
            {
              markSpawnedWork(Never);
            } // Schedule this fiber to re-render at offscreen priority. Then bailout.


            workInProgress.expirationTime = workInProgress.childExpirationTime = Never;
            return null;
          }

          break;

        case ClassComponent:
          {
            var Component = workInProgress.type;

            if (isContextProvider(Component)) {
              pushContextProvider(workInProgress);
            }

            break;
          }

        case HostPortal:
          pushHostContainer(workInProgress, workInProgress.stateNode.containerInfo);
          break;

        case ContextProvider:
          {
            var newValue = workInProgress.memoizedProps.value;
            pushProvider(workInProgress, newValue);
            break;
          }

        case Profiler:
          {
            // Profiler should only call onRender when one of its descendants actually rendered.
            var hasChildWork = workInProgress.childExpirationTime >= renderExpirationTime;

            if (hasChildWork) {
              workInProgress.effectTag |= Update;
            }
          }

          break;

        case SuspenseComponent:
          {
            var state = workInProgress.memoizedState;

            if (state !== null) {
              // whether to retry the primary children, or to skip over it and
              // go straight to the fallback. Check the priority of the primary
              // child fragment.


              var primaryChildFragment = workInProgress.child;
              var primaryChildExpirationTime = primaryChildFragment.childExpirationTime;

              if (primaryChildExpirationTime !== NoWork && primaryChildExpirationTime >= renderExpirationTime) {
                // The primary children have pending work. Use the normal path
                // to attempt to render the primary children again.
                return updateSuspenseComponent(current, workInProgress, renderExpirationTime);
              } else {
                pushSuspenseContext(workInProgress, setDefaultShallowSuspenseContext(suspenseStackCursor.current)); // The primary children do not have pending work with sufficient
                // priority. Bailout.

                var child = bailoutOnAlreadyFinishedWork(current, workInProgress, renderExpirationTime);

                if (child !== null) {
                  // The fallback children have pending work. Skip over the
                  // primary children and work on the fallback.
                  return child.sibling;
                } else {
                  return null;
                }
              }
            } else {
              pushSuspenseContext(workInProgress, setDefaultShallowSuspenseContext(suspenseStackCursor.current));
            }

            break;
          }

        case SuspenseListComponent:
          {
            var didSuspendBefore = (current.effectTag & DidCapture) !== NoEffect;

            var _hasChildWork = workInProgress.childExpirationTime >= renderExpirationTime;

            if (didSuspendBefore) {
              if (_hasChildWork) {
                // If something was in fallback state last time, and we have all the
                // same children then we're still in progressive loading state.
                // Something might get unblocked by state updates or retries in the
                // tree which will affect the tail. So we need to use the normal
                // path to compute the correct tail.
                return updateSuspenseListComponent(current, workInProgress, renderExpirationTime);
              } // If none of the children had any work, that means that none of
              // them got retried so they'll still be blocked in the same way
              // as before. We can fast bail out.


              workInProgress.effectTag |= DidCapture;
            } // If nothing suspended before and we're rendering the same children,
            // then the tail doesn't matter. Anything new that suspends will work
            // in the "together" mode, so we can continue from the state we had.


            var renderState = workInProgress.memoizedState;

            if (renderState !== null) {
              // Reset to the "together" mode in case we've started a different
              // update in the past but didn't complete it.
              renderState.rendering = null;
              renderState.tail = null;
            }

            pushSuspenseContext(workInProgress, suspenseStackCursor.current);

            if (_hasChildWork) {
              break;
            } else {
              // If none of the children had any work, that means that none of
              // them got retried so they'll still be blocked in the same way
              // as before. We can fast bail out.
              return null;
            }
          }
      }

      return bailoutOnAlreadyFinishedWork(current, workInProgress, renderExpirationTime);
    } else {
      // An update was scheduled on this fiber, but there are no new props
      // nor legacy context. Set this to false. If an update queue or context
      // consumer produces a changed value, it will set this to true. Otherwise,
      // the component will assume the children have not changed and bail out.
      didReceiveUpdate = false;
    }
  } else {
    didReceiveUpdate = false;
  } // Before entering the begin phase, clear pending update priority.
  // TODO: This assumes that we're about to evaluate the component and process
  // the update queue. However, there's an exception: SimpleMemoComponent
  // sometimes bails out later in the begin phase. This indicates that we should
  // move this assignment out of the common path and into each branch.


  workInProgress.expirationTime = NoWork;

  switch (workInProgress.tag) {
    case IndeterminateComponent:
      {
        return mountIndeterminateComponent(current, workInProgress, workInProgress.type, renderExpirationTime);
      }

    case LazyComponent:
      {
        var elementType = workInProgress.elementType;
        return mountLazyComponent(current, workInProgress, elementType, updateExpirationTime, renderExpirationTime);
      }

    case FunctionComponent:
      {
        var _Component = workInProgress.type;
        var unresolvedProps = workInProgress.pendingProps;
        var resolvedProps = workInProgress.elementType === _Component ? unresolvedProps : resolveDefaultProps(_Component, unresolvedProps);
        return updateFunctionComponent(current, workInProgress, _Component, resolvedProps, renderExpirationTime);
      }

    case ClassComponent:
      {
        var _Component2 = workInProgress.type;
        var _unresolvedProps = workInProgress.pendingProps;

        var _resolvedProps = workInProgress.elementType === _Component2 ? _unresolvedProps : resolveDefaultProps(_Component2, _unresolvedProps);

        return updateClassComponent(current, workInProgress, _Component2, _resolvedProps, renderExpirationTime);
      }

    case HostRoot:
      return updateHostRoot(current, workInProgress, renderExpirationTime);

    case HostComponent:
      return updateHostComponent(current, workInProgress, renderExpirationTime);

    case HostText:
      return updateHostText(current, workInProgress);

    case SuspenseComponent:
      return updateSuspenseComponent(current, workInProgress, renderExpirationTime);

    case HostPortal:
      return updatePortalComponent(current, workInProgress, renderExpirationTime);

    case ForwardRef:
      {
        var type = workInProgress.type;
        var _unresolvedProps2 = workInProgress.pendingProps;

        var _resolvedProps2 = workInProgress.elementType === type ? _unresolvedProps2 : resolveDefaultProps(type, _unresolvedProps2);

        return updateForwardRef(current, workInProgress, type, _resolvedProps2, renderExpirationTime);
      }

    case Fragment:
      return updateFragment(current, workInProgress, renderExpirationTime);

    case Mode:
      return updateMode(current, workInProgress, renderExpirationTime);

    case Profiler:
      return updateProfiler(current, workInProgress, renderExpirationTime);

    case ContextProvider:
      return updateContextProvider(current, workInProgress, renderExpirationTime);

    case ContextConsumer:
      return updateContextConsumer(current, workInProgress, renderExpirationTime);

    case MemoComponent:
      {
        var _type2 = workInProgress.type;
        var _unresolvedProps3 = workInProgress.pendingProps; // Resolve outer props first, then resolve inner props.

        var _resolvedProps3 = resolveDefaultProps(_type2, _unresolvedProps3);

        {
          if (workInProgress.type !== workInProgress.elementType) {
            var outerPropTypes = _type2.propTypes;

            if (outerPropTypes) {
              checkPropTypes(outerPropTypes, _resolvedProps3, // Resolved for outer only
              'prop', getComponentName(_type2), getCurrentFiberStackInDev);
            }
          }
        }

        _resolvedProps3 = resolveDefaultProps(_type2.type, _resolvedProps3);
        return updateMemoComponent(current, workInProgress, _type2, _resolvedProps3, updateExpirationTime, renderExpirationTime);
      }

    case SimpleMemoComponent:
      {
        return updateSimpleMemoComponent(current, workInProgress, workInProgress.type, workInProgress.pendingProps, updateExpirationTime, renderExpirationTime);
      }

    case IncompleteClassComponent:
      {
        var _Component3 = workInProgress.type;
        var _unresolvedProps4 = workInProgress.pendingProps;

        var _resolvedProps4 = workInProgress.elementType === _Component3 ? _unresolvedProps4 : resolveDefaultProps(_Component3, _unresolvedProps4);

        return mountIncompleteClassComponent(current, workInProgress, _Component3, _resolvedProps4, renderExpirationTime);
      }

    case SuspenseListComponent:
      {
        return updateSuspenseListComponent(current, workInProgress, renderExpirationTime);
      }
  }

  {
    {
      throw Error( "Unknown unit of work tag (" + workInProgress.tag + "). This error is likely caused by a bug in React. Please file an issue." );
    }
  }
}

function markUpdate(workInProgress) {
  // Tag the fiber with an update effect. This turns a Placement into
  // a PlacementAndUpdate.
  workInProgress.effectTag |= Update;
}

function markRef$1(workInProgress) {
  workInProgress.effectTag |= Ref;
}

var appendAllChildren;
var updateHostContainer;
var updateHostComponent$1;
var updateHostText$1;

{
  // Mutation mode
  appendAllChildren = function (parent, workInProgress, needsVisibilityToggle, isHidden) {
    // We only have the top Fiber that was created but we need recurse down its
    // children to find all the terminal nodes.
    var node = workInProgress.child;

    while (node !== null) {
      if (node.tag === HostComponent || node.tag === HostText) {
        appendInitialChild(parent, node.stateNode);
      } else if (node.tag === HostPortal) ; else if (node.child !== null) {
        node.child.return = node;
        node = node.child;
        continue;
      }

      if (node === workInProgress) {
        return;
      }

      while (node.sibling === null) {
        if (node.return === null || node.return === workInProgress) {
          return;
        }

        node = node.return;
      }

      node.sibling.return = node.return;
      node = node.sibling;
    }
  };

  updateHostContainer = function (workInProgress) {// Noop
  };

  updateHostComponent$1 = function (current, workInProgress, type, newProps, rootContainerInstance) {
    // If we have an alternate, that means this is an update and we need to
    // schedule a side-effect to do the updates.
    var oldProps = current.memoizedProps;

    if (oldProps === newProps) {
      // In mutation mode, this is sufficient for a bailout because
      // we won't touch this node even if children changed.
      return;
    } // If we get updated because one of our children updated, we don't
    // have newProps so we'll have to reuse them.
    // TODO: Split the update API as separate for the props vs. children.
    // Even better would be if children weren't special cased at all tho.


    var instance = workInProgress.stateNode;
    var currentHostContext = getHostContext(); // TODO: Experiencing an error where oldProps is null. Suggests a host
    // component is hitting the resume path. Figure out why. Possibly
    // related to `hidden`.

    var updatePayload = prepareUpdate(instance, type, oldProps, newProps, rootContainerInstance, currentHostContext); // TODO: Type this specific to this type of component.

    workInProgress.updateQueue = updatePayload; // If the update payload indicates that there is a change or if there
    // is a new ref we mark this as an update. All the work is done in commitWork.

    if (updatePayload) {
      markUpdate(workInProgress);
    }
  };

  updateHostText$1 = function (current, workInProgress, oldText, newText) {
    // If the text differs, mark it as an update. All the work in done in commitWork.
    if (oldText !== newText) {
      markUpdate(workInProgress);
    }
  };
}

function cutOffTailIfNeeded(renderState, hasRenderedATailFallback) {
  switch (renderState.tailMode) {
    case 'hidden':
      {
        // Any insertions at the end of the tail list after this point
        // should be invisible. If there are already mounted boundaries
        // anything before them are not considered for collapsing.
        // Therefore we need to go through the whole tail to find if
        // there are any.
        var tailNode = renderState.tail;
        var lastTailNode = null;

        while (tailNode !== null) {
          if (tailNode.alternate !== null) {
            lastTailNode = tailNode;
          }

          tailNode = tailNode.sibling;
        } // Next we're simply going to delete all insertions after the
        // last rendered item.


        if (lastTailNode === null) {
          // All remaining items in the tail are insertions.
          renderState.tail = null;
        } else {
          // Detach the insertion after the last node that was already
          // inserted.
          lastTailNode.sibling = null;
        }

        break;
      }

    case 'collapsed':
      {
        // Any insertions at the end of the tail list after this point
        // should be invisible. If there are already mounted boundaries
        // anything before them are not considered for collapsing.
        // Therefore we need to go through the whole tail to find if
        // there are any.
        var _tailNode = renderState.tail;
        var _lastTailNode = null;

        while (_tailNode !== null) {
          if (_tailNode.alternate !== null) {
            _lastTailNode = _tailNode;
          }

          _tailNode = _tailNode.sibling;
        } // Next we're simply going to delete all insertions after the
        // last rendered item.


        if (_lastTailNode === null) {
          // All remaining items in the tail are insertions.
          if (!hasRenderedATailFallback && renderState.tail !== null) {
            // We suspended during the head. We want to show at least one
            // row at the tail. So we'll keep on and cut off the rest.
            renderState.tail.sibling = null;
          } else {
            renderState.tail = null;
          }
        } else {
          // Detach the insertion after the last node that was already
          // inserted.
          _lastTailNode.sibling = null;
        }

        break;
      }
  }
}

function completeWork(current, workInProgress, renderExpirationTime) {
  var newProps = workInProgress.pendingProps;

  switch (workInProgress.tag) {
    case IndeterminateComponent:
    case LazyComponent:
    case SimpleMemoComponent:
    case FunctionComponent:
    case ForwardRef:
    case Fragment:
    case Mode:
    case Profiler:
    case ContextConsumer:
    case MemoComponent:
      return null;

    case ClassComponent:
      {
        var Component = workInProgress.type;

        if (isContextProvider(Component)) {
          popContext(workInProgress);
        }

        return null;
      }

    case HostRoot:
      {
        popHostContainer(workInProgress);
        popTopLevelContextObject(workInProgress);
        var fiberRoot = workInProgress.stateNode;

        if (fiberRoot.pendingContext) {
          fiberRoot.context = fiberRoot.pendingContext;
          fiberRoot.pendingContext = null;
        }

        if (current === null || current.child === null) {
          // If we hydrated, pop so that we can delete any remaining children
          // that weren't hydrated.
          var wasHydrated = popHydrationState(workInProgress);

          if (wasHydrated) {
            // If we hydrated, then we'll need to schedule an update for
            // the commit side-effects on the root.
            markUpdate(workInProgress);
          }
        }

        updateHostContainer(workInProgress);
        return null;
      }

    case HostComponent:
      {
        popHostContext(workInProgress);
        var rootContainerInstance = getRootHostContainer();
        var type = workInProgress.type;

        if (current !== null && workInProgress.stateNode != null) {
          updateHostComponent$1(current, workInProgress, type, newProps, rootContainerInstance);

          if (current.ref !== workInProgress.ref) {
            markRef$1(workInProgress);
          }
        } else {
          if (!newProps) {
            if (!(workInProgress.stateNode !== null)) {
              {
                throw Error( "We must have new props for new mounts. This error is likely caused by a bug in React. Please file an issue." );
              }
            } // This can happen when we abort work.


            return null;
          }

          var currentHostContext = getHostContext(); // TODO: Move createInstance to beginWork and keep it on a context
          // "stack" as the parent. Then append children as we go in beginWork
          // or completeWork depending on whether we want to add them top->down or
          // bottom->up. Top->down is faster in IE11.

          var _wasHydrated = popHydrationState(workInProgress);

          if (_wasHydrated) {
            // TODO: Move this and createInstance step into the beginPhase
            // to consolidate.
            if (prepareToHydrateHostInstance(workInProgress, rootContainerInstance, currentHostContext)) {
              // If changes to the hydrated node need to be applied at the
              // commit-phase we mark this as such.
              markUpdate(workInProgress);
            }
          } else {
            var instance = createInstance(type, newProps, rootContainerInstance, currentHostContext, workInProgress);
            appendAllChildren(instance, workInProgress, false, false); // This needs to be set before we mount Flare event listeners

            workInProgress.stateNode = instance;
            // (eg DOM renderer supports auto-focus for certain elements).
            // Make sure such renderers get scheduled for later work.


            if (finalizeInitialChildren(instance, type, newProps, rootContainerInstance)) {
              markUpdate(workInProgress);
            }
          }

          if (workInProgress.ref !== null) {
            // If there is a ref on a host node we need to schedule a callback
            markRef$1(workInProgress);
          }
        }

        return null;
      }

    case HostText:
      {
        var newText = newProps;

        if (current && workInProgress.stateNode != null) {
          var oldText = current.memoizedProps; // If we have an alternate, that means this is an update and we need
          // to schedule a side-effect to do the updates.

          updateHostText$1(current, workInProgress, oldText, newText);
        } else {
          if (typeof newText !== 'string') {
            if (!(workInProgress.stateNode !== null)) {
              {
                throw Error( "We must have new props for new mounts. This error is likely caused by a bug in React. Please file an issue." );
              }
            } // This can happen when we abort work.

          }

          var _rootContainerInstance = getRootHostContainer();

          var _currentHostContext = getHostContext();

          var _wasHydrated2 = popHydrationState(workInProgress);

          if (_wasHydrated2) {
            if (prepareToHydrateHostTextInstance(workInProgress)) {
              markUpdate(workInProgress);
            }
          } else {
            workInProgress.stateNode = createTextInstance(newText, _rootContainerInstance, _currentHostContext, workInProgress);
          }
        }

        return null;
      }

    case SuspenseComponent:
      {
        popSuspenseContext(workInProgress);
        var nextState = workInProgress.memoizedState;

        if ((workInProgress.effectTag & DidCapture) !== NoEffect) {
          // Something suspended. Re-render with the fallback children.
          workInProgress.expirationTime = renderExpirationTime; // Do not reset the effect list.

          return workInProgress;
        }

        var nextDidTimeout = nextState !== null;
        var prevDidTimeout = false;

        if (current === null) {
          if (workInProgress.memoizedProps.fallback !== undefined) {
            popHydrationState(workInProgress);
          }
        } else {
          var prevState = current.memoizedState;
          prevDidTimeout = prevState !== null;

          if (!nextDidTimeout && prevState !== null) {
            // We just switched from the fallback to the normal children.
            // Delete the fallback.
            // TODO: Would it be better to store the fallback fragment on
            // the stateNode during the begin phase?
            var currentFallbackChild = current.child.sibling;

            if (currentFallbackChild !== null) {
              // Deletions go at the beginning of the return fiber's effect list
              var first = workInProgress.firstEffect;

              if (first !== null) {
                workInProgress.firstEffect = currentFallbackChild;
                currentFallbackChild.nextEffect = first;
              } else {
                workInProgress.firstEffect = workInProgress.lastEffect = currentFallbackChild;
                currentFallbackChild.nextEffect = null;
              }

              currentFallbackChild.effectTag = Deletion;
            }
          }
        }

        if (nextDidTimeout && !prevDidTimeout) {
          // If this subtreee is running in blocking mode we can suspend,
          // otherwise we won't suspend.
          // TODO: This will still suspend a synchronous tree if anything
          // in the concurrent tree already suspended during this render.
          // This is a known bug.
          if ((workInProgress.mode & BlockingMode) !== NoMode) {
            // TODO: Move this back to throwException because this is too late
            // if this is a large tree which is common for initial loads. We
            // don't know if we should restart a render or not until we get
            // this marker, and this is too late.
            // If this render already had a ping or lower pri updates,
            // and this is the first time we know we're going to suspend we
            // should be able to immediately restart from within throwException.
            var hasInvisibleChildContext = current === null && workInProgress.memoizedProps.unstable_avoidThisFallback !== true;

            if (hasInvisibleChildContext || hasSuspenseContext(suspenseStackCursor.current, InvisibleParentSuspenseContext)) {
              // If this was in an invisible tree or a new render, then showing
              // this boundary is ok.
              renderDidSuspend();
            } else {
              // Otherwise, we're going to have to hide content so we should
              // suspend for longer if possible.
              renderDidSuspendDelayIfPossible();
            }
          }
        }

        {
          // TODO: Only schedule updates if these values are non equal, i.e. it changed.
          if (nextDidTimeout || prevDidTimeout) {
            // If this boundary just timed out, schedule an effect to attach a
            // retry listener to the promise. This flag is also used to hide the
            // primary children. In mutation mode, we also need the flag to
            // *unhide* children that were previously hidden, so check if this
            // is currently timed out, too.
            workInProgress.effectTag |= Update;
          }
        }

        return null;
      }

    case HostPortal:
      popHostContainer(workInProgress);
      updateHostContainer(workInProgress);
      return null;

    case ContextProvider:
      // Pop provider fiber
      popProvider(workInProgress);
      return null;

    case IncompleteClassComponent:
      {
        // Same as class component case. I put it down here so that the tags are
        // sequential to ensure this switch is compiled to a jump table.
        var _Component = workInProgress.type;

        if (isContextProvider(_Component)) {
          popContext(workInProgress);
        }

        return null;
      }

    case SuspenseListComponent:
      {
        popSuspenseContext(workInProgress);
        var renderState = workInProgress.memoizedState;

        if (renderState === null) {
          // We're running in the default, "independent" mode.
          // We don't do anything in this mode.
          return null;
        }

        var didSuspendAlready = (workInProgress.effectTag & DidCapture) !== NoEffect;
        var renderedTail = renderState.rendering;

        if (renderedTail === null) {
          // We just rendered the head.
          if (!didSuspendAlready) {
            // This is the first pass. We need to figure out if anything is still
            // suspended in the rendered set.
            // If new content unsuspended, but there's still some content that
            // didn't. Then we need to do a second pass that forces everything
            // to keep showing their fallbacks.
            // We might be suspended if something in this render pass suspended, or
            // something in the previous committed pass suspended. Otherwise,
            // there's no chance so we can skip the expensive call to
            // findFirstSuspended.
            var cannotBeSuspended = renderHasNotSuspendedYet() && (current === null || (current.effectTag & DidCapture) === NoEffect);

            if (!cannotBeSuspended) {
              var row = workInProgress.child;

              while (row !== null) {
                var suspended = findFirstSuspended(row);

                if (suspended !== null) {
                  didSuspendAlready = true;
                  workInProgress.effectTag |= DidCapture;
                  cutOffTailIfNeeded(renderState, false); // If this is a newly suspended tree, it might not get committed as
                  // part of the second pass. In that case nothing will subscribe to
                  // its thennables. Instead, we'll transfer its thennables to the
                  // SuspenseList so that it can retry if they resolve.
                  // There might be multiple of these in the list but since we're
                  // going to wait for all of them anyway, it doesn't really matter
                  // which ones gets to ping. In theory we could get clever and keep
                  // track of how many dependencies remain but it gets tricky because
                  // in the meantime, we can add/remove/change items and dependencies.
                  // We might bail out of the loop before finding any but that
                  // doesn't matter since that means that the other boundaries that
                  // we did find already has their listeners attached.

                  var newThennables = suspended.updateQueue;

                  if (newThennables !== null) {
                    workInProgress.updateQueue = newThennables;
                    workInProgress.effectTag |= Update;
                  } // Rerender the whole list, but this time, we'll force fallbacks
                  // to stay in place.
                  // Reset the effect list before doing the second pass since that's now invalid.


                  if (renderState.lastEffect === null) {
                    workInProgress.firstEffect = null;
                  }

                  workInProgress.lastEffect = renderState.lastEffect; // Reset the child fibers to their original state.

                  resetChildFibers(workInProgress, renderExpirationTime); // Set up the Suspense Context to force suspense and immediately
                  // rerender the children.

                  pushSuspenseContext(workInProgress, setShallowSuspenseContext(suspenseStackCursor.current, ForceSuspenseFallback));
                  return workInProgress.child;
                }

                row = row.sibling;
              }
            }
          } else {
            cutOffTailIfNeeded(renderState, false);
          } // Next we're going to render the tail.

        } else {
          // Append the rendered row to the child list.
          if (!didSuspendAlready) {
            var _suspended = findFirstSuspended(renderedTail);

            if (_suspended !== null) {
              workInProgress.effectTag |= DidCapture;
              didSuspendAlready = true; // Ensure we transfer the update queue to the parent so that it doesn't
              // get lost if this row ends up dropped during a second pass.

              var _newThennables = _suspended.updateQueue;

              if (_newThennables !== null) {
                workInProgress.updateQueue = _newThennables;
                workInProgress.effectTag |= Update;
              }

              cutOffTailIfNeeded(renderState, true); // This might have been modified.

              if (renderState.tail === null && renderState.tailMode === 'hidden' && !renderedTail.alternate) {
                // We need to delete the row we just rendered.
                // Reset the effect list to what it was before we rendered this
                // child. The nested children have already appended themselves.
                var lastEffect = workInProgress.lastEffect = renderState.lastEffect; // Remove any effects that were appended after this point.

                if (lastEffect !== null) {
                  lastEffect.nextEffect = null;
                } // We're done.


                return null;
              }
            } else if ( // The time it took to render last row is greater than time until
            // the expiration.
            now() * 2 - renderState.renderingStartTime > renderState.tailExpiration && renderExpirationTime > Never) {
              // We have now passed our CPU deadline and we'll just give up further
              // attempts to render the main content and only render fallbacks.
              // The assumption is that this is usually faster.
              workInProgress.effectTag |= DidCapture;
              didSuspendAlready = true;
              cutOffTailIfNeeded(renderState, false); // Since nothing actually suspended, there will nothing to ping this
              // to get it started back up to attempt the next item. If we can show
              // them, then they really have the same priority as this render.
              // So we'll pick it back up the very next render pass once we've had
              // an opportunity to yield for paint.

              var nextPriority = renderExpirationTime - 1;
              workInProgress.expirationTime = workInProgress.childExpirationTime = nextPriority;

              {
                markSpawnedWork(nextPriority);
              }
            }
          }

          if (renderState.isBackwards) {
            // The effect list of the backwards tail will have been added
            // to the end. This breaks the guarantee that life-cycles fire in
            // sibling order but that isn't a strong guarantee promised by React.
            // Especially since these might also just pop in during future commits.
            // Append to the beginning of the list.
            renderedTail.sibling = workInProgress.child;
            workInProgress.child = renderedTail;
          } else {
            var previousSibling = renderState.last;

            if (previousSibling !== null) {
              previousSibling.sibling = renderedTail;
            } else {
              workInProgress.child = renderedTail;
            }

            renderState.last = renderedTail;
          }
        }

        if (renderState.tail !== null) {
          // We still have tail rows to render.
          if (renderState.tailExpiration === 0) {
            // Heuristic for how long we're willing to spend rendering rows
            // until we just give up and show what we have so far.
            var TAIL_EXPIRATION_TIMEOUT_MS = 500;
            renderState.tailExpiration = now() + TAIL_EXPIRATION_TIMEOUT_MS; // TODO: This is meant to mimic the train model or JND but this
            // is a per component value. It should really be since the start
            // of the total render or last commit. Consider using something like
            // globalMostRecentFallbackTime. That doesn't account for being
            // suspended for part of the time or when it's a new render.
            // It should probably use a global start time value instead.
          } // Pop a row.


          var next = renderState.tail;
          renderState.rendering = next;
          renderState.tail = next.sibling;
          renderState.lastEffect = workInProgress.lastEffect;
          renderState.renderingStartTime = now();
          next.sibling = null; // Restore the context.
          // TODO: We can probably just avoid popping it instead and only
          // setting it the first time we go from not suspended to suspended.

          var suspenseContext = suspenseStackCursor.current;

          if (didSuspendAlready) {
            suspenseContext = setShallowSuspenseContext(suspenseContext, ForceSuspenseFallback);
          } else {
            suspenseContext = setDefaultShallowSuspenseContext(suspenseContext);
          }

          pushSuspenseContext(workInProgress, suspenseContext); // Do a pass over the next row.

          return next;
        }

        return null;
      }
  }

  {
    {
      throw Error( "Unknown unit of work tag (" + workInProgress.tag + "). This error is likely caused by a bug in React. Please file an issue." );
    }
  }
}

function unwindWork(workInProgress, renderExpirationTime) {
  switch (workInProgress.tag) {
    case ClassComponent:
      {
        var Component = workInProgress.type;

        if (isContextProvider(Component)) {
          popContext(workInProgress);
        }

        var effectTag = workInProgress.effectTag;

        if (effectTag & ShouldCapture) {
          workInProgress.effectTag = effectTag & ~ShouldCapture | DidCapture;
          return workInProgress;
        }

        return null;
      }

    case HostRoot:
      {
        popHostContainer(workInProgress);
        popTopLevelContextObject(workInProgress);
        var _effectTag = workInProgress.effectTag;

        if (!((_effectTag & DidCapture) === NoEffect)) {
          {
            throw Error( "The root failed to unmount after an error. This is likely a bug in React. Please file an issue." );
          }
        }

        workInProgress.effectTag = _effectTag & ~ShouldCapture | DidCapture;
        return workInProgress;
      }

    case HostComponent:
      {
        // TODO: popHydrationState
        popHostContext(workInProgress);
        return null;
      }

    case SuspenseComponent:
      {
        popSuspenseContext(workInProgress);

        var _effectTag2 = workInProgress.effectTag;

        if (_effectTag2 & ShouldCapture) {
          workInProgress.effectTag = _effectTag2 & ~ShouldCapture | DidCapture; // Captured a suspense effect. Re-render the boundary.

          return workInProgress;
        }

        return null;
      }

    case SuspenseListComponent:
      {
        popSuspenseContext(workInProgress); // SuspenseList doesn't actually catch anything. It should've been
        // caught by a nested boundary. If not, it should bubble through.

        return null;
      }

    case HostPortal:
      popHostContainer(workInProgress);
      return null;

    case ContextProvider:
      popProvider(workInProgress);
      return null;

    default:
      return null;
  }
}

function unwindInterruptedWork(interruptedWork) {
  switch (interruptedWork.tag) {
    case ClassComponent:
      {
        var childContextTypes = interruptedWork.type.childContextTypes;

        if (childContextTypes !== null && childContextTypes !== undefined) {
          popContext(interruptedWork);
        }

        break;
      }

    case HostRoot:
      {
        popHostContainer(interruptedWork);
        popTopLevelContextObject(interruptedWork);
        break;
      }

    case HostComponent:
      {
        popHostContext(interruptedWork);
        break;
      }

    case HostPortal:
      popHostContainer(interruptedWork);
      break;

    case SuspenseComponent:
      popSuspenseContext(interruptedWork);
      break;

    case SuspenseListComponent:
      popSuspenseContext(interruptedWork);
      break;

    case ContextProvider:
      popProvider(interruptedWork);
      break;
  }
}

function createCapturedValue(value, source) {
  // If the value is an error, call this function immediately after it is thrown
  // so the stack is accurate.
  return {
    value: value,
    source: source,
    stack: getStackByFiberInDevAndProd(source)
  };
}

function logCapturedError(capturedError) {

  var error = capturedError.error;

  {
    var componentName = capturedError.componentName,
        componentStack = capturedError.componentStack,
        errorBoundaryName = capturedError.errorBoundaryName,
        errorBoundaryFound = capturedError.errorBoundaryFound,
        willRetry = capturedError.willRetry; // Browsers support silencing uncaught errors by calling
    // `preventDefault()` in window `error` handler.
    // We record this information as an expando on the error.

    if (error != null && error._suppressLogging) {
      if (errorBoundaryFound && willRetry) {
        // The error is recoverable and was silenced.
        // Ignore it and don't print the stack addendum.
        // This is handy for testing error boundaries without noise.
        return;
      } // The error is fatal. Since the silencing might have
      // been accidental, we'll surface it anyway.
      // However, the browser would have silenced the original error
      // so we'll print it first, and then print the stack addendum.


      console['error'](error); // Don't transform to our wrapper
      // For a more detailed description of this block, see:
      // https://github.com/facebook/react/pull/13384
    }

    var componentNameMessage = componentName ? "The above error occurred in the <" + componentName + "> component:" : 'The above error occurred in one of your React components:';
    var errorBoundaryMessage; // errorBoundaryFound check is sufficient; errorBoundaryName check is to satisfy Flow.

    if (errorBoundaryFound && errorBoundaryName) {
      if (willRetry) {
        errorBoundaryMessage = "React will try to recreate this component tree from scratch " + ("using the error boundary you provided, " + errorBoundaryName + ".");
      } else {
        errorBoundaryMessage = "This error was initially handled by the error boundary " + errorBoundaryName + ".\n" + "Recreating the tree from scratch failed so React will unmount the tree.";
      }
    } else {
      errorBoundaryMessage = 'Consider adding an error boundary to your tree to customize error handling behavior.\n' + 'Visit https://fb.me/react-error-boundaries to learn more about error boundaries.';
    }

    var combinedMessage = "" + componentNameMessage + componentStack + "\n\n" + ("" + errorBoundaryMessage); // In development, we provide our own message with just the component stack.
    // We don't include the original error message and JS stack because the browser
    // has already printed it. Even if the application swallows the error, it is still
    // displayed by the browser thanks to the DEV-only fake event trick in ReactErrorUtils.

    console['error'](combinedMessage); // Don't transform to our wrapper
  }
}

var didWarnAboutUndefinedSnapshotBeforeUpdate = null;

{
  didWarnAboutUndefinedSnapshotBeforeUpdate = new Set();
}

var PossiblyWeakSet = typeof WeakSet === 'function' ? WeakSet : Set;
function logError(boundary, errorInfo) {
  var source = errorInfo.source;
  var stack = errorInfo.stack;

  if (stack === null && source !== null) {
    stack = getStackByFiberInDevAndProd(source);
  }

  var capturedError = {
    componentName: source !== null ? getComponentName(source.type) : null,
    componentStack: stack !== null ? stack : '',
    error: errorInfo.value,
    errorBoundary: null,
    errorBoundaryName: null,
    errorBoundaryFound: false,
    willRetry: false
  };

  if (boundary !== null && boundary.tag === ClassComponent) {
    capturedError.errorBoundary = boundary.stateNode;
    capturedError.errorBoundaryName = getComponentName(boundary.type);
    capturedError.errorBoundaryFound = true;
    capturedError.willRetry = true;
  }

  try {
    logCapturedError(capturedError);
  } catch (e) {
    // This method must not throw, or React internal state will get messed up.
    // If console.error is overridden, or logCapturedError() shows a dialog that throws,
    // we want to report this error outside of the normal stack as a last resort.
    // https://github.com/facebook/react/issues/13188
    setTimeout(function () {
      throw e;
    });
  }
}

var callComponentWillUnmountWithTimer = function (current, instance) {
  startPhaseTimer(current, 'componentWillUnmount');
  instance.props = current.memoizedProps;
  instance.state = current.memoizedState;
  instance.componentWillUnmount();
  stopPhaseTimer();
}; // Capture errors so they don't interrupt unmounting.


function safelyCallComponentWillUnmount(current, instance) {
  {
    invokeGuardedCallback(null, callComponentWillUnmountWithTimer, null, current, instance);

    if (hasCaughtError()) {
      var unmountError = clearCaughtError();
      captureCommitPhaseError(current, unmountError);
    }
  }
}

function safelyDetachRef(current) {
  var ref = current.ref;

  if (ref !== null) {
    if (typeof ref === 'function') {
      {
        invokeGuardedCallback(null, ref, null, null);

        if (hasCaughtError()) {
          var refError = clearCaughtError();
          captureCommitPhaseError(current, refError);
        }
      }
    } else {
      ref.current = null;
    }
  }
}

function safelyCallDestroy(current, destroy) {
  {
    invokeGuardedCallback(null, destroy, null);

    if (hasCaughtError()) {
      var error = clearCaughtError();
      captureCommitPhaseError(current, error);
    }
  }
}

function commitBeforeMutationLifeCycles(current, finishedWork) {
  switch (finishedWork.tag) {
    case FunctionComponent:
    case ForwardRef:
    case SimpleMemoComponent:
    case Block:
      {
        return;
      }

    case ClassComponent:
      {
        if (finishedWork.effectTag & Snapshot) {
          if (current !== null) {
            var prevProps = current.memoizedProps;
            var prevState = current.memoizedState;
            startPhaseTimer(finishedWork, 'getSnapshotBeforeUpdate');
            var instance = finishedWork.stateNode; // We could update instance props and state here,
            // but instead we rely on them being set during last render.
            // TODO: revisit this when we implement resuming.

            {
              if (finishedWork.type === finishedWork.elementType && !didWarnAboutReassigningProps) {
                if (instance.props !== finishedWork.memoizedProps) {
                  error('Expected %s props to match memoized props before ' + 'getSnapshotBeforeUpdate. ' + 'This might either be because of a bug in React, or because ' + 'a component reassigns its own `this.props`. ' + 'Please file an issue.', getComponentName(finishedWork.type) || 'instance');
                }

                if (instance.state !== finishedWork.memoizedState) {
                  error('Expected %s state to match memoized state before ' + 'getSnapshotBeforeUpdate. ' + 'This might either be because of a bug in React, or because ' + 'a component reassigns its own `this.props`. ' + 'Please file an issue.', getComponentName(finishedWork.type) || 'instance');
                }
              }
            }

            var snapshot = instance.getSnapshotBeforeUpdate(finishedWork.elementType === finishedWork.type ? prevProps : resolveDefaultProps(finishedWork.type, prevProps), prevState);

            {
              var didWarnSet = didWarnAboutUndefinedSnapshotBeforeUpdate;

              if (snapshot === undefined && !didWarnSet.has(finishedWork.type)) {
                didWarnSet.add(finishedWork.type);

                error('%s.getSnapshotBeforeUpdate(): A snapshot value (or null) ' + 'must be returned. You have returned undefined.', getComponentName(finishedWork.type));
              }
            }

            instance.__reactInternalSnapshotBeforeUpdate = snapshot;
            stopPhaseTimer();
          }
        }

        return;
      }

    case HostRoot:
    case HostComponent:
    case HostText:
    case HostPortal:
    case IncompleteClassComponent:
      // Nothing to do for these component types
      return;
  }

  {
    {
      throw Error( "This unit of work tag should not have side-effects. This error is likely caused by a bug in React. Please file an issue." );
    }
  }
}

function commitHookEffectListUnmount(tag, finishedWork) {
  var updateQueue = finishedWork.updateQueue;
  var lastEffect = updateQueue !== null ? updateQueue.lastEffect : null;

  if (lastEffect !== null) {
    var firstEffect = lastEffect.next;
    var effect = firstEffect;

    do {
      if ((effect.tag & tag) === tag) {
        // Unmount
        var destroy = effect.destroy;
        effect.destroy = undefined;

        if (destroy !== undefined) {
          destroy();
        }
      }

      effect = effect.next;
    } while (effect !== firstEffect);
  }
}

function commitHookEffectListMount(tag, finishedWork) {
  var updateQueue = finishedWork.updateQueue;
  var lastEffect = updateQueue !== null ? updateQueue.lastEffect : null;

  if (lastEffect !== null) {
    var firstEffect = lastEffect.next;
    var effect = firstEffect;

    do {
      if ((effect.tag & tag) === tag) {
        // Mount
        var create = effect.create;
        effect.destroy = create();

        {
          var destroy = effect.destroy;

          if (destroy !== undefined && typeof destroy !== 'function') {
            var addendum = void 0;

            if (destroy === null) {
              addendum = ' You returned null. If your effect does not require clean ' + 'up, return undefined (or nothing).';
            } else if (typeof destroy.then === 'function') {
              addendum = '\n\nIt looks like you wrote useEffect(async () => ...) or returned a Promise. ' + 'Instead, write the async function inside your effect ' + 'and call it immediately:\n\n' + 'useEffect(() => {\n' + '  async function fetchData() {\n' + '    // You can await here\n' + '    const response = await MyAPI.getData(someId);\n' + '    // ...\n' + '  }\n' + '  fetchData();\n' + "}, [someId]); // Or [] if effect doesn't need props or state\n\n" + 'Learn more about data fetching with Hooks: https://fb.me/react-hooks-data-fetching';
            } else {
              addendum = ' You returned: ' + destroy;
            }

            error('An effect function must not return anything besides a function, ' + 'which is used for clean-up.%s%s', addendum, getStackByFiberInDevAndProd(finishedWork));
          }
        }
      }

      effect = effect.next;
    } while (effect !== firstEffect);
  }
}

function commitPassiveHookEffects(finishedWork) {
  if ((finishedWork.effectTag & Passive) !== NoEffect) {
    switch (finishedWork.tag) {
      case FunctionComponent:
      case ForwardRef:
      case SimpleMemoComponent:
      case Block:
        {
          // TODO (#17945) We should call all passive destroy functions (for all fibers)
          // before calling any create functions. The current approach only serializes
          // these for a single fiber.
          commitHookEffectListUnmount(Passive$1 | HasEffect, finishedWork);
          commitHookEffectListMount(Passive$1 | HasEffect, finishedWork);
          break;
        }
    }
  }
}

function commitLifeCycles(finishedRoot, current, finishedWork, committedExpirationTime) {
  switch (finishedWork.tag) {
    case FunctionComponent:
    case ForwardRef:
    case SimpleMemoComponent:
    case Block:
      {
        // At this point layout effects have already been destroyed (during mutation phase).
        // This is done to prevent sibling component effects from interfering with each other,
        // e.g. a destroy function in one component should never override a ref set
        // by a create function in another component during the same commit.
        commitHookEffectListMount(Layout | HasEffect, finishedWork);

        return;
      }

    case ClassComponent:
      {
        var instance = finishedWork.stateNode;

        if (finishedWork.effectTag & Update) {
          if (current === null) {
            startPhaseTimer(finishedWork, 'componentDidMount'); // We could update instance props and state here,
            // but instead we rely on them being set during last render.
            // TODO: revisit this when we implement resuming.

            {
              if (finishedWork.type === finishedWork.elementType && !didWarnAboutReassigningProps) {
                if (instance.props !== finishedWork.memoizedProps) {
                  error('Expected %s props to match memoized props before ' + 'componentDidMount. ' + 'This might either be because of a bug in React, or because ' + 'a component reassigns its own `this.props`. ' + 'Please file an issue.', getComponentName(finishedWork.type) || 'instance');
                }

                if (instance.state !== finishedWork.memoizedState) {
                  error('Expected %s state to match memoized state before ' + 'componentDidMount. ' + 'This might either be because of a bug in React, or because ' + 'a component reassigns its own `this.props`. ' + 'Please file an issue.', getComponentName(finishedWork.type) || 'instance');
                }
              }
            }

            instance.componentDidMount();
            stopPhaseTimer();
          } else {
            var prevProps = finishedWork.elementType === finishedWork.type ? current.memoizedProps : resolveDefaultProps(finishedWork.type, current.memoizedProps);
            var prevState = current.memoizedState;
            startPhaseTimer(finishedWork, 'componentDidUpdate'); // We could update instance props and state here,
            // but instead we rely on them being set during last render.
            // TODO: revisit this when we implement resuming.

            {
              if (finishedWork.type === finishedWork.elementType && !didWarnAboutReassigningProps) {
                if (instance.props !== finishedWork.memoizedProps) {
                  error('Expected %s props to match memoized props before ' + 'componentDidUpdate. ' + 'This might either be because of a bug in React, or because ' + 'a component reassigns its own `this.props`. ' + 'Please file an issue.', getComponentName(finishedWork.type) || 'instance');
                }

                if (instance.state !== finishedWork.memoizedState) {
                  error('Expected %s state to match memoized state before ' + 'componentDidUpdate. ' + 'This might either be because of a bug in React, or because ' + 'a component reassigns its own `this.props`. ' + 'Please file an issue.', getComponentName(finishedWork.type) || 'instance');
                }
              }
            }

            instance.componentDidUpdate(prevProps, prevState, instance.__reactInternalSnapshotBeforeUpdate);
            stopPhaseTimer();
          }
        }

        var updateQueue = finishedWork.updateQueue;

        if (updateQueue !== null) {
          {
            if (finishedWork.type === finishedWork.elementType && !didWarnAboutReassigningProps) {
              if (instance.props !== finishedWork.memoizedProps) {
                error('Expected %s props to match memoized props before ' + 'processing the update queue. ' + 'This might either be because of a bug in React, or because ' + 'a component reassigns its own `this.props`. ' + 'Please file an issue.', getComponentName(finishedWork.type) || 'instance');
              }

              if (instance.state !== finishedWork.memoizedState) {
                error('Expected %s state to match memoized state before ' + 'processing the update queue. ' + 'This might either be because of a bug in React, or because ' + 'a component reassigns its own `this.props`. ' + 'Please file an issue.', getComponentName(finishedWork.type) || 'instance');
              }
            }
          } // We could update instance props and state here,
          // but instead we rely on them being set during last render.
          // TODO: revisit this when we implement resuming.


          commitUpdateQueue(finishedWork, updateQueue, instance);
        }

        return;
      }

    case HostRoot:
      {
        var _updateQueue = finishedWork.updateQueue;

        if (_updateQueue !== null) {
          var _instance = null;

          if (finishedWork.child !== null) {
            switch (finishedWork.child.tag) {
              case HostComponent:
                _instance = getPublicInstance(finishedWork.child.stateNode);
                break;

              case ClassComponent:
                _instance = finishedWork.child.stateNode;
                break;
            }
          }

          commitUpdateQueue(finishedWork, _updateQueue, _instance);
        }

        return;
      }

    case HostComponent:
      {
        var _instance2 = finishedWork.stateNode; // Renderers may schedule work to be done after host components are mounted
        // (eg DOM renderer may schedule auto-focus for inputs and form controls).
        // These effects should only be committed when components are first mounted,
        // aka when there is no current/alternate.

        if (current === null && finishedWork.effectTag & Update) {
          var type = finishedWork.type;
          var props = finishedWork.memoizedProps;
          commitMount(_instance2, type, props);
        }

        return;
      }

    case HostText:
      {
        // We have no life-cycles associated with text.
        return;
      }

    case HostPortal:
      {
        // We have no life-cycles associated with portals.
        return;
      }

    case Profiler:
      {
        {
          var onRender = finishedWork.memoizedProps.onRender;

          if (typeof onRender === 'function') {
            {
              onRender(finishedWork.memoizedProps.id, current === null ? 'mount' : 'update', finishedWork.actualDuration, finishedWork.treeBaseDuration, finishedWork.actualStartTime, getCommitTime(), finishedRoot.memoizedInteractions);
            }
          }
        }

        return;
      }

    case SuspenseComponent:
      {
        commitSuspenseHydrationCallbacks(finishedRoot, finishedWork);
        return;
      }

    case SuspenseListComponent:
    case IncompleteClassComponent:
    case FundamentalComponent:
    case ScopeComponent:
      return;
  }

  {
    {
      throw Error( "This unit of work tag should not have side-effects. This error is likely caused by a bug in React. Please file an issue." );
    }
  }
}

function hideOrUnhideAllChildren(finishedWork, isHidden) {
  {
    // We only have the top Fiber that was inserted but we need to recurse down its
    // children to find all the terminal nodes.
    var node = finishedWork;

    while (true) {
      if (node.tag === HostComponent) {
        var instance = node.stateNode;

        if (isHidden) {
          hideInstance(instance);
        } else {
          unhideInstance(node.stateNode, node.memoizedProps);
        }
      } else if (node.tag === HostText) {
        var _instance3 = node.stateNode;

        if (isHidden) {
          hideTextInstance(_instance3);
        } else {
          unhideTextInstance(_instance3, node.memoizedProps);
        }
      } else if (node.tag === SuspenseComponent && node.memoizedState !== null && node.memoizedState.dehydrated === null) {
        // Found a nested Suspense component that timed out. Skip over the
        // primary child fragment, which should remain hidden.
        var fallbackChildFragment = node.child.sibling;
        fallbackChildFragment.return = node;
        node = fallbackChildFragment;
        continue;
      } else if (node.child !== null) {
        node.child.return = node;
        node = node.child;
        continue;
      }

      if (node === finishedWork) {
        return;
      }

      while (node.sibling === null) {
        if (node.return === null || node.return === finishedWork) {
          return;
        }

        node = node.return;
      }

      node.sibling.return = node.return;
      node = node.sibling;
    }
  }
}

function commitAttachRef(finishedWork) {
  var ref = finishedWork.ref;

  if (ref !== null) {
    var instance = finishedWork.stateNode;
    var instanceToUse;

    switch (finishedWork.tag) {
      case HostComponent:
        instanceToUse = getPublicInstance(instance);
        break;

      default:
        instanceToUse = instance;
    } // Moved outside to ensure DCE works with this flag

    if (typeof ref === 'function') {
      ref(instanceToUse);
    } else {
      {
        if (!ref.hasOwnProperty('current')) {
          error('Unexpected ref object provided for %s. ' + 'Use either a ref-setter function or React.createRef().%s', getComponentName(finishedWork.type), getStackByFiberInDevAndProd(finishedWork));
        }
      }

      ref.current = instanceToUse;
    }
  }
}

function commitDetachRef(current) {
  var currentRef = current.ref;

  if (currentRef !== null) {
    if (typeof currentRef === 'function') {
      currentRef(null);
    } else {
      currentRef.current = null;
    }
  }
} // User-originating errors (lifecycles and refs) should not interrupt
// deletion, so don't let them throw. Host-originating errors should
// interrupt deletion, so it's okay


function commitUnmount(finishedRoot, current, renderPriorityLevel) {
  onCommitUnmount(current);

  switch (current.tag) {
    case FunctionComponent:
    case ForwardRef:
    case MemoComponent:
    case SimpleMemoComponent:
    case Block:
      {
        var updateQueue = current.updateQueue;

        if (updateQueue !== null) {
          var lastEffect = updateQueue.lastEffect;

          if (lastEffect !== null) {
            var firstEffect = lastEffect.next;

            {
              // When the owner fiber is deleted, the destroy function of a passive
              // effect hook is called during the synchronous commit phase. This is
              // a concession to implementation complexity. Calling it in the
              // passive effect phase (like they usually are, when dependencies
              // change during an update) would require either traversing the
              // children of the deleted fiber again, or including unmount effects
              // as part of the fiber effect list.
              //
              // Because this is during the sync commit phase, we need to change
              // the priority.
              //
              // TODO: Reconsider this implementation trade off.
              var priorityLevel = renderPriorityLevel > NormalPriority ? NormalPriority : renderPriorityLevel;
              runWithPriority$1(priorityLevel, function () {
                var effect = firstEffect;

                do {
                  var _destroy = effect.destroy;

                  if (_destroy !== undefined) {
                    safelyCallDestroy(current, _destroy);
                  }

                  effect = effect.next;
                } while (effect !== firstEffect);
              });
            }
          }
        }

        return;
      }

    case ClassComponent:
      {
        safelyDetachRef(current);
        var instance = current.stateNode;

        if (typeof instance.componentWillUnmount === 'function') {
          safelyCallComponentWillUnmount(current, instance);
        }

        return;
      }

    case HostComponent:
      {

        safelyDetachRef(current);
        return;
      }

    case HostPortal:
      {
        // TODO: this is recursive.
        // We are also not using this parent because
        // the portal will get pushed immediately.
        {
          unmountHostComponents(finishedRoot, current, renderPriorityLevel);
        }

        return;
      }

    case FundamentalComponent:
      {

        return;
      }

    case DehydratedFragment:
      {

        return;
      }

    case ScopeComponent:
      {

        return;
      }
  }
}

function commitNestedUnmounts(finishedRoot, root, renderPriorityLevel) {
  // While we're inside a removed host node we don't want to call
  // removeChild on the inner nodes because they're removed by the top
  // call anyway. We also want to call componentWillUnmount on all
  // composites before this host node is removed from the tree. Therefore
  // we do an inner loop while we're still inside the host node.
  var node = root;

  while (true) {
    commitUnmount(finishedRoot, node, renderPriorityLevel); // Visit children because they may contain more composite or host nodes.
    // Skip portals because commitUnmount() currently visits them recursively.

    if (node.child !== null && ( // If we use mutation we drill down into portals using commitUnmount above.
    // If we don't use mutation we drill down into portals here instead.
     node.tag !== HostPortal)) {
      node.child.return = node;
      node = node.child;
      continue;
    }

    if (node === root) {
      return;
    }

    while (node.sibling === null) {
      if (node.return === null || node.return === root) {
        return;
      }

      node = node.return;
    }

    node.sibling.return = node.return;
    node = node.sibling;
  }
}

function detachFiber(current) {
  var alternate = current.alternate; // Cut off the return pointers to disconnect it from the tree. Ideally, we
  // should clear the child pointer of the parent alternate to let this
  // get GC:ed but we don't know which for sure which parent is the current
  // one so we'll settle for GC:ing the subtree of this child. This child
  // itself will be GC:ed when the parent updates the next time.

  current.return = null;
  current.child = null;
  current.memoizedState = null;
  current.updateQueue = null;
  current.dependencies = null;
  current.alternate = null;
  current.firstEffect = null;
  current.lastEffect = null;
  current.pendingProps = null;
  current.memoizedProps = null;
  current.stateNode = null;

  if (alternate !== null) {
    detachFiber(alternate);
  }
}

function getHostParentFiber(fiber) {
  var parent = fiber.return;

  while (parent !== null) {
    if (isHostParent(parent)) {
      return parent;
    }

    parent = parent.return;
  }

  {
    {
      throw Error( "Expected to find a host parent. This error is likely caused by a bug in React. Please file an issue." );
    }
  }
}

function isHostParent(fiber) {
  return fiber.tag === HostComponent || fiber.tag === HostRoot || fiber.tag === HostPortal;
}

function getHostSibling(fiber) {
  // We're going to search forward into the tree until we find a sibling host
  // node. Unfortunately, if multiple insertions are done in a row we have to
  // search past them. This leads to exponential search for the next sibling.
  // TODO: Find a more efficient way to do this.
  var node = fiber;

  siblings: while (true) {
    // If we didn't find anything, let's try the next sibling.
    while (node.sibling === null) {
      if (node.return === null || isHostParent(node.return)) {
        // If we pop out of the root or hit the parent the fiber we are the
        // last sibling.
        return null;
      }

      node = node.return;
    }

    node.sibling.return = node.return;
    node = node.sibling;

    while (node.tag !== HostComponent && node.tag !== HostText && node.tag !== DehydratedFragment) {
      // If it is not host node and, we might have a host node inside it.
      // Try to search down until we find one.
      if (node.effectTag & Placement) {
        // If we don't have a child, try the siblings instead.
        continue siblings;
      } // If we don't have a child, try the siblings instead.
      // We also skip portals because they are not part of this host tree.


      if (node.child === null || node.tag === HostPortal) {
        continue siblings;
      } else {
        node.child.return = node;
        node = node.child;
      }
    } // Check if this host node is stable or about to be placed.


    if (!(node.effectTag & Placement)) {
      // Found it!
      return node.stateNode;
    }
  }
}

function commitPlacement(finishedWork) {


  var parentFiber = getHostParentFiber(finishedWork); // Note: these two variables *must* always be updated together.

  var parent;
  var isContainer;
  var parentStateNode = parentFiber.stateNode;

  switch (parentFiber.tag) {
    case HostComponent:
      parent = parentStateNode;
      isContainer = false;
      break;

    case HostRoot:
      parent = parentStateNode.containerInfo;
      isContainer = true;
      break;

    case HostPortal:
      parent = parentStateNode.containerInfo;
      isContainer = true;
      break;

    case FundamentalComponent:

    // eslint-disable-next-line-no-fallthrough

    default:
      {
        {
          throw Error( "Invalid host parent fiber. This error is likely caused by a bug in React. Please file an issue." );
        }
      }

  }

  if (parentFiber.effectTag & ContentReset) {
    // Reset the text content of the parent before doing any insertions
    resetTextContent(parent); // Clear ContentReset from the effect tag

    parentFiber.effectTag &= ~ContentReset;
  }

  var before = getHostSibling(finishedWork); // We only have the top Fiber that was inserted but we need to recurse down its
  // children to find all the terminal nodes.

  if (isContainer) {
    insertOrAppendPlacementNodeIntoContainer(finishedWork, before, parent);
  } else {
    insertOrAppendPlacementNode(finishedWork, before, parent);
  }
}

function insertOrAppendPlacementNodeIntoContainer(node, before, parent) {
  var tag = node.tag;
  var isHost = tag === HostComponent || tag === HostText;

  if (isHost || enableFundamentalAPI ) {
    var stateNode = isHost ? node.stateNode : node.stateNode.instance;

    if (before) {
      insertInContainerBefore(parent, stateNode, before);
    } else {
      appendChildToContainer(parent, stateNode);
    }
  } else if (tag === HostPortal) ; else {
    var child = node.child;

    if (child !== null) {
      insertOrAppendPlacementNodeIntoContainer(child, before, parent);
      var sibling = child.sibling;

      while (sibling !== null) {
        insertOrAppendPlacementNodeIntoContainer(sibling, before, parent);
        sibling = sibling.sibling;
      }
    }
  }
}

function insertOrAppendPlacementNode(node, before, parent) {
  var tag = node.tag;
  var isHost = tag === HostComponent || tag === HostText;

  if (isHost || enableFundamentalAPI ) {
    var stateNode = isHost ? node.stateNode : node.stateNode.instance;

    if (before) {
      insertBefore(parent, stateNode, before);
    } else {
      appendChild(parent, stateNode);
    }
  } else if (tag === HostPortal) ; else {
    var child = node.child;

    if (child !== null) {
      insertOrAppendPlacementNode(child, before, parent);
      var sibling = child.sibling;

      while (sibling !== null) {
        insertOrAppendPlacementNode(sibling, before, parent);
        sibling = sibling.sibling;
      }
    }
  }
}

function unmountHostComponents(finishedRoot, current, renderPriorityLevel) {
  // We only have the top Fiber that was deleted but we need to recurse down its
  // children to find all the terminal nodes.
  var node = current; // Each iteration, currentParent is populated with node's host parent if not
  // currentParentIsValid.

  var currentParentIsValid = false; // Note: these two variables *must* always be updated together.

  var currentParent;
  var currentParentIsContainer;

  while (true) {
    if (!currentParentIsValid) {
      var parent = node.return;

      findParent: while (true) {
        if (!(parent !== null)) {
          {
            throw Error( "Expected to find a host parent. This error is likely caused by a bug in React. Please file an issue." );
          }
        }

        var parentStateNode = parent.stateNode;

        switch (parent.tag) {
          case HostComponent:
            currentParent = parentStateNode;
            currentParentIsContainer = false;
            break findParent;

          case HostRoot:
            currentParent = parentStateNode.containerInfo;
            currentParentIsContainer = true;
            break findParent;

          case HostPortal:
            currentParent = parentStateNode.containerInfo;
            currentParentIsContainer = true;
            break findParent;

        }

        parent = parent.return;
      }

      currentParentIsValid = true;
    }

    if (node.tag === HostComponent || node.tag === HostText) {
      commitNestedUnmounts(finishedRoot, node, renderPriorityLevel); // After all the children have unmounted, it is now safe to remove the
      // node from the tree.

      if (currentParentIsContainer) {
        removeChildFromContainer(currentParent, node.stateNode);
      } else {
        removeChild(currentParent, node.stateNode);
      } // Don't visit children because we already visited them.

    } else if (node.tag === HostPortal) {
      if (node.child !== null) {
        // When we go into a portal, it becomes the parent to remove from.
        // We will reassign it back when we pop the portal on the way up.
        currentParent = node.stateNode.containerInfo;
        currentParentIsContainer = true; // Visit children because portals might contain host components.

        node.child.return = node;
        node = node.child;
        continue;
      }
    } else {
      commitUnmount(finishedRoot, node, renderPriorityLevel); // Visit children because we may find more host components below.

      if (node.child !== null) {
        node.child.return = node;
        node = node.child;
        continue;
      }
    }

    if (node === current) {
      return;
    }

    while (node.sibling === null) {
      if (node.return === null || node.return === current) {
        return;
      }

      node = node.return;

      if (node.tag === HostPortal) {
        // When we go out of the portal, we need to restore the parent.
        // Since we don't keep a stack of them, we will search for it.
        currentParentIsValid = false;
      }
    }

    node.sibling.return = node.return;
    node = node.sibling;
  }
}

function commitDeletion(finishedRoot, current, renderPriorityLevel) {
  {
    // Recursively delete all host nodes from the parent.
    // Detach refs and call componentWillUnmount() on the whole subtree.
    unmountHostComponents(finishedRoot, current, renderPriorityLevel);
  }

  detachFiber(current);
}

function commitWork(current, finishedWork) {

  switch (finishedWork.tag) {
    case FunctionComponent:
    case ForwardRef:
    case MemoComponent:
    case SimpleMemoComponent:
    case Block:
      {
        // Layout effects are destroyed during the mutation phase so that all
        // destroy functions for all fibers are called before any create functions.
        // This prevents sibling component effects from interfering with each other,
        // e.g. a destroy function in one component should never override a ref set
        // by a create function in another component during the same commit.
        commitHookEffectListUnmount(Layout | HasEffect, finishedWork);
        return;
      }

    case ClassComponent:
      {
        return;
      }

    case HostComponent:
      {
        var instance = finishedWork.stateNode;

        if (instance != null) {
          // Commit the work prepared earlier.
          var newProps = finishedWork.memoizedProps; // For hydration we reuse the update path but we treat the oldProps
          // as the newProps. The updatePayload will contain the real change in
          // this case.

          var oldProps = current !== null ? current.memoizedProps : newProps;
          var type = finishedWork.type; // TODO: Type the updateQueue to be specific to host components.

          var updatePayload = finishedWork.updateQueue;
          finishedWork.updateQueue = null;

          if (updatePayload !== null) {
            commitUpdate(instance, updatePayload, type, oldProps, newProps);
          }
        }

        return;
      }

    case HostText:
      {
        if (!(finishedWork.stateNode !== null)) {
          {
            throw Error( "This should have a text node initialized. This error is likely caused by a bug in React. Please file an issue." );
          }
        }

        var textInstance = finishedWork.stateNode;
        var newText = finishedWork.memoizedProps; // For hydration we reuse the update path but we treat the oldProps
        // as the newProps. The updatePayload will contain the real change in
        // this case.

        var oldText = current !== null ? current.memoizedProps : newText;
        commitTextUpdate(textInstance, oldText, newText);
        return;
      }

    case HostRoot:
      {
        {
          var _root = finishedWork.stateNode;

          if (_root.hydrate) {
            // We've just hydrated. No need to hydrate again.
            _root.hydrate = false;
            commitHydratedContainer(_root.containerInfo);
          }
        }

        return;
      }

    case Profiler:
      {
        return;
      }

    case SuspenseComponent:
      {
        commitSuspenseComponent(finishedWork);
        attachSuspenseRetryListeners(finishedWork);
        return;
      }

    case SuspenseListComponent:
      {
        attachSuspenseRetryListeners(finishedWork);
        return;
      }

    case IncompleteClassComponent:
      {
        return;
      }
  }

  {
    {
      throw Error( "This unit of work tag should not have side-effects. This error is likely caused by a bug in React. Please file an issue." );
    }
  }
}

function commitSuspenseComponent(finishedWork) {
  var newState = finishedWork.memoizedState;
  var newDidTimeout;
  var primaryChildParent = finishedWork;

  if (newState === null) {
    newDidTimeout = false;
  } else {
    newDidTimeout = true;
    primaryChildParent = finishedWork.child;
    markCommitTimeOfFallback();
  }

  if ( primaryChildParent !== null) {
    hideOrUnhideAllChildren(primaryChildParent, newDidTimeout);
  }
}

function commitSuspenseHydrationCallbacks(finishedRoot, finishedWork) {

  var newState = finishedWork.memoizedState;

  if (newState === null) {
    var current = finishedWork.alternate;

    if (current !== null) {
      var prevState = current.memoizedState;

      if (prevState !== null) {
        var suspenseInstance = prevState.dehydrated;

        if (suspenseInstance !== null) {
          commitHydratedSuspenseInstance(suspenseInstance);
        }
      }
    }
  }
}

function attachSuspenseRetryListeners(finishedWork) {
  // If this boundary just timed out, then it will have a set of thenables.
  // For each thenable, attach a listener so that when it resolves, React
  // attempts to re-render the boundary in the primary (pre-timeout) state.
  var thenables = finishedWork.updateQueue;

  if (thenables !== null) {
    finishedWork.updateQueue = null;
    var retryCache = finishedWork.stateNode;

    if (retryCache === null) {
      retryCache = finishedWork.stateNode = new PossiblyWeakSet();
    }

    thenables.forEach(function (thenable) {
      // Memoize using the boundary fiber to prevent redundant listeners.
      var retry = resolveRetryThenable.bind(null, finishedWork, thenable);

      if (!retryCache.has(thenable)) {
        {
          if (thenable.__reactDoNotTraceInteractions !== true) {
            retry = tracing.unstable_wrap(retry);
          }
        }

        retryCache.add(thenable);
        thenable.then(retry, retry);
      }
    });
  }
}

function commitResetTextContent(current) {

  resetTextContent(current.stateNode);
}

var PossiblyWeakMap$1 = typeof WeakMap === 'function' ? WeakMap : Map;

function createRootErrorUpdate(fiber, errorInfo, expirationTime) {
  var update = createUpdate(expirationTime, null); // Unmount the root by rendering null.

  update.tag = CaptureUpdate; // Caution: React DevTools currently depends on this property
  // being called "element".

  update.payload = {
    element: null
  };
  var error = errorInfo.value;

  update.callback = function () {
    onUncaughtError(error);
    logError(fiber, errorInfo);
  };

  return update;
}

function createClassErrorUpdate(fiber, errorInfo, expirationTime) {
  var update = createUpdate(expirationTime, null);
  update.tag = CaptureUpdate;
  var getDerivedStateFromError = fiber.type.getDerivedStateFromError;

  if (typeof getDerivedStateFromError === 'function') {
    var error$1 = errorInfo.value;

    update.payload = function () {
      logError(fiber, errorInfo);
      return getDerivedStateFromError(error$1);
    };
  }

  var inst = fiber.stateNode;

  if (inst !== null && typeof inst.componentDidCatch === 'function') {
    update.callback = function callback() {
      {
        markFailedErrorBoundaryForHotReloading(fiber);
      }

      if (typeof getDerivedStateFromError !== 'function') {
        // To preserve the preexisting retry behavior of error boundaries,
        // we keep track of which ones already failed during this batch.
        // This gets reset before we yield back to the browser.
        // TODO: Warn in strict mode if getDerivedStateFromError is
        // not defined.
        markLegacyErrorBoundaryAsFailed(this); // Only log here if componentDidCatch is the only error boundary method defined

        logError(fiber, errorInfo);
      }

      var error$1 = errorInfo.value;
      var stack = errorInfo.stack;
      this.componentDidCatch(error$1, {
        componentStack: stack !== null ? stack : ''
      });

      {
        if (typeof getDerivedStateFromError !== 'function') {
          // If componentDidCatch is the only error boundary method defined,
          // then it needs to call setState to recover from errors.
          // If no state update is scheduled then the boundary will swallow the error.
          if (fiber.expirationTime !== Sync) {
            error('%s: Error boundaries should implement getDerivedStateFromError(). ' + 'In that method, return a state update to display an error message or fallback UI.', getComponentName(fiber.type) || 'Unknown');
          }
        }
      }
    };
  } else {
    update.callback = function () {
      markFailedErrorBoundaryForHotReloading(fiber);
    };
  }

  return update;
}

function attachPingListener(root, renderExpirationTime, thenable) {
  // Attach a listener to the promise to "ping" the root and retry. But
  // only if one does not already exist for the current render expiration
  // time (which acts like a "thread ID" here).
  var pingCache = root.pingCache;
  var threadIDs;

  if (pingCache === null) {
    pingCache = root.pingCache = new PossiblyWeakMap$1();
    threadIDs = new Set();
    pingCache.set(thenable, threadIDs);
  } else {
    threadIDs = pingCache.get(thenable);

    if (threadIDs === undefined) {
      threadIDs = new Set();
      pingCache.set(thenable, threadIDs);
    }
  }

  if (!threadIDs.has(renderExpirationTime)) {
    // Memoize using the thread ID to prevent redundant listeners.
    threadIDs.add(renderExpirationTime);
    var ping = pingSuspendedRoot.bind(null, root, thenable, renderExpirationTime);
    thenable.then(ping, ping);
  }
}

function throwException(root, returnFiber, sourceFiber, value, renderExpirationTime) {
  // The source fiber did not complete.
  sourceFiber.effectTag |= Incomplete; // Its effect list is no longer valid.

  sourceFiber.firstEffect = sourceFiber.lastEffect = null;

  if (value !== null && typeof value === 'object' && typeof value.then === 'function') {
    // This is a thenable.
    var thenable = value;

    if ((sourceFiber.mode & BlockingMode) === NoMode) {
      // Reset the memoizedState to what it was before we attempted
      // to render it.
      var currentSource = sourceFiber.alternate;

      if (currentSource) {
        sourceFiber.updateQueue = currentSource.updateQueue;
        sourceFiber.memoizedState = currentSource.memoizedState;
        sourceFiber.expirationTime = currentSource.expirationTime;
      } else {
        sourceFiber.updateQueue = null;
        sourceFiber.memoizedState = null;
      }
    }

    var hasInvisibleParentBoundary = hasSuspenseContext(suspenseStackCursor.current, InvisibleParentSuspenseContext); // Schedule the nearest Suspense to re-render the timed out view.

    var _workInProgress = returnFiber;

    do {
      if (_workInProgress.tag === SuspenseComponent && shouldCaptureSuspense(_workInProgress, hasInvisibleParentBoundary)) {
        // Found the nearest boundary.
        // Stash the promise on the boundary fiber. If the boundary times out, we'll
        // attach another listener to flip the boundary back to its normal state.
        var thenables = _workInProgress.updateQueue;

        if (thenables === null) {
          var updateQueue = new Set();
          updateQueue.add(thenable);
          _workInProgress.updateQueue = updateQueue;
        } else {
          thenables.add(thenable);
        } // If the boundary is outside of blocking mode, we should *not*
        // suspend the commit. Pretend as if the suspended component rendered
        // null and keep rendering. In the commit phase, we'll schedule a
        // subsequent synchronous update to re-render the Suspense.
        //
        // Note: It doesn't matter whether the component that suspended was
        // inside a blocking mode tree. If the Suspense is outside of it, we
        // should *not* suspend the commit.


        if ((_workInProgress.mode & BlockingMode) === NoMode) {
          _workInProgress.effectTag |= DidCapture; // We're going to commit this fiber even though it didn't complete.
          // But we shouldn't call any lifecycle methods or callbacks. Remove
          // all lifecycle effect tags.

          sourceFiber.effectTag &= ~(LifecycleEffectMask | Incomplete);

          if (sourceFiber.tag === ClassComponent) {
            var currentSourceFiber = sourceFiber.alternate;

            if (currentSourceFiber === null) {
              // This is a new mount. Change the tag so it's not mistaken for a
              // completed class component. For example, we should not call
              // componentWillUnmount if it is deleted.
              sourceFiber.tag = IncompleteClassComponent;
            } else {
              // When we try rendering again, we should not reuse the current fiber,
              // since it's known to be in an inconsistent state. Use a force update to
              // prevent a bail out.
              var update = createUpdate(Sync, null);
              update.tag = ForceUpdate;
              enqueueUpdate(sourceFiber, update);
            }
          } // The source fiber did not complete. Mark it with Sync priority to
          // indicate that it still has pending work.


          sourceFiber.expirationTime = Sync; // Exit without suspending.

          return;
        } // Confirmed that the boundary is in a concurrent mode tree. Continue
        // with the normal suspend path.
        //
        // After this we'll use a set of heuristics to determine whether this
        // render pass will run to completion or restart or "suspend" the commit.
        // The actual logic for this is spread out in different places.
        //
        // This first principle is that if we're going to suspend when we complete
        // a root, then we should also restart if we get an update or ping that
        // might unsuspend it, and vice versa. The only reason to suspend is
        // because you think you might want to restart before committing. However,
        // it doesn't make sense to restart only while in the period we're suspended.
        //
        // Restarting too aggressively is also not good because it starves out any
        // intermediate loading state. So we use heuristics to determine when.
        // Suspense Heuristics
        //
        // If nothing threw a Promise or all the same fallbacks are already showing,
        // then don't suspend/restart.
        //
        // If this is an initial render of a new tree of Suspense boundaries and
        // those trigger a fallback, then don't suspend/restart. We want to ensure
        // that we can show the initial loading state as quickly as possible.
        //
        // If we hit a "Delayed" case, such as when we'd switch from content back into
        // a fallback, then we should always suspend/restart. SuspenseConfig applies to
        // this case. If none is defined, JND is used instead.
        //
        // If we're already showing a fallback and it gets "retried", allowing us to show
        // another level, but there's still an inner boundary that would show a fallback,
        // then we suspend/restart for 500ms since the last time we showed a fallback
        // anywhere in the tree. This effectively throttles progressive loading into a
        // consistent train of commits. This also gives us an opportunity to restart to
        // get to the completed state slightly earlier.
        //
        // If there's ambiguity due to batching it's resolved in preference of:
        // 1) "delayed", 2) "initial render", 3) "retry".
        //
        // We want to ensure that a "busy" state doesn't get force committed. We want to
        // ensure that new initial loading states can commit as soon as possible.


        attachPingListener(root, renderExpirationTime, thenable);
        _workInProgress.effectTag |= ShouldCapture;
        _workInProgress.expirationTime = renderExpirationTime;
        return;
      } // This boundary already captured during this render. Continue to the next
      // boundary.


      _workInProgress = _workInProgress.return;
    } while (_workInProgress !== null); // No boundary was found. Fallthrough to error mode.
    // TODO: Use invariant so the message is stripped in prod?


    value = new Error((getComponentName(sourceFiber.type) || 'A React component') + ' suspended while rendering, but no fallback UI was specified.\n' + '\n' + 'Add a <Suspense fallback=...> component higher in the tree to ' + 'provide a loading indicator or placeholder to display.' + getStackByFiberInDevAndProd(sourceFiber));
  } // We didn't find a boundary that could handle this type of exception. Start
  // over and traverse parent path again, this time treating the exception
  // as an error.


  renderDidError();
  value = createCapturedValue(value, sourceFiber);
  var workInProgress = returnFiber;

  do {
    switch (workInProgress.tag) {
      case HostRoot:
        {
          var _errorInfo = value;
          workInProgress.effectTag |= ShouldCapture;
          workInProgress.expirationTime = renderExpirationTime;

          var _update = createRootErrorUpdate(workInProgress, _errorInfo, renderExpirationTime);

          enqueueCapturedUpdate(workInProgress, _update);
          return;
        }

      case ClassComponent:
        // Capture and retry
        var errorInfo = value;
        var ctor = workInProgress.type;
        var instance = workInProgress.stateNode;

        if ((workInProgress.effectTag & DidCapture) === NoEffect && (typeof ctor.getDerivedStateFromError === 'function' || instance !== null && typeof instance.componentDidCatch === 'function' && !isAlreadyFailedLegacyErrorBoundary(instance))) {
          workInProgress.effectTag |= ShouldCapture;
          workInProgress.expirationTime = renderExpirationTime; // Schedule the error boundary to re-render using updated state

          var _update2 = createClassErrorUpdate(workInProgress, errorInfo, renderExpirationTime);

          enqueueCapturedUpdate(workInProgress, _update2);
          return;
        }

        break;
    }

    workInProgress = workInProgress.return;
  } while (workInProgress !== null);
}

var ceil = Math.ceil;
var ReactCurrentDispatcher$1 = ReactSharedInternals.ReactCurrentDispatcher,
    ReactCurrentOwner$2 = ReactSharedInternals.ReactCurrentOwner,
    IsSomeRendererActing = ReactSharedInternals.IsSomeRendererActing;
var NoContext =
/*                    */
0;
var BatchedContext =
/*               */
1;
var EventContext =
/*                 */
2;
var DiscreteEventContext =
/*         */
4;
var LegacyUnbatchedContext =
/*       */
8;
var RenderContext =
/*                */
16;
var CommitContext =
/*                */
32;
var RootIncomplete = 0;
var RootFatalErrored = 1;
var RootErrored = 2;
var RootSuspended = 3;
var RootSuspendedWithDelay = 4;
var RootCompleted = 5;
// Describes where we are in the React execution stack
var executionContext = NoContext; // The root we're working on

var workInProgressRoot = null; // The fiber we're working on

var workInProgress = null; // The expiration time we're rendering

var renderExpirationTime$1 = NoWork; // Whether to root completed, errored, suspended, etc.

var workInProgressRootExitStatus = RootIncomplete; // A fatal error, if one is thrown

var workInProgressRootFatalError = null; // Most recent event time among processed updates during this render.
// This is conceptually a time stamp but expressed in terms of an ExpirationTime
// because we deal mostly with expiration times in the hot path, so this avoids
// the conversion happening in the hot path.

var workInProgressRootLatestProcessedExpirationTime = Sync;
var workInProgressRootLatestSuspenseTimeout = Sync;
var workInProgressRootCanSuspendUsingConfig = null; // The work left over by components that were visited during this render. Only
// includes unprocessed updates, not work in bailed out children.

var workInProgressRootNextUnprocessedUpdateTime = NoWork; // If we're pinged while rendering we don't always restart immediately.
// This flag determines if it might be worthwhile to restart if an opportunity
// happens latere.

var workInProgressRootHasPendingPing = false; // The most recent time we committed a fallback. This lets us ensure a train
// model where we don't commit new loading states in too quick succession.

var globalMostRecentFallbackTime = 0;
var FALLBACK_THROTTLE_MS = 500;
var nextEffect = null;
var hasUncaughtError = false;
var firstUncaughtError = null;
var legacyErrorBoundariesThatAlreadyFailed = null;
var rootDoesHavePassiveEffects = false;
var rootWithPendingPassiveEffects = null;
var pendingPassiveEffectsRenderPriority = NoPriority;
var pendingPassiveEffectsExpirationTime = NoWork;
var rootsWithPendingDiscreteUpdates = null; // Use these to prevent an infinite loop of nested updates

var NESTED_UPDATE_LIMIT = 50;
var nestedUpdateCount = 0;
var rootWithNestedUpdates = null;
var NESTED_PASSIVE_UPDATE_LIMIT = 50;
var nestedPassiveUpdateCount = 0;
var interruptedBy = null; // Marks the need to reschedule pending interactions at these expiration times
// during the commit phase. This enables them to be traced across components
// that spawn new work during render. E.g. hidden boundaries, suspended SSR
// hydration or SuspenseList.

var spawnedWorkDuringRender = null; // Expiration times are computed by adding to the current time (the start
// time). However, if two updates are scheduled within the same event, we
// should treat their start times as simultaneous, even if the actual clock
// time has advanced between the first and second call.
// In other words, because expiration times determine how updates are batched,
// we want all updates of like priority that occur within the same event to
// receive the same expiration time. Otherwise we get tearing.

var currentEventTime = NoWork;
function requestCurrentTimeForUpdate() {
  if ((executionContext & (RenderContext | CommitContext)) !== NoContext) {
    // We're inside React, so it's fine to read the actual time.
    return msToExpirationTime(now());
  } // We're not inside React, so we may be in the middle of a browser event.


  if (currentEventTime !== NoWork) {
    // Use the same start time for all updates until we enter React again.
    return currentEventTime;
  } // This is the first update since React yielded. Compute a new start time.


  currentEventTime = msToExpirationTime(now());
  return currentEventTime;
}
function getCurrentTime() {
  return msToExpirationTime(now());
}
function computeExpirationForFiber(currentTime, fiber, suspenseConfig) {
  var mode = fiber.mode;

  if ((mode & BlockingMode) === NoMode) {
    return Sync;
  }

  var priorityLevel = getCurrentPriorityLevel();

  if ((mode & ConcurrentMode) === NoMode) {
    return priorityLevel === ImmediatePriority ? Sync : Batched;
  }

  if ((executionContext & RenderContext) !== NoContext) {
    // Use whatever time we're already rendering
    // TODO: Should there be a way to opt out, like with `runWithPriority`?
    return renderExpirationTime$1;
  }

  var expirationTime;

  if (suspenseConfig !== null) {
    // Compute an expiration time based on the Suspense timeout.
    expirationTime = computeSuspenseExpiration(currentTime, suspenseConfig.timeoutMs | 0 || LOW_PRIORITY_EXPIRATION);
  } else {
    // Compute an expiration time based on the Scheduler priority.
    switch (priorityLevel) {
      case ImmediatePriority:
        expirationTime = Sync;
        break;

      case UserBlockingPriority$1:
        // TODO: Rename this to computeUserBlockingExpiration
        expirationTime = computeInteractiveExpiration(currentTime);
        break;

      case NormalPriority:
      case LowPriority:
        // TODO: Handle LowPriority
        // TODO: Rename this to... something better.
        expirationTime = computeAsyncExpiration(currentTime);
        break;

      case IdlePriority:
        expirationTime = Idle;
        break;

      default:
        {
          {
            throw Error( "Expected a valid priority level" );
          }
        }

    }
  } // If we're in the middle of rendering a tree, do not update at the same
  // expiration time that is already rendering.
  // TODO: We shouldn't have to do this if the update is on a different root.
  // Refactor computeExpirationForFiber + scheduleUpdate so we have access to
  // the root when we check for this condition.


  if (workInProgressRoot !== null && expirationTime === renderExpirationTime$1) {
    // This is a trick to move this update into a separate batch
    expirationTime -= 1;
  }

  return expirationTime;
}
function scheduleUpdateOnFiber(fiber, expirationTime) {
  checkForNestedUpdates();
  warnAboutRenderPhaseUpdatesInDEV(fiber);
  var root = markUpdateTimeFromFiberToRoot(fiber, expirationTime);

  if (root === null) {
    warnAboutUpdateOnUnmountedFiberInDEV(fiber);
    return;
  }

  checkForInterruption(fiber, expirationTime);
  recordScheduleUpdate(); // TODO: computeExpirationForFiber also reads the priority. Pass the
  // priority as an argument to that function and this one.

  var priorityLevel = getCurrentPriorityLevel();

  if (expirationTime === Sync) {
    if ( // Check if we're inside unbatchedUpdates
    (executionContext & LegacyUnbatchedContext) !== NoContext && // Check if we're not already rendering
    (executionContext & (RenderContext | CommitContext)) === NoContext) {
      // Register pending interactions on the root to avoid losing traced interaction data.
      schedulePendingInteractions(root, expirationTime); // This is a legacy edge case. The initial mount of a ReactDOM.render-ed
      // root inside of batchedUpdates should be synchronous, but layout updates
      // should be deferred until the end of the batch.

      performSyncWorkOnRoot(root);
    } else {
      ensureRootIsScheduled(root);
      schedulePendingInteractions(root, expirationTime);

      if (executionContext === NoContext) {
        // Flush the synchronous work now, unless we're already working or inside
        // a batch. This is intentionally inside scheduleUpdateOnFiber instead of
        // scheduleCallbackForFiber to preserve the ability to schedule a callback
        // without immediately flushing it. We only do this for user-initiated
        // updates, to preserve historical behavior of legacy mode.
        flushSyncCallbackQueue();
      }
    }
  } else {
    ensureRootIsScheduled(root);
    schedulePendingInteractions(root, expirationTime);
  }

  if ((executionContext & DiscreteEventContext) !== NoContext && ( // Only updates at user-blocking priority or greater are considered
  // discrete, even inside a discrete event.
  priorityLevel === UserBlockingPriority$1 || priorityLevel === ImmediatePriority)) {
    // This is the result of a discrete event. Track the lowest priority
    // discrete update per root so we can flush them early, if needed.
    if (rootsWithPendingDiscreteUpdates === null) {
      rootsWithPendingDiscreteUpdates = new Map([[root, expirationTime]]);
    } else {
      var lastDiscreteTime = rootsWithPendingDiscreteUpdates.get(root);

      if (lastDiscreteTime === undefined || lastDiscreteTime > expirationTime) {
        rootsWithPendingDiscreteUpdates.set(root, expirationTime);
      }
    }
  }
}
var scheduleWork = scheduleUpdateOnFiber; // This is split into a separate function so we can mark a fiber with pending
// work without treating it as a typical update that originates from an event;
// e.g. retrying a Suspense boundary isn't an update, but it does schedule work
// on a fiber.

function markUpdateTimeFromFiberToRoot(fiber, expirationTime) {
  // Update the source fiber's expiration time
  if (fiber.expirationTime < expirationTime) {
    fiber.expirationTime = expirationTime;
  }

  var alternate = fiber.alternate;

  if (alternate !== null && alternate.expirationTime < expirationTime) {
    alternate.expirationTime = expirationTime;
  } // Walk the parent path to the root and update the child expiration time.


  var node = fiber.return;
  var root = null;

  if (node === null && fiber.tag === HostRoot) {
    root = fiber.stateNode;
  } else {
    while (node !== null) {
      alternate = node.alternate;

      if (node.childExpirationTime < expirationTime) {
        node.childExpirationTime = expirationTime;

        if (alternate !== null && alternate.childExpirationTime < expirationTime) {
          alternate.childExpirationTime = expirationTime;
        }
      } else if (alternate !== null && alternate.childExpirationTime < expirationTime) {
        alternate.childExpirationTime = expirationTime;
      }

      if (node.return === null && node.tag === HostRoot) {
        root = node.stateNode;
        break;
      }

      node = node.return;
    }
  }

  if (root !== null) {
    if (workInProgressRoot === root) {
      // Received an update to a tree that's in the middle of rendering. Mark
      // that's unprocessed work on this root.
      markUnprocessedUpdateTime(expirationTime);

      if (workInProgressRootExitStatus === RootSuspendedWithDelay) {
        // The root already suspended with a delay, which means this render
        // definitely won't finish. Since we have a new update, let's mark it as
        // suspended now, right before marking the incoming update. This has the
        // effect of interrupting the current render and switching to the update.
        // TODO: This happens to work when receiving an update during the render
        // phase, because of the trick inside computeExpirationForFiber to
        // subtract 1 from `renderExpirationTime` to move it into a
        // separate bucket. But we should probably model it with an exception,
        // using the same mechanism we use to force hydration of a subtree.
        // TODO: This does not account for low pri updates that were already
        // scheduled before the root started rendering. Need to track the next
        // pending expiration time (perhaps by backtracking the return path) and
        // then trigger a restart in the `renderDidSuspendDelayIfPossible` path.
        markRootSuspendedAtTime(root, renderExpirationTime$1);
      }
    } // Mark that the root has a pending update.


    markRootUpdatedAtTime(root, expirationTime);
  }

  return root;
}

function getNextRootExpirationTimeToWorkOn(root) {
  // Determines the next expiration time that the root should render, taking
  // into account levels that may be suspended, or levels that may have
  // received a ping.
  var lastExpiredTime = root.lastExpiredTime;

  if (lastExpiredTime !== NoWork) {
    return lastExpiredTime;
  } // "Pending" refers to any update that hasn't committed yet, including if it
  // suspended. The "suspended" range is therefore a subset.


  var firstPendingTime = root.firstPendingTime;

  if (!isRootSuspendedAtTime(root, firstPendingTime)) {
    // The highest priority pending time is not suspended. Let's work on that.
    return firstPendingTime;
  } // If the first pending time is suspended, check if there's a lower priority
  // pending level that we know about. Or check if we received a ping. Work
  // on whichever is higher priority.


  var lastPingedTime = root.lastPingedTime;
  var nextKnownPendingLevel = root.nextKnownPendingLevel;
  var nextLevel = lastPingedTime > nextKnownPendingLevel ? lastPingedTime : nextKnownPendingLevel;

  if ( nextLevel <= Idle && firstPendingTime !== nextLevel) {
    // Don't work on Idle/Never priority unless everything else is committed.
    return NoWork;
  }

  return nextLevel;
} // Use this function to schedule a task for a root. There's only one task per
// root; if a task was already scheduled, we'll check to make sure the
// expiration time of the existing task is the same as the expiration time of
// the next level that the root has work on. This function is called on every
// update, and right before exiting a task.


function ensureRootIsScheduled(root) {
  var lastExpiredTime = root.lastExpiredTime;

  if (lastExpiredTime !== NoWork) {
    // Special case: Expired work should flush synchronously.
    root.callbackExpirationTime = Sync;
    root.callbackPriority = ImmediatePriority;
    root.callbackNode = scheduleSyncCallback(performSyncWorkOnRoot.bind(null, root));
    return;
  }

  var expirationTime = getNextRootExpirationTimeToWorkOn(root);
  var existingCallbackNode = root.callbackNode;

  if (expirationTime === NoWork) {
    // There's nothing to work on.
    if (existingCallbackNode !== null) {
      root.callbackNode = null;
      root.callbackExpirationTime = NoWork;
      root.callbackPriority = NoPriority;
    }

    return;
  } // TODO: If this is an update, we already read the current time. Pass the
  // time as an argument.


  var currentTime = requestCurrentTimeForUpdate();
  var priorityLevel = inferPriorityFromExpirationTime(currentTime, expirationTime); // If there's an existing render task, confirm it has the correct priority and
  // expiration time. Otherwise, we'll cancel it and schedule a new one.

  if (existingCallbackNode !== null) {
    var existingCallbackPriority = root.callbackPriority;
    var existingCallbackExpirationTime = root.callbackExpirationTime;

    if ( // Callback must have the exact same expiration time.
    existingCallbackExpirationTime === expirationTime && // Callback must have greater or equal priority.
    existingCallbackPriority >= priorityLevel) {
      // Existing callback is sufficient.
      return;
    } // Need to schedule a new task.
    // TODO: Instead of scheduling a new task, we should be able to change the
    // priority of the existing one.


    cancelCallback(existingCallbackNode);
  }

  root.callbackExpirationTime = expirationTime;
  root.callbackPriority = priorityLevel;
  var callbackNode;

  if (expirationTime === Sync) {
    // Sync React callbacks are scheduled on a special internal queue
    callbackNode = scheduleSyncCallback(performSyncWorkOnRoot.bind(null, root));
  } else {
    callbackNode = scheduleCallback(priorityLevel, performConcurrentWorkOnRoot.bind(null, root), // Compute a task timeout based on the expiration time. This also affects
    // ordering because tasks are processed in timeout order.
    {
      timeout: expirationTimeToMs(expirationTime) - now()
    });
  }

  root.callbackNode = callbackNode;
} // This is the entry point for every concurrent task, i.e. anything that
// goes through Scheduler.


function performConcurrentWorkOnRoot(root, didTimeout) {
  // Since we know we're in a React event, we can clear the current
  // event time. The next update will compute a new event time.
  currentEventTime = NoWork;

  if (didTimeout) {
    // The render task took too long to complete. Mark the current time as
    // expired to synchronously render all expired work in a single batch.
    var currentTime = requestCurrentTimeForUpdate();
    markRootExpiredAtTime(root, currentTime); // This will schedule a synchronous callback.

    ensureRootIsScheduled(root);
    return null;
  } // Determine the next expiration time to work on, using the fields stored
  // on the root.


  var expirationTime = getNextRootExpirationTimeToWorkOn(root);

  if (expirationTime !== NoWork) {
    var originalCallbackNode = root.callbackNode;

    if (!((executionContext & (RenderContext | CommitContext)) === NoContext)) {
      {
        throw Error( "Should not already be working." );
      }
    }

    flushPassiveEffects(); // If the root or expiration time have changed, throw out the existing stack
    // and prepare a fresh one. Otherwise we'll continue where we left off.

    if (root !== workInProgressRoot || expirationTime !== renderExpirationTime$1) {
      prepareFreshStack(root, expirationTime);
      startWorkOnPendingInteractions(root, expirationTime);
    } // If we have a work-in-progress fiber, it means there's still work to do
    // in this root.


    if (workInProgress !== null) {
      var prevExecutionContext = executionContext;
      executionContext |= RenderContext;
      var prevDispatcher = pushDispatcher();
      var prevInteractions = pushInteractions(root);
      startWorkLoopTimer(workInProgress);

      do {
        try {
          workLoopConcurrent();
          break;
        } catch (thrownValue) {
          handleError(root, thrownValue);
        }
      } while (true);

      resetContextDependencies();
      executionContext = prevExecutionContext;
      popDispatcher(prevDispatcher);

      {
        popInteractions(prevInteractions);
      }

      if (workInProgressRootExitStatus === RootFatalErrored) {
        var fatalError = workInProgressRootFatalError;
        stopInterruptedWorkLoopTimer();
        prepareFreshStack(root, expirationTime);
        markRootSuspendedAtTime(root, expirationTime);
        ensureRootIsScheduled(root);
        throw fatalError;
      }

      if (workInProgress !== null) {
        // There's still work left over. Exit without committing.
        stopInterruptedWorkLoopTimer();
      } else {
        // We now have a consistent tree. The next step is either to commit it,
        // or, if something suspended, wait to commit it after a timeout.
        stopFinishedWorkLoopTimer();
        var finishedWork = root.finishedWork = root.current.alternate;
        root.finishedExpirationTime = expirationTime;
        finishConcurrentRender(root, finishedWork, workInProgressRootExitStatus, expirationTime);
      }

      ensureRootIsScheduled(root);

      if (root.callbackNode === originalCallbackNode) {
        // The task node scheduled for this root is the same one that's
        // currently executed. Need to return a continuation.
        return performConcurrentWorkOnRoot.bind(null, root);
      }
    }
  }

  return null;
}

function finishConcurrentRender(root, finishedWork, exitStatus, expirationTime) {
  // Set this to null to indicate there's no in-progress render.
  workInProgressRoot = null;

  switch (exitStatus) {
    case RootIncomplete:
    case RootFatalErrored:
      {
        {
          {
            throw Error( "Root did not complete. This is a bug in React." );
          }
        }
      }
    // Flow knows about invariant, so it complains if I add a break
    // statement, but eslint doesn't know about invariant, so it complains
    // if I do. eslint-disable-next-line no-fallthrough

    case RootErrored:
      {
        // If this was an async render, the error may have happened due to
        // a mutation in a concurrent event. Try rendering one more time,
        // synchronously, to see if the error goes away. If there are
        // lower priority updates, let's include those, too, in case they
        // fix the inconsistency. Render at Idle to include all updates.
        // If it was Idle or Never or some not-yet-invented time, render
        // at that time.
        markRootExpiredAtTime(root, expirationTime > Idle ? Idle : expirationTime); // We assume that this second render pass will be synchronous
        // and therefore not hit this path again.

        break;
      }

    case RootSuspended:
      {
        markRootSuspendedAtTime(root, expirationTime);
        var lastSuspendedTime = root.lastSuspendedTime;

        if (expirationTime === lastSuspendedTime) {
          root.nextKnownPendingLevel = getRemainingExpirationTime(finishedWork);
        } // We have an acceptable loading state. We need to figure out if we
        // should immediately commit it or wait a bit.
        // If we have processed new updates during this render, we may now
        // have a new loading state ready. We want to ensure that we commit
        // that as soon as possible.


        var hasNotProcessedNewUpdates = workInProgressRootLatestProcessedExpirationTime === Sync;

        if (hasNotProcessedNewUpdates && // do not delay if we're inside an act() scope
        !( IsThisRendererActing.current)) {
          // If we have not processed any new updates during this pass, then
          // this is either a retry of an existing fallback state or a
          // hidden tree. Hidden trees shouldn't be batched with other work
          // and after that's fixed it can only be a retry. We're going to
          // throttle committing retries so that we don't show too many
          // loading states too quickly.
          var msUntilTimeout = globalMostRecentFallbackTime + FALLBACK_THROTTLE_MS - now(); // Don't bother with a very short suspense time.

          if (msUntilTimeout > 10) {
            if (workInProgressRootHasPendingPing) {
              var lastPingedTime = root.lastPingedTime;

              if (lastPingedTime === NoWork || lastPingedTime >= expirationTime) {
                // This render was pinged but we didn't get to restart
                // earlier so try restarting now instead.
                root.lastPingedTime = expirationTime;
                prepareFreshStack(root, expirationTime);
                break;
              }
            }

            var nextTime = getNextRootExpirationTimeToWorkOn(root);

            if (nextTime !== NoWork && nextTime !== expirationTime) {
              // There's additional work on this root.
              break;
            }

            if (lastSuspendedTime !== NoWork && lastSuspendedTime !== expirationTime) {
              // We should prefer to render the fallback of at the last
              // suspended level. Ping the last suspended level to try
              // rendering it again.
              root.lastPingedTime = lastSuspendedTime;
              break;
            } // The render is suspended, it hasn't timed out, and there's no
            // lower priority work to do. Instead of committing the fallback
            // immediately, wait for more data to arrive.


            root.timeoutHandle = scheduleTimeout(commitRoot.bind(null, root), msUntilTimeout);
            break;
          }
        } // The work expired. Commit immediately.


        commitRoot(root);
        break;
      }

    case RootSuspendedWithDelay:
      {
        markRootSuspendedAtTime(root, expirationTime);
        var _lastSuspendedTime = root.lastSuspendedTime;

        if (expirationTime === _lastSuspendedTime) {
          root.nextKnownPendingLevel = getRemainingExpirationTime(finishedWork);
        }

        if ( // do not delay if we're inside an act() scope
        !( IsThisRendererActing.current)) {
          // We're suspended in a state that should be avoided. We'll try to
          // avoid committing it for as long as the timeouts let us.
          if (workInProgressRootHasPendingPing) {
            var _lastPingedTime = root.lastPingedTime;

            if (_lastPingedTime === NoWork || _lastPingedTime >= expirationTime) {
              // This render was pinged but we didn't get to restart earlier
              // so try restarting now instead.
              root.lastPingedTime = expirationTime;
              prepareFreshStack(root, expirationTime);
              break;
            }
          }

          var _nextTime = getNextRootExpirationTimeToWorkOn(root);

          if (_nextTime !== NoWork && _nextTime !== expirationTime) {
            // There's additional work on this root.
            break;
          }

          if (_lastSuspendedTime !== NoWork && _lastSuspendedTime !== expirationTime) {
            // We should prefer to render the fallback of at the last
            // suspended level. Ping the last suspended level to try
            // rendering it again.
            root.lastPingedTime = _lastSuspendedTime;
            break;
          }

          var _msUntilTimeout;

          if (workInProgressRootLatestSuspenseTimeout !== Sync) {
            // We have processed a suspense config whose expiration time we
            // can use as the timeout.
            _msUntilTimeout = expirationTimeToMs(workInProgressRootLatestSuspenseTimeout) - now();
          } else if (workInProgressRootLatestProcessedExpirationTime === Sync) {
            // This should never normally happen because only new updates
            // cause delayed states, so we should have processed something.
            // However, this could also happen in an offscreen tree.
            _msUntilTimeout = 0;
          } else {
            // If we don't have a suspense config, we're going to use a
            // heuristic to determine how long we can suspend.
            var eventTimeMs = inferTimeFromExpirationTime(workInProgressRootLatestProcessedExpirationTime);
            var currentTimeMs = now();
            var timeUntilExpirationMs = expirationTimeToMs(expirationTime) - currentTimeMs;
            var timeElapsed = currentTimeMs - eventTimeMs;

            if (timeElapsed < 0) {
              // We get this wrong some time since we estimate the time.
              timeElapsed = 0;
            }

            _msUntilTimeout = jnd(timeElapsed) - timeElapsed; // Clamp the timeout to the expiration time. TODO: Once the
            // event time is exact instead of inferred from expiration time
            // we don't need this.

            if (timeUntilExpirationMs < _msUntilTimeout) {
              _msUntilTimeout = timeUntilExpirationMs;
            }
          } // Don't bother with a very short suspense time.


          if (_msUntilTimeout > 10) {
            // The render is suspended, it hasn't timed out, and there's no
            // lower priority work to do. Instead of committing the fallback
            // immediately, wait for more data to arrive.
            root.timeoutHandle = scheduleTimeout(commitRoot.bind(null, root), _msUntilTimeout);
            break;
          }
        } // The work expired. Commit immediately.


        commitRoot(root);
        break;
      }

    case RootCompleted:
      {
        // The work completed. Ready to commit.
        if ( // do not delay if we're inside an act() scope
        !( IsThisRendererActing.current) && workInProgressRootLatestProcessedExpirationTime !== Sync && workInProgressRootCanSuspendUsingConfig !== null) {
          // If we have exceeded the minimum loading delay, which probably
          // means we have shown a spinner already, we might have to suspend
          // a bit longer to ensure that the spinner is shown for
          // enough time.
          var _msUntilTimeout2 = computeMsUntilSuspenseLoadingDelay(workInProgressRootLatestProcessedExpirationTime, expirationTime, workInProgressRootCanSuspendUsingConfig);

          if (_msUntilTimeout2 > 10) {
            markRootSuspendedAtTime(root, expirationTime);
            root.timeoutHandle = scheduleTimeout(commitRoot.bind(null, root), _msUntilTimeout2);
            break;
          }
        }

        commitRoot(root);
        break;
      }

    default:
      {
        {
          {
            throw Error( "Unknown root exit status." );
          }
        }
      }
  }
} // This is the entry point for synchronous tasks that don't go
// through Scheduler


function performSyncWorkOnRoot(root) {
  // Check if there's expired work on this root. Otherwise, render at Sync.
  var lastExpiredTime = root.lastExpiredTime;
  var expirationTime = lastExpiredTime !== NoWork ? lastExpiredTime : Sync;

  if (!((executionContext & (RenderContext | CommitContext)) === NoContext)) {
    {
      throw Error( "Should not already be working." );
    }
  }

  flushPassiveEffects(); // If the root or expiration time have changed, throw out the existing stack
  // and prepare a fresh one. Otherwise we'll continue where we left off.

  if (root !== workInProgressRoot || expirationTime !== renderExpirationTime$1) {
    prepareFreshStack(root, expirationTime);
    startWorkOnPendingInteractions(root, expirationTime);
  } // If we have a work-in-progress fiber, it means there's still work to do
  // in this root.


  if (workInProgress !== null) {
    var prevExecutionContext = executionContext;
    executionContext |= RenderContext;
    var prevDispatcher = pushDispatcher();
    var prevInteractions = pushInteractions(root);
    startWorkLoopTimer(workInProgress);

    do {
      try {
        workLoopSync();
        break;
      } catch (thrownValue) {
        handleError(root, thrownValue);
      }
    } while (true);

    resetContextDependencies();
    executionContext = prevExecutionContext;
    popDispatcher(prevDispatcher);

    {
      popInteractions(prevInteractions);
    }

    if (workInProgressRootExitStatus === RootFatalErrored) {
      var fatalError = workInProgressRootFatalError;
      stopInterruptedWorkLoopTimer();
      prepareFreshStack(root, expirationTime);
      markRootSuspendedAtTime(root, expirationTime);
      ensureRootIsScheduled(root);
      throw fatalError;
    }

    if (workInProgress !== null) {
      // This is a sync render, so we should have finished the whole tree.
      {
        {
          throw Error( "Cannot commit an incomplete root. This error is likely caused by a bug in React. Please file an issue." );
        }
      }
    } else {
      // We now have a consistent tree. Because this is a sync render, we
      // will commit it even if something suspended.
      stopFinishedWorkLoopTimer();
      root.finishedWork = root.current.alternate;
      root.finishedExpirationTime = expirationTime;
      finishSyncRender(root);
    } // Before exiting, make sure there's a callback scheduled for the next
    // pending level.


    ensureRootIsScheduled(root);
  }

  return null;
}

function finishSyncRender(root) {
  // Set this to null to indicate there's no in-progress render.
  workInProgressRoot = null;
  commitRoot(root);
}
function flushDiscreteUpdates() {
  // TODO: Should be able to flush inside batchedUpdates, but not inside `act`.
  // However, `act` uses `batchedUpdates`, so there's no way to distinguish
  // those two cases. Need to fix this before exposing flushDiscreteUpdates
  // as a public API.
  if ((executionContext & (BatchedContext | RenderContext | CommitContext)) !== NoContext) {
    {
      if ((executionContext & RenderContext) !== NoContext) {
        error('unstable_flushDiscreteUpdates: Cannot flush updates when React is ' + 'already rendering.');
      }
    } // We're already rendering, so we can't synchronously flush pending work.
    // This is probably a nested event dispatch triggered by a lifecycle/effect,
    // like `el.focus()`. Exit.


    return;
  }

  flushPendingDiscreteUpdates(); // If the discrete updates scheduled passive effects, flush them now so that
  // they fire before the next serial event.

  flushPassiveEffects();
}
function syncUpdates(fn, a, b, c) {
  return runWithPriority$1(ImmediatePriority, fn.bind(null, a, b, c));
}

function flushPendingDiscreteUpdates() {
  if (rootsWithPendingDiscreteUpdates !== null) {
    // For each root with pending discrete updates, schedule a callback to
    // immediately flush them.
    var roots = rootsWithPendingDiscreteUpdates;
    rootsWithPendingDiscreteUpdates = null;
    roots.forEach(function (expirationTime, root) {
      markRootExpiredAtTime(root, expirationTime);
      ensureRootIsScheduled(root);
    }); // Now flush the immediate queue.

    flushSyncCallbackQueue();
  }
}

function batchedUpdates$1(fn, a) {
  var prevExecutionContext = executionContext;
  executionContext |= BatchedContext;

  try {
    return fn(a);
  } finally {
    executionContext = prevExecutionContext;

    if (executionContext === NoContext) {
      // Flush the immediate callbacks that were scheduled during this batch
      flushSyncCallbackQueue();
    }
  }
}
function batchedEventUpdates$1(fn, a) {
  var prevExecutionContext = executionContext;
  executionContext |= EventContext;

  try {
    return fn(a);
  } finally {
    executionContext = prevExecutionContext;

    if (executionContext === NoContext) {
      // Flush the immediate callbacks that were scheduled during this batch
      flushSyncCallbackQueue();
    }
  }
}
function discreteUpdates$1(fn, a, b, c, d) {
  var prevExecutionContext = executionContext;
  executionContext |= DiscreteEventContext;

  try {
    // Should this
    return runWithPriority$1(UserBlockingPriority$1, fn.bind(null, a, b, c, d));
  } finally {
    executionContext = prevExecutionContext;

    if (executionContext === NoContext) {
      // Flush the immediate callbacks that were scheduled during this batch
      flushSyncCallbackQueue();
    }
  }
}
function unbatchedUpdates(fn, a) {
  var prevExecutionContext = executionContext;
  executionContext &= ~BatchedContext;
  executionContext |= LegacyUnbatchedContext;

  try {
    return fn(a);
  } finally {
    executionContext = prevExecutionContext;

    if (executionContext === NoContext) {
      // Flush the immediate callbacks that were scheduled during this batch
      flushSyncCallbackQueue();
    }
  }
}
function flushSync(fn, a) {
  if ((executionContext & (RenderContext | CommitContext)) !== NoContext) {
    {
      {
        throw Error( "flushSync was called from inside a lifecycle method. It cannot be called when React is already rendering." );
      }
    }
  }

  var prevExecutionContext = executionContext;
  executionContext |= BatchedContext;

  try {
    return runWithPriority$1(ImmediatePriority, fn.bind(null, a));
  } finally {
    executionContext = prevExecutionContext; // Flush the immediate callbacks that were scheduled during this batch.
    // Note that this will happen even if batchedUpdates is higher up
    // the stack.

    flushSyncCallbackQueue();
  }
}

function prepareFreshStack(root, expirationTime) {
  root.finishedWork = null;
  root.finishedExpirationTime = NoWork;
  var timeoutHandle = root.timeoutHandle;

  if (timeoutHandle !== noTimeout) {
    // The root previous suspended and scheduled a timeout to commit a fallback
    // state. Now that we have additional work, cancel the timeout.
    root.timeoutHandle = noTimeout; // $FlowFixMe Complains noTimeout is not a TimeoutID, despite the check above

    cancelTimeout(timeoutHandle);
  }

  if (workInProgress !== null) {
    var interruptedWork = workInProgress.return;

    while (interruptedWork !== null) {
      unwindInterruptedWork(interruptedWork);
      interruptedWork = interruptedWork.return;
    }
  }

  workInProgressRoot = root;
  workInProgress = createWorkInProgress(root.current, null);
  renderExpirationTime$1 = expirationTime;
  workInProgressRootExitStatus = RootIncomplete;
  workInProgressRootFatalError = null;
  workInProgressRootLatestProcessedExpirationTime = Sync;
  workInProgressRootLatestSuspenseTimeout = Sync;
  workInProgressRootCanSuspendUsingConfig = null;
  workInProgressRootNextUnprocessedUpdateTime = NoWork;
  workInProgressRootHasPendingPing = false;

  {
    spawnedWorkDuringRender = null;
  }

  {
    ReactStrictModeWarnings.discardPendingWarnings();
  }
}

function handleError(root, thrownValue) {
  do {
    try {
      // Reset module-level state that was set during the render phase.
      resetContextDependencies();
      resetHooksAfterThrow();
      resetCurrentFiber();

      if (workInProgress === null || workInProgress.return === null) {
        // Expected to be working on a non-root fiber. This is a fatal error
        // because there's no ancestor that can handle it; the root is
        // supposed to capture all errors that weren't caught by an error
        // boundary.
        workInProgressRootExitStatus = RootFatalErrored;
        workInProgressRootFatalError = thrownValue; // Set `workInProgress` to null. This represents advancing to the next
        // sibling, or the parent if there are no siblings. But since the root
        // has no siblings nor a parent, we set it to null. Usually this is
        // handled by `completeUnitOfWork` or `unwindWork`, but since we're
        // interntionally not calling those, we need set it here.
        // TODO: Consider calling `unwindWork` to pop the contexts.

        workInProgress = null;
        return null;
      }

      if (enableProfilerTimer && workInProgress.mode & ProfileMode) {
        // Record the time spent rendering before an error was thrown. This
        // avoids inaccurate Profiler durations in the case of a
        // suspended render.
        stopProfilerTimerIfRunningAndRecordDelta(workInProgress, true);
      }

      throwException(root, workInProgress.return, workInProgress, thrownValue, renderExpirationTime$1);
      workInProgress = completeUnitOfWork(workInProgress);
    } catch (yetAnotherThrownValue) {
      // Something in the return path also threw.
      thrownValue = yetAnotherThrownValue;
      continue;
    } // Return to the normal work loop.


    return;
  } while (true);
}

function pushDispatcher(root) {
  var prevDispatcher = ReactCurrentDispatcher$1.current;
  ReactCurrentDispatcher$1.current = ContextOnlyDispatcher;

  if (prevDispatcher === null) {
    // The React isomorphic package does not include a default dispatcher.
    // Instead the first renderer will lazily attach one, in order to give
    // nicer error messages.
    return ContextOnlyDispatcher;
  } else {
    return prevDispatcher;
  }
}

function popDispatcher(prevDispatcher) {
  ReactCurrentDispatcher$1.current = prevDispatcher;
}

function pushInteractions(root) {
  {
    var prevInteractions = tracing.__interactionsRef.current;
    tracing.__interactionsRef.current = root.memoizedInteractions;
    return prevInteractions;
  }
}

function popInteractions(prevInteractions) {
  {
    tracing.__interactionsRef.current = prevInteractions;
  }
}

function markCommitTimeOfFallback() {
  globalMostRecentFallbackTime = now();
}
function markRenderEventTimeAndConfig(expirationTime, suspenseConfig) {
  if (expirationTime < workInProgressRootLatestProcessedExpirationTime && expirationTime > Idle) {
    workInProgressRootLatestProcessedExpirationTime = expirationTime;
  }

  if (suspenseConfig !== null) {
    if (expirationTime < workInProgressRootLatestSuspenseTimeout && expirationTime > Idle) {
      workInProgressRootLatestSuspenseTimeout = expirationTime; // Most of the time we only have one config and getting wrong is not bad.

      workInProgressRootCanSuspendUsingConfig = suspenseConfig;
    }
  }
}
function markUnprocessedUpdateTime(expirationTime) {
  if (expirationTime > workInProgressRootNextUnprocessedUpdateTime) {
    workInProgressRootNextUnprocessedUpdateTime = expirationTime;
  }
}
function renderDidSuspend() {
  if (workInProgressRootExitStatus === RootIncomplete) {
    workInProgressRootExitStatus = RootSuspended;
  }
}
function renderDidSuspendDelayIfPossible() {
  if (workInProgressRootExitStatus === RootIncomplete || workInProgressRootExitStatus === RootSuspended) {
    workInProgressRootExitStatus = RootSuspendedWithDelay;
  } // Check if there's a lower priority update somewhere else in the tree.


  if (workInProgressRootNextUnprocessedUpdateTime !== NoWork && workInProgressRoot !== null) {
    // Mark the current render as suspended, and then mark that there's a
    // pending update.
    // TODO: This should immediately interrupt the current render, instead
    // of waiting until the next time we yield.
    markRootSuspendedAtTime(workInProgressRoot, renderExpirationTime$1);
    markRootUpdatedAtTime(workInProgressRoot, workInProgressRootNextUnprocessedUpdateTime);
  }
}
function renderDidError() {
  if (workInProgressRootExitStatus !== RootCompleted) {
    workInProgressRootExitStatus = RootErrored;
  }
} // Called during render to determine if anything has suspended.
// Returns false if we're not sure.

function renderHasNotSuspendedYet() {
  // If something errored or completed, we can't really be sure,
  // so those are false.
  return workInProgressRootExitStatus === RootIncomplete;
}

function inferTimeFromExpirationTime(expirationTime) {
  // We don't know exactly when the update was scheduled, but we can infer an
  // approximate start time from the expiration time.
  var earliestExpirationTimeMs = expirationTimeToMs(expirationTime);
  return earliestExpirationTimeMs - LOW_PRIORITY_EXPIRATION;
}

function inferTimeFromExpirationTimeWithSuspenseConfig(expirationTime, suspenseConfig) {
  // We don't know exactly when the update was scheduled, but we can infer an
  // approximate start time from the expiration time by subtracting the timeout
  // that was added to the event time.
  var earliestExpirationTimeMs = expirationTimeToMs(expirationTime);
  return earliestExpirationTimeMs - (suspenseConfig.timeoutMs | 0 || LOW_PRIORITY_EXPIRATION);
} // The work loop is an extremely hot path. Tell Closure not to inline it.

/** @noinline */


function workLoopSync() {
  // Already timed out, so perform work without checking if we need to yield.
  while (workInProgress !== null) {
    workInProgress = performUnitOfWork(workInProgress);
  }
}
/** @noinline */


function workLoopConcurrent() {
  // Perform work until Scheduler asks us to yield
  while (workInProgress !== null && !shouldYield()) {
    workInProgress = performUnitOfWork(workInProgress);
  }
}

function performUnitOfWork(unitOfWork) {
  // The current, flushed, state of this fiber is the alternate. Ideally
  // nothing should rely on this, but relying on it here means that we don't
  // need an additional field on the work in progress.
  var current = unitOfWork.alternate;
  startWorkTimer(unitOfWork);
  setCurrentFiber(unitOfWork);
  var next;

  if ( (unitOfWork.mode & ProfileMode) !== NoMode) {
    startProfilerTimer(unitOfWork);
    next = beginWork$1(current, unitOfWork, renderExpirationTime$1);
    stopProfilerTimerIfRunningAndRecordDelta(unitOfWork, true);
  } else {
    next = beginWork$1(current, unitOfWork, renderExpirationTime$1);
  }

  resetCurrentFiber();
  unitOfWork.memoizedProps = unitOfWork.pendingProps;

  if (next === null) {
    // If this doesn't spawn new work, complete the current work.
    next = completeUnitOfWork(unitOfWork);
  }

  ReactCurrentOwner$2.current = null;
  return next;
}

function completeUnitOfWork(unitOfWork) {
  // Attempt to complete the current unit of work, then move to the next
  // sibling. If there are no more siblings, return to the parent fiber.
  workInProgress = unitOfWork;

  do {
    // The current, flushed, state of this fiber is the alternate. Ideally
    // nothing should rely on this, but relying on it here means that we don't
    // need an additional field on the work in progress.
    var current = workInProgress.alternate;
    var returnFiber = workInProgress.return; // Check if the work completed or if something threw.

    if ((workInProgress.effectTag & Incomplete) === NoEffect) {
      setCurrentFiber(workInProgress);
      var next = void 0;

      if ( (workInProgress.mode & ProfileMode) === NoMode) {
        next = completeWork(current, workInProgress, renderExpirationTime$1);
      } else {
        startProfilerTimer(workInProgress);
        next = completeWork(current, workInProgress, renderExpirationTime$1); // Update render duration assuming we didn't error.

        stopProfilerTimerIfRunningAndRecordDelta(workInProgress, false);
      }

      stopWorkTimer(workInProgress);
      resetCurrentFiber();
      resetChildExpirationTime(workInProgress);

      if (next !== null) {
        // Completing this fiber spawned new work. Work on that next.
        return next;
      }

      if (returnFiber !== null && // Do not append effects to parents if a sibling failed to complete
      (returnFiber.effectTag & Incomplete) === NoEffect) {
        // Append all the effects of the subtree and this fiber onto the effect
        // list of the parent. The completion order of the children affects the
        // side-effect order.
        if (returnFiber.firstEffect === null) {
          returnFiber.firstEffect = workInProgress.firstEffect;
        }

        if (workInProgress.lastEffect !== null) {
          if (returnFiber.lastEffect !== null) {
            returnFiber.lastEffect.nextEffect = workInProgress.firstEffect;
          }

          returnFiber.lastEffect = workInProgress.lastEffect;
        } // If this fiber had side-effects, we append it AFTER the children's
        // side-effects. We can perform certain side-effects earlier if needed,
        // by doing multiple passes over the effect list. We don't want to
        // schedule our own side-effect on our own list because if end up
        // reusing children we'll schedule this effect onto itself since we're
        // at the end.


        var effectTag = workInProgress.effectTag; // Skip both NoWork and PerformedWork tags when creating the effect
        // list. PerformedWork effect is read by React DevTools but shouldn't be
        // committed.

        if (effectTag > PerformedWork) {
          if (returnFiber.lastEffect !== null) {
            returnFiber.lastEffect.nextEffect = workInProgress;
          } else {
            returnFiber.firstEffect = workInProgress;
          }

          returnFiber.lastEffect = workInProgress;
        }
      }
    } else {
      // This fiber did not complete because something threw. Pop values off
      // the stack without entering the complete phase. If this is a boundary,
      // capture values if possible.
      var _next = unwindWork(workInProgress); // Because this fiber did not complete, don't reset its expiration time.


      if ( (workInProgress.mode & ProfileMode) !== NoMode) {
        // Record the render duration for the fiber that errored.
        stopProfilerTimerIfRunningAndRecordDelta(workInProgress, false); // Include the time spent working on failed children before continuing.

        var actualDuration = workInProgress.actualDuration;
        var child = workInProgress.child;

        while (child !== null) {
          actualDuration += child.actualDuration;
          child = child.sibling;
        }

        workInProgress.actualDuration = actualDuration;
      }

      if (_next !== null) {
        // If completing this work spawned new work, do that next. We'll come
        // back here again.
        // Since we're restarting, remove anything that is not a host effect
        // from the effect tag.
        // TODO: The name stopFailedWorkTimer is misleading because Suspense
        // also captures and restarts.
        stopFailedWorkTimer(workInProgress);
        _next.effectTag &= HostEffectMask;
        return _next;
      }

      stopWorkTimer(workInProgress);

      if (returnFiber !== null) {
        // Mark the parent fiber as incomplete and clear its effect list.
        returnFiber.firstEffect = returnFiber.lastEffect = null;
        returnFiber.effectTag |= Incomplete;
      }
    }

    var siblingFiber = workInProgress.sibling;

    if (siblingFiber !== null) {
      // If there is more work to do in this returnFiber, do that next.
      return siblingFiber;
    } // Otherwise, return to the parent


    workInProgress = returnFiber;
  } while (workInProgress !== null); // We've reached the root.


  if (workInProgressRootExitStatus === RootIncomplete) {
    workInProgressRootExitStatus = RootCompleted;
  }

  return null;
}

function getRemainingExpirationTime(fiber) {
  var updateExpirationTime = fiber.expirationTime;
  var childExpirationTime = fiber.childExpirationTime;
  return updateExpirationTime > childExpirationTime ? updateExpirationTime : childExpirationTime;
}

function resetChildExpirationTime(completedWork) {
  if (renderExpirationTime$1 !== Never && completedWork.childExpirationTime === Never) {
    // The children of this component are hidden. Don't bubble their
    // expiration times.
    return;
  }

  var newChildExpirationTime = NoWork; // Bubble up the earliest expiration time.

  if ( (completedWork.mode & ProfileMode) !== NoMode) {
    // In profiling mode, resetChildExpirationTime is also used to reset
    // profiler durations.
    var actualDuration = completedWork.actualDuration;
    var treeBaseDuration = completedWork.selfBaseDuration; // When a fiber is cloned, its actualDuration is reset to 0. This value will
    // only be updated if work is done on the fiber (i.e. it doesn't bailout).
    // When work is done, it should bubble to the parent's actualDuration. If
    // the fiber has not been cloned though, (meaning no work was done), then
    // this value will reflect the amount of time spent working on a previous
    // render. In that case it should not bubble. We determine whether it was
    // cloned by comparing the child pointer.

    var shouldBubbleActualDurations = completedWork.alternate === null || completedWork.child !== completedWork.alternate.child;
    var child = completedWork.child;

    while (child !== null) {
      var childUpdateExpirationTime = child.expirationTime;
      var childChildExpirationTime = child.childExpirationTime;

      if (childUpdateExpirationTime > newChildExpirationTime) {
        newChildExpirationTime = childUpdateExpirationTime;
      }

      if (childChildExpirationTime > newChildExpirationTime) {
        newChildExpirationTime = childChildExpirationTime;
      }

      if (shouldBubbleActualDurations) {
        actualDuration += child.actualDuration;
      }

      treeBaseDuration += child.treeBaseDuration;
      child = child.sibling;
    }

    completedWork.actualDuration = actualDuration;
    completedWork.treeBaseDuration = treeBaseDuration;
  } else {
    var _child = completedWork.child;

    while (_child !== null) {
      var _childUpdateExpirationTime = _child.expirationTime;
      var _childChildExpirationTime = _child.childExpirationTime;

      if (_childUpdateExpirationTime > newChildExpirationTime) {
        newChildExpirationTime = _childUpdateExpirationTime;
      }

      if (_childChildExpirationTime > newChildExpirationTime) {
        newChildExpirationTime = _childChildExpirationTime;
      }

      _child = _child.sibling;
    }
  }

  completedWork.childExpirationTime = newChildExpirationTime;
}

function commitRoot(root) {
  var renderPriorityLevel = getCurrentPriorityLevel();
  runWithPriority$1(ImmediatePriority, commitRootImpl.bind(null, root, renderPriorityLevel));
  return null;
}

function commitRootImpl(root, renderPriorityLevel) {
  do {
    // `flushPassiveEffects` will call `flushSyncUpdateQueue` at the end, which
    // means `flushPassiveEffects` will sometimes result in additional
    // passive effects. So we need to keep flushing in a loop until there are
    // no more pending effects.
    // TODO: Might be better if `flushPassiveEffects` did not automatically
    // flush synchronous work at the end, to avoid factoring hazards like this.
    flushPassiveEffects();
  } while (rootWithPendingPassiveEffects !== null);

  flushRenderPhaseStrictModeWarningsInDEV();

  if (!((executionContext & (RenderContext | CommitContext)) === NoContext)) {
    {
      throw Error( "Should not already be working." );
    }
  }

  var finishedWork = root.finishedWork;
  var expirationTime = root.finishedExpirationTime;

  if (finishedWork === null) {
    return null;
  }

  root.finishedWork = null;
  root.finishedExpirationTime = NoWork;

  if (!(finishedWork !== root.current)) {
    {
      throw Error( "Cannot commit the same tree as before. This error is likely caused by a bug in React. Please file an issue." );
    }
  } // commitRoot never returns a continuation; it always finishes synchronously.
  // So we can clear these now to allow a new callback to be scheduled.


  root.callbackNode = null;
  root.callbackExpirationTime = NoWork;
  root.callbackPriority = NoPriority;
  root.nextKnownPendingLevel = NoWork;
  startCommitTimer(); // Update the first and last pending times on this root. The new first
  // pending time is whatever is left on the root fiber.

  var remainingExpirationTimeBeforeCommit = getRemainingExpirationTime(finishedWork);
  markRootFinishedAtTime(root, expirationTime, remainingExpirationTimeBeforeCommit);

  if (root === workInProgressRoot) {
    // We can reset these now that they are finished.
    workInProgressRoot = null;
    workInProgress = null;
    renderExpirationTime$1 = NoWork;
  } // This indicates that the last root we worked on is not the same one that
  // we're committing now. This most commonly happens when a suspended root
  // times out.
  // Get the list of effects.


  var firstEffect;

  if (finishedWork.effectTag > PerformedWork) {
    // A fiber's effect list consists only of its children, not itself. So if
    // the root has an effect, we need to add it to the end of the list. The
    // resulting list is the set that would belong to the root's parent, if it
    // had one; that is, all the effects in the tree including the root.
    if (finishedWork.lastEffect !== null) {
      finishedWork.lastEffect.nextEffect = finishedWork;
      firstEffect = finishedWork.firstEffect;
    } else {
      firstEffect = finishedWork;
    }
  } else {
    // There is no effect on the root.
    firstEffect = finishedWork.firstEffect;
  }

  if (firstEffect !== null) {
    var prevExecutionContext = executionContext;
    executionContext |= CommitContext;
    var prevInteractions = pushInteractions(root); // Reset this to null before calling lifecycles

    ReactCurrentOwner$2.current = null; // The commit phase is broken into several sub-phases. We do a separate pass
    // of the effect list for each phase: all mutation effects come before all
    // layout effects, and so on.
    // The first phase a "before mutation" phase. We use this phase to read the
    // state of the host tree right before we mutate it. This is where
    // getSnapshotBeforeUpdate is called.

    startCommitSnapshotEffectsTimer();
    prepareForCommit(root.containerInfo);
    nextEffect = firstEffect;

    do {
      {
        invokeGuardedCallback(null, commitBeforeMutationEffects, null);

        if (hasCaughtError()) {
          if (!(nextEffect !== null)) {
            {
              throw Error( "Should be working on an effect." );
            }
          }

          var error = clearCaughtError();
          captureCommitPhaseError(nextEffect, error);
          nextEffect = nextEffect.nextEffect;
        }
      }
    } while (nextEffect !== null);

    stopCommitSnapshotEffectsTimer();

    {
      // Mark the current commit time to be shared by all Profilers in this
      // batch. This enables them to be grouped later.
      recordCommitTime();
    } // The next phase is the mutation phase, where we mutate the host tree.


    startCommitHostEffectsTimer();
    nextEffect = firstEffect;

    do {
      {
        invokeGuardedCallback(null, commitMutationEffects, null, root, renderPriorityLevel);

        if (hasCaughtError()) {
          if (!(nextEffect !== null)) {
            {
              throw Error( "Should be working on an effect." );
            }
          }

          var _error = clearCaughtError();

          captureCommitPhaseError(nextEffect, _error);
          nextEffect = nextEffect.nextEffect;
        }
      }
    } while (nextEffect !== null);

    stopCommitHostEffectsTimer();
    resetAfterCommit(root.containerInfo); // The work-in-progress tree is now the current tree. This must come after
    // the mutation phase, so that the previous tree is still current during
    // componentWillUnmount, but before the layout phase, so that the finished
    // work is current during componentDidMount/Update.

    root.current = finishedWork; // The next phase is the layout phase, where we call effects that read
    // the host tree after it's been mutated. The idiomatic use case for this is
    // layout, but class component lifecycles also fire here for legacy reasons.

    startCommitLifeCyclesTimer();
    nextEffect = firstEffect;

    do {
      {
        invokeGuardedCallback(null, commitLayoutEffects, null, root, expirationTime);

        if (hasCaughtError()) {
          if (!(nextEffect !== null)) {
            {
              throw Error( "Should be working on an effect." );
            }
          }

          var _error2 = clearCaughtError();

          captureCommitPhaseError(nextEffect, _error2);
          nextEffect = nextEffect.nextEffect;
        }
      }
    } while (nextEffect !== null);

    stopCommitLifeCyclesTimer();
    nextEffect = null; // Tell Scheduler to yield at the end of the frame, so the browser has an
    // opportunity to paint.

    requestPaint();

    {
      popInteractions(prevInteractions);
    }

    executionContext = prevExecutionContext;
  } else {
    // No effects.
    root.current = finishedWork; // Measure these anyway so the flamegraph explicitly shows that there were
    // no effects.
    // TODO: Maybe there's a better way to report this.

    startCommitSnapshotEffectsTimer();
    stopCommitSnapshotEffectsTimer();

    {
      recordCommitTime();
    }

    startCommitHostEffectsTimer();
    stopCommitHostEffectsTimer();
    startCommitLifeCyclesTimer();
    stopCommitLifeCyclesTimer();
  }

  stopCommitTimer();
  var rootDidHavePassiveEffects = rootDoesHavePassiveEffects;

  if (rootDoesHavePassiveEffects) {
    // This commit has passive effects. Stash a reference to them. But don't
    // schedule a callback until after flushing layout work.
    rootDoesHavePassiveEffects = false;
    rootWithPendingPassiveEffects = root;
    pendingPassiveEffectsExpirationTime = expirationTime;
    pendingPassiveEffectsRenderPriority = renderPriorityLevel;
  } else {
    // We are done with the effect chain at this point so let's clear the
    // nextEffect pointers to assist with GC. If we have passive effects, we'll
    // clear this in flushPassiveEffects.
    nextEffect = firstEffect;

    while (nextEffect !== null) {
      var nextNextEffect = nextEffect.nextEffect;
      nextEffect.nextEffect = null;
      nextEffect = nextNextEffect;
    }
  } // Check if there's remaining work on this root


  var remainingExpirationTime = root.firstPendingTime;

  if (remainingExpirationTime !== NoWork) {
    {
      if (spawnedWorkDuringRender !== null) {
        var expirationTimes = spawnedWorkDuringRender;
        spawnedWorkDuringRender = null;

        for (var i = 0; i < expirationTimes.length; i++) {
          scheduleInteractions(root, expirationTimes[i], root.memoizedInteractions);
        }
      }

      schedulePendingInteractions(root, remainingExpirationTime);
    }
  } else {
    // If there's no remaining work, we can clear the set of already failed
    // error boundaries.
    legacyErrorBoundariesThatAlreadyFailed = null;
  }

  {
    if (!rootDidHavePassiveEffects) {
      // If there are no passive effects, then we can complete the pending interactions.
      // Otherwise, we'll wait until after the passive effects are flushed.
      // Wait to do this until after remaining work has been scheduled,
      // so that we don't prematurely signal complete for interactions when there's e.g. hidden work.
      finishPendingInteractions(root, expirationTime);
    }
  }

  if (remainingExpirationTime === Sync) {
    // Count the number of times the root synchronously re-renders without
    // finishing. If there are too many, it indicates an infinite update loop.
    if (root === rootWithNestedUpdates) {
      nestedUpdateCount++;
    } else {
      nestedUpdateCount = 0;
      rootWithNestedUpdates = root;
    }
  } else {
    nestedUpdateCount = 0;
  }

  onCommitRoot(finishedWork.stateNode, expirationTime); // Always call this before exiting `commitRoot`, to ensure that any
  // additional work on this root is scheduled.

  ensureRootIsScheduled(root);

  if (hasUncaughtError) {
    hasUncaughtError = false;
    var _error3 = firstUncaughtError;
    firstUncaughtError = null;
    throw _error3;
  }

  if ((executionContext & LegacyUnbatchedContext) !== NoContext) {
    // This is a legacy edge case. We just committed the initial mount of
    // a ReactDOM.render-ed root inside of batchedUpdates. The commit fired
    // synchronously, but layout updates should be deferred until the end
    // of the batch.
    return null;
  } // If layout work was scheduled, flush it now.


  flushSyncCallbackQueue();
  return null;
}

function commitBeforeMutationEffects() {
  while (nextEffect !== null) {
    var effectTag = nextEffect.effectTag;

    if ((effectTag & Snapshot) !== NoEffect) {
      setCurrentFiber(nextEffect);
      recordEffect();
      var current = nextEffect.alternate;
      commitBeforeMutationLifeCycles(current, nextEffect);
      resetCurrentFiber();
    }

    if ((effectTag & Passive) !== NoEffect) {
      // If there are passive effects, schedule a callback to flush at
      // the earliest opportunity.
      if (!rootDoesHavePassiveEffects) {
        rootDoesHavePassiveEffects = true;
        scheduleCallback(NormalPriority, function () {
          flushPassiveEffects();
          return null;
        });
      }
    }

    nextEffect = nextEffect.nextEffect;
  }
}

function commitMutationEffects(root, renderPriorityLevel) {
  // TODO: Should probably move the bulk of this function to commitWork.
  while (nextEffect !== null) {
    setCurrentFiber(nextEffect);
    var effectTag = nextEffect.effectTag;

    if (effectTag & ContentReset) {
      commitResetTextContent(nextEffect);
    }

    if (effectTag & Ref) {
      var current = nextEffect.alternate;

      if (current !== null) {
        commitDetachRef(current);
      }
    } // The following switch statement is only concerned about placement,
    // updates, and deletions. To avoid needing to add a case for every possible
    // bitmap value, we remove the secondary effects from the effect tag and
    // switch on that value.


    var primaryEffectTag = effectTag & (Placement | Update | Deletion | Hydrating);

    switch (primaryEffectTag) {
      case Placement:
        {
          commitPlacement(nextEffect); // Clear the "placement" from effect tag so that we know that this is
          // inserted, before any life-cycles like componentDidMount gets called.
          // TODO: findDOMNode doesn't rely on this any more but isMounted does
          // and isMounted is deprecated anyway so we should be able to kill this.

          nextEffect.effectTag &= ~Placement;
          break;
        }

      case PlacementAndUpdate:
        {
          // Placement
          commitPlacement(nextEffect); // Clear the "placement" from effect tag so that we know that this is
          // inserted, before any life-cycles like componentDidMount gets called.

          nextEffect.effectTag &= ~Placement; // Update

          var _current = nextEffect.alternate;
          commitWork(_current, nextEffect);
          break;
        }

      case Hydrating:
        {
          nextEffect.effectTag &= ~Hydrating;
          break;
        }

      case HydratingAndUpdate:
        {
          nextEffect.effectTag &= ~Hydrating; // Update

          var _current2 = nextEffect.alternate;
          commitWork(_current2, nextEffect);
          break;
        }

      case Update:
        {
          var _current3 = nextEffect.alternate;
          commitWork(_current3, nextEffect);
          break;
        }

      case Deletion:
        {
          commitDeletion(root, nextEffect, renderPriorityLevel);
          break;
        }
    } // TODO: Only record a mutation effect if primaryEffectTag is non-zero.


    recordEffect();
    resetCurrentFiber();
    nextEffect = nextEffect.nextEffect;
  }
}

function commitLayoutEffects(root, committedExpirationTime) {
  // TODO: Should probably move the bulk of this function to commitWork.
  while (nextEffect !== null) {
    setCurrentFiber(nextEffect);
    var effectTag = nextEffect.effectTag;

    if (effectTag & (Update | Callback)) {
      recordEffect();
      var current = nextEffect.alternate;
      commitLifeCycles(root, current, nextEffect);
    }

    if (effectTag & Ref) {
      recordEffect();
      commitAttachRef(nextEffect);
    }

    resetCurrentFiber();
    nextEffect = nextEffect.nextEffect;
  }
}

function flushPassiveEffects() {
  if (pendingPassiveEffectsRenderPriority !== NoPriority) {
    var priorityLevel = pendingPassiveEffectsRenderPriority > NormalPriority ? NormalPriority : pendingPassiveEffectsRenderPriority;
    pendingPassiveEffectsRenderPriority = NoPriority;
    return runWithPriority$1(priorityLevel, flushPassiveEffectsImpl);
  }
}

function flushPassiveEffectsImpl() {
  if (rootWithPendingPassiveEffects === null) {
    return false;
  }

  var root = rootWithPendingPassiveEffects;
  var expirationTime = pendingPassiveEffectsExpirationTime;
  rootWithPendingPassiveEffects = null;
  pendingPassiveEffectsExpirationTime = NoWork;

  if (!((executionContext & (RenderContext | CommitContext)) === NoContext)) {
    {
      throw Error( "Cannot flush passive effects while already rendering." );
    }
  }

  var prevExecutionContext = executionContext;
  executionContext |= CommitContext;
  var prevInteractions = pushInteractions(root);

  {
    // Note: This currently assumes there are no passive effects on the root fiber
    // because the root is not part of its own effect list.
    // This could change in the future.
    var _effect2 = root.current.firstEffect;

    while (_effect2 !== null) {
      {
        setCurrentFiber(_effect2);
        invokeGuardedCallback(null, commitPassiveHookEffects, null, _effect2);

        if (hasCaughtError()) {
          if (!(_effect2 !== null)) {
            {
              throw Error( "Should be working on an effect." );
            }
          }

          var _error5 = clearCaughtError();

          captureCommitPhaseError(_effect2, _error5);
        }

        resetCurrentFiber();
      }

      var nextNextEffect = _effect2.nextEffect; // Remove nextEffect pointer to assist GC

      _effect2.nextEffect = null;
      _effect2 = nextNextEffect;
    }
  }

  {
    popInteractions(prevInteractions);
    finishPendingInteractions(root, expirationTime);
  }

  executionContext = prevExecutionContext;
  flushSyncCallbackQueue(); // If additional passive effects were scheduled, increment a counter. If this
  // exceeds the limit, we'll fire a warning.

  nestedPassiveUpdateCount = rootWithPendingPassiveEffects === null ? 0 : nestedPassiveUpdateCount + 1;
  return true;
}

function isAlreadyFailedLegacyErrorBoundary(instance) {
  return legacyErrorBoundariesThatAlreadyFailed !== null && legacyErrorBoundariesThatAlreadyFailed.has(instance);
}
function markLegacyErrorBoundaryAsFailed(instance) {
  if (legacyErrorBoundariesThatAlreadyFailed === null) {
    legacyErrorBoundariesThatAlreadyFailed = new Set([instance]);
  } else {
    legacyErrorBoundariesThatAlreadyFailed.add(instance);
  }
}

function prepareToThrowUncaughtError(error) {
  if (!hasUncaughtError) {
    hasUncaughtError = true;
    firstUncaughtError = error;
  }
}

var onUncaughtError = prepareToThrowUncaughtError;

function captureCommitPhaseErrorOnRoot(rootFiber, sourceFiber, error) {
  var errorInfo = createCapturedValue(error, sourceFiber);
  var update = createRootErrorUpdate(rootFiber, errorInfo, Sync);
  enqueueUpdate(rootFiber, update);
  var root = markUpdateTimeFromFiberToRoot(rootFiber, Sync);

  if (root !== null) {
    ensureRootIsScheduled(root);
    schedulePendingInteractions(root, Sync);
  }
}

function captureCommitPhaseError(sourceFiber, error) {
  if (sourceFiber.tag === HostRoot) {
    // Error was thrown at the root. There is no parent, so the root
    // itself should capture it.
    captureCommitPhaseErrorOnRoot(sourceFiber, sourceFiber, error);
    return;
  }

  var fiber = sourceFiber.return;

  while (fiber !== null) {
    if (fiber.tag === HostRoot) {
      captureCommitPhaseErrorOnRoot(fiber, sourceFiber, error);
      return;
    } else if (fiber.tag === ClassComponent) {
      var ctor = fiber.type;
      var instance = fiber.stateNode;

      if (typeof ctor.getDerivedStateFromError === 'function' || typeof instance.componentDidCatch === 'function' && !isAlreadyFailedLegacyErrorBoundary(instance)) {
        var errorInfo = createCapturedValue(error, sourceFiber);
        var update = createClassErrorUpdate(fiber, errorInfo, // TODO: This is always sync
        Sync);
        enqueueUpdate(fiber, update);
        var root = markUpdateTimeFromFiberToRoot(fiber, Sync);

        if (root !== null) {
          ensureRootIsScheduled(root);
          schedulePendingInteractions(root, Sync);
        }

        return;
      }
    }

    fiber = fiber.return;
  }
}
function pingSuspendedRoot(root, thenable, suspendedTime) {
  var pingCache = root.pingCache;

  if (pingCache !== null) {
    // The thenable resolved, so we no longer need to memoize, because it will
    // never be thrown again.
    pingCache.delete(thenable);
  }

  if (workInProgressRoot === root && renderExpirationTime$1 === suspendedTime) {
    // Received a ping at the same priority level at which we're currently
    // rendering. We might want to restart this render. This should mirror
    // the logic of whether or not a root suspends once it completes.
    // TODO: If we're rendering sync either due to Sync, Batched or expired,
    // we should probably never restart.
    // If we're suspended with delay, we'll always suspend so we can always
    // restart. If we're suspended without any updates, it might be a retry.
    // If it's early in the retry we can restart. We can't know for sure
    // whether we'll eventually process an update during this render pass,
    // but it's somewhat unlikely that we get to a ping before that, since
    // getting to the root most update is usually very fast.
    if (workInProgressRootExitStatus === RootSuspendedWithDelay || workInProgressRootExitStatus === RootSuspended && workInProgressRootLatestProcessedExpirationTime === Sync && now() - globalMostRecentFallbackTime < FALLBACK_THROTTLE_MS) {
      // Restart from the root. Don't need to schedule a ping because
      // we're already working on this tree.
      prepareFreshStack(root, renderExpirationTime$1);
    } else {
      // Even though we can't restart right now, we might get an
      // opportunity later. So we mark this render as having a ping.
      workInProgressRootHasPendingPing = true;
    }

    return;
  }

  if (!isRootSuspendedAtTime(root, suspendedTime)) {
    // The root is no longer suspended at this time.
    return;
  }

  var lastPingedTime = root.lastPingedTime;

  if (lastPingedTime !== NoWork && lastPingedTime < suspendedTime) {
    // There's already a lower priority ping scheduled.
    return;
  } // Mark the time at which this ping was scheduled.


  root.lastPingedTime = suspendedTime;

  ensureRootIsScheduled(root);
  schedulePendingInteractions(root, suspendedTime);
}

function retryTimedOutBoundary(boundaryFiber, retryTime) {
  // The boundary fiber (a Suspense component or SuspenseList component)
  // previously was rendered in its fallback state. One of the promises that
  // suspended it has resolved, which means at least part of the tree was
  // likely unblocked. Try rendering again, at a new expiration time.
  if (retryTime === NoWork) {
    var suspenseConfig = null; // Retries don't carry over the already committed update.

    var currentTime = requestCurrentTimeForUpdate();
    retryTime = computeExpirationForFiber(currentTime, boundaryFiber, suspenseConfig);
  } // TODO: Special case idle priority?


  var root = markUpdateTimeFromFiberToRoot(boundaryFiber, retryTime);

  if (root !== null) {
    ensureRootIsScheduled(root);
    schedulePendingInteractions(root, retryTime);
  }
}
function resolveRetryThenable(boundaryFiber, thenable) {
  var retryTime = NoWork; // Default

  var retryCache;

  {
    retryCache = boundaryFiber.stateNode;
  }

  if (retryCache !== null) {
    // The thenable resolved, so we no longer need to memoize, because it will
    // never be thrown again.
    retryCache.delete(thenable);
  }

  retryTimedOutBoundary(boundaryFiber, retryTime);
} // Computes the next Just Noticeable Difference (JND) boundary.
// The theory is that a person can't tell the difference between small differences in time.
// Therefore, if we wait a bit longer than necessary that won't translate to a noticeable
// difference in the experience. However, waiting for longer might mean that we can avoid
// showing an intermediate loading state. The longer we have already waited, the harder it
// is to tell small differences in time. Therefore, the longer we've already waited,
// the longer we can wait additionally. At some point we have to give up though.
// We pick a train model where the next boundary commits at a consistent schedule.
// These particular numbers are vague estimates. We expect to adjust them based on research.

function jnd(timeElapsed) {
  return timeElapsed < 120 ? 120 : timeElapsed < 480 ? 480 : timeElapsed < 1080 ? 1080 : timeElapsed < 1920 ? 1920 : timeElapsed < 3000 ? 3000 : timeElapsed < 4320 ? 4320 : ceil(timeElapsed / 1960) * 1960;
}

function computeMsUntilSuspenseLoadingDelay(mostRecentEventTime, committedExpirationTime, suspenseConfig) {
  var busyMinDurationMs = suspenseConfig.busyMinDurationMs | 0;

  if (busyMinDurationMs <= 0) {
    return 0;
  }

  var busyDelayMs = suspenseConfig.busyDelayMs | 0; // Compute the time until this render pass would expire.

  var currentTimeMs = now();
  var eventTimeMs = inferTimeFromExpirationTimeWithSuspenseConfig(mostRecentEventTime, suspenseConfig);
  var timeElapsed = currentTimeMs - eventTimeMs;

  if (timeElapsed <= busyDelayMs) {
    // If we haven't yet waited longer than the initial delay, we don't
    // have to wait any additional time.
    return 0;
  }

  var msUntilTimeout = busyDelayMs + busyMinDurationMs - timeElapsed; // This is the value that is passed to `setTimeout`.

  return msUntilTimeout;
}

function checkForNestedUpdates() {
  if (nestedUpdateCount > NESTED_UPDATE_LIMIT) {
    nestedUpdateCount = 0;
    rootWithNestedUpdates = null;

    {
      {
        throw Error( "Maximum update depth exceeded. This can happen when a component repeatedly calls setState inside componentWillUpdate or componentDidUpdate. React limits the number of nested updates to prevent infinite loops." );
      }
    }
  }

  {
    if (nestedPassiveUpdateCount > NESTED_PASSIVE_UPDATE_LIMIT) {
      nestedPassiveUpdateCount = 0;

      error('Maximum update depth exceeded. This can happen when a component ' + "calls setState inside useEffect, but useEffect either doesn't " + 'have a dependency array, or one of the dependencies changes on ' + 'every render.');
    }
  }
}

function flushRenderPhaseStrictModeWarningsInDEV() {
  {
    ReactStrictModeWarnings.flushLegacyContextWarning();

    {
      ReactStrictModeWarnings.flushPendingUnsafeLifecycleWarnings();
    }
  }
}

function stopFinishedWorkLoopTimer() {
  var didCompleteRoot = true;
  stopWorkLoopTimer(interruptedBy, didCompleteRoot);
  interruptedBy = null;
}

function stopInterruptedWorkLoopTimer() {
  // TODO: Track which fiber caused the interruption.
  var didCompleteRoot = false;
  stopWorkLoopTimer(interruptedBy, didCompleteRoot);
  interruptedBy = null;
}

function checkForInterruption(fiberThatReceivedUpdate, updateExpirationTime) {
  if ( workInProgressRoot !== null && updateExpirationTime > renderExpirationTime$1) {
    interruptedBy = fiberThatReceivedUpdate;
  }
}

var didWarnStateUpdateForUnmountedComponent = null;

function warnAboutUpdateOnUnmountedFiberInDEV(fiber) {
  {
    var tag = fiber.tag;

    if (tag !== HostRoot && tag !== ClassComponent && tag !== FunctionComponent && tag !== ForwardRef && tag !== MemoComponent && tag !== SimpleMemoComponent && tag !== Block) {
      // Only warn for user-defined components, not internal ones like Suspense.
      return;
    }
    // the problematic code almost always lies inside that component.


    var componentName = getComponentName(fiber.type) || 'ReactComponent';

    if (didWarnStateUpdateForUnmountedComponent !== null) {
      if (didWarnStateUpdateForUnmountedComponent.has(componentName)) {
        return;
      }

      didWarnStateUpdateForUnmountedComponent.add(componentName);
    } else {
      didWarnStateUpdateForUnmountedComponent = new Set([componentName]);
    }

    error("Can't perform a React state update on an unmounted component. This " + 'is a no-op, but it indicates a memory leak in your application. To ' + 'fix, cancel all subscriptions and asynchronous tasks in %s.%s', tag === ClassComponent ? 'the componentWillUnmount method' : 'a useEffect cleanup function', getStackByFiberInDevAndProd(fiber));
  }
}

var beginWork$1;

{
  var dummyFiber = null;

  beginWork$1 = function (current, unitOfWork, expirationTime) {
    // If a component throws an error, we replay it again in a synchronously
    // dispatched event, so that the debugger will treat it as an uncaught
    // error See ReactErrorUtils for more information.
    // Before entering the begin phase, copy the work-in-progress onto a dummy
    // fiber. If beginWork throws, we'll use this to reset the state.
    var originalWorkInProgressCopy = assignFiberPropertiesInDEV(dummyFiber, unitOfWork);

    try {
      return beginWork(current, unitOfWork, expirationTime);
    } catch (originalError) {
      if (originalError !== null && typeof originalError === 'object' && typeof originalError.then === 'function') {
        // Don't replay promises. Treat everything else like an error.
        throw originalError;
      } // Keep this code in sync with handleError; any changes here must have
      // corresponding changes there.


      resetContextDependencies();
      resetHooksAfterThrow(); // Don't reset current debug fiber, since we're about to work on the
      // same fiber again.
      // Unwind the failed stack frame

      unwindInterruptedWork(unitOfWork); // Restore the original properties of the fiber.

      assignFiberPropertiesInDEV(unitOfWork, originalWorkInProgressCopy);

      if ( unitOfWork.mode & ProfileMode) {
        // Reset the profiler timer.
        startProfilerTimer(unitOfWork);
      } // Run beginWork again.


      invokeGuardedCallback(null, beginWork, null, current, unitOfWork, expirationTime);

      if (hasCaughtError()) {
        var replayError = clearCaughtError(); // `invokeGuardedCallback` sometimes sets an expando `_suppressLogging`.
        // Rethrow this error instead of the original one.

        throw replayError;
      } else {
        // This branch is reachable if the render phase is impure.
        throw originalError;
      }
    }
  };
}

var didWarnAboutUpdateInRender = false;
var didWarnAboutUpdateInRenderForAnotherComponent;

{
  didWarnAboutUpdateInRenderForAnotherComponent = new Set();
}

function warnAboutRenderPhaseUpdatesInDEV(fiber) {
  {
    if (isRendering && (executionContext & RenderContext) !== NoContext) {
      switch (fiber.tag) {
        case FunctionComponent:
        case ForwardRef:
        case SimpleMemoComponent:
          {
            var renderingComponentName = workInProgress && getComponentName(workInProgress.type) || 'Unknown'; // Dedupe by the rendering component because it's the one that needs to be fixed.

            var dedupeKey = renderingComponentName;

            if (!didWarnAboutUpdateInRenderForAnotherComponent.has(dedupeKey)) {
              didWarnAboutUpdateInRenderForAnotherComponent.add(dedupeKey);
              var setStateComponentName = getComponentName(fiber.type) || 'Unknown';

              error('Cannot update a component (`%s`) while rendering a ' + 'different component (`%s`). To locate the bad setState() call inside `%s`, ' + 'follow the stack trace as described in https://fb.me/setstate-in-render', setStateComponentName, renderingComponentName, renderingComponentName);
            }

            break;
          }

        case ClassComponent:
          {
            if (!didWarnAboutUpdateInRender) {
              error('Cannot update during an existing state transition (such as ' + 'within `render`). Render methods should be a pure ' + 'function of props and state.');

              didWarnAboutUpdateInRender = true;
            }

            break;
          }
      }
    }
  }
} // a 'shared' variable that changes when act() opens/closes in tests.


var IsThisRendererActing = {
  current: false
};
function warnIfNotScopedWithMatchingAct(fiber) {
  {
    if ( IsSomeRendererActing.current === true && IsThisRendererActing.current !== true) {
      error("It looks like you're using the wrong act() around your test interactions.\n" + 'Be sure to use the matching version of act() corresponding to your renderer:\n\n' + '// for react-dom:\n' + "import {act} from 'react-dom/test-utils';\n" + '// ...\n' + 'act(() => ...);\n\n' + '// for react-test-renderer:\n' + "import TestRenderer from 'react-test-renderer';\n" + 'const {act} = TestRenderer;\n' + '// ...\n' + 'act(() => ...);' + '%s', getStackByFiberInDevAndProd(fiber));
    }
  }
}
function warnIfNotCurrentlyActingEffectsInDEV(fiber) {
  {
    if ( (fiber.mode & StrictMode) !== NoMode && IsSomeRendererActing.current === false && IsThisRendererActing.current === false) {
      error('An update to %s ran an effect, but was not wrapped in act(...).\n\n' + 'When testing, code that causes React state updates should be ' + 'wrapped into act(...):\n\n' + 'act(() => {\n' + '  /* fire events that update state */\n' + '});\n' + '/* assert on the output */\n\n' + "This ensures that you're testing the behavior the user would see " + 'in the browser.' + ' Learn more at https://fb.me/react-wrap-tests-with-act' + '%s', getComponentName(fiber.type), getStackByFiberInDevAndProd(fiber));
    }
  }
}

function warnIfNotCurrentlyActingUpdatesInDEV(fiber) {
  {
    if ( executionContext === NoContext && IsSomeRendererActing.current === false && IsThisRendererActing.current === false) {
      error('An update to %s inside a test was not wrapped in act(...).\n\n' + 'When testing, code that causes React state updates should be ' + 'wrapped into act(...):\n\n' + 'act(() => {\n' + '  /* fire events that update state */\n' + '});\n' + '/* assert on the output */\n\n' + "This ensures that you're testing the behavior the user would see " + 'in the browser.' + ' Learn more at https://fb.me/react-wrap-tests-with-act' + '%s', getComponentName(fiber.type), getStackByFiberInDevAndProd(fiber));
    }
  }
}

var warnIfNotCurrentlyActingUpdatesInDev = warnIfNotCurrentlyActingUpdatesInDEV; // In tests, we want to enforce a mocked scheduler.

var didWarnAboutUnmockedScheduler = false; // TODO Before we release concurrent mode, revisit this and decide whether a mocked
// scheduler is the actual recommendation. The alternative could be a testing build,
// a new lib, or whatever; we dunno just yet. This message is for early adopters
// to get their tests right.

function warnIfUnmockedScheduler(fiber) {
  {
    if (didWarnAboutUnmockedScheduler === false && Scheduler.unstable_flushAllWithoutAsserting === undefined) {
      if (fiber.mode & BlockingMode || fiber.mode & ConcurrentMode) {
        didWarnAboutUnmockedScheduler = true;

        error('In Concurrent or Sync modes, the "scheduler" module needs to be mocked ' + 'to guarantee consistent behaviour across tests and browsers. ' + 'For example, with jest: \n' + "jest.mock('scheduler', () => require('scheduler/unstable_mock'));\n\n" + 'For more info, visit https://fb.me/react-mock-scheduler');
      }
    }
  }
}

function computeThreadID(root, expirationTime) {
  // Interaction threads are unique per root and expiration time.
  return expirationTime * 1000 + root.interactionThreadID;
}

function markSpawnedWork(expirationTime) {

  if (spawnedWorkDuringRender === null) {
    spawnedWorkDuringRender = [expirationTime];
  } else {
    spawnedWorkDuringRender.push(expirationTime);
  }
}

function scheduleInteractions(root, expirationTime, interactions) {

  if (interactions.size > 0) {
    var pendingInteractionMap = root.pendingInteractionMap;
    var pendingInteractions = pendingInteractionMap.get(expirationTime);

    if (pendingInteractions != null) {
      interactions.forEach(function (interaction) {
        if (!pendingInteractions.has(interaction)) {
          // Update the pending async work count for previously unscheduled interaction.
          interaction.__count++;
        }

        pendingInteractions.add(interaction);
      });
    } else {
      pendingInteractionMap.set(expirationTime, new Set(interactions)); // Update the pending async work count for the current interactions.

      interactions.forEach(function (interaction) {
        interaction.__count++;
      });
    }

    var subscriber = tracing.__subscriberRef.current;

    if (subscriber !== null) {
      var threadID = computeThreadID(root, expirationTime);
      subscriber.onWorkScheduled(interactions, threadID);
    }
  }
}

function schedulePendingInteractions(root, expirationTime) {

  scheduleInteractions(root, expirationTime, tracing.__interactionsRef.current);
}

function startWorkOnPendingInteractions(root, expirationTime) {
  // we can accurately attribute time spent working on it, And so that cascading
  // work triggered during the render phase will be associated with it.


  var interactions = new Set();
  root.pendingInteractionMap.forEach(function (scheduledInteractions, scheduledExpirationTime) {
    if (scheduledExpirationTime >= expirationTime) {
      scheduledInteractions.forEach(function (interaction) {
        return interactions.add(interaction);
      });
    }
  }); // Store the current set of interactions on the FiberRoot for a few reasons:
  // We can re-use it in hot functions like performConcurrentWorkOnRoot()
  // without having to recalculate it. We will also use it in commitWork() to
  // pass to any Profiler onRender() hooks. This also provides DevTools with a
  // way to access it when the onCommitRoot() hook is called.

  root.memoizedInteractions = interactions;

  if (interactions.size > 0) {
    var subscriber = tracing.__subscriberRef.current;

    if (subscriber !== null) {
      var threadID = computeThreadID(root, expirationTime);

      try {
        subscriber.onWorkStarted(interactions, threadID);
      } catch (error) {
        // If the subscriber throws, rethrow it in a separate task
        scheduleCallback(ImmediatePriority, function () {
          throw error;
        });
      }
    }
  }
}

function finishPendingInteractions(root, committedExpirationTime) {

  var earliestRemainingTimeAfterCommit = root.firstPendingTime;
  var subscriber;

  try {
    subscriber = tracing.__subscriberRef.current;

    if (subscriber !== null && root.memoizedInteractions.size > 0) {
      var threadID = computeThreadID(root, committedExpirationTime);
      subscriber.onWorkStopped(root.memoizedInteractions, threadID);
    }
  } catch (error) {
    // If the subscriber throws, rethrow it in a separate task
    scheduleCallback(ImmediatePriority, function () {
      throw error;
    });
  } finally {
    // Clear completed interactions from the pending Map.
    // Unless the render was suspended or cascading work was scheduled,
    // In which case– leave pending interactions until the subsequent render.
    var pendingInteractionMap = root.pendingInteractionMap;
    pendingInteractionMap.forEach(function (scheduledInteractions, scheduledExpirationTime) {
      // Only decrement the pending interaction count if we're done.
      // If there's still work at the current priority,
      // That indicates that we are waiting for suspense data.
      if (scheduledExpirationTime > earliestRemainingTimeAfterCommit) {
        pendingInteractionMap.delete(scheduledExpirationTime);
        scheduledInteractions.forEach(function (interaction) {
          interaction.__count--;

          if (subscriber !== null && interaction.__count === 0) {
            try {
              subscriber.onInteractionScheduledWorkCompleted(interaction);
            } catch (error) {
              // If the subscriber throws, rethrow it in a separate task
              scheduleCallback(ImmediatePriority, function () {
                throw error;
              });
            }
          }
        });
      }
    });
  }
}

var onScheduleFiberRoot = null;
var onCommitFiberRoot = null;
var onCommitFiberUnmount = null;
var hasLoggedError = false;
var isDevToolsPresent = typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ !== 'undefined';
function injectInternals(internals) {
  if (typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ === 'undefined') {
    // No DevTools
    return false;
  }

  var hook = __REACT_DEVTOOLS_GLOBAL_HOOK__;

  if (hook.isDisabled) {
    // This isn't a real property on the hook, but it can be set to opt out
    // of DevTools integration and associated warnings and logs.
    // https://github.com/facebook/react/issues/3877
    return true;
  }

  if (!hook.supportsFiber) {
    {
      error('The installed version of React DevTools is too old and will not work ' + 'with the current version of React. Please update React DevTools. ' + 'https://fb.me/react-devtools');
    } // DevTools exists, even though it doesn't support Fiber.


    return true;
  }

  try {
    var rendererID = hook.inject(internals); // We have successfully injected, so now it is safe to set up hooks.

    if (true) {
      // Only used by Fast Refresh
      if (typeof hook.onScheduleFiberRoot === 'function') {
        onScheduleFiberRoot = function (root, children) {
          try {
            hook.onScheduleFiberRoot(rendererID, root, children);
          } catch (err) {
            if ( true && !hasLoggedError) {
              hasLoggedError = true;

              error('React instrumentation encountered an error: %s', err);
            }
          }
        };
      }
    }

    onCommitFiberRoot = function (root, expirationTime) {
      try {
        var didError = (root.current.effectTag & DidCapture) === DidCapture;

        if (enableProfilerTimer) {
          var currentTime = getCurrentTime();
          var priorityLevel = inferPriorityFromExpirationTime(currentTime, expirationTime);
          hook.onCommitFiberRoot(rendererID, root, priorityLevel, didError);
        } else {
          hook.onCommitFiberRoot(rendererID, root, undefined, didError);
        }
      } catch (err) {
        if (true) {
          if (!hasLoggedError) {
            hasLoggedError = true;

            error('React instrumentation encountered an error: %s', err);
          }
        }
      }
    };

    onCommitFiberUnmount = function (fiber) {
      try {
        hook.onCommitFiberUnmount(rendererID, fiber);
      } catch (err) {
        if (true) {
          if (!hasLoggedError) {
            hasLoggedError = true;

            error('React instrumentation encountered an error: %s', err);
          }
        }
      }
    };
  } catch (err) {
    // Catch all errors because it is unsafe to throw during initialization.
    {
      error('React instrumentation encountered an error: %s.', err);
    }
  } // DevTools exists


  return true;
}
function onScheduleRoot(root, children) {
  if (typeof onScheduleFiberRoot === 'function') {
    onScheduleFiberRoot(root, children);
  }
}
function onCommitRoot(root, expirationTime) {
  if (typeof onCommitFiberRoot === 'function') {
    onCommitFiberRoot(root, expirationTime);
  }
}
function onCommitUnmount(fiber) {
  if (typeof onCommitFiberUnmount === 'function') {
    onCommitFiberUnmount(fiber);
  }
}

var hasBadMapPolyfill;

{
  hasBadMapPolyfill = false;

  try {
    var nonExtensibleObject = Object.preventExtensions({});
    var testMap = new Map([[nonExtensibleObject, null]]);
    var testSet = new Set([nonExtensibleObject]); // This is necessary for Rollup to not consider these unused.
    // https://github.com/rollup/rollup/issues/1771
    // TODO: we can remove these if Rollup fixes the bug.

    testMap.set(0, 0);
    testSet.add(0);
  } catch (e) {
    // TODO: Consider warning about bad polyfills
    hasBadMapPolyfill = true;
  }
}

var debugCounter = 1;

function FiberNode(tag, pendingProps, key, mode) {
  // Instance
  this.tag = tag;
  this.key = key;
  this.elementType = null;
  this.type = null;
  this.stateNode = null; // Fiber

  this.return = null;
  this.child = null;
  this.sibling = null;
  this.index = 0;
  this.ref = null;
  this.pendingProps = pendingProps;
  this.memoizedProps = null;
  this.updateQueue = null;
  this.memoizedState = null;
  this.dependencies = null;
  this.mode = mode; // Effects

  this.effectTag = NoEffect;
  this.nextEffect = null;
  this.firstEffect = null;
  this.lastEffect = null;
  this.expirationTime = NoWork;
  this.childExpirationTime = NoWork;
  this.alternate = null;

  {
    // Note: The following is done to avoid a v8 performance cliff.
    //
    // Initializing the fields below to smis and later updating them with
    // double values will cause Fibers to end up having separate shapes.
    // This behavior/bug has something to do with Object.preventExtension().
    // Fortunately this only impacts DEV builds.
    // Unfortunately it makes React unusably slow for some applications.
    // To work around this, initialize the fields below with doubles.
    //
    // Learn more about this here:
    // https://github.com/facebook/react/issues/14365
    // https://bugs.chromium.org/p/v8/issues/detail?id=8538
    this.actualDuration = Number.NaN;
    this.actualStartTime = Number.NaN;
    this.selfBaseDuration = Number.NaN;
    this.treeBaseDuration = Number.NaN; // It's okay to replace the initial doubles with smis after initialization.
    // This won't trigger the performance cliff mentioned above,
    // and it simplifies other profiler code (including DevTools).

    this.actualDuration = 0;
    this.actualStartTime = -1;
    this.selfBaseDuration = 0;
    this.treeBaseDuration = 0;
  } // This is normally DEV-only except www when it adds listeners.
  // TODO: remove the User Timing integration in favor of Root Events.


  {
    this._debugID = debugCounter++;
    this._debugIsCurrentlyTiming = false;
  }

  {
    this._debugSource = null;
    this._debugOwner = null;
    this._debugNeedsRemount = false;
    this._debugHookTypes = null;

    if (!hasBadMapPolyfill && typeof Object.preventExtensions === 'function') {
      Object.preventExtensions(this);
    }
  }
} // This is a constructor function, rather than a POJO constructor, still
// please ensure we do the following:
// 1) Nobody should add any instance methods on this. Instance methods can be
//    more difficult to predict when they get optimized and they are almost
//    never inlined properly in static compilers.
// 2) Nobody should rely on `instanceof Fiber` for type testing. We should
//    always know when it is a fiber.
// 3) We might want to experiment with using numeric keys since they are easier
//    to optimize in a non-JIT environment.
// 4) We can easily go from a constructor to a createFiber object literal if that
//    is faster.
// 5) It should be easy to port this to a C struct and keep a C implementation
//    compatible.


var createFiber = function (tag, pendingProps, key, mode) {
  // $FlowFixMe: the shapes are exact here but Flow doesn't like constructors
  return new FiberNode(tag, pendingProps, key, mode);
};

function shouldConstruct(Component) {
  var prototype = Component.prototype;
  return !!(prototype && prototype.isReactComponent);
}

function isSimpleFunctionComponent(type) {
  return typeof type === 'function' && !shouldConstruct(type) && type.defaultProps === undefined;
}
function resolveLazyComponentTag(Component) {
  if (typeof Component === 'function') {
    return shouldConstruct(Component) ? ClassComponent : FunctionComponent;
  } else if (Component !== undefined && Component !== null) {
    var $$typeof = Component.$$typeof;

    if ($$typeof === REACT_FORWARD_REF_TYPE) {
      return ForwardRef;
    }

    if ($$typeof === REACT_MEMO_TYPE) {
      return MemoComponent;
    }
  }

  return IndeterminateComponent;
} // This is used to create an alternate fiber to do work on.

function createWorkInProgress(current, pendingProps) {
  var workInProgress = current.alternate;

  if (workInProgress === null) {
    // We use a double buffering pooling technique because we know that we'll
    // only ever need at most two versions of a tree. We pool the "other" unused
    // node that we're free to reuse. This is lazily created to avoid allocating
    // extra objects for things that are never updated. It also allow us to
    // reclaim the extra memory if needed.
    workInProgress = createFiber(current.tag, pendingProps, current.key, current.mode);
    workInProgress.elementType = current.elementType;
    workInProgress.type = current.type;
    workInProgress.stateNode = current.stateNode;

    {
      // DEV-only fields
      {
        workInProgress._debugID = current._debugID;
      }

      workInProgress._debugSource = current._debugSource;
      workInProgress._debugOwner = current._debugOwner;
      workInProgress._debugHookTypes = current._debugHookTypes;
    }

    workInProgress.alternate = current;
    current.alternate = workInProgress;
  } else {
    workInProgress.pendingProps = pendingProps; // We already have an alternate.
    // Reset the effect tag.

    workInProgress.effectTag = NoEffect; // The effect list is no longer valid.

    workInProgress.nextEffect = null;
    workInProgress.firstEffect = null;
    workInProgress.lastEffect = null;

    {
      // We intentionally reset, rather than copy, actualDuration & actualStartTime.
      // This prevents time from endlessly accumulating in new commits.
      // This has the downside of resetting values for different priority renders,
      // But works for yielding (the common case) and should support resuming.
      workInProgress.actualDuration = 0;
      workInProgress.actualStartTime = -1;
    }
  }

  workInProgress.childExpirationTime = current.childExpirationTime;
  workInProgress.expirationTime = current.expirationTime;
  workInProgress.child = current.child;
  workInProgress.memoizedProps = current.memoizedProps;
  workInProgress.memoizedState = current.memoizedState;
  workInProgress.updateQueue = current.updateQueue; // Clone the dependencies object. This is mutated during the render phase, so
  // it cannot be shared with the current fiber.

  var currentDependencies = current.dependencies;
  workInProgress.dependencies = currentDependencies === null ? null : {
    expirationTime: currentDependencies.expirationTime,
    firstContext: currentDependencies.firstContext,
    responders: currentDependencies.responders
  }; // These will be overridden during the parent's reconciliation

  workInProgress.sibling = current.sibling;
  workInProgress.index = current.index;
  workInProgress.ref = current.ref;

  {
    workInProgress.selfBaseDuration = current.selfBaseDuration;
    workInProgress.treeBaseDuration = current.treeBaseDuration;
  }

  {
    workInProgress._debugNeedsRemount = current._debugNeedsRemount;

    switch (workInProgress.tag) {
      case IndeterminateComponent:
      case FunctionComponent:
      case SimpleMemoComponent:
        workInProgress.type = resolveFunctionForHotReloading(current.type);
        break;

      case ClassComponent:
        workInProgress.type = resolveClassForHotReloading(current.type);
        break;

      case ForwardRef:
        workInProgress.type = resolveForwardRefForHotReloading(current.type);
        break;
    }
  }

  return workInProgress;
} // Used to reuse a Fiber for a second pass.

function resetWorkInProgress(workInProgress, renderExpirationTime) {
  // This resets the Fiber to what createFiber or createWorkInProgress would
  // have set the values to before during the first pass. Ideally this wouldn't
  // be necessary but unfortunately many code paths reads from the workInProgress
  // when they should be reading from current and writing to workInProgress.
  // We assume pendingProps, index, key, ref, return are still untouched to
  // avoid doing another reconciliation.
  // Reset the effect tag but keep any Placement tags, since that's something
  // that child fiber is setting, not the reconciliation.
  workInProgress.effectTag &= Placement; // The effect list is no longer valid.

  workInProgress.nextEffect = null;
  workInProgress.firstEffect = null;
  workInProgress.lastEffect = null;
  var current = workInProgress.alternate;

  if (current === null) {
    // Reset to createFiber's initial values.
    workInProgress.childExpirationTime = NoWork;
    workInProgress.expirationTime = renderExpirationTime;
    workInProgress.child = null;
    workInProgress.memoizedProps = null;
    workInProgress.memoizedState = null;
    workInProgress.updateQueue = null;
    workInProgress.dependencies = null;

    {
      // Note: We don't reset the actualTime counts. It's useful to accumulate
      // actual time across multiple render passes.
      workInProgress.selfBaseDuration = 0;
      workInProgress.treeBaseDuration = 0;
    }
  } else {
    // Reset to the cloned values that createWorkInProgress would've.
    workInProgress.childExpirationTime = current.childExpirationTime;
    workInProgress.expirationTime = current.expirationTime;
    workInProgress.child = current.child;
    workInProgress.memoizedProps = current.memoizedProps;
    workInProgress.memoizedState = current.memoizedState;
    workInProgress.updateQueue = current.updateQueue; // Clone the dependencies object. This is mutated during the render phase, so
    // it cannot be shared with the current fiber.

    var currentDependencies = current.dependencies;
    workInProgress.dependencies = currentDependencies === null ? null : {
      expirationTime: currentDependencies.expirationTime,
      firstContext: currentDependencies.firstContext,
      responders: currentDependencies.responders
    };

    {
      // Note: We don't reset the actualTime counts. It's useful to accumulate
      // actual time across multiple render passes.
      workInProgress.selfBaseDuration = current.selfBaseDuration;
      workInProgress.treeBaseDuration = current.treeBaseDuration;
    }
  }

  return workInProgress;
}
function createHostRootFiber(tag) {
  var mode;

  if (tag === ConcurrentRoot) {
    mode = ConcurrentMode | BlockingMode | StrictMode;
  } else if (tag === BlockingRoot) {
    mode = BlockingMode | StrictMode;
  } else {
    mode = NoMode;
  }

  if ( isDevToolsPresent) {
    // Always collect profile timings when DevTools are present.
    // This enables DevTools to start capturing timing at any point–
    // Without some nodes in the tree having empty base times.
    mode |= ProfileMode;
  }

  return createFiber(HostRoot, null, null, mode);
}
function createFiberFromTypeAndProps(type, // React$ElementType
key, pendingProps, owner, mode, expirationTime) {
  var fiber;
  var fiberTag = IndeterminateComponent; // The resolved type is set if we know what the final type will be. I.e. it's not lazy.

  var resolvedType = type;

  if (typeof type === 'function') {
    if (shouldConstruct(type)) {
      fiberTag = ClassComponent;

      {
        resolvedType = resolveClassForHotReloading(resolvedType);
      }
    } else {
      {
        resolvedType = resolveFunctionForHotReloading(resolvedType);
      }
    }
  } else if (typeof type === 'string') {
    fiberTag = HostComponent;
  } else {
    getTag: switch (type) {
      case REACT_FRAGMENT_TYPE:
        return createFiberFromFragment(pendingProps.children, mode, expirationTime, key);

      case REACT_CONCURRENT_MODE_TYPE:
        fiberTag = Mode;
        mode |= ConcurrentMode | BlockingMode | StrictMode;
        break;

      case REACT_STRICT_MODE_TYPE:
        fiberTag = Mode;
        mode |= StrictMode;
        break;

      case REACT_PROFILER_TYPE:
        return createFiberFromProfiler(pendingProps, mode, expirationTime, key);

      case REACT_SUSPENSE_TYPE:
        return createFiberFromSuspense(pendingProps, mode, expirationTime, key);

      case REACT_SUSPENSE_LIST_TYPE:
        return createFiberFromSuspenseList(pendingProps, mode, expirationTime, key);

      default:
        {
          if (typeof type === 'object' && type !== null) {
            switch (type.$$typeof) {
              case REACT_PROVIDER_TYPE:
                fiberTag = ContextProvider;
                break getTag;

              case REACT_CONTEXT_TYPE:
                // This is a consumer
                fiberTag = ContextConsumer;
                break getTag;

              case REACT_FORWARD_REF_TYPE:
                fiberTag = ForwardRef;

                {
                  resolvedType = resolveForwardRefForHotReloading(resolvedType);
                }

                break getTag;

              case REACT_MEMO_TYPE:
                fiberTag = MemoComponent;
                break getTag;

              case REACT_LAZY_TYPE:
                fiberTag = LazyComponent;
                resolvedType = null;
                break getTag;

              case REACT_BLOCK_TYPE:
                fiberTag = Block;
                break getTag;

            }
          }

          var info = '';

          {
            if (type === undefined || typeof type === 'object' && type !== null && Object.keys(type).length === 0) {
              info += ' You likely forgot to export your component from the file ' + "it's defined in, or you might have mixed up default and " + 'named imports.';
            }

            var ownerName = owner ? getComponentName(owner.type) : null;

            if (ownerName) {
              info += '\n\nCheck the render method of `' + ownerName + '`.';
            }
          }

          {
            {
              throw Error( "Element type is invalid: expected a string (for built-in components) or a class/function (for composite components) but got: " + (type == null ? type : typeof type) + "." + info );
            }
          }
        }
    }
  }

  fiber = createFiber(fiberTag, pendingProps, key, mode);
  fiber.elementType = type;
  fiber.type = resolvedType;
  fiber.expirationTime = expirationTime;
  return fiber;
}
function createFiberFromElement(element, mode, expirationTime) {
  var owner = null;

  {
    owner = element._owner;
  }

  var type = element.type;
  var key = element.key;
  var pendingProps = element.props;
  var fiber = createFiberFromTypeAndProps(type, key, pendingProps, owner, mode, expirationTime);

  {
    fiber._debugSource = element._source;
    fiber._debugOwner = element._owner;
  }

  return fiber;
}
function createFiberFromFragment(elements, mode, expirationTime, key) {
  var fiber = createFiber(Fragment, elements, key, mode);
  fiber.expirationTime = expirationTime;
  return fiber;
}

function createFiberFromProfiler(pendingProps, mode, expirationTime, key) {
  {
    if (typeof pendingProps.id !== 'string' || typeof pendingProps.onRender !== 'function') {
      error('Profiler must specify an "id" string and "onRender" function as props');
    }
  }

  var fiber = createFiber(Profiler, pendingProps, key, mode | ProfileMode); // TODO: The Profiler fiber shouldn't have a type. It has a tag.

  fiber.elementType = REACT_PROFILER_TYPE;
  fiber.type = REACT_PROFILER_TYPE;
  fiber.expirationTime = expirationTime;
  return fiber;
}

function createFiberFromSuspense(pendingProps, mode, expirationTime, key) {
  var fiber = createFiber(SuspenseComponent, pendingProps, key, mode); // TODO: The SuspenseComponent fiber shouldn't have a type. It has a tag.
  // This needs to be fixed in getComponentName so that it relies on the tag
  // instead.

  fiber.type = REACT_SUSPENSE_TYPE;
  fiber.elementType = REACT_SUSPENSE_TYPE;
  fiber.expirationTime = expirationTime;
  return fiber;
}
function createFiberFromSuspenseList(pendingProps, mode, expirationTime, key) {
  var fiber = createFiber(SuspenseListComponent, pendingProps, key, mode);

  {
    // TODO: The SuspenseListComponent fiber shouldn't have a type. It has a tag.
    // This needs to be fixed in getComponentName so that it relies on the tag
    // instead.
    fiber.type = REACT_SUSPENSE_LIST_TYPE;
  }

  fiber.elementType = REACT_SUSPENSE_LIST_TYPE;
  fiber.expirationTime = expirationTime;
  return fiber;
}
function createFiberFromText(content, mode, expirationTime) {
  var fiber = createFiber(HostText, content, null, mode);
  fiber.expirationTime = expirationTime;
  return fiber;
}
function createFiberFromHostInstanceForDeletion() {
  var fiber = createFiber(HostComponent, null, null, NoMode); // TODO: These should not need a type.

  fiber.elementType = 'DELETED';
  fiber.type = 'DELETED';
  return fiber;
}
function createFiberFromPortal(portal, mode, expirationTime) {
  var pendingProps = portal.children !== null ? portal.children : [];
  var fiber = createFiber(HostPortal, pendingProps, portal.key, mode);
  fiber.expirationTime = expirationTime;
  fiber.stateNode = {
    containerInfo: portal.containerInfo,
    pendingChildren: null,
    // Used by persistent updates
    implementation: portal.implementation
  };
  return fiber;
} // Used for stashing WIP properties to replay failed work in DEV.

function assignFiberPropertiesInDEV(target, source) {
  if (target === null) {
    // This Fiber's initial properties will always be overwritten.
    // We only use a Fiber to ensure the same hidden class so DEV isn't slow.
    target = createFiber(IndeterminateComponent, null, null, NoMode);
  } // This is intentionally written as a list of all properties.
  // We tried to use Object.assign() instead but this is called in
  // the hottest path, and Object.assign() was too slow:
  // https://github.com/facebook/react/issues/12502
  // This code is DEV-only so size is not a concern.


  target.tag = source.tag;
  target.key = source.key;
  target.elementType = source.elementType;
  target.type = source.type;
  target.stateNode = source.stateNode;
  target.return = source.return;
  target.child = source.child;
  target.sibling = source.sibling;
  target.index = source.index;
  target.ref = source.ref;
  target.pendingProps = source.pendingProps;
  target.memoizedProps = source.memoizedProps;
  target.updateQueue = source.updateQueue;
  target.memoizedState = source.memoizedState;
  target.dependencies = source.dependencies;
  target.mode = source.mode;
  target.effectTag = source.effectTag;
  target.nextEffect = source.nextEffect;
  target.firstEffect = source.firstEffect;
  target.lastEffect = source.lastEffect;
  target.expirationTime = source.expirationTime;
  target.childExpirationTime = source.childExpirationTime;
  target.alternate = source.alternate;

  {
    target.actualDuration = source.actualDuration;
    target.actualStartTime = source.actualStartTime;
    target.selfBaseDuration = source.selfBaseDuration;
    target.treeBaseDuration = source.treeBaseDuration;
  }

  {
    target._debugID = source._debugID;
  }

  target._debugSource = source._debugSource;
  target._debugOwner = source._debugOwner;
  target._debugIsCurrentlyTiming = source._debugIsCurrentlyTiming;
  target._debugNeedsRemount = source._debugNeedsRemount;
  target._debugHookTypes = source._debugHookTypes;
  return target;
}

function FiberRootNode(containerInfo, tag, hydrate) {
  this.tag = tag;
  this.current = null;
  this.containerInfo = containerInfo;
  this.pendingChildren = null;
  this.pingCache = null;
  this.finishedExpirationTime = NoWork;
  this.finishedWork = null;
  this.timeoutHandle = noTimeout;
  this.context = null;
  this.pendingContext = null;
  this.hydrate = hydrate;
  this.callbackNode = null;
  this.callbackPriority = NoPriority;
  this.firstPendingTime = NoWork;
  this.firstSuspendedTime = NoWork;
  this.lastSuspendedTime = NoWork;
  this.nextKnownPendingLevel = NoWork;
  this.lastPingedTime = NoWork;
  this.lastExpiredTime = NoWork;

  {
    this.interactionThreadID = tracing.unstable_getThreadID();
    this.memoizedInteractions = new Set();
    this.pendingInteractionMap = new Map();
  }
}

function createFiberRoot(containerInfo, tag, hydrate, hydrationCallbacks) {
  var root = new FiberRootNode(containerInfo, tag, hydrate);
  // stateNode is any.


  var uninitializedFiber = createHostRootFiber(tag);
  root.current = uninitializedFiber;
  uninitializedFiber.stateNode = root;
  initializeUpdateQueue(uninitializedFiber);
  return root;
}
function isRootSuspendedAtTime(root, expirationTime) {
  var firstSuspendedTime = root.firstSuspendedTime;
  var lastSuspendedTime = root.lastSuspendedTime;
  return firstSuspendedTime !== NoWork && firstSuspendedTime >= expirationTime && lastSuspendedTime <= expirationTime;
}
function markRootSuspendedAtTime(root, expirationTime) {
  var firstSuspendedTime = root.firstSuspendedTime;
  var lastSuspendedTime = root.lastSuspendedTime;

  if (firstSuspendedTime < expirationTime) {
    root.firstSuspendedTime = expirationTime;
  }

  if (lastSuspendedTime > expirationTime || firstSuspendedTime === NoWork) {
    root.lastSuspendedTime = expirationTime;
  }

  if (expirationTime <= root.lastPingedTime) {
    root.lastPingedTime = NoWork;
  }

  if (expirationTime <= root.lastExpiredTime) {
    root.lastExpiredTime = NoWork;
  }
}
function markRootUpdatedAtTime(root, expirationTime) {
  // Update the range of pending times
  var firstPendingTime = root.firstPendingTime;

  if (expirationTime > firstPendingTime) {
    root.firstPendingTime = expirationTime;
  } // Update the range of suspended times. Treat everything lower priority or
  // equal to this update as unsuspended.


  var firstSuspendedTime = root.firstSuspendedTime;

  if (firstSuspendedTime !== NoWork) {
    if (expirationTime >= firstSuspendedTime) {
      // The entire suspended range is now unsuspended.
      root.firstSuspendedTime = root.lastSuspendedTime = root.nextKnownPendingLevel = NoWork;
    } else if (expirationTime >= root.lastSuspendedTime) {
      root.lastSuspendedTime = expirationTime + 1;
    } // This is a pending level. Check if it's higher priority than the next
    // known pending level.


    if (expirationTime > root.nextKnownPendingLevel) {
      root.nextKnownPendingLevel = expirationTime;
    }
  }
}
function markRootFinishedAtTime(root, finishedExpirationTime, remainingExpirationTime) {
  // Update the range of pending times
  root.firstPendingTime = remainingExpirationTime; // Update the range of suspended times. Treat everything higher priority or
  // equal to this update as unsuspended.

  if (finishedExpirationTime <= root.lastSuspendedTime) {
    // The entire suspended range is now unsuspended.
    root.firstSuspendedTime = root.lastSuspendedTime = root.nextKnownPendingLevel = NoWork;
  } else if (finishedExpirationTime <= root.firstSuspendedTime) {
    // Part of the suspended range is now unsuspended. Narrow the range to
    // include everything between the unsuspended time (non-inclusive) and the
    // last suspended time.
    root.firstSuspendedTime = finishedExpirationTime - 1;
  }

  if (finishedExpirationTime <= root.lastPingedTime) {
    // Clear the pinged time
    root.lastPingedTime = NoWork;
  }

  if (finishedExpirationTime <= root.lastExpiredTime) {
    // Clear the expired time
    root.lastExpiredTime = NoWork;
  }
}
function markRootExpiredAtTime(root, expirationTime) {
  var lastExpiredTime = root.lastExpiredTime;

  if (lastExpiredTime === NoWork || lastExpiredTime > expirationTime) {
    root.lastExpiredTime = expirationTime;
  }
}

var didWarnAboutNestedUpdates;
var didWarnAboutFindNodeInStrictMode;

{
  didWarnAboutNestedUpdates = false;
  didWarnAboutFindNodeInStrictMode = {};
}

function getContextForSubtree(parentComponent) {
  if (!parentComponent) {
    return emptyContextObject;
  }

  var fiber = get(parentComponent);
  var parentContext = findCurrentUnmaskedContext(fiber);

  if (fiber.tag === ClassComponent) {
    var Component = fiber.type;

    if (isContextProvider(Component)) {
      return processChildContext(fiber, Component, parentContext);
    }
  }

  return parentContext;
}

function findHostInstanceWithWarning(component, methodName) {
  {
    var fiber = get(component);

    if (fiber === undefined) {
      if (typeof component.render === 'function') {
        {
          {
            throw Error( "Unable to find node on an unmounted component." );
          }
        }
      } else {
        {
          {
            throw Error( "Argument appears to not be a ReactComponent. Keys: " + Object.keys(component) );
          }
        }
      }
    }

    var hostFiber = findCurrentHostFiber(fiber);

    if (hostFiber === null) {
      return null;
    }

    if (hostFiber.mode & StrictMode) {
      var componentName = getComponentName(fiber.type) || 'Component';

      if (!didWarnAboutFindNodeInStrictMode[componentName]) {
        didWarnAboutFindNodeInStrictMode[componentName] = true;

        if (fiber.mode & StrictMode) {
          error('%s is deprecated in StrictMode. ' + '%s was passed an instance of %s which is inside StrictMode. ' + 'Instead, add a ref directly to the element you want to reference. ' + 'Learn more about using refs safely here: ' + 'https://fb.me/react-strict-mode-find-node%s', methodName, methodName, componentName, getStackByFiberInDevAndProd(hostFiber));
        } else {
          error('%s is deprecated in StrictMode. ' + '%s was passed an instance of %s which renders StrictMode children. ' + 'Instead, add a ref directly to the element you want to reference. ' + 'Learn more about using refs safely here: ' + 'https://fb.me/react-strict-mode-find-node%s', methodName, methodName, componentName, getStackByFiberInDevAndProd(hostFiber));
        }
      }
    }

    return hostFiber.stateNode;
  }
}

function createContainer(containerInfo, tag, hydrate, hydrationCallbacks) {
  return createFiberRoot(containerInfo, tag, hydrate);
}
function updateContainer(element, container, parentComponent, callback) {
  {
    onScheduleRoot(container, element);
  }

  var current$1 = container.current;
  var currentTime = requestCurrentTimeForUpdate();

  {
    // $FlowExpectedError - jest isn't a global, and isn't recognized outside of tests
    if ('undefined' !== typeof jest) {
      warnIfUnmockedScheduler(current$1);
      warnIfNotScopedWithMatchingAct(current$1);
    }
  }

  var suspenseConfig = requestCurrentSuspenseConfig();
  var expirationTime = computeExpirationForFiber(currentTime, current$1, suspenseConfig);
  var context = getContextForSubtree(parentComponent);

  if (container.context === null) {
    container.context = context;
  } else {
    container.pendingContext = context;
  }

  {
    if (isRendering && current !== null && !didWarnAboutNestedUpdates) {
      didWarnAboutNestedUpdates = true;

      error('Render methods should be a pure function of props and state; ' + 'triggering nested component updates from render is not allowed. ' + 'If necessary, trigger nested updates in componentDidUpdate.\n\n' + 'Check the render method of %s.', getComponentName(current.type) || 'Unknown');
    }
  }

  var update = createUpdate(expirationTime, suspenseConfig); // Caution: React DevTools currently depends on this property
  // being called "element".

  update.payload = {
    element: element
  };
  callback = callback === undefined ? null : callback;

  if (callback !== null) {
    {
      if (typeof callback !== 'function') {
        error('render(...): Expected the last optional `callback` argument to be a ' + 'function. Instead received: %s.', callback);
      }
    }

    update.callback = callback;
  }

  enqueueUpdate(current$1, update);
  scheduleWork(current$1, expirationTime);
  return expirationTime;
}
function getPublicRootInstance(container) {
  var containerFiber = container.current;

  if (!containerFiber.child) {
    return null;
  }

  switch (containerFiber.child.tag) {
    case HostComponent:
      return getPublicInstance(containerFiber.child.stateNode);

    default:
      return containerFiber.child.stateNode;
  }
}

function markRetryTimeImpl(fiber, retryTime) {
  var suspenseState = fiber.memoizedState;

  if (suspenseState !== null && suspenseState.dehydrated !== null) {
    if (suspenseState.retryTime < retryTime) {
      suspenseState.retryTime = retryTime;
    }
  }
} // Increases the priority of thennables when they resolve within this boundary.


function markRetryTimeIfNotHydrated(fiber, retryTime) {
  markRetryTimeImpl(fiber, retryTime);
  var alternate = fiber.alternate;

  if (alternate) {
    markRetryTimeImpl(alternate, retryTime);
  }
}

function attemptUserBlockingHydration$1(fiber) {
  if (fiber.tag !== SuspenseComponent) {
    // We ignore HostRoots here because we can't increase
    // their priority and they should not suspend on I/O,
    // since you have to wrap anything that might suspend in
    // Suspense.
    return;
  }

  var expTime = computeInteractiveExpiration(requestCurrentTimeForUpdate());
  scheduleWork(fiber, expTime);
  markRetryTimeIfNotHydrated(fiber, expTime);
}
function attemptContinuousHydration$1(fiber) {
  if (fiber.tag !== SuspenseComponent) {
    // We ignore HostRoots here because we can't increase
    // their priority and they should not suspend on I/O,
    // since you have to wrap anything that might suspend in
    // Suspense.
    return;
  }

  scheduleWork(fiber, ContinuousHydration);
  markRetryTimeIfNotHydrated(fiber, ContinuousHydration);
}
function attemptHydrationAtCurrentPriority$1(fiber) {
  if (fiber.tag !== SuspenseComponent) {
    // We ignore HostRoots here because we can't increase
    // their priority other than synchronously flush it.
    return;
  }

  var currentTime = requestCurrentTimeForUpdate();
  var expTime = computeExpirationForFiber(currentTime, fiber, null);
  scheduleWork(fiber, expTime);
  markRetryTimeIfNotHydrated(fiber, expTime);
}
function findHostInstanceWithNoPortals(fiber) {
  var hostFiber = findCurrentHostFiberWithNoPortals(fiber);

  if (hostFiber === null) {
    return null;
  }

  if (hostFiber.tag === FundamentalComponent) {
    return hostFiber.stateNode.instance;
  }

  return hostFiber.stateNode;
}

var shouldSuspendImpl = function (fiber) {
  return false;
};

function shouldSuspend(fiber) {
  return shouldSuspendImpl(fiber);
}
var overrideHookState = null;
var overrideProps = null;
var scheduleUpdate = null;
var setSuspenseHandler = null;

{
  var copyWithSetImpl = function (obj, path, idx, value) {
    if (idx >= path.length) {
      return value;
    }

    var key = path[idx];
    var updated = Array.isArray(obj) ? obj.slice() : _assign({}, obj); // $FlowFixMe number or string is fine here

    updated[key] = copyWithSetImpl(obj[key], path, idx + 1, value);
    return updated;
  };

  var copyWithSet = function (obj, path, value) {
    return copyWithSetImpl(obj, path, 0, value);
  }; // Support DevTools editable values for useState and useReducer.


  overrideHookState = function (fiber, id, path, value) {
    // For now, the "id" of stateful hooks is just the stateful hook index.
    // This may change in the future with e.g. nested hooks.
    var currentHook = fiber.memoizedState;

    while (currentHook !== null && id > 0) {
      currentHook = currentHook.next;
      id--;
    }

    if (currentHook !== null) {
      var newState = copyWithSet(currentHook.memoizedState, path, value);
      currentHook.memoizedState = newState;
      currentHook.baseState = newState; // We aren't actually adding an update to the queue,
      // because there is no update we can add for useReducer hooks that won't trigger an error.
      // (There's no appropriate action type for DevTools overrides.)
      // As a result though, React will see the scheduled update as a noop and bailout.
      // Shallow cloning props works as a workaround for now to bypass the bailout check.

      fiber.memoizedProps = _assign({}, fiber.memoizedProps);
      scheduleWork(fiber, Sync);
    }
  }; // Support DevTools props for function components, forwardRef, memo, host components, etc.


  overrideProps = function (fiber, path, value) {
    fiber.pendingProps = copyWithSet(fiber.memoizedProps, path, value);

    if (fiber.alternate) {
      fiber.alternate.pendingProps = fiber.pendingProps;
    }

    scheduleWork(fiber, Sync);
  };

  scheduleUpdate = function (fiber) {
    scheduleWork(fiber, Sync);
  };

  setSuspenseHandler = function (newShouldSuspendImpl) {
    shouldSuspendImpl = newShouldSuspendImpl;
  };
}

function injectIntoDevTools(devToolsConfig) {
  var findFiberByHostInstance = devToolsConfig.findFiberByHostInstance;
  var ReactCurrentDispatcher = ReactSharedInternals.ReactCurrentDispatcher;
  return injectInternals(_assign({}, devToolsConfig, {
    overrideHookState: overrideHookState,
    overrideProps: overrideProps,
    setSuspenseHandler: setSuspenseHandler,
    scheduleUpdate: scheduleUpdate,
    currentDispatcherRef: ReactCurrentDispatcher,
    findHostInstanceByFiber: function (fiber) {
      var hostFiber = findCurrentHostFiber(fiber);

      if (hostFiber === null) {
        return null;
      }

      return hostFiber.stateNode;
    },
    findFiberByHostInstance: function (instance) {
      if (!findFiberByHostInstance) {
        // Might not be implemented by the renderer.
        return null;
      }

      return findFiberByHostInstance(instance);
    },
    // React Refresh
    findHostInstancesForRefresh:  findHostInstancesForRefresh ,
    scheduleRefresh:  scheduleRefresh ,
    scheduleRoot:  scheduleRoot ,
    setRefreshHandler:  setRefreshHandler ,
    // Enables DevTools to append owner stacks to error messages in DEV mode.
    getCurrentFiber:  function () {
      return current;
    }
  }));
}
var IsSomeRendererActing$1 = ReactSharedInternals.IsSomeRendererActing;

function ReactDOMRoot(container, options) {
  this._internalRoot = createRootImpl(container, ConcurrentRoot, options);
}

function ReactDOMBlockingRoot(container, tag, options) {
  this._internalRoot = createRootImpl(container, tag, options);
}

ReactDOMRoot.prototype.render = ReactDOMBlockingRoot.prototype.render = function (children) {
  var root = this._internalRoot;

  {
    if (typeof arguments[1] === 'function') {
      error('render(...): does not support the second callback argument. ' + 'To execute a side effect after rendering, declare it in a component body with useEffect().');
    }

    var container = root.containerInfo;

    if (container.nodeType !== COMMENT_NODE) {
      var hostInstance = findHostInstanceWithNoPortals(root.current);

      if (hostInstance) {
        if (hostInstance.parentNode !== container) {
          error('render(...): It looks like the React-rendered content of the ' + 'root container was removed without using React. This is not ' + 'supported and will cause errors. Instead, call ' + "root.unmount() to empty a root's container.");
        }
      }
    }
  }

  updateContainer(children, root, null, null);
};

ReactDOMRoot.prototype.unmount = ReactDOMBlockingRoot.prototype.unmount = function () {
  {
    if (typeof arguments[0] === 'function') {
      error('unmount(...): does not support a callback argument. ' + 'To execute a side effect after rendering, declare it in a component body with useEffect().');
    }
  }

  var root = this._internalRoot;
  var container = root.containerInfo;
  updateContainer(null, root, null, function () {
    unmarkContainerAsRoot(container);
  });
};

function createRootImpl(container, tag, options) {
  // Tag is either LegacyRoot or Concurrent Root
  var hydrate = options != null && options.hydrate === true;
  var hydrationCallbacks = options != null && options.hydrationOptions || null;
  var root = createContainer(container, tag, hydrate);
  markContainerAsRoot(root.current, container);

  if (hydrate && tag !== LegacyRoot) {
    var doc = container.nodeType === DOCUMENT_NODE ? container : container.ownerDocument;
    eagerlyTrapReplayableEvents(container, doc);
  }

  return root;
}
function createLegacyRoot(container, options) {
  return new ReactDOMBlockingRoot(container, LegacyRoot, options);
}
function isValidContainer(node) {
  return !!(node && (node.nodeType === ELEMENT_NODE || node.nodeType === DOCUMENT_NODE || node.nodeType === DOCUMENT_FRAGMENT_NODE || node.nodeType === COMMENT_NODE && node.nodeValue === ' react-mount-point-unstable '));
}

var ReactCurrentOwner$3 = ReactSharedInternals.ReactCurrentOwner;
var topLevelUpdateWarnings;
var warnedAboutHydrateAPI = false;

{
  topLevelUpdateWarnings = function (container) {
    if (container._reactRootContainer && container.nodeType !== COMMENT_NODE) {
      var hostInstance = findHostInstanceWithNoPortals(container._reactRootContainer._internalRoot.current);

      if (hostInstance) {
        if (hostInstance.parentNode !== container) {
          error('render(...): It looks like the React-rendered content of this ' + 'container was removed without using React. This is not ' + 'supported and will cause errors. Instead, call ' + 'ReactDOM.unmountComponentAtNode to empty a container.');
        }
      }
    }

    var isRootRenderedBySomeReact = !!container._reactRootContainer;
    var rootEl = getReactRootElementInContainer(container);
    var hasNonRootReactChild = !!(rootEl && getInstanceFromNode$1(rootEl));

    if (hasNonRootReactChild && !isRootRenderedBySomeReact) {
      error('render(...): Replacing React-rendered children with a new root ' + 'component. If you intended to update the children of this node, ' + 'you should instead have the existing children update their state ' + 'and render the new components instead of calling ReactDOM.render.');
    }

    if (container.nodeType === ELEMENT_NODE && container.tagName && container.tagName.toUpperCase() === 'BODY') {
      error('render(): Rendering components directly into document.body is ' + 'discouraged, since its children are often manipulated by third-party ' + 'scripts and browser extensions. This may lead to subtle ' + 'reconciliation issues. Try rendering into a container element created ' + 'for your app.');
    }
  };
}

function getReactRootElementInContainer(container) {
  if (!container) {
    return null;
  }

  if (container.nodeType === DOCUMENT_NODE) {
    return container.documentElement;
  } else {
    return container.firstChild;
  }
}

function shouldHydrateDueToLegacyHeuristic(container) {
  var rootElement = getReactRootElementInContainer(container);
  return !!(rootElement && rootElement.nodeType === ELEMENT_NODE && rootElement.hasAttribute(ROOT_ATTRIBUTE_NAME));
}

function legacyCreateRootFromDOMContainer(container, forceHydrate) {
  var shouldHydrate = forceHydrate || shouldHydrateDueToLegacyHeuristic(container); // First clear any existing content.

  if (!shouldHydrate) {
    var warned = false;
    var rootSibling;

    while (rootSibling = container.lastChild) {
      {
        if (!warned && rootSibling.nodeType === ELEMENT_NODE && rootSibling.hasAttribute(ROOT_ATTRIBUTE_NAME)) {
          warned = true;

          error('render(): Target node has markup rendered by React, but there ' + 'are unrelated nodes as well. This is most commonly caused by ' + 'white-space inserted around server-rendered markup.');
        }
      }

      container.removeChild(rootSibling);
    }
  }

  {
    if (shouldHydrate && !forceHydrate && !warnedAboutHydrateAPI) {
      warnedAboutHydrateAPI = true;

      warn('render(): Calling ReactDOM.render() to hydrate server-rendered markup ' + 'will stop working in React v17. Replace the ReactDOM.render() call ' + 'with ReactDOM.hydrate() if you want React to attach to the server HTML.');
    }
  }

  return createLegacyRoot(container, shouldHydrate ? {
    hydrate: true
  } : undefined);
}

function warnOnInvalidCallback$1(callback, callerName) {
  {
    if (callback !== null && typeof callback !== 'function') {
      error('%s(...): Expected the last optional `callback` argument to be a ' + 'function. Instead received: %s.', callerName, callback);
    }
  }
}

function legacyRenderSubtreeIntoContainer(parentComponent, children, container, forceHydrate, callback) {
  {
    topLevelUpdateWarnings(container);
    warnOnInvalidCallback$1(callback === undefined ? null : callback, 'render');
  } // TODO: Without `any` type, Flow says "Property cannot be accessed on any
  // member of intersection type." Whyyyyyy.


  var root = container._reactRootContainer;
  var fiberRoot;

  if (!root) {
    // Initial mount
    root = container._reactRootContainer = legacyCreateRootFromDOMContainer(container, forceHydrate);
    fiberRoot = root._internalRoot;

    if (typeof callback === 'function') {
      var originalCallback = callback;

      callback = function () {
        var instance = getPublicRootInstance(fiberRoot);
        originalCallback.call(instance);
      };
    } // Initial mount should not be batched.


    unbatchedUpdates(function () {
      updateContainer(children, fiberRoot, parentComponent, callback);
    });
  } else {
    fiberRoot = root._internalRoot;

    if (typeof callback === 'function') {
      var _originalCallback = callback;

      callback = function () {
        var instance = getPublicRootInstance(fiberRoot);

        _originalCallback.call(instance);
      };
    } // Update


    updateContainer(children, fiberRoot, parentComponent, callback);
  }

  return getPublicRootInstance(fiberRoot);
}

function findDOMNode(componentOrElement) {
  {
    var owner = ReactCurrentOwner$3.current;

    if (owner !== null && owner.stateNode !== null) {
      var warnedAboutRefsInRender = owner.stateNode._warnedAboutRefsInRender;

      if (!warnedAboutRefsInRender) {
        error('%s is accessing findDOMNode inside its render(). ' + 'render() should be a pure function of props and state. It should ' + 'never access something that requires stale data from the previous ' + 'render, such as refs. Move this logic to componentDidMount and ' + 'componentDidUpdate instead.', getComponentName(owner.type) || 'A component');
      }

      owner.stateNode._warnedAboutRefsInRender = true;
    }
  }

  if (componentOrElement == null) {
    return null;
  }

  if (componentOrElement.nodeType === ELEMENT_NODE) {
    return componentOrElement;
  }

  {
    return findHostInstanceWithWarning(componentOrElement, 'findDOMNode');
  }
}
function hydrate(element, container, callback) {
  if (!isValidContainer(container)) {
    {
      throw Error( "Target container is not a DOM element." );
    }
  }

  {
    var isModernRoot = isContainerMarkedAsRoot(container) && container._reactRootContainer === undefined;

    if (isModernRoot) {
      error('You are calling ReactDOM.hydrate() on a container that was previously ' + 'passed to ReactDOM.createRoot(). This is not supported. ' + 'Did you mean to call createRoot(container, {hydrate: true}).render(element)?');
    }
  } // TODO: throw or warn if we couldn't hydrate?


  return legacyRenderSubtreeIntoContainer(null, element, container, true, callback);
}
function render(element, container, callback) {
  if (!isValidContainer(container)) {
    {
      throw Error( "Target container is not a DOM element." );
    }
  }

  {
    var isModernRoot = isContainerMarkedAsRoot(container) && container._reactRootContainer === undefined;

    if (isModernRoot) {
      error('You are calling ReactDOM.render() on a container that was previously ' + 'passed to ReactDOM.createRoot(). This is not supported. ' + 'Did you mean to call root.render(element)?');
    }
  }

  return legacyRenderSubtreeIntoContainer(null, element, container, false, callback);
}
function unstable_renderSubtreeIntoContainer(parentComponent, element, containerNode, callback) {
  if (!isValidContainer(containerNode)) {
    {
      throw Error( "Target container is not a DOM element." );
    }
  }

  if (!(parentComponent != null && has(parentComponent))) {
    {
      throw Error( "parentComponent must be a valid React Component" );
    }
  }

  return legacyRenderSubtreeIntoContainer(parentComponent, element, containerNode, false, callback);
}
function unmountComponentAtNode(container) {
  if (!isValidContainer(container)) {
    {
      throw Error( "unmountComponentAtNode(...): Target container is not a DOM element." );
    }
  }

  {
    var isModernRoot = isContainerMarkedAsRoot(container) && container._reactRootContainer === undefined;

    if (isModernRoot) {
      error('You are calling ReactDOM.unmountComponentAtNode() on a container that was previously ' + 'passed to ReactDOM.createRoot(). This is not supported. Did you mean to call root.unmount()?');
    }
  }

  if (container._reactRootContainer) {
    {
      var rootEl = getReactRootElementInContainer(container);
      var renderedByDifferentReact = rootEl && !getInstanceFromNode$1(rootEl);

      if (renderedByDifferentReact) {
        error("unmountComponentAtNode(): The node you're attempting to unmount " + 'was rendered by another copy of React.');
      }
    } // Unmount should not be batched.


    unbatchedUpdates(function () {
      legacyRenderSubtreeIntoContainer(null, null, container, false, function () {
        // $FlowFixMe This should probably use `delete container._reactRootContainer`
        container._reactRootContainer = null;
        unmarkContainerAsRoot(container);
      });
    }); // If you call unmountComponentAtNode twice in quick succession, you'll
    // get `true` twice. That's probably fine?

    return true;
  } else {
    {
      var _rootEl = getReactRootElementInContainer(container);

      var hasNonRootReactChild = !!(_rootEl && getInstanceFromNode$1(_rootEl)); // Check if the container itself is a React root node.

      var isContainerReactRoot = container.nodeType === ELEMENT_NODE && isValidContainer(container.parentNode) && !!container.parentNode._reactRootContainer;

      if (hasNonRootReactChild) {
        error("unmountComponentAtNode(): The node you're attempting to unmount " + 'was rendered by React and is not a top-level container. %s', isContainerReactRoot ? 'You may have accidentally passed in a React root node instead ' + 'of its container.' : 'Instead, have the parent component update its state and ' + 'rerender in order to remove this component.');
      }
    }

    return false;
  }
}

function createPortal(children, containerInfo, // TODO: figure out the API for cross-renderer implementation.
implementation) {
  var key = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : null;
  return {
    // This tag allow us to uniquely identify this as a React Portal
    $$typeof: REACT_PORTAL_TYPE,
    key: key == null ? null : '' + key,
    children: children,
    containerInfo: containerInfo,
    implementation: implementation
  };
}

var ReactVersion = '16.14.0';

setAttemptUserBlockingHydration(attemptUserBlockingHydration$1);
setAttemptContinuousHydration(attemptContinuousHydration$1);
setAttemptHydrationAtCurrentPriority(attemptHydrationAtCurrentPriority$1);
var didWarnAboutUnstableCreatePortal = false;

{
  if (typeof Map !== 'function' || // $FlowIssue Flow incorrectly thinks Map has no prototype
  Map.prototype == null || typeof Map.prototype.forEach !== 'function' || typeof Set !== 'function' || // $FlowIssue Flow incorrectly thinks Set has no prototype
  Set.prototype == null || typeof Set.prototype.clear !== 'function' || typeof Set.prototype.forEach !== 'function') {
    error('React depends on Map and Set built-in types. Make sure that you load a ' + 'polyfill in older browsers. https://fb.me/react-polyfills');
  }
}

setRestoreImplementation(restoreControlledState$3);
setBatchingImplementation(batchedUpdates$1, discreteUpdates$1, flushDiscreteUpdates, batchedEventUpdates$1);

function createPortal$1(children, container) {
  var key = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;

  if (!isValidContainer(container)) {
    {
      throw Error( "Target container is not a DOM element." );
    }
  } // TODO: pass ReactDOM portal implementation as third argument
  // $FlowFixMe The Flow type is opaque but there's no way to actually create it.


  return createPortal(children, container, null, key);
}

function renderSubtreeIntoContainer(parentComponent, element, containerNode, callback) {

  return unstable_renderSubtreeIntoContainer(parentComponent, element, containerNode, callback);
}

function unstable_createPortal(children, container) {
  var key = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;

  {
    if (!didWarnAboutUnstableCreatePortal) {
      didWarnAboutUnstableCreatePortal = true;

      warn('The ReactDOM.unstable_createPortal() alias has been deprecated, ' + 'and will be removed in React 17+. Update your code to use ' + 'ReactDOM.createPortal() instead. It has the exact same API, ' + 'but without the "unstable_" prefix.');
    }
  }

  return createPortal$1(children, container, key);
}

var Internals = {
  // Keep in sync with ReactDOMUnstableNativeDependencies.js
  // ReactTestUtils.js, and ReactTestUtilsAct.js. This is an array for better minification.
  Events: [getInstanceFromNode$1, getNodeFromInstance$1, getFiberCurrentPropsFromNode$1, injectEventPluginsByName, eventNameDispatchConfigs, accumulateTwoPhaseDispatches, accumulateDirectDispatches, enqueueStateRestore, restoreStateIfNeeded, dispatchEvent, runEventsInBatch, flushPassiveEffects, IsThisRendererActing]
};
var foundDevTools = injectIntoDevTools({
  findFiberByHostInstance: getClosestInstanceFromNode,
  bundleType:  1 ,
  version: ReactVersion,
  rendererPackageName: 'react-dom'
});

{
  if (!foundDevTools && canUseDOM && window.top === window.self) {
    // If we're in Chrome or Firefox, provide a download link if not installed.
    if (navigator.userAgent.indexOf('Chrome') > -1 && navigator.userAgent.indexOf('Edge') === -1 || navigator.userAgent.indexOf('Firefox') > -1) {
      var protocol = window.location.protocol; // Don't warn in exotic cases like chrome-extension://.

      if (/^(https?|file):$/.test(protocol)) {
        // eslint-disable-next-line react-internal/no-production-logging
        console.info('%cDownload the React DevTools ' + 'for a better development experience: ' + 'https://fb.me/react-devtools' + (protocol === 'file:' ? '\nYou might need to use a local HTTP server (instead of file://): ' + 'https://fb.me/react-devtools-faq' : ''), 'font-weight:bold');
      }
    }
  }
}

exports.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED = Internals;
exports.createPortal = createPortal$1;
exports.findDOMNode = findDOMNode;
exports.flushSync = flushSync;
exports.hydrate = hydrate;
exports.render = render;
exports.unmountComponentAtNode = unmountComponentAtNode;
exports.unstable_batchedUpdates = batchedUpdates$1;
exports.unstable_createPortal = unstable_createPortal;
exports.unstable_renderSubtreeIntoContainer = renderSubtreeIntoContainer;
exports.version = ReactVersion;
  })();
}


/***/ }),
/* 57 */
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";


if ("MISSING_ENV_VAR".NODE_ENV === 'production') {
  module.exports = __webpack_require__(58);
} else {
  module.exports = __webpack_require__(59);
}


/***/ }),
/* 58 */
/***/ ((__unused_webpack_module, exports) => {

"use strict";
/** @license React v0.19.1
 * scheduler-tracing.production.min.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */

var b=0;exports.__interactionsRef=null;exports.__subscriberRef=null;exports.unstable_clear=function(a){return a()};exports.unstable_getCurrent=function(){return null};exports.unstable_getThreadID=function(){return++b};exports.unstable_subscribe=function(){};exports.unstable_trace=function(a,d,c){return c()};exports.unstable_unsubscribe=function(){};exports.unstable_wrap=function(a){return a};


/***/ }),
/* 59 */
/***/ ((__unused_webpack_module, exports) => {

"use strict";
/** @license React v0.19.1
 * scheduler-tracing.development.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */





if ("MISSING_ENV_VAR".NODE_ENV !== "production") {
  (function() {
'use strict';

var DEFAULT_THREAD_ID = 0; // Counters used to generate unique IDs.

var interactionIDCounter = 0;
var threadIDCounter = 0; // Set of currently traced interactions.
// Interactions "stack"–
// Meaning that newly traced interactions are appended to the previously active set.
// When an interaction goes out of scope, the previous set (if any) is restored.

exports.__interactionsRef = null; // Listener(s) to notify when interactions begin and end.

exports.__subscriberRef = null;

{
  exports.__interactionsRef = {
    current: new Set()
  };
  exports.__subscriberRef = {
    current: null
  };
}
function unstable_clear(callback) {

  var prevInteractions = exports.__interactionsRef.current;
  exports.__interactionsRef.current = new Set();

  try {
    return callback();
  } finally {
    exports.__interactionsRef.current = prevInteractions;
  }
}
function unstable_getCurrent() {
  {
    return exports.__interactionsRef.current;
  }
}
function unstable_getThreadID() {
  return ++threadIDCounter;
}
function unstable_trace(name, timestamp, callback) {
  var threadID = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : DEFAULT_THREAD_ID;

  var interaction = {
    __count: 1,
    id: interactionIDCounter++,
    name: name,
    timestamp: timestamp
  };
  var prevInteractions = exports.__interactionsRef.current; // Traced interactions should stack/accumulate.
  // To do that, clone the current interactions.
  // The previous set will be restored upon completion.

  var interactions = new Set(prevInteractions);
  interactions.add(interaction);
  exports.__interactionsRef.current = interactions;
  var subscriber = exports.__subscriberRef.current;
  var returnValue;

  try {
    if (subscriber !== null) {
      subscriber.onInteractionTraced(interaction);
    }
  } finally {
    try {
      if (subscriber !== null) {
        subscriber.onWorkStarted(interactions, threadID);
      }
    } finally {
      try {
        returnValue = callback();
      } finally {
        exports.__interactionsRef.current = prevInteractions;

        try {
          if (subscriber !== null) {
            subscriber.onWorkStopped(interactions, threadID);
          }
        } finally {
          interaction.__count--; // If no async work was scheduled for this interaction,
          // Notify subscribers that it's completed.

          if (subscriber !== null && interaction.__count === 0) {
            subscriber.onInteractionScheduledWorkCompleted(interaction);
          }
        }
      }
    }
  }

  return returnValue;
}
function unstable_wrap(callback) {
  var threadID = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : DEFAULT_THREAD_ID;

  var wrappedInteractions = exports.__interactionsRef.current;
  var subscriber = exports.__subscriberRef.current;

  if (subscriber !== null) {
    subscriber.onWorkScheduled(wrappedInteractions, threadID);
  } // Update the pending async work count for the current interactions.
  // Update after calling subscribers in case of error.


  wrappedInteractions.forEach(function (interaction) {
    interaction.__count++;
  });
  var hasRun = false;

  function wrapped() {
    var prevInteractions = exports.__interactionsRef.current;
    exports.__interactionsRef.current = wrappedInteractions;
    subscriber = exports.__subscriberRef.current;

    try {
      var returnValue;

      try {
        if (subscriber !== null) {
          subscriber.onWorkStarted(wrappedInteractions, threadID);
        }
      } finally {
        try {
          returnValue = callback.apply(undefined, arguments);
        } finally {
          exports.__interactionsRef.current = prevInteractions;

          if (subscriber !== null) {
            subscriber.onWorkStopped(wrappedInteractions, threadID);
          }
        }
      }

      return returnValue;
    } finally {
      if (!hasRun) {
        // We only expect a wrapped function to be executed once,
        // But in the event that it's executed more than once–
        // Only decrement the outstanding interaction counts once.
        hasRun = true; // Update pending async counts for all wrapped interactions.
        // If this was the last scheduled async work for any of them,
        // Mark them as completed.

        wrappedInteractions.forEach(function (interaction) {
          interaction.__count--;

          if (subscriber !== null && interaction.__count === 0) {
            subscriber.onInteractionScheduledWorkCompleted(interaction);
          }
        });
      }
    }
  }

  wrapped.cancel = function cancel() {
    subscriber = exports.__subscriberRef.current;

    try {
      if (subscriber !== null) {
        subscriber.onWorkCanceled(wrappedInteractions, threadID);
      }
    } finally {
      // Update pending async counts for all wrapped interactions.
      // If this was the last scheduled async work for any of them,
      // Mark them as completed.
      wrappedInteractions.forEach(function (interaction) {
        interaction.__count--;

        if (subscriber && interaction.__count === 0) {
          subscriber.onInteractionScheduledWorkCompleted(interaction);
        }
      });
    }
  };

  return wrapped;
}

var subscribers = null;

{
  subscribers = new Set();
}

function unstable_subscribe(subscriber) {
  {
    subscribers.add(subscriber);

    if (subscribers.size === 1) {
      exports.__subscriberRef.current = {
        onInteractionScheduledWorkCompleted: onInteractionScheduledWorkCompleted,
        onInteractionTraced: onInteractionTraced,
        onWorkCanceled: onWorkCanceled,
        onWorkScheduled: onWorkScheduled,
        onWorkStarted: onWorkStarted,
        onWorkStopped: onWorkStopped
      };
    }
  }
}
function unstable_unsubscribe(subscriber) {
  {
    subscribers.delete(subscriber);

    if (subscribers.size === 0) {
      exports.__subscriberRef.current = null;
    }
  }
}

function onInteractionTraced(interaction) {
  var didCatchError = false;
  var caughtError = null;
  subscribers.forEach(function (subscriber) {
    try {
      subscriber.onInteractionTraced(interaction);
    } catch (error) {
      if (!didCatchError) {
        didCatchError = true;
        caughtError = error;
      }
    }
  });

  if (didCatchError) {
    throw caughtError;
  }
}

function onInteractionScheduledWorkCompleted(interaction) {
  var didCatchError = false;
  var caughtError = null;
  subscribers.forEach(function (subscriber) {
    try {
      subscriber.onInteractionScheduledWorkCompleted(interaction);
    } catch (error) {
      if (!didCatchError) {
        didCatchError = true;
        caughtError = error;
      }
    }
  });

  if (didCatchError) {
    throw caughtError;
  }
}

function onWorkScheduled(interactions, threadID) {
  var didCatchError = false;
  var caughtError = null;
  subscribers.forEach(function (subscriber) {
    try {
      subscriber.onWorkScheduled(interactions, threadID);
    } catch (error) {
      if (!didCatchError) {
        didCatchError = true;
        caughtError = error;
      }
    }
  });

  if (didCatchError) {
    throw caughtError;
  }
}

function onWorkStarted(interactions, threadID) {
  var didCatchError = false;
  var caughtError = null;
  subscribers.forEach(function (subscriber) {
    try {
      subscriber.onWorkStarted(interactions, threadID);
    } catch (error) {
      if (!didCatchError) {
        didCatchError = true;
        caughtError = error;
      }
    }
  });

  if (didCatchError) {
    throw caughtError;
  }
}

function onWorkStopped(interactions, threadID) {
  var didCatchError = false;
  var caughtError = null;
  subscribers.forEach(function (subscriber) {
    try {
      subscriber.onWorkStopped(interactions, threadID);
    } catch (error) {
      if (!didCatchError) {
        didCatchError = true;
        caughtError = error;
      }
    }
  });

  if (didCatchError) {
    throw caughtError;
  }
}

function onWorkCanceled(interactions, threadID) {
  var didCatchError = false;
  var caughtError = null;
  subscribers.forEach(function (subscriber) {
    try {
      subscriber.onWorkCanceled(interactions, threadID);
    } catch (error) {
      if (!didCatchError) {
        didCatchError = true;
        caughtError = error;
      }
    }
  });

  if (didCatchError) {
    throw caughtError;
  }
}

exports.unstable_clear = unstable_clear;
exports.unstable_getCurrent = unstable_getCurrent;
exports.unstable_getThreadID = unstable_getThreadID;
exports.unstable_subscribe = unstable_subscribe;
exports.unstable_trace = unstable_trace;
exports.unstable_unsubscribe = unstable_unsubscribe;
exports.unstable_wrap = unstable_wrap;
  })();
}


/***/ }),
/* 60 */
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "ReactElement": () => (/* binding */ ReactElement),
/* harmony export */   "getEvents": () => (/* binding */ getEvents),
/* harmony export */   "convert": () => (/* binding */ convert),
/* harmony export */   "getProps": () => (/* binding */ getProps),
/* harmony export */   "convertPropsToHtmlProps": () => (/* binding */ convertPropsToHtmlProps),
/* harmony export */   "remapHtmlPropsToHtmlProps": () => (/* binding */ remapHtmlPropsToHtmlProps),
/* harmony export */   "update": () => (/* binding */ update),
/* harmony export */   "unmount": () => (/* binding */ unmount),
/* harmony export */   "parseHtmlToReact": () => (/* binding */ parseHtmlToReact)
/* harmony export */ });
/* harmony import */ var core_js_modules_es_array_filter_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(61);
/* harmony import */ var core_js_modules_es_array_filter_js__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_array_filter_js__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var core_js_modules_es_array_for_each_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(75);
/* harmony import */ var core_js_modules_es_array_for_each_js__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_array_for_each_js__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var core_js_modules_es_array_map_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(78);
/* harmony import */ var core_js_modules_es_array_map_js__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_array_map_js__WEBPACK_IMPORTED_MODULE_2__);
/* harmony import */ var core_js_modules_es_array_reduce_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(79);
/* harmony import */ var core_js_modules_es_array_reduce_js__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_array_reduce_js__WEBPACK_IMPORTED_MODULE_3__);
/* harmony import */ var core_js_modules_es_function_name_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(82);
/* harmony import */ var core_js_modules_es_function_name_js__WEBPACK_IMPORTED_MODULE_4___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_function_name_js__WEBPACK_IMPORTED_MODULE_4__);
/* harmony import */ var core_js_modules_es_object_get_prototype_of_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(83);
/* harmony import */ var core_js_modules_es_object_get_prototype_of_js__WEBPACK_IMPORTED_MODULE_5___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_object_get_prototype_of_js__WEBPACK_IMPORTED_MODULE_5__);
/* harmony import */ var core_js_modules_es_object_keys_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(86);
/* harmony import */ var core_js_modules_es_object_keys_js__WEBPACK_IMPORTED_MODULE_6___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_object_keys_js__WEBPACK_IMPORTED_MODULE_6__);
/* harmony import */ var core_js_modules_es_object_set_prototype_of_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(88);
/* harmony import */ var core_js_modules_es_object_set_prototype_of_js__WEBPACK_IMPORTED_MODULE_7___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_object_set_prototype_of_js__WEBPACK_IMPORTED_MODULE_7__);
/* harmony import */ var core_js_modules_es_object_values_js__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(91);
/* harmony import */ var core_js_modules_es_object_values_js__WEBPACK_IMPORTED_MODULE_8___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_object_values_js__WEBPACK_IMPORTED_MODULE_8__);
/* harmony import */ var core_js_modules_es_regexp_exec_js__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(93);
/* harmony import */ var core_js_modules_es_regexp_exec_js__WEBPACK_IMPORTED_MODULE_9___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_regexp_exec_js__WEBPACK_IMPORTED_MODULE_9__);
/* harmony import */ var core_js_modules_es_string_replace_js__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(97);
/* harmony import */ var core_js_modules_es_string_replace_js__WEBPACK_IMPORTED_MODULE_10___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_string_replace_js__WEBPACK_IMPORTED_MODULE_10__);
/* harmony import */ var core_js_modules_web_dom_collections_for_each_js__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(103);
/* harmony import */ var core_js_modules_web_dom_collections_for_each_js__WEBPACK_IMPORTED_MODULE_11___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_web_dom_collections_for_each_js__WEBPACK_IMPORTED_MODULE_11__);
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(47);
/* harmony import */ var react_dom__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(45);
function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }














var _this4 = undefined;

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread(); }

function _nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _iterableToArray(iter) { if (typeof Symbol !== "undefined" && Symbol.iterator in Object(iter)) return Array.from(iter); }

function _arrayWithoutHoles(arr) { if (Array.isArray(arr)) return _arrayLikeToArray(arr); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _wrapNativeSuper(Class) { var _cache = typeof Map === "function" ? new Map() : undefined; _wrapNativeSuper = function _wrapNativeSuper(Class) { if (Class === null || !_isNativeFunction(Class)) return Class; if (typeof Class !== "function") { throw new TypeError("Super expression must either be null or a function"); } if (typeof _cache !== "undefined") { if (_cache.has(Class)) return _cache.get(Class); _cache.set(Class, Wrapper); } function Wrapper() { return _construct(Class, arguments, _getPrototypeOf(this).constructor); } Wrapper.prototype = Object.create(Class.prototype, { constructor: { value: Wrapper, enumerable: false, writable: true, configurable: true } }); return _setPrototypeOf(Wrapper, Class); }; return _wrapNativeSuper(Class); }

function _construct(Parent, args, Class) { if (_isNativeReflectConstruct()) { _construct = Reflect.construct; } else { _construct = function _construct(Parent, args, Class) { var a = [null]; a.push.apply(a, args); var Constructor = Function.bind.apply(Parent, a); var instance = new Constructor(); if (Class) _setPrototypeOf(instance, Class.prototype); return instance; }; } return _construct.apply(null, arguments); }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }

function _isNativeFunction(fn) { return Function.toString.call(fn).indexOf("[native code]") !== -1; }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }



var ReactElement = /*#__PURE__*/function (_HTMLElement) {
  _inherits(ReactElement, _HTMLElement);

  var _super = _createSuper(ReactElement);

  function ReactElement() {
    var _this;

    _classCallCheck(this, ReactElement);

    _this = _super.call(this);
    _this.observer = new MutationObserver(function () {
      return _this.update();
    });

    _this.observer.observe(_assertThisInitialized(_this), {
      attributes: true
    });

    return _this;
  }

  _createClass(ReactElement, [{
    key: "connectedCallback",
    value: function connectedCallback() {
      this._innerHTML = this.innerHTML;
      this.mount();
    }
  }, {
    key: "disconnectedCallback",
    value: function disconnectedCallback() {
      this.unmount();
      this.observer.disconnect();
    }
  }, {
    key: "update",
    value: function update() {
      this.unmount();
      this.mount();
    }
  }, {
    key: "unmount",
    value: function unmount() {
      (0,react_dom__WEBPACK_IMPORTED_MODULE_13__.unmountComponentAtNode)(this);
    }
  }, {
    key: "parseHtmlToReact",
    value: function parseHtmlToReact(html) {
      return html;
    }
  }, {
    key: "getProps",
    value: function getProps(attributes) {
      var _this2 = this;

      return _toConsumableArray(attributes).filter(function (attr) {
        return attr.name !== 'style';
      }).map(function (attr) {
        return _this2.convert(attr.name, attr.value);
      }).reduce(function (props, prop) {
        return _objectSpread(_objectSpread({}, props), {}, _defineProperty({}, prop.name, prop.value));
      }, {});
    }
  }, {
    key: "getEvents",
    value: function getEvents() {
      var _this3 = this;

      return Object.values(this.attributes).filter(function (key) {
        return /on([a-z].*)/.exec(key.name);
      }).reduce(function (events, ev) {
        return _objectSpread(_objectSpread({}, events), {}, _defineProperty({}, ev.name, function (args) {
          return _this3.dispatchEvent(new CustomEvent(ev.name, _objectSpread({}, args)));
        }));
      }, {});
    }
  }, {
    key: "convert",
    value: function convert(attrName, attrValue) {
      var value = attrValue;
      if (attrValue === 'true' || attrValue === 'false') value = attrValue === 'true';else if (!isNaN(attrValue) && attrValue !== '') value = +attrValue;else if (/^{.*}/.exec(attrValue)) value = JSON.parse(attrValue);
      return {
        name: attrName,
        value: value
      };
    }
  }]);

  return ReactElement;
}( /*#__PURE__*/_wrapNativeSuper(HTMLElement));
var getEvents = function getEvents() {
  return Object.values(props).filter(function (key) {
    return /on([a-z].*)/.exec(key.name);
  }).reduce(function (events, ev) {
    return _objectSpread(_objectSpread({}, events), {}, _defineProperty({}, ev.name, function (args) {
      return _this4.dispatchEvent(new CustomEvent(ev.name, _objectSpread({}, args)));
    }));
  }, {});
};
var convert = function convert(attrName, attrValue) {
  var value = attrValue.replace(/(\B[A-Z])/gm, "-$1").toLowerCase();
  if (attrValue === 'true' || attrValue === 'false') value = attrValue === 'true';else if (!isNaN(attrValue) && attrValue !== '') value = +attrValue;else if (/^{.*}/.exec(attrValue)) value = JSON.parse(attrValue);
  return {
    name: attrName,
    value: value
  };
};

var parseHtmlValue = function parseHtmlValue(attrValue) {
  var value = attrValue;

  try {
    if (typeof eval(attrValue) === 'function') value = function value() {
      return eval(attrValue).call();
    };
  } catch (_unused) {
    if (attrValue === 'true' || attrValue === 'false') value = attrValue === 'true';else if (!isNaN(attrValue) && attrValue !== '') value = +attrValue;else if (/^{.*}/.exec(attrValue)) value = JSON.parse(attrValue);
  }

  return value;
};

var getProps = function getProps(attributes) {
  if (attributes !== null) return _toConsumableArray(attributes).filter(function (attr) {
    return attr.name !== 'style';
  }).map(function (attr) {
    return convert(attr.name, attr.value);
  }).reduce(function (props, prop) {
    return _objectSpread(_objectSpread({}, props), {}, _defineProperty({}, prop.name, prop.value));
  }, {});
};
var convertPropsToHtmlProps = function convertPropsToHtmlProps(attributes) {
  var aux = {};
  Object.keys(attributes).map(function (k) {
    return _defineProperty({}, k.replace(/(\B[A-Z])/gm, "-$1").toLowerCase(), attributes[k]);
  }).forEach(function (attribute) {
    aux[Object.keys(attribute)] = attribute[Object.keys(attribute)];
  });
  return aux;
};
var remapHtmlPropsToHtmlProps = function remapHtmlPropsToHtmlProps(originalProps, propValues) {
  return Object.keys(originalProps).reduce(function (result, original) {
    var htmlProp = original.replace(/(\B[A-Z])/gm, "-$1").toLowerCase();
    return _objectSpread(_objectSpread({}, result), {}, _defineProperty({}, original, parseHtmlValue(propValues[htmlProp])));
  }, {});
};
var update = function update() {
  unmount();
};
var unmount = function unmount() {
  (0,react_dom__WEBPACK_IMPORTED_MODULE_13__.unmountComponentAtNode)(_this4);
};
var parseHtmlToReact = function parseHtmlToReact(html) {
  return html;
};

/***/ }),
/* 61 */
/***/ ((__unused_webpack_module, __unused_webpack_exports, __webpack_require__) => {

"use strict";

var $ = __webpack_require__(2);
var $filter = (__webpack_require__(62).filter);
var arrayMethodHasSpeciesSupport = __webpack_require__(71);
var arrayMethodUsesToLength = __webpack_require__(74);

var HAS_SPECIES_SUPPORT = arrayMethodHasSpeciesSupport('filter');
// Edge 14- issue
var USES_TO_LENGTH = arrayMethodUsesToLength('filter');

// `Array.prototype.filter` method
// https://tc39.es/ecma262/#sec-array.prototype.filter
// with adding support of @@species
$({ target: 'Array', proto: true, forced: !HAS_SPECIES_SUPPORT || !USES_TO_LENGTH }, {
  filter: function filter(callbackfn /* , thisArg */) {
    return $filter(this, callbackfn, arguments.length > 1 ? arguments[1] : undefined);
  }
});


/***/ }),
/* 62 */
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var bind = __webpack_require__(63);
var IndexedObject = __webpack_require__(10);
var toObject = __webpack_require__(65);
var toLength = __webpack_require__(39);
var arraySpeciesCreate = __webpack_require__(66);

var push = [].push;

// `Array.prototype.{ forEach, map, filter, some, every, find, findIndex, filterOut }` methods implementation
var createMethod = function (TYPE) {
  var IS_MAP = TYPE == 1;
  var IS_FILTER = TYPE == 2;
  var IS_SOME = TYPE == 3;
  var IS_EVERY = TYPE == 4;
  var IS_FIND_INDEX = TYPE == 6;
  var IS_FILTER_OUT = TYPE == 7;
  var NO_HOLES = TYPE == 5 || IS_FIND_INDEX;
  return function ($this, callbackfn, that, specificCreate) {
    var O = toObject($this);
    var self = IndexedObject(O);
    var boundFunction = bind(callbackfn, that, 3);
    var length = toLength(self.length);
    var index = 0;
    var create = specificCreate || arraySpeciesCreate;
    var target = IS_MAP ? create($this, length) : IS_FILTER || IS_FILTER_OUT ? create($this, 0) : undefined;
    var value, result;
    for (;length > index; index++) if (NO_HOLES || index in self) {
      value = self[index];
      result = boundFunction(value, index, O);
      if (TYPE) {
        if (IS_MAP) target[index] = result; // map
        else if (result) switch (TYPE) {
          case 3: return true;              // some
          case 5: return value;             // find
          case 6: return index;             // findIndex
          case 2: push.call(target, value); // filter
        } else switch (TYPE) {
          case 4: return false;             // every
          case 7: push.call(target, value); // filterOut
        }
      }
    }
    return IS_FIND_INDEX ? -1 : IS_SOME || IS_EVERY ? IS_EVERY : target;
  };
};

module.exports = {
  // `Array.prototype.forEach` method
  // https://tc39.es/ecma262/#sec-array.prototype.foreach
  forEach: createMethod(0),
  // `Array.prototype.map` method
  // https://tc39.es/ecma262/#sec-array.prototype.map
  map: createMethod(1),
  // `Array.prototype.filter` method
  // https://tc39.es/ecma262/#sec-array.prototype.filter
  filter: createMethod(2),
  // `Array.prototype.some` method
  // https://tc39.es/ecma262/#sec-array.prototype.some
  some: createMethod(3),
  // `Array.prototype.every` method
  // https://tc39.es/ecma262/#sec-array.prototype.every
  every: createMethod(4),
  // `Array.prototype.find` method
  // https://tc39.es/ecma262/#sec-array.prototype.find
  find: createMethod(5),
  // `Array.prototype.findIndex` method
  // https://tc39.es/ecma262/#sec-array.prototype.findIndex
  findIndex: createMethod(6),
  // `Array.prototype.filterOut` method
  // https://github.com/tc39/proposal-array-filtering
  filterOut: createMethod(7)
};


/***/ }),
/* 63 */
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var aFunction = __webpack_require__(64);

// optional / simple context binding
module.exports = function (fn, that, length) {
  aFunction(fn);
  if (that === undefined) return fn;
  switch (length) {
    case 0: return function () {
      return fn.call(that);
    };
    case 1: return function (a) {
      return fn.call(that, a);
    };
    case 2: return function (a, b) {
      return fn.call(that, a, b);
    };
    case 3: return function (a, b, c) {
      return fn.call(that, a, b, c);
    };
  }
  return function (/* ...args */) {
    return fn.apply(that, arguments);
  };
};


/***/ }),
/* 64 */
/***/ ((module) => {

module.exports = function (it) {
  if (typeof it != 'function') {
    throw TypeError(String(it) + ' is not a function');
  } return it;
};


/***/ }),
/* 65 */
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var requireObjectCoercible = __webpack_require__(12);

// `ToObject` abstract operation
// https://tc39.es/ecma262/#sec-toobject
module.exports = function (argument) {
  return Object(requireObjectCoercible(argument));
};


/***/ }),
/* 66 */
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var isObject = __webpack_require__(14);
var isArray = __webpack_require__(67);
var wellKnownSymbol = __webpack_require__(68);

var SPECIES = wellKnownSymbol('species');

// `ArraySpeciesCreate` abstract operation
// https://tc39.es/ecma262/#sec-arrayspeciescreate
module.exports = function (originalArray, length) {
  var C;
  if (isArray(originalArray)) {
    C = originalArray.constructor;
    // cross-realm fallback
    if (typeof C == 'function' && (C === Array || isArray(C.prototype))) C = undefined;
    else if (isObject(C)) {
      C = C[SPECIES];
      if (C === null) C = undefined;
    }
  } return new (C === undefined ? Array : C)(length === 0 ? 0 : length);
};


/***/ }),
/* 67 */
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var classof = __webpack_require__(11);

// `IsArray` abstract operation
// https://tc39.es/ecma262/#sec-isarray
module.exports = Array.isArray || function isArray(arg) {
  return classof(arg) == 'Array';
};


/***/ }),
/* 68 */
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var global = __webpack_require__(3);
var shared = __webpack_require__(28);
var has = __webpack_require__(15);
var uid = __webpack_require__(30);
var NATIVE_SYMBOL = __webpack_require__(69);
var USE_SYMBOL_AS_UID = __webpack_require__(70);

var WellKnownSymbolsStore = shared('wks');
var Symbol = global.Symbol;
var createWellKnownSymbol = USE_SYMBOL_AS_UID ? Symbol : Symbol && Symbol.withoutSetter || uid;

module.exports = function (name) {
  if (!has(WellKnownSymbolsStore, name)) {
    if (NATIVE_SYMBOL && has(Symbol, name)) WellKnownSymbolsStore[name] = Symbol[name];
    else WellKnownSymbolsStore[name] = createWellKnownSymbol('Symbol.' + name);
  } return WellKnownSymbolsStore[name];
};


/***/ }),
/* 69 */
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var fails = __webpack_require__(6);

module.exports = !!Object.getOwnPropertySymbols && !fails(function () {
  // Chrome 38 Symbol has incorrect toString conversion
  // eslint-disable-next-line no-undef
  return !String(Symbol());
});


/***/ }),
/* 70 */
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var NATIVE_SYMBOL = __webpack_require__(69);

module.exports = NATIVE_SYMBOL
  // eslint-disable-next-line no-undef
  && !Symbol.sham
  // eslint-disable-next-line no-undef
  && typeof Symbol.iterator == 'symbol';


/***/ }),
/* 71 */
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var fails = __webpack_require__(6);
var wellKnownSymbol = __webpack_require__(68);
var V8_VERSION = __webpack_require__(72);

var SPECIES = wellKnownSymbol('species');

module.exports = function (METHOD_NAME) {
  // We can't use this feature detection in V8 since it causes
  // deoptimization and serious performance degradation
  // https://github.com/zloirock/core-js/issues/677
  return V8_VERSION >= 51 || !fails(function () {
    var array = [];
    var constructor = array.constructor = {};
    constructor[SPECIES] = function () {
      return { foo: 1 };
    };
    return array[METHOD_NAME](Boolean).foo !== 1;
  });
};


/***/ }),
/* 72 */
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var global = __webpack_require__(3);
var userAgent = __webpack_require__(73);

var process = global.process;
var versions = process && process.versions;
var v8 = versions && versions.v8;
var match, version;

if (v8) {
  match = v8.split('.');
  version = match[0] + match[1];
} else if (userAgent) {
  match = userAgent.match(/Edge\/(\d+)/);
  if (!match || match[1] >= 74) {
    match = userAgent.match(/Chrome\/(\d+)/);
    if (match) version = match[1];
  }
}

module.exports = version && +version;


/***/ }),
/* 73 */
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var getBuiltIn = __webpack_require__(34);

module.exports = getBuiltIn('navigator', 'userAgent') || '';


/***/ }),
/* 74 */
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var DESCRIPTORS = __webpack_require__(5);
var fails = __webpack_require__(6);
var has = __webpack_require__(15);

var defineProperty = Object.defineProperty;
var cache = {};

var thrower = function (it) { throw it; };

module.exports = function (METHOD_NAME, options) {
  if (has(cache, METHOD_NAME)) return cache[METHOD_NAME];
  if (!options) options = {};
  var method = [][METHOD_NAME];
  var ACCESSORS = has(options, 'ACCESSORS') ? options.ACCESSORS : false;
  var argument0 = has(options, 0) ? options[0] : thrower;
  var argument1 = has(options, 1) ? options[1] : undefined;

  return cache[METHOD_NAME] = !!method && !fails(function () {
    if (ACCESSORS && !DESCRIPTORS) return true;
    var O = { length: -1 };

    if (ACCESSORS) defineProperty(O, 1, { enumerable: true, get: thrower });
    else O[1] = 1;

    method.call(O, argument0, argument1);
  });
};


/***/ }),
/* 75 */
/***/ ((__unused_webpack_module, __unused_webpack_exports, __webpack_require__) => {

"use strict";

var $ = __webpack_require__(2);
var forEach = __webpack_require__(76);

// `Array.prototype.forEach` method
// https://tc39.es/ecma262/#sec-array.prototype.foreach
$({ target: 'Array', proto: true, forced: [].forEach != forEach }, {
  forEach: forEach
});


/***/ }),
/* 76 */
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";

var $forEach = (__webpack_require__(62).forEach);
var arrayMethodIsStrict = __webpack_require__(77);
var arrayMethodUsesToLength = __webpack_require__(74);

var STRICT_METHOD = arrayMethodIsStrict('forEach');
var USES_TO_LENGTH = arrayMethodUsesToLength('forEach');

// `Array.prototype.forEach` method implementation
// https://tc39.es/ecma262/#sec-array.prototype.foreach
module.exports = (!STRICT_METHOD || !USES_TO_LENGTH) ? function forEach(callbackfn /* , thisArg */) {
  return $forEach(this, callbackfn, arguments.length > 1 ? arguments[1] : undefined);
} : [].forEach;


/***/ }),
/* 77 */
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";

var fails = __webpack_require__(6);

module.exports = function (METHOD_NAME, argument) {
  var method = [][METHOD_NAME];
  return !!method && fails(function () {
    // eslint-disable-next-line no-useless-call,no-throw-literal
    method.call(null, argument || function () { throw 1; }, 1);
  });
};


/***/ }),
/* 78 */
/***/ ((__unused_webpack_module, __unused_webpack_exports, __webpack_require__) => {

"use strict";

var $ = __webpack_require__(2);
var $map = (__webpack_require__(62).map);
var arrayMethodHasSpeciesSupport = __webpack_require__(71);
var arrayMethodUsesToLength = __webpack_require__(74);

var HAS_SPECIES_SUPPORT = arrayMethodHasSpeciesSupport('map');
// FF49- issue
var USES_TO_LENGTH = arrayMethodUsesToLength('map');

// `Array.prototype.map` method
// https://tc39.es/ecma262/#sec-array.prototype.map
// with adding support of @@species
$({ target: 'Array', proto: true, forced: !HAS_SPECIES_SUPPORT || !USES_TO_LENGTH }, {
  map: function map(callbackfn /* , thisArg */) {
    return $map(this, callbackfn, arguments.length > 1 ? arguments[1] : undefined);
  }
});


/***/ }),
/* 79 */
/***/ ((__unused_webpack_module, __unused_webpack_exports, __webpack_require__) => {

"use strict";

var $ = __webpack_require__(2);
var $reduce = (__webpack_require__(80).left);
var arrayMethodIsStrict = __webpack_require__(77);
var arrayMethodUsesToLength = __webpack_require__(74);
var CHROME_VERSION = __webpack_require__(72);
var IS_NODE = __webpack_require__(81);

var STRICT_METHOD = arrayMethodIsStrict('reduce');
var USES_TO_LENGTH = arrayMethodUsesToLength('reduce', { 1: 0 });
// Chrome 80-82 has a critical bug
// https://bugs.chromium.org/p/chromium/issues/detail?id=1049982
var CHROME_BUG = !IS_NODE && CHROME_VERSION > 79 && CHROME_VERSION < 83;

// `Array.prototype.reduce` method
// https://tc39.es/ecma262/#sec-array.prototype.reduce
$({ target: 'Array', proto: true, forced: !STRICT_METHOD || !USES_TO_LENGTH || CHROME_BUG }, {
  reduce: function reduce(callbackfn /* , initialValue */) {
    return $reduce(this, callbackfn, arguments.length, arguments.length > 1 ? arguments[1] : undefined);
  }
});


/***/ }),
/* 80 */
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var aFunction = __webpack_require__(64);
var toObject = __webpack_require__(65);
var IndexedObject = __webpack_require__(10);
var toLength = __webpack_require__(39);

// `Array.prototype.{ reduce, reduceRight }` methods implementation
var createMethod = function (IS_RIGHT) {
  return function (that, callbackfn, argumentsLength, memo) {
    aFunction(callbackfn);
    var O = toObject(that);
    var self = IndexedObject(O);
    var length = toLength(O.length);
    var index = IS_RIGHT ? length - 1 : 0;
    var i = IS_RIGHT ? -1 : 1;
    if (argumentsLength < 2) while (true) {
      if (index in self) {
        memo = self[index];
        index += i;
        break;
      }
      index += i;
      if (IS_RIGHT ? index < 0 : length <= index) {
        throw TypeError('Reduce of empty array with no initial value');
      }
    }
    for (;IS_RIGHT ? index >= 0 : length > index; index += i) if (index in self) {
      memo = callbackfn(memo, self[index], index, O);
    }
    return memo;
  };
};

module.exports = {
  // `Array.prototype.reduce` method
  // https://tc39.es/ecma262/#sec-array.prototype.reduce
  left: createMethod(false),
  // `Array.prototype.reduceRight` method
  // https://tc39.es/ecma262/#sec-array.prototype.reduceright
  right: createMethod(true)
};


/***/ }),
/* 81 */
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var classof = __webpack_require__(11);
var global = __webpack_require__(3);

module.exports = classof(global.process) == 'process';


/***/ }),
/* 82 */
/***/ ((__unused_webpack_module, __unused_webpack_exports, __webpack_require__) => {

var DESCRIPTORS = __webpack_require__(5);
var defineProperty = (__webpack_require__(19).f);

var FunctionPrototype = Function.prototype;
var FunctionPrototypeToString = FunctionPrototype.toString;
var nameRE = /^\s*function ([^ (]*)/;
var NAME = 'name';

// Function instances `.name` property
// https://tc39.es/ecma262/#sec-function-instances-name
if (DESCRIPTORS && !(NAME in FunctionPrototype)) {
  defineProperty(FunctionPrototype, NAME, {
    configurable: true,
    get: function () {
      try {
        return FunctionPrototypeToString.call(this).match(nameRE)[1];
      } catch (error) {
        return '';
      }
    }
  });
}


/***/ }),
/* 83 */
/***/ ((__unused_webpack_module, __unused_webpack_exports, __webpack_require__) => {

var $ = __webpack_require__(2);
var fails = __webpack_require__(6);
var toObject = __webpack_require__(65);
var nativeGetPrototypeOf = __webpack_require__(84);
var CORRECT_PROTOTYPE_GETTER = __webpack_require__(85);

var FAILS_ON_PRIMITIVES = fails(function () { nativeGetPrototypeOf(1); });

// `Object.getPrototypeOf` method
// https://tc39.es/ecma262/#sec-object.getprototypeof
$({ target: 'Object', stat: true, forced: FAILS_ON_PRIMITIVES, sham: !CORRECT_PROTOTYPE_GETTER }, {
  getPrototypeOf: function getPrototypeOf(it) {
    return nativeGetPrototypeOf(toObject(it));
  }
});



/***/ }),
/* 84 */
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var has = __webpack_require__(15);
var toObject = __webpack_require__(65);
var sharedKey = __webpack_require__(27);
var CORRECT_PROTOTYPE_GETTER = __webpack_require__(85);

var IE_PROTO = sharedKey('IE_PROTO');
var ObjectPrototype = Object.prototype;

// `Object.getPrototypeOf` method
// https://tc39.es/ecma262/#sec-object.getprototypeof
module.exports = CORRECT_PROTOTYPE_GETTER ? Object.getPrototypeOf : function (O) {
  O = toObject(O);
  if (has(O, IE_PROTO)) return O[IE_PROTO];
  if (typeof O.constructor == 'function' && O instanceof O.constructor) {
    return O.constructor.prototype;
  } return O instanceof Object ? ObjectPrototype : null;
};


/***/ }),
/* 85 */
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var fails = __webpack_require__(6);

module.exports = !fails(function () {
  function F() { /* empty */ }
  F.prototype.constructor = null;
  return Object.getPrototypeOf(new F()) !== F.prototype;
});


/***/ }),
/* 86 */
/***/ ((__unused_webpack_module, __unused_webpack_exports, __webpack_require__) => {

var $ = __webpack_require__(2);
var toObject = __webpack_require__(65);
var nativeKeys = __webpack_require__(87);
var fails = __webpack_require__(6);

var FAILS_ON_PRIMITIVES = fails(function () { nativeKeys(1); });

// `Object.keys` method
// https://tc39.es/ecma262/#sec-object.keys
$({ target: 'Object', stat: true, forced: FAILS_ON_PRIMITIVES }, {
  keys: function keys(it) {
    return nativeKeys(toObject(it));
  }
});


/***/ }),
/* 87 */
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var internalObjectKeys = __webpack_require__(37);
var enumBugKeys = __webpack_require__(42);

// `Object.keys` method
// https://tc39.es/ecma262/#sec-object.keys
module.exports = Object.keys || function keys(O) {
  return internalObjectKeys(O, enumBugKeys);
};


/***/ }),
/* 88 */
/***/ ((__unused_webpack_module, __unused_webpack_exports, __webpack_require__) => {

var $ = __webpack_require__(2);
var setPrototypeOf = __webpack_require__(89);

// `Object.setPrototypeOf` method
// https://tc39.es/ecma262/#sec-object.setprototypeof
$({ target: 'Object', stat: true }, {
  setPrototypeOf: setPrototypeOf
});


/***/ }),
/* 89 */
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var anObject = __webpack_require__(20);
var aPossiblePrototype = __webpack_require__(90);

// `Object.setPrototypeOf` method
// https://tc39.es/ecma262/#sec-object.setprototypeof
// Works with __proto__ only. Old v8 can't work with null proto objects.
/* eslint-disable no-proto */
module.exports = Object.setPrototypeOf || ('__proto__' in {} ? function () {
  var CORRECT_SETTER = false;
  var test = {};
  var setter;
  try {
    setter = Object.getOwnPropertyDescriptor(Object.prototype, '__proto__').set;
    setter.call(test, []);
    CORRECT_SETTER = test instanceof Array;
  } catch (error) { /* empty */ }
  return function setPrototypeOf(O, proto) {
    anObject(O);
    aPossiblePrototype(proto);
    if (CORRECT_SETTER) setter.call(O, proto);
    else O.__proto__ = proto;
    return O;
  };
}() : undefined);


/***/ }),
/* 90 */
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var isObject = __webpack_require__(14);

module.exports = function (it) {
  if (!isObject(it) && it !== null) {
    throw TypeError("Can't set " + String(it) + ' as a prototype');
  } return it;
};


/***/ }),
/* 91 */
/***/ ((__unused_webpack_module, __unused_webpack_exports, __webpack_require__) => {

var $ = __webpack_require__(2);
var $values = (__webpack_require__(92).values);

// `Object.values` method
// https://tc39.es/ecma262/#sec-object.values
$({ target: 'Object', stat: true }, {
  values: function values(O) {
    return $values(O);
  }
});


/***/ }),
/* 92 */
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var DESCRIPTORS = __webpack_require__(5);
var objectKeys = __webpack_require__(87);
var toIndexedObject = __webpack_require__(9);
var propertyIsEnumerable = (__webpack_require__(7).f);

// `Object.{ entries, values }` methods implementation
var createMethod = function (TO_ENTRIES) {
  return function (it) {
    var O = toIndexedObject(it);
    var keys = objectKeys(O);
    var length = keys.length;
    var i = 0;
    var result = [];
    var key;
    while (length > i) {
      key = keys[i++];
      if (!DESCRIPTORS || propertyIsEnumerable.call(O, key)) {
        result.push(TO_ENTRIES ? [key, O[key]] : O[key]);
      }
    }
    return result;
  };
};

module.exports = {
  // `Object.entries` method
  // https://tc39.es/ecma262/#sec-object.entries
  entries: createMethod(true),
  // `Object.values` method
  // https://tc39.es/ecma262/#sec-object.values
  values: createMethod(false)
};


/***/ }),
/* 93 */
/***/ ((__unused_webpack_module, __unused_webpack_exports, __webpack_require__) => {

"use strict";

var $ = __webpack_require__(2);
var exec = __webpack_require__(94);

// `RegExp.prototype.exec` method
// https://tc39.es/ecma262/#sec-regexp.prototype.exec
$({ target: 'RegExp', proto: true, forced: /./.exec !== exec }, {
  exec: exec
});


/***/ }),
/* 94 */
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";

var regexpFlags = __webpack_require__(95);
var stickyHelpers = __webpack_require__(96);

var nativeExec = RegExp.prototype.exec;
// This always refers to the native implementation, because the
// String#replace polyfill uses ./fix-regexp-well-known-symbol-logic.js,
// which loads this file before patching the method.
var nativeReplace = String.prototype.replace;

var patchedExec = nativeExec;

var UPDATES_LAST_INDEX_WRONG = (function () {
  var re1 = /a/;
  var re2 = /b*/g;
  nativeExec.call(re1, 'a');
  nativeExec.call(re2, 'a');
  return re1.lastIndex !== 0 || re2.lastIndex !== 0;
})();

var UNSUPPORTED_Y = stickyHelpers.UNSUPPORTED_Y || stickyHelpers.BROKEN_CARET;

// nonparticipating capturing group, copied from es5-shim's String#split patch.
var NPCG_INCLUDED = /()??/.exec('')[1] !== undefined;

var PATCH = UPDATES_LAST_INDEX_WRONG || NPCG_INCLUDED || UNSUPPORTED_Y;

if (PATCH) {
  patchedExec = function exec(str) {
    var re = this;
    var lastIndex, reCopy, match, i;
    var sticky = UNSUPPORTED_Y && re.sticky;
    var flags = regexpFlags.call(re);
    var source = re.source;
    var charsAdded = 0;
    var strCopy = str;

    if (sticky) {
      flags = flags.replace('y', '');
      if (flags.indexOf('g') === -1) {
        flags += 'g';
      }

      strCopy = String(str).slice(re.lastIndex);
      // Support anchored sticky behavior.
      if (re.lastIndex > 0 && (!re.multiline || re.multiline && str[re.lastIndex - 1] !== '\n')) {
        source = '(?: ' + source + ')';
        strCopy = ' ' + strCopy;
        charsAdded++;
      }
      // ^(? + rx + ) is needed, in combination with some str slicing, to
      // simulate the 'y' flag.
      reCopy = new RegExp('^(?:' + source + ')', flags);
    }

    if (NPCG_INCLUDED) {
      reCopy = new RegExp('^' + source + '$(?!\\s)', flags);
    }
    if (UPDATES_LAST_INDEX_WRONG) lastIndex = re.lastIndex;

    match = nativeExec.call(sticky ? reCopy : re, strCopy);

    if (sticky) {
      if (match) {
        match.input = match.input.slice(charsAdded);
        match[0] = match[0].slice(charsAdded);
        match.index = re.lastIndex;
        re.lastIndex += match[0].length;
      } else re.lastIndex = 0;
    } else if (UPDATES_LAST_INDEX_WRONG && match) {
      re.lastIndex = re.global ? match.index + match[0].length : lastIndex;
    }
    if (NPCG_INCLUDED && match && match.length > 1) {
      // Fix browsers whose `exec` methods don't consistently return `undefined`
      // for NPCG, like IE8. NOTE: This doesn' work for /(.?)?/
      nativeReplace.call(match[0], reCopy, function () {
        for (i = 1; i < arguments.length - 2; i++) {
          if (arguments[i] === undefined) match[i] = undefined;
        }
      });
    }

    return match;
  };
}

module.exports = patchedExec;


/***/ }),
/* 95 */
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";

var anObject = __webpack_require__(20);

// `RegExp.prototype.flags` getter implementation
// https://tc39.es/ecma262/#sec-get-regexp.prototype.flags
module.exports = function () {
  var that = anObject(this);
  var result = '';
  if (that.global) result += 'g';
  if (that.ignoreCase) result += 'i';
  if (that.multiline) result += 'm';
  if (that.dotAll) result += 's';
  if (that.unicode) result += 'u';
  if (that.sticky) result += 'y';
  return result;
};


/***/ }),
/* 96 */
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


var fails = __webpack_require__(6);

// babel-minify transpiles RegExp('a', 'y') -> /a/y and it causes SyntaxError,
// so we use an intermediate function.
function RE(s, f) {
  return RegExp(s, f);
}

exports.UNSUPPORTED_Y = fails(function () {
  // babel-minify transpiles RegExp('a', 'y') -> /a/y and it causes SyntaxError
  var re = RE('a', 'y');
  re.lastIndex = 2;
  return re.exec('abcd') != null;
});

exports.BROKEN_CARET = fails(function () {
  // https://bugzilla.mozilla.org/show_bug.cgi?id=773687
  var re = RE('^r', 'gy');
  re.lastIndex = 2;
  return re.exec('str') != null;
});


/***/ }),
/* 97 */
/***/ ((__unused_webpack_module, __unused_webpack_exports, __webpack_require__) => {

"use strict";

var fixRegExpWellKnownSymbolLogic = __webpack_require__(98);
var anObject = __webpack_require__(20);
var toLength = __webpack_require__(39);
var toInteger = __webpack_require__(40);
var requireObjectCoercible = __webpack_require__(12);
var advanceStringIndex = __webpack_require__(99);
var getSubstitution = __webpack_require__(101);
var regExpExec = __webpack_require__(102);

var max = Math.max;
var min = Math.min;

var maybeToString = function (it) {
  return it === undefined ? it : String(it);
};

// @@replace logic
fixRegExpWellKnownSymbolLogic('replace', 2, function (REPLACE, nativeReplace, maybeCallNative, reason) {
  var REGEXP_REPLACE_SUBSTITUTES_UNDEFINED_CAPTURE = reason.REGEXP_REPLACE_SUBSTITUTES_UNDEFINED_CAPTURE;
  var REPLACE_KEEPS_$0 = reason.REPLACE_KEEPS_$0;
  var UNSAFE_SUBSTITUTE = REGEXP_REPLACE_SUBSTITUTES_UNDEFINED_CAPTURE ? '$' : '$0';

  return [
    // `String.prototype.replace` method
    // https://tc39.es/ecma262/#sec-string.prototype.replace
    function replace(searchValue, replaceValue) {
      var O = requireObjectCoercible(this);
      var replacer = searchValue == undefined ? undefined : searchValue[REPLACE];
      return replacer !== undefined
        ? replacer.call(searchValue, O, replaceValue)
        : nativeReplace.call(String(O), searchValue, replaceValue);
    },
    // `RegExp.prototype[@@replace]` method
    // https://tc39.es/ecma262/#sec-regexp.prototype-@@replace
    function (regexp, replaceValue) {
      if (
        (!REGEXP_REPLACE_SUBSTITUTES_UNDEFINED_CAPTURE && REPLACE_KEEPS_$0) ||
        (typeof replaceValue === 'string' && replaceValue.indexOf(UNSAFE_SUBSTITUTE) === -1)
      ) {
        var res = maybeCallNative(nativeReplace, regexp, this, replaceValue);
        if (res.done) return res.value;
      }

      var rx = anObject(regexp);
      var S = String(this);

      var functionalReplace = typeof replaceValue === 'function';
      if (!functionalReplace) replaceValue = String(replaceValue);

      var global = rx.global;
      if (global) {
        var fullUnicode = rx.unicode;
        rx.lastIndex = 0;
      }
      var results = [];
      while (true) {
        var result = regExpExec(rx, S);
        if (result === null) break;

        results.push(result);
        if (!global) break;

        var matchStr = String(result[0]);
        if (matchStr === '') rx.lastIndex = advanceStringIndex(S, toLength(rx.lastIndex), fullUnicode);
      }

      var accumulatedResult = '';
      var nextSourcePosition = 0;
      for (var i = 0; i < results.length; i++) {
        result = results[i];

        var matched = String(result[0]);
        var position = max(min(toInteger(result.index), S.length), 0);
        var captures = [];
        // NOTE: This is equivalent to
        //   captures = result.slice(1).map(maybeToString)
        // but for some reason `nativeSlice.call(result, 1, result.length)` (called in
        // the slice polyfill when slicing native arrays) "doesn't work" in safari 9 and
        // causes a crash (https://pastebin.com/N21QzeQA) when trying to debug it.
        for (var j = 1; j < result.length; j++) captures.push(maybeToString(result[j]));
        var namedCaptures = result.groups;
        if (functionalReplace) {
          var replacerArgs = [matched].concat(captures, position, S);
          if (namedCaptures !== undefined) replacerArgs.push(namedCaptures);
          var replacement = String(replaceValue.apply(undefined, replacerArgs));
        } else {
          replacement = getSubstitution(matched, S, position, captures, namedCaptures, replaceValue);
        }
        if (position >= nextSourcePosition) {
          accumulatedResult += S.slice(nextSourcePosition, position) + replacement;
          nextSourcePosition = position + matched.length;
        }
      }
      return accumulatedResult + S.slice(nextSourcePosition);
    }
  ];
});


/***/ }),
/* 98 */
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";

// TODO: Remove from `core-js@4` since it's moved to entry points
__webpack_require__(93);
var redefine = __webpack_require__(21);
var fails = __webpack_require__(6);
var wellKnownSymbol = __webpack_require__(68);
var regexpExec = __webpack_require__(94);
var createNonEnumerableProperty = __webpack_require__(18);

var SPECIES = wellKnownSymbol('species');

var REPLACE_SUPPORTS_NAMED_GROUPS = !fails(function () {
  // #replace needs built-in support for named groups.
  // #match works fine because it just return the exec results, even if it has
  // a "grops" property.
  var re = /./;
  re.exec = function () {
    var result = [];
    result.groups = { a: '7' };
    return result;
  };
  return ''.replace(re, '$<a>') !== '7';
});

// IE <= 11 replaces $0 with the whole match, as if it was $&
// https://stackoverflow.com/questions/6024666/getting-ie-to-replace-a-regex-with-the-literal-string-0
var REPLACE_KEEPS_$0 = (function () {
  return 'a'.replace(/./, '$0') === '$0';
})();

var REPLACE = wellKnownSymbol('replace');
// Safari <= 13.0.3(?) substitutes nth capture where n>m with an empty string
var REGEXP_REPLACE_SUBSTITUTES_UNDEFINED_CAPTURE = (function () {
  if (/./[REPLACE]) {
    return /./[REPLACE]('a', '$0') === '';
  }
  return false;
})();

// Chrome 51 has a buggy "split" implementation when RegExp#exec !== nativeExec
// Weex JS has frozen built-in prototypes, so use try / catch wrapper
var SPLIT_WORKS_WITH_OVERWRITTEN_EXEC = !fails(function () {
  var re = /(?:)/;
  var originalExec = re.exec;
  re.exec = function () { return originalExec.apply(this, arguments); };
  var result = 'ab'.split(re);
  return result.length !== 2 || result[0] !== 'a' || result[1] !== 'b';
});

module.exports = function (KEY, length, exec, sham) {
  var SYMBOL = wellKnownSymbol(KEY);

  var DELEGATES_TO_SYMBOL = !fails(function () {
    // String methods call symbol-named RegEp methods
    var O = {};
    O[SYMBOL] = function () { return 7; };
    return ''[KEY](O) != 7;
  });

  var DELEGATES_TO_EXEC = DELEGATES_TO_SYMBOL && !fails(function () {
    // Symbol-named RegExp methods call .exec
    var execCalled = false;
    var re = /a/;

    if (KEY === 'split') {
      // We can't use real regex here since it causes deoptimization
      // and serious performance degradation in V8
      // https://github.com/zloirock/core-js/issues/306
      re = {};
      // RegExp[@@split] doesn't call the regex's exec method, but first creates
      // a new one. We need to return the patched regex when creating the new one.
      re.constructor = {};
      re.constructor[SPECIES] = function () { return re; };
      re.flags = '';
      re[SYMBOL] = /./[SYMBOL];
    }

    re.exec = function () { execCalled = true; return null; };

    re[SYMBOL]('');
    return !execCalled;
  });

  if (
    !DELEGATES_TO_SYMBOL ||
    !DELEGATES_TO_EXEC ||
    (KEY === 'replace' && !(
      REPLACE_SUPPORTS_NAMED_GROUPS &&
      REPLACE_KEEPS_$0 &&
      !REGEXP_REPLACE_SUBSTITUTES_UNDEFINED_CAPTURE
    )) ||
    (KEY === 'split' && !SPLIT_WORKS_WITH_OVERWRITTEN_EXEC)
  ) {
    var nativeRegExpMethod = /./[SYMBOL];
    var methods = exec(SYMBOL, ''[KEY], function (nativeMethod, regexp, str, arg2, forceStringMethod) {
      if (regexp.exec === regexpExec) {
        if (DELEGATES_TO_SYMBOL && !forceStringMethod) {
          // The native String method already delegates to @@method (this
          // polyfilled function), leasing to infinite recursion.
          // We avoid it by directly calling the native @@method method.
          return { done: true, value: nativeRegExpMethod.call(regexp, str, arg2) };
        }
        return { done: true, value: nativeMethod.call(str, regexp, arg2) };
      }
      return { done: false };
    }, {
      REPLACE_KEEPS_$0: REPLACE_KEEPS_$0,
      REGEXP_REPLACE_SUBSTITUTES_UNDEFINED_CAPTURE: REGEXP_REPLACE_SUBSTITUTES_UNDEFINED_CAPTURE
    });
    var stringMethod = methods[0];
    var regexMethod = methods[1];

    redefine(String.prototype, KEY, stringMethod);
    redefine(RegExp.prototype, SYMBOL, length == 2
      // 21.2.5.8 RegExp.prototype[@@replace](string, replaceValue)
      // 21.2.5.11 RegExp.prototype[@@split](string, limit)
      ? function (string, arg) { return regexMethod.call(string, this, arg); }
      // 21.2.5.6 RegExp.prototype[@@match](string)
      // 21.2.5.9 RegExp.prototype[@@search](string)
      : function (string) { return regexMethod.call(string, this); }
    );
  }

  if (sham) createNonEnumerableProperty(RegExp.prototype[SYMBOL], 'sham', true);
};


/***/ }),
/* 99 */
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";

var charAt = (__webpack_require__(100).charAt);

// `AdvanceStringIndex` abstract operation
// https://tc39.es/ecma262/#sec-advancestringindex
module.exports = function (S, index, unicode) {
  return index + (unicode ? charAt(S, index).length : 1);
};


/***/ }),
/* 100 */
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var toInteger = __webpack_require__(40);
var requireObjectCoercible = __webpack_require__(12);

// `String.prototype.{ codePointAt, at }` methods implementation
var createMethod = function (CONVERT_TO_STRING) {
  return function ($this, pos) {
    var S = String(requireObjectCoercible($this));
    var position = toInteger(pos);
    var size = S.length;
    var first, second;
    if (position < 0 || position >= size) return CONVERT_TO_STRING ? '' : undefined;
    first = S.charCodeAt(position);
    return first < 0xD800 || first > 0xDBFF || position + 1 === size
      || (second = S.charCodeAt(position + 1)) < 0xDC00 || second > 0xDFFF
        ? CONVERT_TO_STRING ? S.charAt(position) : first
        : CONVERT_TO_STRING ? S.slice(position, position + 2) : (first - 0xD800 << 10) + (second - 0xDC00) + 0x10000;
  };
};

module.exports = {
  // `String.prototype.codePointAt` method
  // https://tc39.es/ecma262/#sec-string.prototype.codepointat
  codeAt: createMethod(false),
  // `String.prototype.at` method
  // https://github.com/mathiasbynens/String.prototype.at
  charAt: createMethod(true)
};


/***/ }),
/* 101 */
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var toObject = __webpack_require__(65);

var floor = Math.floor;
var replace = ''.replace;
var SUBSTITUTION_SYMBOLS = /\$([$&'`]|\d\d?|<[^>]*>)/g;
var SUBSTITUTION_SYMBOLS_NO_NAMED = /\$([$&'`]|\d\d?)/g;

// https://tc39.es/ecma262/#sec-getsubstitution
module.exports = function (matched, str, position, captures, namedCaptures, replacement) {
  var tailPos = position + matched.length;
  var m = captures.length;
  var symbols = SUBSTITUTION_SYMBOLS_NO_NAMED;
  if (namedCaptures !== undefined) {
    namedCaptures = toObject(namedCaptures);
    symbols = SUBSTITUTION_SYMBOLS;
  }
  return replace.call(replacement, symbols, function (match, ch) {
    var capture;
    switch (ch.charAt(0)) {
      case '$': return '$';
      case '&': return matched;
      case '`': return str.slice(0, position);
      case "'": return str.slice(tailPos);
      case '<':
        capture = namedCaptures[ch.slice(1, -1)];
        break;
      default: // \d\d?
        var n = +ch;
        if (n === 0) return match;
        if (n > m) {
          var f = floor(n / 10);
          if (f === 0) return match;
          if (f <= m) return captures[f - 1] === undefined ? ch.charAt(1) : captures[f - 1] + ch.charAt(1);
          return match;
        }
        capture = captures[n - 1];
    }
    return capture === undefined ? '' : capture;
  });
};


/***/ }),
/* 102 */
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var classof = __webpack_require__(11);
var regexpExec = __webpack_require__(94);

// `RegExpExec` abstract operation
// https://tc39.es/ecma262/#sec-regexpexec
module.exports = function (R, S) {
  var exec = R.exec;
  if (typeof exec === 'function') {
    var result = exec.call(R, S);
    if (typeof result !== 'object') {
      throw TypeError('RegExp exec method returned something other than an Object or null');
    }
    return result;
  }

  if (classof(R) !== 'RegExp') {
    throw TypeError('RegExp#exec called on incompatible receiver');
  }

  return regexpExec.call(R, S);
};



/***/ }),
/* 103 */
/***/ ((__unused_webpack_module, __unused_webpack_exports, __webpack_require__) => {

var global = __webpack_require__(3);
var DOMIterables = __webpack_require__(104);
var forEach = __webpack_require__(76);
var createNonEnumerableProperty = __webpack_require__(18);

for (var COLLECTION_NAME in DOMIterables) {
  var Collection = global[COLLECTION_NAME];
  var CollectionPrototype = Collection && Collection.prototype;
  // some Chrome versions have non-configurable methods on DOMTokenList
  if (CollectionPrototype && CollectionPrototype.forEach !== forEach) try {
    createNonEnumerableProperty(CollectionPrototype, 'forEach', forEach);
  } catch (error) {
    CollectionPrototype.forEach = forEach;
  }
}


/***/ }),
/* 104 */
/***/ ((module) => {

// iterable DOM collections
// flag - `iterable` interface - 'entries', 'keys', 'values', 'forEach' methods
module.exports = {
  CSSRuleList: 0,
  CSSStyleDeclaration: 0,
  CSSValueList: 0,
  ClientRectList: 0,
  DOMRectList: 0,
  DOMStringList: 0,
  DOMTokenList: 1,
  DataTransferItemList: 0,
  FileList: 0,
  HTMLAllCollection: 0,
  HTMLCollection: 0,
  HTMLFormElement: 0,
  HTMLSelectElement: 0,
  MediaList: 0,
  MimeTypeArray: 0,
  NamedNodeMap: 0,
  NodeList: 1,
  PaintRequestList: 0,
  Plugin: 0,
  PluginArray: 0,
  SVGLengthList: 0,
  SVGNumberList: 0,
  SVGPathSegList: 0,
  SVGPointList: 0,
  SVGStringList: 0,
  SVGTransformList: 0,
  SourceBufferList: 0,
  StyleSheetList: 0,
  TextTrackCueList: 0,
  TextTrackList: 0,
  TouchList: 0
};


/***/ }),
/* 105 */
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* export default binding */ __WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
var reactComponentSymbol = Symbol.for("r2wc.reactComponent");
var renderSymbol = Symbol.for("r2wc.reactRender");
var shouldRenderSymbol = Symbol.for("r2wc.shouldRender");

var define = {
	// Creates a getter/setter that re-renders everytime a property is set.
	expando: function(receiver, key, value) {
		Object.defineProperty(receiver, key, {
			enumerable: true,
			get: function() {
				return value;
			},
			set: function(newValue) {
				value = newValue;
				this[renderSymbol]();
			}
		});
		receiver[renderSymbol]();
	}
}


/**
 * Converts a React component into a webcomponent by wrapping it in a Proxy object.
 * @param {ReactComponent}
 * @param {React}
 * @param {ReactDOM}
 * @param {Object} options - Optional parameters
 * @param {String?} options.shadow - Use shadow DOM rather than light DOM.
 */
/* harmony default export */ function __WEBPACK_DEFAULT_EXPORT__(ReactComponent, React, ReactDOM, options= {}) {
	var renderAddedProperties = {isConnected: "isConnected" in HTMLElement.prototype};
	var rendering = false;
	// Create the web component "class"
	var WebComponent = function() {
		var self = Reflect.construct(HTMLElement, arguments, this.constructor);
		if (options.shadow) {
			self.attachShadow({ mode: 'open' });
		}
		return self;
	};


	// Make the class extend HTMLElement
	var targetPrototype = Object.create(HTMLElement.prototype);
	targetPrototype.constructor = WebComponent;

	// But have that prototype be wrapped in a proxy.
	var proxyPrototype = new Proxy(targetPrototype, {
		has: function (target, key) {
			return key in ReactComponent.propTypes ||
				key in targetPrototype;
		},

		// when any undefined property is set, create a getter/setter that re-renders
		set: function(target, key, value, receiver) {
			if (rendering) {
				renderAddedProperties[key] = true;
			}

			if (typeof key === "symbol" || renderAddedProperties[key] || key in target) {
				return Reflect.set(target, key, value, receiver);
			} else {
				define.expando(receiver, key, value)
			}
			return true;
		},
		// makes sure the property looks writable
		getOwnPropertyDescriptor: function(target, key){
			var own = Reflect.getOwnPropertyDescriptor(target, key);
			if (own) {
				return own;
			}
			if (key in ReactComponent.propTypes) {
				return { configurable: true, enumerable: true, writable: true, value: undefined };
			}
		}
	});
	WebComponent.prototype = proxyPrototype;

	// Setup lifecycle methods
	targetPrototype.connectedCallback = function() {
		// Once connected, it will keep updating the innerHTML.
		// We could add a render method to allow this as well.
		this[shouldRenderSymbol] = true;
		this[renderSymbol]();
	};
	targetPrototype[renderSymbol] = function() {
		if (this[shouldRenderSymbol] === true) {
			var data = {};
			Object.keys(this).forEach(function(key) {
				if (renderAddedProperties[key] !== false) {
					data[key] = this[key];
				}
			}, this);
			rendering = true;
			// Container is either shadow DOM or light DOM depending on `shadow` option.
			const container = options.shadow ? this.shadowRoot : this;
			// Use react to render element in container
			this[reactComponentSymbol] = ReactDOM.render(React.createElement(ReactComponent, data), container);
			rendering = false;
		}
	};

	// Handle attributes changing
	if (ReactComponent.propTypes) {
		WebComponent.observedAttributes = Object.keys(ReactComponent.propTypes);
		targetPrototype.attributeChangedCallback = function(name, oldValue, newValue) {
			// TODO: handle type conversion
			this[name] = newValue;
		};
	}

	return WebComponent;
}


/***/ }),
/* 106 */
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "buttonSizes": () => (/* binding */ buttonSizes),
/* harmony export */   "Button": () => (/* binding */ Button)
/* harmony export */ });
/* harmony import */ var prop_types__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(107);
/* harmony import */ var prop_types__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(prop_types__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(47);
/* harmony import */ var styled_components__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(139);
/* harmony import */ var _tokens__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(113);
/* harmony import */ var _utils__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(135);
/* harmony import */ var _utils_stringUtil__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(138);
/* harmony import */ var react_dom__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(45);
/* harmony import */ var react_to_webcomponent__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(105);
var _templateObject, _templateObject2, _templateObject3, _templateObject4;

function _taggedTemplateLiteral(strings, raw) { if (!raw) { raw = strings.slice(0); } return Object.freeze(Object.defineProperties(strings, { raw: { value: Object.freeze(raw) } })); }









var ButtonPrimary = styled_components__WEBPACK_IMPORTED_MODULE_7__["default"].div(_templateObject || (_templateObject = _taggedTemplateLiteral(["\n\tdisplay: flex;\n\tjustify-content: center;\n\talign-items: center;\n\tbox-sizing: border-box;\n\tpadding: ", ";\n\t", ";\n\tbackground: ", ";\n\tborder-radius: ", ";\n\tcolor:", ";\n\tcursor: pointer;\n\tuser-select: none;\n\t", ";\n\t\n\tpointer-events: ", ";\n  opacity: ", ";\n  \n  ", "\n"])), function (props) {
  return props.size === 'sm' && _tokens__WEBPACK_IMPORTED_MODULE_2__.Tokens.spacing.squish.xnano || props.size === 'lg' && _tokens__WEBPACK_IMPORTED_MODULE_2__.Tokens.spacing.squish.lg || props.size === 'container' && _tokens__WEBPACK_IMPORTED_MODULE_2__.Tokens.spacing.inset.xs;
}, function (props) {
  return props.size === 'container' && 'width: 100%;' || 'width: fit-content;';
}, _tokens__WEBPACK_IMPORTED_MODULE_2__.Tokens.colors.brand.primary.darkest, _tokens__WEBPACK_IMPORTED_MODULE_2__.Tokens.border.radius.sm, _tokens__WEBPACK_IMPORTED_MODULE_2__.Tokens.colors.neutral.light.base, (0,_utils__WEBPACK_IMPORTED_MODULE_3__.fontStyleMaker)({
  fontFamily: "head",
  fontSize: "xs",
  fontWeight: "medium"
}), function (props) {
  return props.disabled && 'none';
}, function (props) {
  return props.disabled && _tokens__WEBPACK_IMPORTED_MODULE_2__.Tokens.opacity.level.medium;
}, function (props) {
  return props.loading && "& > span {\n  \topacity: 0;\n  }";
});
var ButtonSecondary = (0,styled_components__WEBPACK_IMPORTED_MODULE_7__["default"])(ButtonPrimary)(_templateObject2 || (_templateObject2 = _taggedTemplateLiteral(["\n\tbackground: ", ";\n\tcolor: ", ";\n\tborder: ", " solid ", ";\n\ttransition: 0.25s;\n\t\n\t&:hover {\n\t\tbackground: ", ";\n\t\tcolor: ", ";\n\t\tborder: ", " solid ", ";\n\t}\n"])), _tokens__WEBPACK_IMPORTED_MODULE_2__.Tokens.colors.neutral.light.base, _tokens__WEBPACK_IMPORTED_MODULE_2__.Tokens.colors.brand.primary.darkest, _tokens__WEBPACK_IMPORTED_MODULE_2__.Tokens.border.width.hairline, _tokens__WEBPACK_IMPORTED_MODULE_2__.Tokens.colors.brand.primary.darkest, _tokens__WEBPACK_IMPORTED_MODULE_2__.Tokens.colors.brand.primary.darkest, _tokens__WEBPACK_IMPORTED_MODULE_2__.Tokens.colors.neutral.light.base, _tokens__WEBPACK_IMPORTED_MODULE_2__.Tokens.border.width.hairline, _tokens__WEBPACK_IMPORTED_MODULE_2__.Tokens.colors.brand.primary.darkest);
var ButtonDanger = (0,styled_components__WEBPACK_IMPORTED_MODULE_7__["default"])(ButtonPrimary)(_templateObject3 || (_templateObject3 = _taggedTemplateLiteral(["\n\tbackground: ", ";\n"])), _tokens__WEBPACK_IMPORTED_MODULE_2__.Tokens.colors.feedback.danger.darkest);
var LoadingBubbles = styled_components__WEBPACK_IMPORTED_MODULE_7__["default"].div(_templateObject4 || (_templateObject4 = _taggedTemplateLiteral(["\n\tposition:absolute;\n\tdisplay:flex;\n\tjustify-content: center;\n\talign-items: center;\n\tbox-sizing: border-box;\n\t\n\t@keyframes bubbleAnimation {\n\t\t0% {\n\t\t\ttransform: translateY(3px);\n\t\t\topacity: 1;\n\t\t}\n\t\t50% {\n\t\t\ttransform: translateY(-3px);\n\t\t\topacity: 1;\n\t\t}\n\t\t100% {\n\t\t\ttransform: translateY(3px);\n\t\t\topacity: 1;\n\t\t}\n\t};\n\t\n\t& > span {\n\t\topacity: 0;\n\t\tbackground: ", ";\n\t\twidth: 5px;\n\t\theight: 5px;\n\t\tmargin-right: 2px;\n\t\tborder-radius: 100%;\n \t \tanimation: bubbleAnimation 1s ease-in-out;;\n \t \tanimation-iteration-count: infinite;\n\t}\n\t& > span:nth-child(1) {\n\t\tanimation-delay: 0.20s;\n\t}\n\t& > span:nth-child(2) {\n\t\tanimation-delay: 0.40s;\n\t}\n\t& > span:nth-child(3) {\n\t\tanimation-delay: 0.60s;\n\t}\n\t& > span:nth-child(4) {\n\t\tanimation-delay: 0.80s;\n\t}\n\n"])), function (props) {
  return props.secondary ? _tokens__WEBPACK_IMPORTED_MODULE_2__.Tokens.colors.brand.primary.darkest : _tokens__WEBPACK_IMPORTED_MODULE_2__.Tokens.colors.neutral.light.base;
});
var buttonSizes = ['sm', 'lg', 'container'];

var Button = function Button(props) {
  var buttonType = props.primary && ButtonPrimary || props.secondary && ButtonSecondary || props.danger && ButtonDanger || ButtonPrimary;
  var buttonSize = props.size || 'lg';
  return /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_1__.createElement(ButtonPrimary, {
    disabled: props.disabled,
    size: buttonSize,
    onClick: props.onClick,
    style: props.style,
    loading: props.loading,
    id: (0,_utils_stringUtil__WEBPACK_IMPORTED_MODULE_4__.camelize)(props.text),
    as: buttonType,
    className: props.className
  }, /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_1__.createElement("span", null, props.text), props.loading && /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_1__.createElement(LoadingBubbles, {
    secondary: props.secondary
  }, /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_1__.createElement("span", null), /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_1__.createElement("span", null), /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_1__.createElement("span", null), /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_1__.createElement("span", null)));
};


Button.propTypes = {
  disabled: (prop_types__WEBPACK_IMPORTED_MODULE_0___default().bool),
  primary: (prop_types__WEBPACK_IMPORTED_MODULE_0___default().bool),
  secondary: (prop_types__WEBPACK_IMPORTED_MODULE_0___default().bool),
  danger: (prop_types__WEBPACK_IMPORTED_MODULE_0___default().bool),
  loading: (prop_types__WEBPACK_IMPORTED_MODULE_0___default().bool),
  size: (prop_types__WEBPACK_IMPORTED_MODULE_0___default().string),
  text: (prop_types__WEBPACK_IMPORTED_MODULE_0___default().string),
  className: (prop_types__WEBPACK_IMPORTED_MODULE_0___default().any),
  style: (prop_types__WEBPACK_IMPORTED_MODULE_0___default().any),
  onClick: (prop_types__WEBPACK_IMPORTED_MODULE_0___default().func)
};

/***/ }),
/* 107 */
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

/**
 * Copyright (c) 2013-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */

if ("MISSING_ENV_VAR".NODE_ENV !== 'production') {
  var ReactIs = __webpack_require__(108);

  // By explicitly using `prop-types` you are opting into new development behavior.
  // http://fb.me/prop-types-in-prod
  var throwOnDirectAccess = true;
  module.exports = __webpack_require__(111)(ReactIs.isElement, throwOnDirectAccess);
} else {
  // By explicitly using `prop-types` you are opting into new production behavior.
  // http://fb.me/prop-types-in-prod
  module.exports = __webpack_require__(112)();
}


/***/ }),
/* 108 */
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";


if ("MISSING_ENV_VAR".NODE_ENV === 'production') {
  module.exports = __webpack_require__(109);
} else {
  module.exports = __webpack_require__(110);
}


/***/ }),
/* 109 */
/***/ ((__unused_webpack_module, exports) => {

"use strict";
/** @license React v16.13.1
 * react-is.production.min.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */

var b="function"===typeof Symbol&&Symbol.for,c=b?Symbol.for("react.element"):60103,d=b?Symbol.for("react.portal"):60106,e=b?Symbol.for("react.fragment"):60107,f=b?Symbol.for("react.strict_mode"):60108,g=b?Symbol.for("react.profiler"):60114,h=b?Symbol.for("react.provider"):60109,k=b?Symbol.for("react.context"):60110,l=b?Symbol.for("react.async_mode"):60111,m=b?Symbol.for("react.concurrent_mode"):60111,n=b?Symbol.for("react.forward_ref"):60112,p=b?Symbol.for("react.suspense"):60113,q=b?
Symbol.for("react.suspense_list"):60120,r=b?Symbol.for("react.memo"):60115,t=b?Symbol.for("react.lazy"):60116,v=b?Symbol.for("react.block"):60121,w=b?Symbol.for("react.fundamental"):60117,x=b?Symbol.for("react.responder"):60118,y=b?Symbol.for("react.scope"):60119;
function z(a){if("object"===typeof a&&null!==a){var u=a.$$typeof;switch(u){case c:switch(a=a.type,a){case l:case m:case e:case g:case f:case p:return a;default:switch(a=a&&a.$$typeof,a){case k:case n:case t:case r:case h:return a;default:return u}}case d:return u}}}function A(a){return z(a)===m}exports.AsyncMode=l;exports.ConcurrentMode=m;exports.ContextConsumer=k;exports.ContextProvider=h;exports.Element=c;exports.ForwardRef=n;exports.Fragment=e;exports.Lazy=t;exports.Memo=r;exports.Portal=d;
exports.Profiler=g;exports.StrictMode=f;exports.Suspense=p;exports.isAsyncMode=function(a){return A(a)||z(a)===l};exports.isConcurrentMode=A;exports.isContextConsumer=function(a){return z(a)===k};exports.isContextProvider=function(a){return z(a)===h};exports.isElement=function(a){return"object"===typeof a&&null!==a&&a.$$typeof===c};exports.isForwardRef=function(a){return z(a)===n};exports.isFragment=function(a){return z(a)===e};exports.isLazy=function(a){return z(a)===t};
exports.isMemo=function(a){return z(a)===r};exports.isPortal=function(a){return z(a)===d};exports.isProfiler=function(a){return z(a)===g};exports.isStrictMode=function(a){return z(a)===f};exports.isSuspense=function(a){return z(a)===p};
exports.isValidElementType=function(a){return"string"===typeof a||"function"===typeof a||a===e||a===m||a===g||a===f||a===p||a===q||"object"===typeof a&&null!==a&&(a.$$typeof===t||a.$$typeof===r||a.$$typeof===h||a.$$typeof===k||a.$$typeof===n||a.$$typeof===w||a.$$typeof===x||a.$$typeof===y||a.$$typeof===v)};exports.typeOf=z;


/***/ }),
/* 110 */
/***/ ((__unused_webpack_module, exports) => {

"use strict";
/** @license React v16.13.1
 * react-is.development.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */





if ("MISSING_ENV_VAR".NODE_ENV !== "production") {
  (function() {
'use strict';

// The Symbol used to tag the ReactElement-like types. If there is no native Symbol
// nor polyfill, then a plain number is used for performance.
var hasSymbol = typeof Symbol === 'function' && Symbol.for;
var REACT_ELEMENT_TYPE = hasSymbol ? Symbol.for('react.element') : 0xeac7;
var REACT_PORTAL_TYPE = hasSymbol ? Symbol.for('react.portal') : 0xeaca;
var REACT_FRAGMENT_TYPE = hasSymbol ? Symbol.for('react.fragment') : 0xeacb;
var REACT_STRICT_MODE_TYPE = hasSymbol ? Symbol.for('react.strict_mode') : 0xeacc;
var REACT_PROFILER_TYPE = hasSymbol ? Symbol.for('react.profiler') : 0xead2;
var REACT_PROVIDER_TYPE = hasSymbol ? Symbol.for('react.provider') : 0xeacd;
var REACT_CONTEXT_TYPE = hasSymbol ? Symbol.for('react.context') : 0xeace; // TODO: We don't use AsyncMode or ConcurrentMode anymore. They were temporary
// (unstable) APIs that have been removed. Can we remove the symbols?

var REACT_ASYNC_MODE_TYPE = hasSymbol ? Symbol.for('react.async_mode') : 0xeacf;
var REACT_CONCURRENT_MODE_TYPE = hasSymbol ? Symbol.for('react.concurrent_mode') : 0xeacf;
var REACT_FORWARD_REF_TYPE = hasSymbol ? Symbol.for('react.forward_ref') : 0xead0;
var REACT_SUSPENSE_TYPE = hasSymbol ? Symbol.for('react.suspense') : 0xead1;
var REACT_SUSPENSE_LIST_TYPE = hasSymbol ? Symbol.for('react.suspense_list') : 0xead8;
var REACT_MEMO_TYPE = hasSymbol ? Symbol.for('react.memo') : 0xead3;
var REACT_LAZY_TYPE = hasSymbol ? Symbol.for('react.lazy') : 0xead4;
var REACT_BLOCK_TYPE = hasSymbol ? Symbol.for('react.block') : 0xead9;
var REACT_FUNDAMENTAL_TYPE = hasSymbol ? Symbol.for('react.fundamental') : 0xead5;
var REACT_RESPONDER_TYPE = hasSymbol ? Symbol.for('react.responder') : 0xead6;
var REACT_SCOPE_TYPE = hasSymbol ? Symbol.for('react.scope') : 0xead7;

function isValidElementType(type) {
  return typeof type === 'string' || typeof type === 'function' || // Note: its typeof might be other than 'symbol' or 'number' if it's a polyfill.
  type === REACT_FRAGMENT_TYPE || type === REACT_CONCURRENT_MODE_TYPE || type === REACT_PROFILER_TYPE || type === REACT_STRICT_MODE_TYPE || type === REACT_SUSPENSE_TYPE || type === REACT_SUSPENSE_LIST_TYPE || typeof type === 'object' && type !== null && (type.$$typeof === REACT_LAZY_TYPE || type.$$typeof === REACT_MEMO_TYPE || type.$$typeof === REACT_PROVIDER_TYPE || type.$$typeof === REACT_CONTEXT_TYPE || type.$$typeof === REACT_FORWARD_REF_TYPE || type.$$typeof === REACT_FUNDAMENTAL_TYPE || type.$$typeof === REACT_RESPONDER_TYPE || type.$$typeof === REACT_SCOPE_TYPE || type.$$typeof === REACT_BLOCK_TYPE);
}

function typeOf(object) {
  if (typeof object === 'object' && object !== null) {
    var $$typeof = object.$$typeof;

    switch ($$typeof) {
      case REACT_ELEMENT_TYPE:
        var type = object.type;

        switch (type) {
          case REACT_ASYNC_MODE_TYPE:
          case REACT_CONCURRENT_MODE_TYPE:
          case REACT_FRAGMENT_TYPE:
          case REACT_PROFILER_TYPE:
          case REACT_STRICT_MODE_TYPE:
          case REACT_SUSPENSE_TYPE:
            return type;

          default:
            var $$typeofType = type && type.$$typeof;

            switch ($$typeofType) {
              case REACT_CONTEXT_TYPE:
              case REACT_FORWARD_REF_TYPE:
              case REACT_LAZY_TYPE:
              case REACT_MEMO_TYPE:
              case REACT_PROVIDER_TYPE:
                return $$typeofType;

              default:
                return $$typeof;
            }

        }

      case REACT_PORTAL_TYPE:
        return $$typeof;
    }
  }

  return undefined;
} // AsyncMode is deprecated along with isAsyncMode

var AsyncMode = REACT_ASYNC_MODE_TYPE;
var ConcurrentMode = REACT_CONCURRENT_MODE_TYPE;
var ContextConsumer = REACT_CONTEXT_TYPE;
var ContextProvider = REACT_PROVIDER_TYPE;
var Element = REACT_ELEMENT_TYPE;
var ForwardRef = REACT_FORWARD_REF_TYPE;
var Fragment = REACT_FRAGMENT_TYPE;
var Lazy = REACT_LAZY_TYPE;
var Memo = REACT_MEMO_TYPE;
var Portal = REACT_PORTAL_TYPE;
var Profiler = REACT_PROFILER_TYPE;
var StrictMode = REACT_STRICT_MODE_TYPE;
var Suspense = REACT_SUSPENSE_TYPE;
var hasWarnedAboutDeprecatedIsAsyncMode = false; // AsyncMode should be deprecated

function isAsyncMode(object) {
  {
    if (!hasWarnedAboutDeprecatedIsAsyncMode) {
      hasWarnedAboutDeprecatedIsAsyncMode = true; // Using console['warn'] to evade Babel and ESLint

      console['warn']('The ReactIs.isAsyncMode() alias has been deprecated, ' + 'and will be removed in React 17+. Update your code to use ' + 'ReactIs.isConcurrentMode() instead. It has the exact same API.');
    }
  }

  return isConcurrentMode(object) || typeOf(object) === REACT_ASYNC_MODE_TYPE;
}
function isConcurrentMode(object) {
  return typeOf(object) === REACT_CONCURRENT_MODE_TYPE;
}
function isContextConsumer(object) {
  return typeOf(object) === REACT_CONTEXT_TYPE;
}
function isContextProvider(object) {
  return typeOf(object) === REACT_PROVIDER_TYPE;
}
function isElement(object) {
  return typeof object === 'object' && object !== null && object.$$typeof === REACT_ELEMENT_TYPE;
}
function isForwardRef(object) {
  return typeOf(object) === REACT_FORWARD_REF_TYPE;
}
function isFragment(object) {
  return typeOf(object) === REACT_FRAGMENT_TYPE;
}
function isLazy(object) {
  return typeOf(object) === REACT_LAZY_TYPE;
}
function isMemo(object) {
  return typeOf(object) === REACT_MEMO_TYPE;
}
function isPortal(object) {
  return typeOf(object) === REACT_PORTAL_TYPE;
}
function isProfiler(object) {
  return typeOf(object) === REACT_PROFILER_TYPE;
}
function isStrictMode(object) {
  return typeOf(object) === REACT_STRICT_MODE_TYPE;
}
function isSuspense(object) {
  return typeOf(object) === REACT_SUSPENSE_TYPE;
}

exports.AsyncMode = AsyncMode;
exports.ConcurrentMode = ConcurrentMode;
exports.ContextConsumer = ContextConsumer;
exports.ContextProvider = ContextProvider;
exports.Element = Element;
exports.ForwardRef = ForwardRef;
exports.Fragment = Fragment;
exports.Lazy = Lazy;
exports.Memo = Memo;
exports.Portal = Portal;
exports.Profiler = Profiler;
exports.StrictMode = StrictMode;
exports.Suspense = Suspense;
exports.isAsyncMode = isAsyncMode;
exports.isConcurrentMode = isConcurrentMode;
exports.isContextConsumer = isContextConsumer;
exports.isContextProvider = isContextProvider;
exports.isElement = isElement;
exports.isForwardRef = isForwardRef;
exports.isFragment = isFragment;
exports.isLazy = isLazy;
exports.isMemo = isMemo;
exports.isPortal = isPortal;
exports.isProfiler = isProfiler;
exports.isStrictMode = isStrictMode;
exports.isSuspense = isSuspense;
exports.isValidElementType = isValidElementType;
exports.typeOf = typeOf;
  })();
}


/***/ }),
/* 111 */
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
/**
 * Copyright (c) 2013-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */



var ReactIs = __webpack_require__(108);
var assign = __webpack_require__(49);

var ReactPropTypesSecret = __webpack_require__(52);
var checkPropTypes = __webpack_require__(51);

var has = Function.call.bind(Object.prototype.hasOwnProperty);
var printWarning = function() {};

if ("MISSING_ENV_VAR".NODE_ENV !== 'production') {
  printWarning = function(text) {
    var message = 'Warning: ' + text;
    if (typeof console !== 'undefined') {
      console.error(message);
    }
    try {
      // --- Welcome to debugging React ---
      // This error was thrown as a convenience so that you can use this stack
      // to find the callsite that caused this warning to fire.
      throw new Error(message);
    } catch (x) {}
  };
}

function emptyFunctionThatReturnsNull() {
  return null;
}

module.exports = function(isValidElement, throwOnDirectAccess) {
  /* global Symbol */
  var ITERATOR_SYMBOL = typeof Symbol === 'function' && Symbol.iterator;
  var FAUX_ITERATOR_SYMBOL = '@@iterator'; // Before Symbol spec.

  /**
   * Returns the iterator method function contained on the iterable object.
   *
   * Be sure to invoke the function with the iterable as context:
   *
   *     var iteratorFn = getIteratorFn(myIterable);
   *     if (iteratorFn) {
   *       var iterator = iteratorFn.call(myIterable);
   *       ...
   *     }
   *
   * @param {?object} maybeIterable
   * @return {?function}
   */
  function getIteratorFn(maybeIterable) {
    var iteratorFn = maybeIterable && (ITERATOR_SYMBOL && maybeIterable[ITERATOR_SYMBOL] || maybeIterable[FAUX_ITERATOR_SYMBOL]);
    if (typeof iteratorFn === 'function') {
      return iteratorFn;
    }
  }

  /**
   * Collection of methods that allow declaration and validation of props that are
   * supplied to React components. Example usage:
   *
   *   var Props = require('ReactPropTypes');
   *   var MyArticle = React.createClass({
   *     propTypes: {
   *       // An optional string prop named "description".
   *       description: Props.string,
   *
   *       // A required enum prop named "category".
   *       category: Props.oneOf(['News','Photos']).isRequired,
   *
   *       // A prop named "dialog" that requires an instance of Dialog.
   *       dialog: Props.instanceOf(Dialog).isRequired
   *     },
   *     render: function() { ... }
   *   });
   *
   * A more formal specification of how these methods are used:
   *
   *   type := array|bool|func|object|number|string|oneOf([...])|instanceOf(...)
   *   decl := ReactPropTypes.{type}(.isRequired)?
   *
   * Each and every declaration produces a function with the same signature. This
   * allows the creation of custom validation functions. For example:
   *
   *  var MyLink = React.createClass({
   *    propTypes: {
   *      // An optional string or URI prop named "href".
   *      href: function(props, propName, componentName) {
   *        var propValue = props[propName];
   *        if (propValue != null && typeof propValue !== 'string' &&
   *            !(propValue instanceof URI)) {
   *          return new Error(
   *            'Expected a string or an URI for ' + propName + ' in ' +
   *            componentName
   *          );
   *        }
   *      }
   *    },
   *    render: function() {...}
   *  });
   *
   * @internal
   */

  var ANONYMOUS = '<<anonymous>>';

  // Important!
  // Keep this list in sync with production version in `./factoryWithThrowingShims.js`.
  var ReactPropTypes = {
    array: createPrimitiveTypeChecker('array'),
    bool: createPrimitiveTypeChecker('boolean'),
    func: createPrimitiveTypeChecker('function'),
    number: createPrimitiveTypeChecker('number'),
    object: createPrimitiveTypeChecker('object'),
    string: createPrimitiveTypeChecker('string'),
    symbol: createPrimitiveTypeChecker('symbol'),

    any: createAnyTypeChecker(),
    arrayOf: createArrayOfTypeChecker,
    element: createElementTypeChecker(),
    elementType: createElementTypeTypeChecker(),
    instanceOf: createInstanceTypeChecker,
    node: createNodeChecker(),
    objectOf: createObjectOfTypeChecker,
    oneOf: createEnumTypeChecker,
    oneOfType: createUnionTypeChecker,
    shape: createShapeTypeChecker,
    exact: createStrictShapeTypeChecker,
  };

  /**
   * inlined Object.is polyfill to avoid requiring consumers ship their own
   * https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/is
   */
  /*eslint-disable no-self-compare*/
  function is(x, y) {
    // SameValue algorithm
    if (x === y) {
      // Steps 1-5, 7-10
      // Steps 6.b-6.e: +0 != -0
      return x !== 0 || 1 / x === 1 / y;
    } else {
      // Step 6.a: NaN == NaN
      return x !== x && y !== y;
    }
  }
  /*eslint-enable no-self-compare*/

  /**
   * We use an Error-like object for backward compatibility as people may call
   * PropTypes directly and inspect their output. However, we don't use real
   * Errors anymore. We don't inspect their stack anyway, and creating them
   * is prohibitively expensive if they are created too often, such as what
   * happens in oneOfType() for any type before the one that matched.
   */
  function PropTypeError(message) {
    this.message = message;
    this.stack = '';
  }
  // Make `instanceof Error` still work for returned errors.
  PropTypeError.prototype = Error.prototype;

  function createChainableTypeChecker(validate) {
    if ("MISSING_ENV_VAR".NODE_ENV !== 'production') {
      var manualPropTypeCallCache = {};
      var manualPropTypeWarningCount = 0;
    }
    function checkType(isRequired, props, propName, componentName, location, propFullName, secret) {
      componentName = componentName || ANONYMOUS;
      propFullName = propFullName || propName;

      if (secret !== ReactPropTypesSecret) {
        if (throwOnDirectAccess) {
          // New behavior only for users of `prop-types` package
          var err = new Error(
            'Calling PropTypes validators directly is not supported by the `prop-types` package. ' +
            'Use `PropTypes.checkPropTypes()` to call them. ' +
            'Read more at http://fb.me/use-check-prop-types'
          );
          err.name = 'Invariant Violation';
          throw err;
        } else if ("MISSING_ENV_VAR".NODE_ENV !== 'production' && typeof console !== 'undefined') {
          // Old behavior for people using React.PropTypes
          var cacheKey = componentName + ':' + propName;
          if (
            !manualPropTypeCallCache[cacheKey] &&
            // Avoid spamming the console because they are often not actionable except for lib authors
            manualPropTypeWarningCount < 3
          ) {
            printWarning(
              'You are manually calling a React.PropTypes validation ' +
              'function for the `' + propFullName + '` prop on `' + componentName  + '`. This is deprecated ' +
              'and will throw in the standalone `prop-types` package. ' +
              'You may be seeing this warning due to a third-party PropTypes ' +
              'library. See https://fb.me/react-warning-dont-call-proptypes ' + 'for details.'
            );
            manualPropTypeCallCache[cacheKey] = true;
            manualPropTypeWarningCount++;
          }
        }
      }
      if (props[propName] == null) {
        if (isRequired) {
          if (props[propName] === null) {
            return new PropTypeError('The ' + location + ' `' + propFullName + '` is marked as required ' + ('in `' + componentName + '`, but its value is `null`.'));
          }
          return new PropTypeError('The ' + location + ' `' + propFullName + '` is marked as required in ' + ('`' + componentName + '`, but its value is `undefined`.'));
        }
        return null;
      } else {
        return validate(props, propName, componentName, location, propFullName);
      }
    }

    var chainedCheckType = checkType.bind(null, false);
    chainedCheckType.isRequired = checkType.bind(null, true);

    return chainedCheckType;
  }

  function createPrimitiveTypeChecker(expectedType) {
    function validate(props, propName, componentName, location, propFullName, secret) {
      var propValue = props[propName];
      var propType = getPropType(propValue);
      if (propType !== expectedType) {
        // `propValue` being instance of, say, date/regexp, pass the 'object'
        // check, but we can offer a more precise error message here rather than
        // 'of type `object`'.
        var preciseType = getPreciseType(propValue);

        return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of type ' + ('`' + preciseType + '` supplied to `' + componentName + '`, expected ') + ('`' + expectedType + '`.'));
      }
      return null;
    }
    return createChainableTypeChecker(validate);
  }

  function createAnyTypeChecker() {
    return createChainableTypeChecker(emptyFunctionThatReturnsNull);
  }

  function createArrayOfTypeChecker(typeChecker) {
    function validate(props, propName, componentName, location, propFullName) {
      if (typeof typeChecker !== 'function') {
        return new PropTypeError('Property `' + propFullName + '` of component `' + componentName + '` has invalid PropType notation inside arrayOf.');
      }
      var propValue = props[propName];
      if (!Array.isArray(propValue)) {
        var propType = getPropType(propValue);
        return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of type ' + ('`' + propType + '` supplied to `' + componentName + '`, expected an array.'));
      }
      for (var i = 0; i < propValue.length; i++) {
        var error = typeChecker(propValue, i, componentName, location, propFullName + '[' + i + ']', ReactPropTypesSecret);
        if (error instanceof Error) {
          return error;
        }
      }
      return null;
    }
    return createChainableTypeChecker(validate);
  }

  function createElementTypeChecker() {
    function validate(props, propName, componentName, location, propFullName) {
      var propValue = props[propName];
      if (!isValidElement(propValue)) {
        var propType = getPropType(propValue);
        return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of type ' + ('`' + propType + '` supplied to `' + componentName + '`, expected a single ReactElement.'));
      }
      return null;
    }
    return createChainableTypeChecker(validate);
  }

  function createElementTypeTypeChecker() {
    function validate(props, propName, componentName, location, propFullName) {
      var propValue = props[propName];
      if (!ReactIs.isValidElementType(propValue)) {
        var propType = getPropType(propValue);
        return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of type ' + ('`' + propType + '` supplied to `' + componentName + '`, expected a single ReactElement type.'));
      }
      return null;
    }
    return createChainableTypeChecker(validate);
  }

  function createInstanceTypeChecker(expectedClass) {
    function validate(props, propName, componentName, location, propFullName) {
      if (!(props[propName] instanceof expectedClass)) {
        var expectedClassName = expectedClass.name || ANONYMOUS;
        var actualClassName = getClassName(props[propName]);
        return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of type ' + ('`' + actualClassName + '` supplied to `' + componentName + '`, expected ') + ('instance of `' + expectedClassName + '`.'));
      }
      return null;
    }
    return createChainableTypeChecker(validate);
  }

  function createEnumTypeChecker(expectedValues) {
    if (!Array.isArray(expectedValues)) {
      if ("MISSING_ENV_VAR".NODE_ENV !== 'production') {
        if (arguments.length > 1) {
          printWarning(
            'Invalid arguments supplied to oneOf, expected an array, got ' + arguments.length + ' arguments. ' +
            'A common mistake is to write oneOf(x, y, z) instead of oneOf([x, y, z]).'
          );
        } else {
          printWarning('Invalid argument supplied to oneOf, expected an array.');
        }
      }
      return emptyFunctionThatReturnsNull;
    }

    function validate(props, propName, componentName, location, propFullName) {
      var propValue = props[propName];
      for (var i = 0; i < expectedValues.length; i++) {
        if (is(propValue, expectedValues[i])) {
          return null;
        }
      }

      var valuesString = JSON.stringify(expectedValues, function replacer(key, value) {
        var type = getPreciseType(value);
        if (type === 'symbol') {
          return String(value);
        }
        return value;
      });
      return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of value `' + String(propValue) + '` ' + ('supplied to `' + componentName + '`, expected one of ' + valuesString + '.'));
    }
    return createChainableTypeChecker(validate);
  }

  function createObjectOfTypeChecker(typeChecker) {
    function validate(props, propName, componentName, location, propFullName) {
      if (typeof typeChecker !== 'function') {
        return new PropTypeError('Property `' + propFullName + '` of component `' + componentName + '` has invalid PropType notation inside objectOf.');
      }
      var propValue = props[propName];
      var propType = getPropType(propValue);
      if (propType !== 'object') {
        return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of type ' + ('`' + propType + '` supplied to `' + componentName + '`, expected an object.'));
      }
      for (var key in propValue) {
        if (has(propValue, key)) {
          var error = typeChecker(propValue, key, componentName, location, propFullName + '.' + key, ReactPropTypesSecret);
          if (error instanceof Error) {
            return error;
          }
        }
      }
      return null;
    }
    return createChainableTypeChecker(validate);
  }

  function createUnionTypeChecker(arrayOfTypeCheckers) {
    if (!Array.isArray(arrayOfTypeCheckers)) {
      "MISSING_ENV_VAR".NODE_ENV !== 'production' ? printWarning('Invalid argument supplied to oneOfType, expected an instance of array.') : void 0;
      return emptyFunctionThatReturnsNull;
    }

    for (var i = 0; i < arrayOfTypeCheckers.length; i++) {
      var checker = arrayOfTypeCheckers[i];
      if (typeof checker !== 'function') {
        printWarning(
          'Invalid argument supplied to oneOfType. Expected an array of check functions, but ' +
          'received ' + getPostfixForTypeWarning(checker) + ' at index ' + i + '.'
        );
        return emptyFunctionThatReturnsNull;
      }
    }

    function validate(props, propName, componentName, location, propFullName) {
      for (var i = 0; i < arrayOfTypeCheckers.length; i++) {
        var checker = arrayOfTypeCheckers[i];
        if (checker(props, propName, componentName, location, propFullName, ReactPropTypesSecret) == null) {
          return null;
        }
      }

      return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` supplied to ' + ('`' + componentName + '`.'));
    }
    return createChainableTypeChecker(validate);
  }

  function createNodeChecker() {
    function validate(props, propName, componentName, location, propFullName) {
      if (!isNode(props[propName])) {
        return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` supplied to ' + ('`' + componentName + '`, expected a ReactNode.'));
      }
      return null;
    }
    return createChainableTypeChecker(validate);
  }

  function createShapeTypeChecker(shapeTypes) {
    function validate(props, propName, componentName, location, propFullName) {
      var propValue = props[propName];
      var propType = getPropType(propValue);
      if (propType !== 'object') {
        return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of type `' + propType + '` ' + ('supplied to `' + componentName + '`, expected `object`.'));
      }
      for (var key in shapeTypes) {
        var checker = shapeTypes[key];
        if (!checker) {
          continue;
        }
        var error = checker(propValue, key, componentName, location, propFullName + '.' + key, ReactPropTypesSecret);
        if (error) {
          return error;
        }
      }
      return null;
    }
    return createChainableTypeChecker(validate);
  }

  function createStrictShapeTypeChecker(shapeTypes) {
    function validate(props, propName, componentName, location, propFullName) {
      var propValue = props[propName];
      var propType = getPropType(propValue);
      if (propType !== 'object') {
        return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of type `' + propType + '` ' + ('supplied to `' + componentName + '`, expected `object`.'));
      }
      // We need to check all keys in case some are required but missing from
      // props.
      var allKeys = assign({}, props[propName], shapeTypes);
      for (var key in allKeys) {
        var checker = shapeTypes[key];
        if (!checker) {
          return new PropTypeError(
            'Invalid ' + location + ' `' + propFullName + '` key `' + key + '` supplied to `' + componentName + '`.' +
            '\nBad object: ' + JSON.stringify(props[propName], null, '  ') +
            '\nValid keys: ' +  JSON.stringify(Object.keys(shapeTypes), null, '  ')
          );
        }
        var error = checker(propValue, key, componentName, location, propFullName + '.' + key, ReactPropTypesSecret);
        if (error) {
          return error;
        }
      }
      return null;
    }

    return createChainableTypeChecker(validate);
  }

  function isNode(propValue) {
    switch (typeof propValue) {
      case 'number':
      case 'string':
      case 'undefined':
        return true;
      case 'boolean':
        return !propValue;
      case 'object':
        if (Array.isArray(propValue)) {
          return propValue.every(isNode);
        }
        if (propValue === null || isValidElement(propValue)) {
          return true;
        }

        var iteratorFn = getIteratorFn(propValue);
        if (iteratorFn) {
          var iterator = iteratorFn.call(propValue);
          var step;
          if (iteratorFn !== propValue.entries) {
            while (!(step = iterator.next()).done) {
              if (!isNode(step.value)) {
                return false;
              }
            }
          } else {
            // Iterator will provide entry [k,v] tuples rather than values.
            while (!(step = iterator.next()).done) {
              var entry = step.value;
              if (entry) {
                if (!isNode(entry[1])) {
                  return false;
                }
              }
            }
          }
        } else {
          return false;
        }

        return true;
      default:
        return false;
    }
  }

  function isSymbol(propType, propValue) {
    // Native Symbol.
    if (propType === 'symbol') {
      return true;
    }

    // falsy value can't be a Symbol
    if (!propValue) {
      return false;
    }

    // 19.4.3.5 Symbol.prototype[@@toStringTag] === 'Symbol'
    if (propValue['@@toStringTag'] === 'Symbol') {
      return true;
    }

    // Fallback for non-spec compliant Symbols which are polyfilled.
    if (typeof Symbol === 'function' && propValue instanceof Symbol) {
      return true;
    }

    return false;
  }

  // Equivalent of `typeof` but with special handling for array and regexp.
  function getPropType(propValue) {
    var propType = typeof propValue;
    if (Array.isArray(propValue)) {
      return 'array';
    }
    if (propValue instanceof RegExp) {
      // Old webkits (at least until Android 4.0) return 'function' rather than
      // 'object' for typeof a RegExp. We'll normalize this here so that /bla/
      // passes PropTypes.object.
      return 'object';
    }
    if (isSymbol(propType, propValue)) {
      return 'symbol';
    }
    return propType;
  }

  // This handles more types than `getPropType`. Only used for error messages.
  // See `createPrimitiveTypeChecker`.
  function getPreciseType(propValue) {
    if (typeof propValue === 'undefined' || propValue === null) {
      return '' + propValue;
    }
    var propType = getPropType(propValue);
    if (propType === 'object') {
      if (propValue instanceof Date) {
        return 'date';
      } else if (propValue instanceof RegExp) {
        return 'regexp';
      }
    }
    return propType;
  }

  // Returns a string that is postfixed to a warning about an invalid type.
  // For example, "undefined" or "of type array"
  function getPostfixForTypeWarning(value) {
    var type = getPreciseType(value);
    switch (type) {
      case 'array':
      case 'object':
        return 'an ' + type;
      case 'boolean':
      case 'date':
      case 'regexp':
        return 'a ' + type;
      default:
        return type;
    }
  }

  // Returns class name of the object, if any.
  function getClassName(propValue) {
    if (!propValue.constructor || !propValue.constructor.name) {
      return ANONYMOUS;
    }
    return propValue.constructor.name;
  }

  ReactPropTypes.checkPropTypes = checkPropTypes;
  ReactPropTypes.resetWarningCache = checkPropTypes.resetWarningCache;
  ReactPropTypes.PropTypes = ReactPropTypes;

  return ReactPropTypes;
};


/***/ }),
/* 112 */
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
/**
 * Copyright (c) 2013-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */



var ReactPropTypesSecret = __webpack_require__(52);

function emptyFunction() {}
function emptyFunctionWithReset() {}
emptyFunctionWithReset.resetWarningCache = emptyFunction;

module.exports = function() {
  function shim(props, propName, componentName, location, propFullName, secret) {
    if (secret === ReactPropTypesSecret) {
      // It is still safe when called from React.
      return;
    }
    var err = new Error(
      'Calling PropTypes validators directly is not supported by the `prop-types` package. ' +
      'Use PropTypes.checkPropTypes() to call them. ' +
      'Read more at http://fb.me/use-check-prop-types'
    );
    err.name = 'Invariant Violation';
    throw err;
  };
  shim.isRequired = shim;
  function getShim() {
    return shim;
  };
  // Important!
  // Keep this list in sync with production version in `./factoryWithTypeCheckers.js`.
  var ReactPropTypes = {
    array: shim,
    bool: shim,
    func: shim,
    number: shim,
    object: shim,
    string: shim,
    symbol: shim,

    any: shim,
    arrayOf: getShim,
    element: shim,
    elementType: shim,
    instanceOf: getShim,
    node: shim,
    objectOf: getShim,
    oneOf: getShim,
    oneOfType: getShim,
    shape: getShim,
    exact: getShim,

    checkPropTypes: emptyFunctionWithReset,
    resetWarningCache: emptyFunction
  };

  ReactPropTypes.PropTypes = ReactPropTypes;

  return ReactPropTypes;
};


/***/ }),
/* 113 */
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "Tokens": () => (/* binding */ Tokens)
/* harmony export */ });
/* harmony import */ var core_js_modules_es_object_define_property_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(1);
/* harmony import */ var core_js_modules_es_object_define_property_js__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_object_define_property_js__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _fonts_tsx__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(114);
/* harmony import */ var _tokens_tsx__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(127);
/* harmony import */ var _icons_icons__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(128);
/* harmony import */ var _colors_tsx__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(129);
/* harmony import */ var _icons_iconsAdquirente__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(130);
/* harmony import */ var _icons_illustrations__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(131);
/* harmony import */ var _icons_iconsBanco__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(132);
/* harmony import */ var _global_css__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(133);
/* harmony import */ var _global_css__WEBPACK_IMPORTED_MODULE_8___default = /*#__PURE__*/__webpack_require__.n(_global_css__WEBPACK_IMPORTED_MODULE_8__);


function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }









var Tokens = _objectSpread({
  colors: _colors_tsx__WEBPACK_IMPORTED_MODULE_4__["default"],
  fonts: _fonts_tsx__WEBPACK_IMPORTED_MODULE_1__["default"],
  icons: _icons_icons__WEBPACK_IMPORTED_MODULE_3__["default"],
  iconsAdquirentes: _icons_iconsAdquirente__WEBPACK_IMPORTED_MODULE_5__["default"],
  iconsBanco: _icons_iconsBanco__WEBPACK_IMPORTED_MODULE_7__["default"],
  illustrations: _icons_illustrations__WEBPACK_IMPORTED_MODULE_6__["default"]
}, _tokens_tsx__WEBPACK_IMPORTED_MODULE_2__["default"]);

/***/ }),
/* 114 */
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _fontsImport_css__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(115);
/* harmony import */ var _fontsImport_css__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_fontsImport_css__WEBPACK_IMPORTED_MODULE_0__);

var fonts = {
    family: {
        head: 'Mark Pro',
        body: 'Roboto',
        condensed: 'Roboto Condensed',
        monospace: 'Roboto Mono',
    },
    weight: {
        bold: '700',
        medium: '500',
        regular: '400',
        light: '300',
    },
    fontSize: {
        xxxs: '10px',
        xxs: '12px',
        xs: '14px',
        sm: '16px',
        md: '18px',
        mdb: '20px',
        lg: '24px',
        llg: '28px',
        xl: '32px',
    },
};
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (fonts);


/***/ }),
/* 115 */
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {


var content = __webpack_require__(116);

if(typeof content === 'string') content = [[module.id, content, '']];

var transform;
var insertInto;



var options = {"hmr":true}

options.transform = transform
options.insertInto = undefined;

var update = __webpack_require__(125)(content, options);

if(content.locals) module.exports = content.locals;

if(false) {}

/***/ }),
/* 116 */
/***/ ((module, exports, __webpack_require__) => {

var escape = __webpack_require__(117);
exports = module.exports = __webpack_require__(118)(false);
// imports
exports.push([module.id, "@import url(https://fonts.googleapis.com/css2?family=Roboto:wght@300;400;500;700&display=swap);", ""]);
exports.push([module.id, "@import url(https://fonts.googleapis.com/css2?family=Roboto+Condensed:wght@300;400;500;700&display=swap);", ""]);
exports.push([module.id, "@import url(https://fonts.googleapis.com/css2?family=Roboto+Mono:wght@300;400;500;700&display=swap);", ""]);

// module
exports.push([module.id, "/*Roboto*/\n/*Roboto Condensed*/\n/*Roboto Mono*/\n/*Mark Pro*/\n@font-face {\n  font-family: \"Mark Pro\";\n  font-style: normal;\n  font-weight: normal;\n  src: local(\"Mark Pro Regular\"), url(" + escape(__webpack_require__(119)) + ") format(\"woff\");\n}\n@font-face {\n  font-family: \"Mark Pro\";\n  font-style: normal;\n  font-weight: 400;\n  src: local(\"Mark Pro Regular\"), url(" + escape(__webpack_require__(119)) + ") format(\"woff\");\n}\n@font-face {\n  font-family: \"Mark Pro\";\n  font-style: normal;\n  font-weight: 300;\n  src: local(\"Mark Pro Light\"), url(" + escape(__webpack_require__(120)) + ") format(\"woff\");\n}\n@font-face {\n  font-family: \"Mark Pro\";\n  font-style: normal;\n  font-weight: 500;\n  src: local(\"Mark Pro Medium\"), url(" + escape(__webpack_require__(121)) + ") format(\"woff\");\n}\n@font-face {\n  font-family: \"Mark Pro\";\n  font-style: normal;\n  font-weight: 700;\n  src: local(\"Mark Pro Bold\"), url(" + escape(__webpack_require__(122)) + ") format(\"woff\");\n}\n@font-face {\n  font-family: \"Consolas\";\n  font-style: normal;\n  font-weight: normal;\n  src: local(\"Consolas\"), url(" + escape(__webpack_require__(123)) + ") format(\"woff\");\n}\n@font-face {\n  font-family: \"Consolas\";\n  font-style: normal;\n  font-weight: 700;\n  src: local(\"Consolas Bold\"), url(" + escape(__webpack_require__(124)) + ") format(\"woff\");\n}", ""]);

// exports


/***/ }),
/* 117 */
/***/ ((module) => {

module.exports = function escape(url) {
    if (typeof url !== 'string') {
        return url
    }
    // If url is already wrapped in quotes, remove them
    if (/^['"].*['"]$/.test(url)) {
        url = url.slice(1, -1);
    }
    // Should url be wrapped?
    // See https://drafts.csswg.org/css-values-3/#urls
    if (/["'() \t\n]/.test(url)) {
        return '"' + url.replace(/"/g, '\\"').replace(/\n/g, '\\n') + '"'
    }

    return url
}


/***/ }),
/* 118 */
/***/ ((module) => {

/*
	MIT License http://www.opensource.org/licenses/mit-license.php
	Author Tobias Koppers @sokra
*/
// css base code, injected by the css-loader
module.exports = function(useSourceMap) {
	var list = [];

	// return the list of modules as css string
	list.toString = function toString() {
		return this.map(function (item) {
			var content = cssWithMappingToString(item, useSourceMap);
			if(item[2]) {
				return "@media " + item[2] + "{" + content + "}";
			} else {
				return content;
			}
		}).join("");
	};

	// import a list of modules into the list
	list.i = function(modules, mediaQuery) {
		if(typeof modules === "string")
			modules = [[null, modules, ""]];
		var alreadyImportedModules = {};
		for(var i = 0; i < this.length; i++) {
			var id = this[i][0];
			if(typeof id === "number")
				alreadyImportedModules[id] = true;
		}
		for(i = 0; i < modules.length; i++) {
			var item = modules[i];
			// skip already imported module
			// this implementation is not 100% perfect for weird media query combinations
			//  when a module is imported multiple times with different media queries.
			//  I hope this will never occur (Hey this way we have smaller bundles)
			if(typeof item[0] !== "number" || !alreadyImportedModules[item[0]]) {
				if(mediaQuery && !item[2]) {
					item[2] = mediaQuery;
				} else if(mediaQuery) {
					item[2] = "(" + item[2] + ") and (" + mediaQuery + ")";
				}
				list.push(item);
			}
		}
	};
	return list;
};

function cssWithMappingToString(item, useSourceMap) {
	var content = item[1] || '';
	var cssMapping = item[3];
	if (!cssMapping) {
		return content;
	}

	if (useSourceMap && typeof btoa === 'function') {
		var sourceMapping = toComment(cssMapping);
		var sourceURLs = cssMapping.sources.map(function (source) {
			return '/*# sourceURL=' + cssMapping.sourceRoot + source + ' */'
		});

		return [content].concat(sourceURLs).concat([sourceMapping]).join('\n');
	}

	return [content].join('\n');
}

// Adapted from convert-source-map (MIT)
function toComment(sourceMap) {
	// eslint-disable-next-line no-undef
	var base64 = btoa(unescape(encodeURIComponent(JSON.stringify(sourceMap))));
	var data = 'sourceMappingURL=data:application/json;charset=utf-8;base64,' + base64;

	return '/*# ' + data + ' */';
}


/***/ }),
/* 119 */
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

module.exports = __webpack_require__.p + "fonts/MARKPRO.woff";

/***/ }),
/* 120 */
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

module.exports = __webpack_require__.p + "fonts/MARKPROLIGHT.woff";

/***/ }),
/* 121 */
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

module.exports = __webpack_require__.p + "fonts/MARKPROMEDIUM.woff";

/***/ }),
/* 122 */
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

module.exports = __webpack_require__.p + "fonts/MARKPROBOLD.woff";

/***/ }),
/* 123 */
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

module.exports = __webpack_require__.p + "fonts/Consolas.woff";

/***/ }),
/* 124 */
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

module.exports = __webpack_require__.p + "fonts/Consolas-Bold.woff";

/***/ }),
/* 125 */
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

/*
	MIT License http://www.opensource.org/licenses/mit-license.php
	Author Tobias Koppers @sokra
*/

var stylesInDom = {};

var	memoize = function (fn) {
	var memo;

	return function () {
		if (typeof memo === "undefined") memo = fn.apply(this, arguments);
		return memo;
	};
};

var isOldIE = memoize(function () {
	// Test for IE <= 9 as proposed by Browserhacks
	// @see http://browserhacks.com/#hack-e71d8692f65334173fee715c222cb805
	// Tests for existence of standard globals is to allow style-loader
	// to operate correctly into non-standard environments
	// @see https://github.com/webpack-contrib/style-loader/issues/177
	return window && document && document.all && !window.atob;
});

var getTarget = function (target, parent) {
  if (parent){
    return parent.querySelector(target);
  }
  return document.querySelector(target);
};

var getElement = (function (fn) {
	var memo = {};

	return function(target, parent) {
                // If passing function in options, then use it for resolve "head" element.
                // Useful for Shadow Root style i.e
                // {
                //   insertInto: function () { return document.querySelector("#foo").shadowRoot }
                // }
                if (typeof target === 'function') {
                        return target();
                }
                if (typeof memo[target] === "undefined") {
			var styleTarget = getTarget.call(this, target, parent);
			// Special case to return head of iframe instead of iframe itself
			if (window.HTMLIFrameElement && styleTarget instanceof window.HTMLIFrameElement) {
				try {
					// This will throw an exception if access to iframe is blocked
					// due to cross-origin restrictions
					styleTarget = styleTarget.contentDocument.head;
				} catch(e) {
					styleTarget = null;
				}
			}
			memo[target] = styleTarget;
		}
		return memo[target]
	};
})();

var singleton = null;
var	singletonCounter = 0;
var	stylesInsertedAtTop = [];

var	fixUrls = __webpack_require__(126);

module.exports = function(list, options) {
	if (typeof DEBUG !== "undefined" && DEBUG) {
		if (typeof document !== "object") throw new Error("The style-loader cannot be used in a non-browser environment");
	}

	options = options || {};

	options.attrs = typeof options.attrs === "object" ? options.attrs : {};

	// Force single-tag solution on IE6-9, which has a hard limit on the # of <style>
	// tags it will allow on a page
	if (!options.singleton && typeof options.singleton !== "boolean") options.singleton = isOldIE();

	// By default, add <style> tags to the <head> element
        if (!options.insertInto) options.insertInto = "head";

	// By default, add <style> tags to the bottom of the target
	if (!options.insertAt) options.insertAt = "bottom";

	var styles = listToStyles(list, options);

	addStylesToDom(styles, options);

	return function update (newList) {
		var mayRemove = [];

		for (var i = 0; i < styles.length; i++) {
			var item = styles[i];
			var domStyle = stylesInDom[item.id];

			domStyle.refs--;
			mayRemove.push(domStyle);
		}

		if(newList) {
			var newStyles = listToStyles(newList, options);
			addStylesToDom(newStyles, options);
		}

		for (var i = 0; i < mayRemove.length; i++) {
			var domStyle = mayRemove[i];

			if(domStyle.refs === 0) {
				for (var j = 0; j < domStyle.parts.length; j++) domStyle.parts[j]();

				delete stylesInDom[domStyle.id];
			}
		}
	};
};

function addStylesToDom (styles, options) {
	for (var i = 0; i < styles.length; i++) {
		var item = styles[i];
		var domStyle = stylesInDom[item.id];

		if(domStyle) {
			domStyle.refs++;

			for(var j = 0; j < domStyle.parts.length; j++) {
				domStyle.parts[j](item.parts[j]);
			}

			for(; j < item.parts.length; j++) {
				domStyle.parts.push(addStyle(item.parts[j], options));
			}
		} else {
			var parts = [];

			for(var j = 0; j < item.parts.length; j++) {
				parts.push(addStyle(item.parts[j], options));
			}

			stylesInDom[item.id] = {id: item.id, refs: 1, parts: parts};
		}
	}
}

function listToStyles (list, options) {
	var styles = [];
	var newStyles = {};

	for (var i = 0; i < list.length; i++) {
		var item = list[i];
		var id = options.base ? item[0] + options.base : item[0];
		var css = item[1];
		var media = item[2];
		var sourceMap = item[3];
		var part = {css: css, media: media, sourceMap: sourceMap};

		if(!newStyles[id]) styles.push(newStyles[id] = {id: id, parts: [part]});
		else newStyles[id].parts.push(part);
	}

	return styles;
}

function insertStyleElement (options, style) {
	var target = getElement(options.insertInto)

	if (!target) {
		throw new Error("Couldn't find a style target. This probably means that the value for the 'insertInto' parameter is invalid.");
	}

	var lastStyleElementInsertedAtTop = stylesInsertedAtTop[stylesInsertedAtTop.length - 1];

	if (options.insertAt === "top") {
		if (!lastStyleElementInsertedAtTop) {
			target.insertBefore(style, target.firstChild);
		} else if (lastStyleElementInsertedAtTop.nextSibling) {
			target.insertBefore(style, lastStyleElementInsertedAtTop.nextSibling);
		} else {
			target.appendChild(style);
		}
		stylesInsertedAtTop.push(style);
	} else if (options.insertAt === "bottom") {
		target.appendChild(style);
	} else if (typeof options.insertAt === "object" && options.insertAt.before) {
		var nextSibling = getElement(options.insertAt.before, target);
		target.insertBefore(style, nextSibling);
	} else {
		throw new Error("[Style Loader]\n\n Invalid value for parameter 'insertAt' ('options.insertAt') found.\n Must be 'top', 'bottom', or Object.\n (https://github.com/webpack-contrib/style-loader#insertat)\n");
	}
}

function removeStyleElement (style) {
	if (style.parentNode === null) return false;
	style.parentNode.removeChild(style);

	var idx = stylesInsertedAtTop.indexOf(style);
	if(idx >= 0) {
		stylesInsertedAtTop.splice(idx, 1);
	}
}

function createStyleElement (options) {
	var style = document.createElement("style");

	if(options.attrs.type === undefined) {
		options.attrs.type = "text/css";
	}

	if(options.attrs.nonce === undefined) {
		var nonce = getNonce();
		if (nonce) {
			options.attrs.nonce = nonce;
		}
	}

	addAttrs(style, options.attrs);
	insertStyleElement(options, style);

	return style;
}

function createLinkElement (options) {
	var link = document.createElement("link");

	if(options.attrs.type === undefined) {
		options.attrs.type = "text/css";
	}
	options.attrs.rel = "stylesheet";

	addAttrs(link, options.attrs);
	insertStyleElement(options, link);

	return link;
}

function addAttrs (el, attrs) {
	Object.keys(attrs).forEach(function (key) {
		el.setAttribute(key, attrs[key]);
	});
}

function getNonce() {
	if (false) {}

	return __webpack_require__.nc;
}

function addStyle (obj, options) {
	var style, update, remove, result;

	// If a transform function was defined, run it on the css
	if (options.transform && obj.css) {
	    result = options.transform(obj.css);

	    if (result) {
	    	// If transform returns a value, use that instead of the original css.
	    	// This allows running runtime transformations on the css.
	    	obj.css = result;
	    } else {
	    	// If the transform function returns a falsy value, don't add this css.
	    	// This allows conditional loading of css
	    	return function() {
	    		// noop
	    	};
	    }
	}

	if (options.singleton) {
		var styleIndex = singletonCounter++;

		style = singleton || (singleton = createStyleElement(options));

		update = applyToSingletonTag.bind(null, style, styleIndex, false);
		remove = applyToSingletonTag.bind(null, style, styleIndex, true);

	} else if (
		obj.sourceMap &&
		typeof URL === "function" &&
		typeof URL.createObjectURL === "function" &&
		typeof URL.revokeObjectURL === "function" &&
		typeof Blob === "function" &&
		typeof btoa === "function"
	) {
		style = createLinkElement(options);
		update = updateLink.bind(null, style, options);
		remove = function () {
			removeStyleElement(style);

			if(style.href) URL.revokeObjectURL(style.href);
		};
	} else {
		style = createStyleElement(options);
		update = applyToTag.bind(null, style);
		remove = function () {
			removeStyleElement(style);
		};
	}

	update(obj);

	return function updateStyle (newObj) {
		if (newObj) {
			if (
				newObj.css === obj.css &&
				newObj.media === obj.media &&
				newObj.sourceMap === obj.sourceMap
			) {
				return;
			}

			update(obj = newObj);
		} else {
			remove();
		}
	};
}

var replaceText = (function () {
	var textStore = [];

	return function (index, replacement) {
		textStore[index] = replacement;

		return textStore.filter(Boolean).join('\n');
	};
})();

function applyToSingletonTag (style, index, remove, obj) {
	var css = remove ? "" : obj.css;

	if (style.styleSheet) {
		style.styleSheet.cssText = replaceText(index, css);
	} else {
		var cssNode = document.createTextNode(css);
		var childNodes = style.childNodes;

		if (childNodes[index]) style.removeChild(childNodes[index]);

		if (childNodes.length) {
			style.insertBefore(cssNode, childNodes[index]);
		} else {
			style.appendChild(cssNode);
		}
	}
}

function applyToTag (style, obj) {
	var css = obj.css;
	var media = obj.media;

	if(media) {
		style.setAttribute("media", media)
	}

	if(style.styleSheet) {
		style.styleSheet.cssText = css;
	} else {
		while(style.firstChild) {
			style.removeChild(style.firstChild);
		}

		style.appendChild(document.createTextNode(css));
	}
}

function updateLink (link, options, obj) {
	var css = obj.css;
	var sourceMap = obj.sourceMap;

	/*
		If convertToAbsoluteUrls isn't defined, but sourcemaps are enabled
		and there is no publicPath defined then lets turn convertToAbsoluteUrls
		on by default.  Otherwise default to the convertToAbsoluteUrls option
		directly
	*/
	var autoFixUrls = options.convertToAbsoluteUrls === undefined && sourceMap;

	if (options.convertToAbsoluteUrls || autoFixUrls) {
		css = fixUrls(css);
	}

	if (sourceMap) {
		// http://stackoverflow.com/a/26603875
		css += "\n/*# sourceMappingURL=data:application/json;base64," + btoa(unescape(encodeURIComponent(JSON.stringify(sourceMap)))) + " */";
	}

	var blob = new Blob([css], { type: "text/css" });

	var oldSrc = link.href;

	link.href = URL.createObjectURL(blob);

	if(oldSrc) URL.revokeObjectURL(oldSrc);
}


/***/ }),
/* 126 */
/***/ ((module) => {


/**
 * When source maps are enabled, `style-loader` uses a link element with a data-uri to
 * embed the css on the page. This breaks all relative urls because now they are relative to a
 * bundle instead of the current page.
 *
 * One solution is to only use full urls, but that may be impossible.
 *
 * Instead, this function "fixes" the relative urls to be absolute according to the current page location.
 *
 * A rudimentary test suite is located at `test/fixUrls.js` and can be run via the `npm test` command.
 *
 */

module.exports = function (css) {
  // get current location
  var location = typeof window !== "undefined" && window.location;

  if (!location) {
    throw new Error("fixUrls requires window.location");
  }

	// blank or null?
	if (!css || typeof css !== "string") {
	  return css;
  }

  var baseUrl = location.protocol + "//" + location.host;
  var currentDir = baseUrl + location.pathname.replace(/\/[^\/]*$/, "/");

	// convert each url(...)
	/*
	This regular expression is just a way to recursively match brackets within
	a string.

	 /url\s*\(  = Match on the word "url" with any whitespace after it and then a parens
	   (  = Start a capturing group
	     (?:  = Start a non-capturing group
	         [^)(]  = Match anything that isn't a parentheses
	         |  = OR
	         \(  = Match a start parentheses
	             (?:  = Start another non-capturing groups
	                 [^)(]+  = Match anything that isn't a parentheses
	                 |  = OR
	                 \(  = Match a start parentheses
	                     [^)(]*  = Match anything that isn't a parentheses
	                 \)  = Match a end parentheses
	             )  = End Group
              *\) = Match anything and then a close parens
          )  = Close non-capturing group
          *  = Match anything
       )  = Close capturing group
	 \)  = Match a close parens

	 /gi  = Get all matches, not the first.  Be case insensitive.
	 */
	var fixedCss = css.replace(/url\s*\(((?:[^)(]|\((?:[^)(]+|\([^)(]*\))*\))*)\)/gi, function(fullMatch, origUrl) {
		// strip quotes (if they exist)
		var unquotedOrigUrl = origUrl
			.trim()
			.replace(/^"(.*)"$/, function(o, $1){ return $1; })
			.replace(/^'(.*)'$/, function(o, $1){ return $1; });

		// already a full url? no change
		if (/^(#|data:|http:\/\/|https:\/\/|file:\/\/\/|\s*$)/i.test(unquotedOrigUrl)) {
		  return fullMatch;
		}

		// convert the url to a full url
		var newUrl;

		if (unquotedOrigUrl.indexOf("//") === 0) {
		  	//TODO: should we add protocol?
			newUrl = unquotedOrigUrl;
		} else if (unquotedOrigUrl.indexOf("/") === 0) {
			// path should be relative to the base url
			newUrl = baseUrl + unquotedOrigUrl; // already starts with '/'
		} else {
			// path should be relative to current directory
			newUrl = currentDir + unquotedOrigUrl.replace(/^\.\//, ""); // Strip leading './'
		}

		// send back the fixed url(...)
		return "url(" + JSON.stringify(newUrl) + ")";
	});

	// send back the fixed css
	return fixedCss;
};


/***/ }),
/* 127 */
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
var tokens = {
    border: {
        radius: {
            xs: '2px',
            sm: '4px',
            md: '8px',
            lg: '16px',
            pill: '500px',
            circular: '50%',
        },
        width: {
            hairline: '1px',
            thin: '2px',
            thick: '4px',
            heavy: '8px',
        },
    },
    opacity: {
        level: {
            semiopaque: 0.8,
            intense: 0.6,
            medium: 0.4,
            light: 0.2,
            semitransparent: 0.1,
        },
    },
    shadow: {
        level0: '0px 0px 3px rgba(0, 0, 0, 0.15)',
        level1: '0px 0px 8px rgba(0, 39, 64, 0.1)',
        level2: '0px 0px 24px rgba(0, 39, 64, 0.1)',
        level3: '0px 0px 32px rgba(0, 39, 64, 0.1)',
        level4: '0px 0px 48px rgba(0, 39, 64, 0.1)',
    },
    spacing: {
        inset: {
            quarck: '4px',
            nano: '8px',
            xs: '16px',
            sm: '24px',
            md: '32px',
            lg: '40px',
        },
        squish: {
            quarck: '4px 8px',
            nano: '8px 16px',
            xnano: '8px 24px',
            xs: '16px 24px',
            sm: '16px 32px',
            md: '16px 40px',
            lg: '16px 48px',
        },
        inline: {
            quarck: '4px',
            nano: '8px',
            xxxs: '16px',
            xxs: '24px',
            xs: '32px',
            sm: '40px',
            md: '48px',
            lg: '64px',
            xl: '80px',
        },
        stack: {
            quarck: '4px',
            nano: '8px',
            xxxs: '16px',
            xxs: '24px',
            xs: '32px',
            sm: '40px',
            md: '48px',
            lg: '56px',
            xl: '64px',
            xxl: '80px',
            xxxl: '120px',
            huge: '160px',
            giant: '200px',
        },
    },
    iconSize: {
        sm: '8px',
        md: '16px',
        lg: '24px',
    },
};
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (tokens);


/***/ }),
/* 128 */
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
var icons = {
  phone: "<svg width=\"14\" height=\"14\" viewBox=\"0 0 14 14\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\"><path fill-rule=\"evenodd\" clip-rule=\"evenodd\" d=\"M2.80729 6.05208C3.39063 7.17014 4.11371 8.16059 4.97656 9.02344C5.83941 9.88629 6.82986 10.6094 7.94792 11.1927L9.66146 9.47917C9.90452 9.26042 10.1719 9.19965 10.4635 9.29688C11.3385 9.58854 12.2621 9.73438 13.2344 9.73438C13.4531 9.73438 13.6354 9.80729 13.7812 9.95312C13.9271 10.099 14 10.2812 14 10.5V13.2344C14 13.4531 13.9271 13.6354 13.7812 13.7812C13.6354 13.9271 13.4531 14 13.2344 14C9.4913 13.9028 6.37414 12.6085 3.88281 10.1172C1.39148 7.62586 0.0972227 4.5087 0 0.765625C0 0.546874 0.0729159 0.364584 0.21875 0.21875C0.364584 0.0729159 0.546874 0 0.765625 0H3.5C3.71875 0 3.90104 0.0729159 4.04688 0.21875C4.19271 0.364584 4.26562 0.546874 4.26562 0.765625C4.26562 1.73785 4.41146 2.66145 4.70312 3.53646C4.80035 3.82813 4.73958 4.09549 4.52083 4.33854L2.80729 6.05208Z\"/></svg>",
  interrogation: "<svg width=\"13\" height=\"22\" viewBox=\"0 0 13 22\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\"><path d=\"M4.26254 18.3451H7.47198V21.5H4.26254V18.3451ZM6.41888 0.5C8.25762 0.565728 9.77876 1.15728 10.9823 2.27465C12.0855 3.32629 12.6706 4.64084 12.7375 6.21831C12.8378 7.79577 12.3363 9.27465 11.233 10.6549C10.9322 11.0164 10.3972 11.4765 9.62832 12.0352C8.92625 12.5939 8.45821 13.0047 8.22419 13.2676C7.88987 13.662 7.67257 14.1385 7.57227 14.6972C7.50541 15.0258 7.47198 15.5516 7.47198 16.2746H4.26254C4.26254 15.1244 4.29597 14.3192 4.36283 13.8592C4.46313 13.0704 4.68043 12.446 5.01475 11.9859C5.21534 11.6573 5.51622 11.3286 5.9174 11C6.15143 10.8357 6.50246 10.6056 6.9705 10.3099C7.47198 9.98122 7.82301 9.75117 8.0236 9.61972C8.85939 8.83099 9.36087 7.99296 9.52802 7.10563C9.69518 6.18545 9.49459 5.39671 8.92625 4.73944C8.39135 4.08216 7.55556 3.72066 6.41888 3.65493C5.51622 3.65493 4.7473 3.96714 4.11209 4.59155C3.51032 5.1831 3.20944 5.92253 3.20944 6.80986H0C0 5.65962 0.284169 4.60798 0.852507 3.65493C1.42085 2.66901 2.18977 1.89671 3.15929 1.33803C4.16224 0.779343 5.24877 0.5 6.41888 0.5Z\"/></svg>",
  add: "<svg width=\"14\" height=\"14\" viewBox=\"0 0 14 14\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\"><path d=\"M10.5164 7.69014H7.69014V10.5164H6.30986V7.69014H3.48357V6.30986H6.30986V3.48357H7.69014V6.30986H10.5164V7.69014ZM7 0C6.07981 0 5.18153 0.175274 4.30516 0.525822C3.4507 0.876369 2.69484 1.38028 2.03756 2.03756C1.38028 2.69484 0.876369 3.46166 0.525822 4.33803C0.175274 5.19249 0 6.07981 0 7C0 7.92019 0.175274 8.81847 0.525822 9.69484C0.876369 10.5493 1.38028 11.3052 2.03756 11.9624C2.69484 12.6197 3.4507 13.1236 4.30516 13.4742C5.18153 13.8247 6.07981 14 7 14C7.92019 14 8.80751 13.8247 9.66197 13.4742C10.5383 13.1236 11.3052 12.6197 11.9624 11.9624C12.6197 11.3052 13.1236 10.5493 13.4742 9.69484C13.8247 8.81847 14 7.92019 14 7C14 6.07981 13.8247 5.19249 13.4742 4.33803C13.1236 3.46166 12.6197 2.69484 11.9624 2.03756C11.3052 1.38028 10.5383 0.876369 9.66197 0.525822C8.80751 0.175274 7.92019 0 7 0Z\"/></svg>",
  search: "<svg width=\"14\" height=\"14\" viewBox=\"0 0 14 14\" fill=\"none\" ><path d=\"M5.21716 0C6.14298 0 7.00626 0.237712 7.80697 0.713137C8.60769 1.16354 9.23324 1.7891 9.68365 2.58981C10.1591 3.39053 10.3968 4.26631 10.3968 5.21716C10.3968 6.4933 9.98391 7.6193 9.15818 8.59517L9.38338 8.82038H10.0214L14 12.7989L12.7989 14L8.82038 10.0214V9.38338L8.59517 9.15818C7.6193 9.98391 6.4933 10.3968 5.21716 10.3968C4.26631 10.3968 3.39053 10.1716 2.58981 9.72118C1.7891 9.24576 1.15103 8.60769 0.675603 7.80697C0.225201 7.00626 0 6.14298 0 5.21716C0 4.26631 0.225201 3.39053 0.675603 2.58981C1.15103 1.7891 1.7891 1.16354 2.58981 0.713137C3.39053 0.237712 4.26631 0 5.21716 0ZM5.21716 1.61394C4.21626 1.61394 3.3655 1.96425 2.66488 2.66488C1.96425 3.3655 1.61394 4.21626 1.61394 5.21716C1.61394 6.21805 1.96425 7.06881 2.66488 7.76944C3.3655 8.47006 4.21626 8.82038 5.21716 8.82038C6.21805 8.82038 7.06881 8.47006 7.76944 7.76944C8.47006 7.06881 8.82038 6.21805 8.82038 5.21716C8.82038 4.21626 8.47006 3.3655 7.76944 2.66488C7.06881 1.96425 6.21805 1.61394 5.21716 1.61394Z\"/></svg>",
  danger: "<svg width=\"14\" height=\"14\" viewBox=\"0 0 14 14\" fill=\"none\" ><path d=\"M7.69014 7.69014H6.30986V3.48357H7.69014V7.69014ZM7.69014 10.5164H6.30986V9.10329H7.69014V10.5164ZM7 0C6.07981 0 5.18153 0.175274 4.30516 0.525822C3.4507 0.876369 2.69484 1.38028 2.03756 2.03756C1.38028 2.69484 0.876369 3.46166 0.525822 4.33803C0.175274 5.19249 0 6.07981 0 7C0 7.92019 0.175274 8.81847 0.525822 9.69484C0.876369 10.5493 1.38028 11.3052 2.03756 11.9624C2.69484 12.6197 3.4507 13.1236 4.30516 13.4742C5.18153 13.8247 6.07981 14 7 14C7.92019 14 8.80751 13.8247 9.66197 13.4742C10.5383 13.1236 11.3052 12.6197 11.9624 11.9624C12.6197 11.3052 13.1236 10.5493 13.4742 9.69484C13.8247 8.81847 14 7.92019 14 7C14 6.07981 13.8247 5.19249 13.4742 4.33803C13.1236 3.46166 12.6197 2.69484 11.9624 2.03756C11.3052 1.38028 10.5383 0.876369 9.66197 0.525822C8.80751 0.175274 7.92019 0 7 0Z\"/></svg>",
  question: "<svg width=\"14\" height=\"14\" viewBox=\"0 0 14 14\" fill=\"none\" ><path d=\"M9.13615 6.47418L8.51174 7.13146C8.22692 7.41628 8.02973 7.67919 7.92019 7.92019C7.76682 8.22692 7.69014 8.62128 7.69014 9.10329H6.30986V8.74178C6.30986 7.97496 6.58372 7.31768 7.13146 6.76995L7.98592 5.88263C8.27074 5.61972 8.41315 5.29108 8.41315 4.89671C8.41315 4.50235 8.27074 4.17371 7.98592 3.9108C7.723 3.62598 7.39437 3.48357 7 3.48357C6.60563 3.48357 6.26604 3.62598 5.98122 3.9108C5.71831 4.17371 5.58685 4.50235 5.58685 4.89671H4.20657C4.20657 4.12989 4.48044 3.47261 5.02817 2.92488C5.5759 2.37715 6.23318 2.10329 7 2.10329C7.76682 2.10329 8.4241 2.37715 8.97183 2.92488C9.51956 3.47261 9.79343 4.12989 9.79343 4.89671C9.79343 5.51017 9.57434 6.03599 9.13615 6.47418ZM7.69014 11.8967H6.30986V10.5164H7.69014V11.8967ZM7 0C6.07981 0 5.18153 0.175274 4.30516 0.525822C3.4507 0.876369 2.69484 1.38028 2.03756 2.03756C1.38028 2.69484 0.876369 3.46166 0.525822 4.33803C0.175274 5.19249 0 6.07981 0 7C0 7.92019 0.175274 8.81847 0.525822 9.69484C0.876369 10.5493 1.38028 11.3052 2.03756 11.9624C2.69484 12.6197 3.4507 13.1236 4.30516 13.4742C5.18153 13.8247 6.07981 14 7 14C7.92019 14 8.80751 13.8247 9.66197 13.4742C10.5383 13.1236 11.3052 12.6197 11.9624 11.9624C12.6197 11.3052 13.1236 10.5493 13.4742 9.69484C13.8247 8.81847 14 7.92019 14 7C14 5.72926 13.6823 4.55712 13.0469 3.48357C12.4335 2.41002 11.59 1.56651 10.5164 0.953052C9.44288 0.317684 8.27074 0 7 0Z\"/></svg>",
  'chevron-left': "<svg width=\"9\" height=\"14\" viewBox=\"0 0 9 14\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\"><path d=\"M9 12.3594L3.72785 7L9 1.64062L7.38608 0L0.5 7L7.38608 14L9 12.3594Z\"/></svg>",
  'chevron-right': "<svg width=\"9\" height=\"14\" viewBox=\"0 0 9 14\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\"><path d=\"M1.08049e-06 1.64063L5.27215 7L1.43428e-07 12.3594L1.61392 14L8.5 7L1.61393 3.51674e-07L1.08049e-06 1.64063Z\"/></svg>",
  'chevron-down': "<svg width=\"8\" height=\"8\" viewBox=\"0 0 8 8\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\"><path d=\"M1.32031 1.75L4 4.54114L6.67969 1.75L7.5 2.60443L4 6.25L0.5 2.60443L1.32031 1.75Z\"/></svg>",
  'chevron-up': "<svg width=\"8\" height=\"5\" viewBox=\"0 0 8 5\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\"><path d=\"M1.32031 5L4 2.36392L6.67969 5L7.5 4.19304L4 0.75L0.5 4.19304L1.32031 5Z\" /></svg>",
  info: "<svg width=\"8\" height=\"8\" viewBox=\"0 0 8 8\" fill=\"none\" ><path d=\"M4.34507 2.94836H3.65493V2.24178H4.34507V2.94836ZM4.34507 5.75822H3.65493V3.65493H4.34507V5.75822ZM4 0.5C3.53991 0.5 3.09077 0.587637 2.65258 0.762911C2.22535 0.938185 1.84742 1.19014 1.51878 1.51878C1.19014 1.84742 0.938185 2.23083 0.762911 2.66901C0.587637 3.09624 0.5 3.53991 0.5 4C0.5 4.46009 0.587637 4.90923 0.762911 5.34742C0.938185 5.77465 1.19014 6.15258 1.51878 6.48122C1.84742 6.80986 2.22535 7.06182 2.65258 7.23709C3.09077 7.41236 3.53991 7.5 4 7.5C4.46009 7.5 4.90376 7.41236 5.33099 7.23709C5.76917 7.06182 6.15258 6.80986 6.48122 6.48122C6.80986 6.15258 7.06182 5.77465 7.23709 5.34742C7.41236 4.90923 7.5 4.46009 7.5 4C7.5 3.53991 7.41236 3.09624 7.23709 2.66901C7.06182 2.23083 6.80986 1.84742 6.48122 1.51878C6.15258 1.19014 5.76917 0.938185 5.33099 0.762911C4.90376 0.587637 4.46009 0.5 4 0.5Z\"/></svg>",
  'check-rounded': "<svg width=\"14\" height=\"14\" viewBox=\"0 0 14 14\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\"><path d=\"M7 0C5.72926 0 4.55712 0.317684 3.48357 0.953052C2.41002 1.56651 1.55556 2.41002 0.920188 3.48357C0.306729 4.55712 0 5.72926 0 7C0 8.27074 0.306729 9.44288 0.920188 10.5164C1.55556 11.59 2.41002 12.4444 3.48357 13.0798C4.55712 13.6933 5.72926 14 7 14C8.27074 14 9.44288 13.6933 10.5164 13.0798C11.59 12.4444 12.4335 11.59 13.0469 10.5164C13.6823 9.44288 14 8.27074 14 7C14 5.72926 13.6823 4.55712 13.0469 3.48357C12.4335 2.41002 11.59 1.56651 10.5164 0.953052C9.44288 0.317684 8.27074 0 7 0ZM5.58685 10.5164L2.10329 7L3.0892 6.01408L5.58685 8.51174L10.9108 3.18779L11.8967 4.20657L5.58685 10.5164Z\"/></svg>",
  warning: "<svg width=\"8\" height=\"6\" viewBox=\"0 0 8 6\" fill=\"none\" ><path d=\"M4.31277 3.79259H3.68723V2.51852H4.31277V3.79259ZM4.31277 5.05185H3.68723V4.41481H4.31277V5.05185ZM0.5 6H7.5L4 0L0.5 6Z\"/></svg>",
  edit: "<svg width=\"8\" height=\"8\" viewBox=\"0 0 8 8\" fill=\"none\" ><path d=\"M7.39062 2.06771C7.46354 1.99479 7.5 1.90365 7.5 1.79427C7.5 1.6849 7.46354 1.59375 7.39062 1.52083L6.47917 0.609375C6.40625 0.536458 6.3151 0.5 6.20573 0.5C6.09635 0.5 6.00521 0.536458 5.93229 0.609375L5.22135 1.32031L6.67969 2.77865L7.39062 2.06771ZM0.5 6.04167V7.5H1.95833L6.26042 3.19792L4.80208 1.73958L0.5 6.04167Z\"/></svg>",
  lock: "<svg width=\"6\" height=\"8\" viewBox=\"0 0 6 8\" fill=\"none\" ><path d=\"M3 5.84375C2.82456 5.84375 2.67349 5.78125 2.54678 5.65625C2.42982 5.52083 2.37135 5.35938 2.37135 5.17188C2.37135 4.98438 2.42982 4.82812 2.54678 4.70312C2.67349 4.56771 2.82456 4.5 3 4.5C3.17544 4.5 3.32164 4.56771 3.4386 4.70312C3.5653 4.82812 3.62865 4.98438 3.62865 5.17188C3.62865 5.35938 3.5653 5.52083 3.4386 5.65625C3.32164 5.78125 3.17544 5.84375 3 5.84375ZM4.87135 6.84375V3.5H1.12865V6.84375H4.87135ZM4.87135 2.84375C5.04678 2.84375 5.19298 2.91146 5.30994 3.04688C5.43665 3.17188 5.5 3.32292 5.5 3.5V6.84375C5.5 7.02083 5.43665 7.17188 5.30994 7.29688C5.19298 7.43229 5.04678 7.5 4.87135 7.5H1.12865C0.953216 7.5 0.802144 7.43229 0.675439 7.29688C0.55848 7.17188 0.5 7.02083 0.5 6.84375V3.5C0.5 3.32292 0.55848 3.17188 0.675439 3.04688C0.802144 2.91146 0.953216 2.84375 1.12865 2.84375H1.43567V2.17188C1.43567 1.95312 1.47466 1.74479 1.55263 1.54688C1.64035 1.33854 1.75731 1.15625 1.90351 1C2.04971 0.84375 2.2154 0.723958 2.40058 0.640625C2.59552 0.546875 2.79532 0.5 3 0.5C3.20468 0.5 3.39961 0.546875 3.5848 0.640625C3.77973 0.723958 3.95029 0.84375 4.09649 1C4.24269 1.15625 4.35478 1.33854 4.43275 1.54688C4.52047 1.74479 4.56433 1.95312 4.56433 2.17188V2.84375H4.87135ZM3 1.17188C2.73684 1.17188 2.51267 1.27083 2.32749 1.46875C2.15205 1.65625 2.06433 1.89062 2.06433 2.17188V2.84375H3.93567V2.17188C3.93567 1.89062 3.84308 1.65625 3.65789 1.46875C3.48246 1.27083 3.26316 1.17188 3 1.17188Z\"/></svg>",
  'checkbox-checked': "<svg width=\"8\" height=\"8\" viewBox=\"0 0 8 8\" fill=\"none\" ><path d=\"M3.21615 5.95052L1.28385 4L1.83073 3.45312L3.21615 4.83854L6.16927 1.88542L6.71615 2.45052L3.21615 5.95052ZM6.71615 0.5H1.28385C1.0651 0.5 0.876736 0.578993 0.71875 0.736979C0.572917 0.882812 0.5 1.0651 0.5 1.28385V6.71615C0.5 6.9349 0.572917 7.12326 0.71875 7.28125C0.876736 7.42708 1.0651 7.5 1.28385 7.5H6.71615C6.9349 7.5 7.11719 7.42708 7.26302 7.28125C7.42101 7.12326 7.5 6.9349 7.5 6.71615V1.28385C7.5 1.0651 7.42101 0.882812 7.26302 0.736979C7.11719 0.578993 6.9349 0.5 6.71615 0.5Z\"/></svg>",
  'checkbox-outline': "<svg width=\"8\" height=\"8\" viewBox=\"0 0 8 8\" fill=\"none\" ><path d=\"M6.71615 0.5H1.28385C1.0651 0.5 0.876736 0.578993 0.71875 0.736979C0.572917 0.882812 0.5 1.0651 0.5 1.28385V6.71615C0.5 6.9349 0.572917 7.12326 0.71875 7.28125C0.876736 7.42708 1.0651 7.5 1.28385 7.5H6.71615C6.9349 7.5 7.11719 7.42708 7.26302 7.28125C7.42101 7.12326 7.5 6.9349 7.5 6.71615V1.28385C7.5 1.0651 7.42101 0.882812 7.26302 0.736979C7.11719 0.578993 6.9349 0.5 6.71615 0.5ZM6.71615 1.28385V6.71615H1.28385V1.28385H6.71615Z\"/></svg>",
  picture: "<svg width=\"8\" height=\"6\" viewBox=\"0 0 8 6\" fill=\"none\" ><path d=\"M6.80986 0.5C6.99609 0.5 7.15493 0.572707 7.28639 0.718121C7.42879 0.852349 7.5 1.01454 7.5 1.2047V4.7953C7.5 4.98546 7.42879 5.15324 7.28639 5.29866C7.15493 5.43289 6.99609 5.5 6.80986 5.5H1.19014C1.00391 5.5 0.839593 5.43289 0.697183 5.29866C0.565728 5.15324 0.5 4.98546 0.5 4.7953V1.2047C0.5 1.01454 0.565728 0.852349 0.697183 0.718121C0.839593 0.572707 1.00391 0.5 1.19014 0.5H6.80986ZM1.55164 4.42617H6.44836L4.87089 2.27852L3.65493 3.88926L2.76761 2.81544L1.55164 4.42617Z\"/></svg>",
  document: "<svg width=\"6\" height=\"8\" viewBox=\"0 0 6 8\" fill=\"none\" ><path d=\"M3.47807 2.94836V1.02582L5.46199 2.94836H3.47807ZM0.972953 0.5C0.771199 0.5 0.597466 0.571205 0.451754 0.713615C0.317251 0.84507 0.25 1.00391 0.25 1.19014V6.80986C0.25 6.99609 0.317251 7.15493 0.451754 7.28639C0.597466 7.42879 0.771199 7.5 0.972953 7.5H5.27705C5.4788 7.5 5.64693 7.42879 5.78143 7.28639C5.92714 7.15493 6 6.99609 6 6.80986V2.60329L3.84795 0.5H0.972953Z\" /></svg>",
  trash: "<svg width=\"6\" height=\"8\" viewBox=\"0 0 6 8\" fill=\"none\" ><path d=\"M5.75 0.882812H4.38423L3.97819 0.5H2.02181L1.61577 0.882812H0.25V1.66667H5.75V0.882812ZM0.637584 6.71615C0.637584 6.9349 0.711409 7.12326 0.85906 7.28125C1.01902 7.42708 1.20973 7.5 1.43121 7.5H4.56879C4.79027 7.5 4.97483 7.42708 5.12248 7.28125C5.28244 7.12326 5.36242 6.9349 5.36242 6.71615V2.04948H0.637584V6.71615Z\" /></svg>",
  'arrow-up': "<svg width=\"8\" height=\"4\" viewBox=\"0 0 8 4\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\"><path d=\"M0.5 3.75L4 0.25L7.5 3.75H0.5Z\"/></svg>",
  'arrow-down': "<svg width=\"8\" height=\"4\" viewBox=\"0 0 8 4\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">    <path d=\"M0.5 0.25L4 3.75L7.5 0.25H0.5Z\" /></svg>",
  'arrow-horizontal': "<svg width=\"6\" height=\"8\" viewBox=\"0 0 6 8\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\"><path d=\"M2.875 0.5L0 3.42578H5.75L2.875 0.5ZM0 4.57422L2.875 7.5L5.75 4.57422H0Z\" /></svg>",
  'close': "<svg width=\"14\" height=\"14\" viewBox=\"0 0 14 14\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\"><path d=\"M14 1.4094L12.5906 0L7 5.5906L1.4094 0L0 1.4094L5.5906 7L0 12.5906L1.4094 14L7 8.4094L12.5906 14L14 12.5906L8.4094 7L14 1.4094Z\"/></svg>",
  'clock': "<svg width=\"14\" height=\"14\" viewBox=\"0 0 14 14\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\"><path d=\"M7 12.6197C8.00782 12.6197 8.93897 12.3678 9.79343 11.8638C10.6698 11.3599 11.3599 10.6808 11.8638 9.82629C12.3678 8.94992 12.6197 8.00782 12.6197 7C12.6197 5.99218 12.3678 5.06103 11.8638 4.20657C11.3599 3.3302 10.6698 2.64006 9.79343 2.13615C8.93897 1.63224 8.00782 1.38028 7 1.38028C5.99218 1.38028 5.05008 1.63224 4.17371 2.13615C3.31925 2.64006 2.64006 3.3302 2.13615 4.20657C1.63224 5.06103 1.38028 5.99218 1.38028 7C1.38028 8.00782 1.63224 8.94992 2.13615 9.82629C2.64006 10.6808 3.31925 11.3599 4.17371 11.8638C5.05008 12.3678 5.99218 12.6197 7 12.6197ZM7 0C7.92019 0 8.80751 0.175274 9.66197 0.525822C10.5383 0.876369 11.3052 1.38028 11.9624 2.03756C12.6197 2.69484 13.1236 3.46166 13.4742 4.33803C13.8247 5.19249 14 6.07981 14 7C14 7.92019 13.8247 8.81847 13.4742 9.69484C13.1236 10.5493 12.6197 11.3052 11.9624 11.9624C11.3052 12.6197 10.5383 13.1236 9.66197 13.4742C8.80751 13.8247 7.92019 14 7 14C5.72926 14 4.55712 13.6933 3.48357 13.0798C2.41002 12.4444 1.55556 11.59 0.920188 10.5164C0.306729 9.44288 0 8.27074 0 7C0 6.07981 0.175274 5.19249 0.525822 4.33803C0.876369 3.46166 1.38028 2.69484 2.03756 2.03756C2.69484 1.38028 3.4507 0.876369 4.30516 0.525822C5.18153 0.175274 6.07981 0 7 0ZM7.3615 3.48357V7.16432L10.5164 9.03756L9.99061 9.92488L6.30986 7.69014V3.48357H7.3615Z\"/></svg>",
  loading: "<svg width=\"22\" height=\"18\" viewBox=\"0 0 22 18\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\"><path d=\"M0.5 9C0.5 10.625 0.890625 12.125 1.67188 13.5C2.48438 14.875 3.57812 15.9688 4.95312 16.7812C6.35938 17.5938 7.875 18 9.5 18C10.6875 18 11.8281 17.7812 12.9219 17.3438C14.0469 16.875 15.0312 16.2344 15.875 15.4219L14.375 13.9219C13.75 14.5781 13.0156 15.0938 12.1719 15.4688C11.3281 15.8125 10.4375 15.9844 9.5 15.9844C8 15.9844 6.65625 15.5781 5.46875 14.7656C4.375 13.9844 3.5625 12.9531 3.03125 11.6719C2.5 10.3906 2.34375 9.09375 2.5625 7.78125C2.8125 6.34375 3.46875 5.09375 4.53125 4.03125C5.59375 2.96875 6.84375 2.32812 8.28125 2.10938C9.59375 1.85938 10.8906 2 12.1719 2.53125C13.4531 3.0625 14.4688 3.875 15.2188 4.96875C16.0625 6.15625 16.4844 7.5 16.4844 9H13.4844L17.4688 12.9844H17.5625L21.5 9H18.5C18.5 7.375 18.0938 5.875 17.2812 4.5C16.4688 3.125 15.375 2.03125 14 1.21875C12.625 0.40625 11.125 0 9.5 0C7.875 0 6.35938 0.40625 4.95312 1.21875C3.57812 2.03125 2.48438 3.125 1.67188 4.5C0.890625 5.875 0.5 7.375 0.5 9Z\"/></svg>",
  whatsapp: "<svg xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" viewBox=\"0 0 24 24\">  <path d=\"M.057 24l1.687-6.163c-1.041-1.804-1.588-3.849-1.587-5.946.003-6.556 5.338-11.891 11.893-11.891 3.181.001 6.167 1.24 8.413 3.488 2.245 2.248 3.481 5.236 3.48 8.414-.003 6.557-5.338 11.892-11.893 11.892-1.99-.001-3.951-.5-5.688-1.448l-6.305 1.654zm6.597-3.807c1.676.995 3.276 1.591 5.392 1.592 5.448 0 9.886-4.434 9.889-9.885.002-5.462-4.415-9.89-9.881-9.892-5.452 0-9.887 4.434-9.889 9.884-.001 2.225.651 3.891 1.746 5.634l-.999 3.648 3.742-.981zm11.387-5.464c-.074-.124-.272-.198-.57-.347-.297-.149-1.758-.868-2.031-.967-.272-.099-.47-.149-.669.149-.198.297-.768.967-.941 1.165-.173.198-.347.223-.644.074-.297-.149-1.255-.462-2.39-1.475-.883-.788-1.48-1.761-1.653-2.059-.173-.297-.018-.458.13-.606.134-.133.297-.347.446-.521.151-.172.2-.296.3-.495.099-.198.05-.372-.025-.521-.075-.148-.669-1.611-.916-2.206-.242-.579-.487-.501-.669-.51l-.57-.01c-.198 0-.52.074-.792.372s-1.04 1.016-1.04 2.479 1.065 2.876 1.213 3.074c.149.198 2.095 3.2 5.076 4.487.709.306 1.263.489 1.694.626.712.226 1.36.194 1.872.118.571-.085 1.758-.719 2.006-1.413.248-.695.248-1.29.173-1.414z\"/></svg>",
  calendar: "<svg width=\"16\" height=\"16\" viewBox=\"0 0 16 16\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\"><path fill-rule=\"evenodd\" clip-rule=\"evenodd\" d=\"M12.6111 2.4H11.9167V1H10.5278V2.4H4.97222V1H3.58333V2.4H2.88889C2.11806 2.4 1.50694 3.03 1.50694 3.8L1.5 13.6C1.5 14.37 2.11806 15 2.88889 15H12.6111C13.375 15 14 14.37 14 13.6V3.8C14 3.03 13.375 2.4 12.6111 2.4ZM5.66666 7.3H4.27777V8.7H5.66666V7.3ZM8.44446 7.3H7.05557V8.7H8.44446V7.3ZM9.83331 7.3H11.2222V8.7H9.83331V7.3ZM2.88889 13.6H12.6111V5.89999H2.88889V13.6Z\"/></svg>",
  check: "<svg width=\"14\" height=\"12\" viewBox=\"0 0 14 12\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\"><path d=\"M4.44912 9.1786L1.13019 5.75802L0 6.91462L4.44912 11.5L14 1.6566L12.8778 0.5L4.44912 9.1786Z\" /></svg>",
  'interrogation-round': "<svg width=\"14\" height=\"14\" viewBox=\"0 0 14 14\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\"><path d=\"M9.13615 6.47418L8.51174 7.13146C8.22692 7.41628 8.02973 7.67919 7.92019 7.92019C7.76682 8.22692 7.69014 8.62128 7.69014 9.10329H6.30986V8.74178C6.30986 7.97496 6.58372 7.31768 7.13146 6.76995L7.98592 5.88263C8.27074 5.61972 8.41315 5.29108 8.41315 4.89671C8.41315 4.50235 8.27074 4.17371 7.98592 3.9108C7.723 3.62598 7.39437 3.48357 7 3.48357C6.60563 3.48357 6.26604 3.62598 5.98122 3.9108C5.71831 4.17371 5.58685 4.50235 5.58685 4.89671H4.20657C4.20657 4.12989 4.48044 3.47261 5.02817 2.92488C5.5759 2.37715 6.23318 2.10329 7 2.10329C7.76682 2.10329 8.4241 2.37715 8.97183 2.92488C9.51956 3.47261 9.79343 4.12989 9.79343 4.89671C9.79343 5.51017 9.57434 6.03599 9.13615 6.47418ZM7.69014 11.8967H6.30986V10.5164H7.69014V11.8967ZM7 0C6.07981 0 5.18153 0.175274 4.30516 0.525822C3.4507 0.876369 2.69484 1.38028 2.03756 2.03756C1.38028 2.69484 0.876369 3.46166 0.525822 4.33803C0.175274 5.19249 0 6.07981 0 7C0 7.92019 0.175274 8.81847 0.525822 9.69484C0.876369 10.5493 1.38028 11.3052 2.03756 11.9624C2.69484 12.6197 3.4507 13.1236 4.30516 13.4742C5.18153 13.8247 6.07981 14 7 14C7.92019 14 8.80751 13.8247 9.66197 13.4742C10.5383 13.1236 11.3052 12.6197 11.9624 11.9624C12.6197 11.3052 13.1236 10.5493 13.4742 9.69484C13.8247 8.81847 14 7.92019 14 7C14 5.72926 13.6823 4.55712 13.0469 3.48357C12.4335 2.41002 11.59 1.56651 10.5164 0.953052C9.44288 0.317684 8.27074 0 7 0Z\"/></svg>",
  'double-arrow-left': "<svg width=\"14\" height=\"12\" viewBox=\"0 0 14 12\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\"><path d=\"M14 1.40625L12.5315 0L6.26573 6L12.5315 12L14 10.5938L9.2028 6L14 1.40625ZM7.73427 1.40625L6.26573 0L0 6L6.26573 12L7.73427 10.5938L2.93706 6L7.73427 1.40625Z\"/></svg>",
  'single-arrow-left': "<svg width=\"9\" height=\"14\" viewBox=\"0 0 9 14\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\"><path d=\"M9 1.645L3.74629 7L9 12.355L7.38259 14L0.500001 7L7.38259 -1.41398e-07L9 1.645Z\"/></svg>",
  'double-arrow-right': "<svg width=\"14\" height=\"12\" viewBox=\"0 0 14 12\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\"><path d=\"M1.07661e-06 10.5937L1.46853 12L7.73427 6L1.46853 -1.09554e-06L1.87981e-06 1.40625L4.7972 6L1.07661e-06 10.5937ZM6.26573 10.5937L7.73427 12L14 6L7.73427 -5.47768e-07L6.26574 1.40625L11.0629 6L6.26573 10.5937Z\"/></svg>",
  'single-arrow-right': "<svg width=\"9\" height=\"14\" viewBox=\"0 0 9 14\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\"><path d=\"M-2.16022e-06 12.355L5.25371 7L-2.87621e-07 1.645L1.61741 2.82797e-07L8.5 7L1.61741 14L-2.16022e-06 12.355Z\"/></svg>",
  'applications': "<svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\"><path d=\"M1.5 10.8516H10.8516V1.5H1.5V10.8516ZM1.5 22.5H10.8516V13.1484H1.5V22.5ZM13.1484 22.5H22.5V13.1484H13.1484V22.5ZM13.1484 1.5V10.8516H22.5V1.5H13.1484Z\"/></svg>",
  'notification-bell': "<svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\"><path d=\"M21 18.4688V19.5H3V18.4688L5.01562 16.5V10.5C5.01562 8.9375 5.46875 7.54688 6.375 6.32812C7.3125 5.07812 8.51562 4.23438 9.98438 3.79688V3.46875C9.98438 2.9375 10.1719 2.48438 10.5469 2.10938C10.9531 1.70312 11.4375 1.5 12 1.5C12.5625 1.5 13.0312 1.70312 13.4062 2.10938C13.8125 2.48438 14.0156 2.9375 14.0156 3.46875V3.79688C15.4844 4.23438 16.6719 5.07812 17.5781 6.32812C18.5156 7.54688 18.9844 8.9375 18.9844 10.5V16.5L21 18.4688ZM14.0156 20.4844C14.0156 21.0469 13.8125 21.5156 13.4062 21.8906C13.0312 22.2969 12.5625 22.5 12 22.5C11.4375 22.5 10.9531 22.2969 10.5469 21.8906C10.1719 21.5156 9.98438 21.0469 9.98438 20.4844H14.0156Z\"/></svg>",
  'account-icon': "<svg width=\"22\" height=\"22\" viewBox=\"0 0 22 22\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\"><path d=\"M11 18.5915C9.71831 18.5915 8.51878 18.2958 7.40141 17.7042C6.28404 17.0798 5.38028 16.2418 4.69014 15.1901C4.69014 14.5657 5.08451 13.9742 5.87324 13.4155C6.53052 12.9554 7.38498 12.5939 8.43662 12.331C9.38967 12.0681 10.2441 11.9366 11 11.9366C11.7559 11.9366 12.6103 12.0681 13.5634 12.331C14.615 12.5939 15.4695 12.9554 16.1268 13.4155C16.9155 13.9742 17.3099 14.5657 17.3099 15.1901C16.6197 16.2418 15.716 17.0798 14.5986 17.7042C13.4812 18.2958 12.2817 18.5915 11 18.5915ZM11 3.65493C11.8873 3.65493 12.6268 3.96714 13.2183 4.59155C13.8427 5.1831 14.1549 5.92254 14.1549 6.80986C14.1549 7.66432 13.8427 8.40376 13.2183 9.02817C12.6268 9.65258 11.8873 9.96479 11 9.96479C10.1127 9.96479 9.35681 9.65258 8.73239 9.02817C8.14085 8.40376 7.84507 7.66432 7.84507 6.80986C7.84507 5.92254 8.14085 5.1831 8.73239 4.59155C9.35681 3.96714 10.1127 3.65493 11 3.65493ZM11 0.5C9.61972 0.5 8.2723 0.762911 6.95775 1.28873C5.67606 1.81455 4.54225 2.57042 3.55634 3.55634C2.57042 4.54225 1.81455 5.69249 1.28873 7.00704C0.762911 8.28873 0.5 9.61972 0.5 11C0.5 12.3803 0.762911 13.7277 1.28873 15.0423C1.81455 16.3239 2.57042 17.4577 3.55634 18.4437C4.54225 19.4296 5.67606 20.1854 6.95775 20.7113C8.2723 21.2371 9.61972 21.5 11 21.5C12.3803 21.5 13.7113 21.2371 14.993 20.7113C16.3075 20.1854 17.4577 19.4296 18.4437 18.4437C19.4296 17.4577 20.1854 16.3239 20.7113 15.0423C21.2371 13.7277 21.5 12.3803 21.5 11C21.5 9.0939 21.0235 7.33568 20.0704 5.72535C19.1502 4.11502 17.885 2.84977 16.2746 1.92958C14.6643 0.976526 12.9061 0.5 11 0.5Z\"/></svg>",
  email: "<svg width=\"16\" height=\"16\" viewBox=\"0 0 16 16\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\"><path d=\"M13.6197 5.26608L8 8.67544L2.38028 5.26608V3.88304L8 7.32456L13.6197 3.88304V5.26608ZM13.6197 2.5H2.38028C2.00782 2.5 1.67919 2.63938 1.39437 2.91813C1.13146 3.17544 1 3.49708 1 3.88304V12.117C1 12.5029 1.13146 12.8353 1.39437 13.114C1.67919 13.3713 2.00782 13.5 2.38028 13.5H13.6197C13.9922 13.5 14.3099 13.3713 14.5728 13.114C14.8576 12.8353 15 12.5029 15 12.117V3.88304C15 3.49708 14.8576 3.17544 14.5728 2.91813C14.3099 2.63938 13.9922 2.5 13.6197 2.5Z\"/></svg>",
  eye: "<svg width=\"20\" height=\"13\" viewBox=\"0 0 20 13\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\"><path d=\"M10 4C10.7031 4 11.2891 4.2474 11.7578 4.74219C12.2526 5.21094 12.5 5.79688 12.5 6.5C12.5 7.20312 12.2526 7.80208 11.7578 8.29688C11.2891 8.76562 10.7031 9 10 9C9.29688 9 8.69792 8.76562 8.20312 8.29688C7.73438 7.80208 7.5 7.20312 7.5 6.5C7.5 5.79688 7.73438 5.21094 8.20312 4.74219C8.69792 4.2474 9.29688 4 10 4ZM10 0.25C12.0573 0.25 13.9193 0.835938 15.5859 2.00781C17.2526 3.15365 18.4505 4.65104 19.1797 6.5C18.4505 8.34896 17.2526 9.85938 15.5859 11.0312C13.9193 12.1771 12.0573 12.75 10 12.75C7.94271 12.75 6.08073 12.1771 4.41406 11.0312C2.7474 9.85938 1.54948 8.34896 0.820312 6.5C1.54948 4.65104 2.7474 3.15365 4.41406 2.00781C6.08073 0.835938 7.94271 0.25 10 0.25ZM2.65625 6.5C3.33333 7.90625 4.33594 9.02604 5.66406 9.85938C6.99219 10.6667 8.4375 11.0703 10 11.0703C11.5625 11.0703 13.0078 10.6667 14.3359 9.85938C15.6641 9.02604 16.6667 7.90625 17.3438 6.5C16.6667 5.09375 15.6641 3.98698 14.3359 3.17969C13.0078 2.34635 11.5625 1.92969 10 1.92969C8.4375 1.92969 6.99219 2.34635 5.66406 3.17969C4.33594 3.98698 3.33333 5.09375 2.65625 6.5Z\"/>",
  'eye-closed': "<svg viewBox=\"0 0 24 24\" role=\"presentation\" style=\"width: 1.2rem; height: 1.2rem;\"><path d=\"M2,5.27L3.28,4L20,20.72L18.73,22L15.65,18.92C14.5,19.3 13.28,19.5 12,19.5C7,19.5 2.73,16.39 1,12C1.69,10.24 2.79,8.69 4.19,7.46L2,5.27M12,9A3,3 0 0,1 15,12C15,12.35 14.94,12.69 14.83,13L11,9.17C11.31,9.06 11.65,9 12,9M12,4.5C17,4.5 21.27,7.61 23,12C22.18,14.08 20.79,15.88 19,17.19L17.58,15.76C18.94,14.82 20.06,13.54 20.82,12C19.17,8.64 15.76,6.5 12,6.5C10.91,6.5 9.84,6.68 8.84,7L7.3,5.47C8.74,4.85 10.33,4.5 12,4.5M3.18,12C4.83,15.36 8.24,17.5 12,17.5C12.69,17.5 13.37,17.43 14,17.29L11.72,15C10.29,14.85 9.15,13.71 9,12.28L5.6,8.87C4.61,9.72 3.78,10.78 3.18,12Z\"/></svg>",
  'ic-touch': "<svg width=\"30\" height=\"39\" viewBox=\"0 0 30 39\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\"><path fill-rule=\"evenodd\" clip-rule=\"evenodd\" d=\"M10.5405 8.63281C10.6081 8.02343 10.8446 7.51563 11.25 7.10938C11.6554 6.70312 12.1622 6.5 12.7703 6.5C13.3784 6.5 13.8851 6.70312 14.2905 7.10938C14.6959 7.51563 14.8986 8.02343 14.8986 8.63281V18.2812L17.5338 18.5859L28.1757 23.3594C29.3919 23.9688 30 24.9505 30 26.3047V35.75C30 36.6302 29.6959 37.375 29.0878 37.9844C28.4797 38.5938 27.7027 38.9323 26.7568 39H12.7703C11.8919 39 11.1487 38.6615 10.5405 37.9844L0 28.9453L1.62162 27.2188C2.02703 26.8125 2.53378 26.6094 3.14189 26.6094H3.64865L10.5405 30.2656V8.63281ZM12.7703 0C15.2027 0.0677087 17.2297 0.914054 18.8514 2.53906C20.473 4.16407 21.3176 6.1953 21.3851 8.63281C21.3851 10.2578 20.9966 11.7305 20.2196 13.0508C19.4426 14.3711 18.3784 15.4036 17.027 16.1484V13.5078C18.446 12.2213 19.1892 10.5964 19.2568 8.63281C19.1892 6.80468 18.5473 5.28126 17.3311 4.0625C16.1149 2.84374 14.5777 2.23438 12.7196 2.23438C10.8615 2.23438 9.32433 2.84374 8.10811 4.0625C6.89189 5.28126 6.28378 6.80468 6.28378 8.63281C6.35135 10.5964 7.0608 12.2213 8.41216 13.5078V16.1484C7.12837 15.4036 6.09798 14.3711 5.32095 13.0508C4.54392 11.7305 4.12162 10.2578 4.05405 8.63281C4.12162 6.1953 4.96621 4.16407 6.58784 2.53906C8.20947 0.914054 10.2703 0.0677087 12.7703 0Z\" fill=\"#DCDCDC\"/></svg>",
  'arrow-left': "<svg width=\"18\" height=\"18\" viewBox=\"0 0 18 18\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\"><path d=\"M9 17.75L10.5422 16.2078L4.43906 10.0937L17.75 10.0938L17.75 7.90625L4.43906 7.90625L10.5531 1.80312L9 0.25L0.25 9L9 17.75Z\" fill=\"#999999\"/></svg>"
};
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (icons);

/***/ }),
/* 129 */
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
var Colors = {
    brand: {
        primary: {
            darkest: '#008488',
            dark: '#40B7B9',
            medium: '#9FDBDC',
            light: '#F5FBFB'
        },
        secondary: {
            darkest: '#002740',
            dark: '#003A60',
            medium: '#6B809D',
            light: '#F8F9FD'
        },
    },
    neutral: {
        dark: {
            base: '#303133',
            '01': '#595A5C',
            '02': '#979899',
            '03': '#E0E0E0'
        },
        light: {
            base: '#FFFFFF',
            '01': '#FAFAFA',
            '02': '#F5F5F5',
            '03': '#EFEFEF'
        },
    },
    feedback: {
        success: {
            darkest: '#215924',
            dark: '#2E7D32',
            medium: '#97BE98',
            light: '#F5F8F5'
        },
        info: {
            darkest: '#01588C',
            dark: '#0277BD',
            medium: '#80BBDE',
            light: '#F5F8F5'
        },
        danger: {
            darkest: '#BF2B2B',
            dark: '#D32F2F',
            medium: '#E99797',
            light: '#FDF5F5'
        },
        warning: {
            darkest: '#E5A100',
            dark: '#FFB300',
            medium: '#FFD980',
            light: '#FFFBF2'
        },
        attention: {
            darkest: '#B23F00',
            dark: '#E65100',
            medium: '#F28C55',
            light: '#F2B391'
        }
    },
    support: {
        social: {
            whatsapp: '#455A64',
            facebook: '#1877F2',
        },
    }
};
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (Colors);


/***/ }),
/* 130 */
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
var iconsAdquirentes = {
  minify: {
    41: "<svg viewBox=\"0 0 24 24\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\"><rect width=\"24\" height=\"24\" rx=\"4\" fill=\"#0DB14B\"/><path fill-rule=\"evenodd\" clip-rule=\"evenodd\" d=\"M10.357 18.8443L4.34535 12.8395C4.12418 12.6174 4 12.3168 4 12.0034C4 11.69 4.12418 11.3894 4.34535 11.1673L10.357 5.16248C10.4054 5.11396 10.4629 5.07548 10.5262 5.04922C10.5895 5.02296 10.6574 5.00944 10.7259 5.00944C10.7944 5.00944 10.8623 5.02296 10.9256 5.04922C10.9889 5.07548 11.0464 5.11396 11.0949 5.16248C11.1896 5.2613 11.2449 5.39129 11.2506 5.52805V18.4787C11.2488 18.6176 11.1924 18.7502 11.0935 18.8477C10.9947 18.9453 10.8614 19 10.7225 19C10.6542 19.0003 10.5865 18.9867 10.5236 18.9599C10.4608 18.9332 10.404 18.8938 10.357 18.8443ZM13.0649 5C14.8364 5.12329 16.4952 5.914 17.7065 7.21255C18.9178 8.5111 19.5915 10.2208 19.5915 11.9966C19.5915 13.7724 18.9178 15.4821 17.7065 16.7807C16.4952 18.0792 14.8364 18.8699 13.0649 18.9932C12.9973 18.9988 12.9292 18.9909 12.8647 18.9701C12.8001 18.9492 12.7403 18.9158 12.6887 18.8718C12.6371 18.8277 12.5948 18.7739 12.5641 18.7134C12.5333 18.6529 12.5149 18.587 12.5098 18.5193V15.6692C12.5082 15.5458 12.5511 15.4258 12.6307 15.3314C12.7102 15.2369 12.8211 15.1742 12.943 15.1547C13.7052 15.0486 14.4032 14.6705 14.9084 14.0901C15.4136 13.5096 15.6919 12.7661 15.6919 11.9966C15.6919 11.2271 15.4136 10.4836 14.9084 9.90317C14.4032 9.32275 13.7052 8.9446 12.943 8.83849C12.8205 8.82036 12.7088 8.75804 12.629 8.66327C12.5492 8.56851 12.5068 8.44784 12.5098 8.32398V5.52128C12.5097 5.38534 12.5628 5.25476 12.6576 5.15738C12.7525 5.06001 12.8816 5.00353 13.0175 5H13.0649Z\" fill=\"white\"/>\n</svg>",
    1: "<svg viewBox=\"0 0 24 24\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n<rect width=\"24\" height=\"24\" rx=\"4\" fill=\"#00AEEF\"/>\n<path d=\"M11.9939 16.5691C11.1195 16.5693 10.2636 16.3176 9.52854 15.8441C8.79338 15.3705 8.20952 14.6949 7.84109 13.8979C7.47857 13.1012 7.35264 12.217 7.47829 11.3507C7.60394 10.4845 7.97588 9.67255 8.54982 9.01163L6.69363 7.42712C6.09269 8.12507 5.6358 8.93504 5.3493 9.81036C5.06209 10.6857 4.95027 11.6091 5.02025 12.5277C5.09 13.4462 5.34086 14.3423 5.75147 15.1641C6.16783 15.9855 6.74223 16.7166 7.44173 17.3155C8.1409 17.9146 8.95143 18.3691 9.82665 18.6542C10.7017 18.9392 11.6244 19.0482 12.5417 18.9749C13.4586 18.9017 14.3529 18.6475 15.1719 18.2268C15.9911 17.8066 16.7192 17.2287 17.3144 16.5264L15.4582 14.9424C15.0311 15.4521 14.4973 15.8619 13.8945 16.1428C13.2915 16.424 12.6357 16.5691 11.9708 16.5686L11.9939 16.5691Z\" fill=\"#5A646E\"/>\n<path d=\"M11.9938 5C10.9897 4.99888 9.99696 5.21487 9.08574 5.6328C8.17266 6.05106 7.36068 6.66158 6.70532 7.42261L8.55588 9.00712C9.34448 8.09759 10.4599 7.53736 11.6591 7.44905C12.8583 7.36074 14.044 7.74885 14.958 8.53182C15.8721 9.3148 16.4396 10.4274 16.5386 11.6272C16.6367 12.827 16.257 14.0171 15.4823 14.9385L17.3328 16.5224C18.1934 15.5032 18.7464 14.259 18.9247 12.9361C19.1028 11.6131 18.8995 10.2668 18.3386 9.05549C17.7778 7.84474 16.8826 6.81954 15.7585 6.10078C14.6318 5.38699 13.3268 5 11.9938 5Z\" fill=\"white\"/>\n</svg>\n",
    2: "<svg viewBox=\"0 0 24 24\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n<rect width=\"24\" height=\"24\" rx=\"5\" fill=\"#FF7800\"/>\n<mask id=\"mask0\" mask-type=\"alpha\" maskUnits=\"userSpaceOnUse\" x=\"0\" y=\"0\" width=\"24\" height=\"24\">\n<rect width=\"24\" height=\"24\" rx=\"4\" fill=\"#FF7800\"/>\n</mask>\n<g mask=\"url(#mask0)\">\n<path d=\"M-0.595337 2C-0.595337 2.04689 -0.605328 2.09378 -0.605328 2.14067C-0.605328 4.76657 -0.605328 7.39024 -0.605328 10.0117V10.1457C-0.485443 10.1875 3.26261 10.1909 3.40248 10.1457L3.45076 9.93967C3.95861 7.69392 5.31563 6.1867 7.45524 5.34936C7.97337 5.15118 8.51345 5.01679 9.06369 4.94911C9.33053 4.91565 9.59902 4.8972 9.86791 4.89385C10.4607 4.88548 11.0534 4.88213 11.6462 4.89385C12.3558 4.89784 13.0591 5.02707 13.7242 5.27568C14.476 5.5454 15.1194 6.05538 15.5558 6.72763C15.8521 7.21506 16.0422 7.76016 16.1136 8.32695C16.1746 8.74321 16.1908 9.16488 16.1618 9.58463C16.137 10.1996 15.9766 10.8014 15.6923 11.3464C15.3069 12.0477 14.6904 12.592 13.949 12.8854C13.51 13.0643 13.05 13.1858 12.5803 13.2472C12.1665 13.3035 11.7491 13.3298 11.3315 13.3259C9.92841 13.3259 8.52421 13.3259 7.1189 13.3259C7.06229 13.3259 7.00401 13.3259 6.93075 13.3376C6.95239 13.4079 6.96571 13.4615 6.98569 13.5051C7.12374 13.8734 7.34661 14.2035 7.63605 14.4684C7.92548 14.7333 8.27322 14.9254 8.65075 15.029C9.06783 15.1538 9.49951 15.2225 9.93452 15.2333C10.0794 15.2333 10.2242 15.2333 10.3708 15.2333H24.2474C24.3323 15.2323 24.417 15.2395 24.5005 15.2551C24.6402 15.2887 24.765 15.3679 24.8554 15.4802C24.9457 15.5926 24.9966 15.7319 25 15.8764C24.99 16.5111 25 17.1475 25 17.7822C24.9989 17.9511 24.9333 18.113 24.8167 18.2346C24.7002 18.3562 24.5417 18.428 24.3739 18.4353H10.4057C9.60796 18.4479 8.81199 18.3556 8.03801 18.1607C7.1273 17.9293 6.27592 17.5057 5.54042 16.9181C4.57968 16.1388 3.88897 15.0736 3.56732 13.8752C3.52902 13.7378 3.49739 13.6005 3.46408 13.4632C3.43078 13.3259 3.43412 13.3225 3.28593 13.3225H-0.305614C-0.44215 13.3225 -0.448811 13.3225 -0.448811 13.4699C-0.448811 14.3324 -0.448811 15.1948 -0.448811 16.0573C-0.452412 16.9391 -0.67506 17.8061 -1.09652 18.5793C-1.71608 19.7193 -2.71983 20.5994 -3.92713 21.0612C-4.52959 21.3054 -5.16828 21.4469 -5.81697 21.4799C-6.04675 21.4916 -6.27653 21.4966 -6.50631 21.5C-6.7927 21.5 -7.07909 21.5 -7.36382 21.5C-8.01319 21.5 -8.6609 21.5 -9.30861 21.4481C-10.2036 21.387 -11.081 21.1688 -11.9011 20.8033C-12.9015 20.3632 -13.7008 19.5611 -14.1406 18.5559C-14.1535 18.5178 -14.1797 18.4857 -14.2142 18.4654C-14.2488 18.4451 -14.2894 18.438 -14.3288 18.4454H-17.6872C-19.0709 18.4454 -20.4529 18.4621 -21.8349 18.4353C-22.9698 18.4228 -24.0874 18.1538 -25.1051 17.6482C-25.8829 17.2748 -26.5693 16.7333 -27.115 16.0622C-27.6607 15.3912 -28.0524 14.6072 -28.262 13.7663C-28.292 13.6508 -28.3186 13.5335 -28.3436 13.4163C-28.3444 13.4023 -28.348 13.3886 -28.3544 13.3761C-28.3607 13.3637 -28.3696 13.3527 -28.3804 13.3438C-28.3912 13.335 -28.4038 13.3285 -28.4172 13.3249C-28.4307 13.3212 -28.4447 13.3204 -28.4585 13.3225C-28.4751 13.3225 -28.4918 13.3225 -28.5084 13.3225C-29.4475 13.3225 -30.3866 13.3225 -31.3257 13.3225C-31.9451 13.317 -32.562 13.4016 -33.1573 13.5737C-33.6814 13.7217 -34.1623 13.9946 -34.5593 14.3692C-34.9983 14.8073 -35.3068 15.3601 -35.4501 15.9652C-35.5722 16.4387 -35.6326 16.9262 -35.6299 17.4154C-35.6299 18.9785 -35.6299 20.5359 -35.6299 22.0878C-35.6295 22.1998 -35.6367 22.3117 -35.6516 22.4227C-35.6523 22.5019 -35.6691 22.5801 -35.7009 22.6525C-35.7327 22.725 -35.7788 22.7901 -35.8364 22.844C-35.8941 22.8979 -35.962 22.9395 -36.0362 22.9661C-36.1103 22.9927 -36.1891 23.0038 -36.2676 22.9988H-38.3023C-38.3794 22.996 -38.4558 22.9848 -38.5305 22.9653C-38.6441 22.9381 -38.7457 22.8743 -38.8199 22.7836C-38.8942 22.6929 -38.9369 22.5803 -38.9417 22.4629C-38.9417 22.3926 -38.9417 22.3156 -39 22.2586V10.4186C-38.9451 10.4186 -38.8901 10.4287 -38.8335 10.4287H-35.8647C-35.8147 10.4287 -35.7648 10.4287 -35.6982 10.4287C-35.6982 10.4906 -35.6899 10.5409 -35.6899 10.5961C-35.6899 10.9562 -35.6899 11.3163 -35.6899 11.6763C-35.6899 11.7249 -35.6899 11.7734 -35.6749 11.8522C-35.6233 11.7986 -35.5949 11.7684 -35.565 11.7399C-35.4601 11.6328 -35.3585 11.5222 -35.2469 11.4218C-34.7525 10.9965 -34.1735 10.6825 -33.5486 10.5007C-32.8329 10.2829 -32.0884 10.1762 -31.3407 10.1842H-28.5101C-28.4052 10.1842 -28.3969 10.1708 -28.3736 10.0686C-28.3503 9.96646 -28.3236 9.81741 -28.292 9.69349C-27.9619 8.3059 -27.15 7.08248 -26.0025 6.24364C-24.833 5.38416 -23.4264 4.91237 -21.9781 4.89385C-21.5435 4.88045 -21.1089 4.89385 -20.6727 4.89385C-20.2835 4.88729 -19.8944 4.90351 -19.5071 4.94242C-18.9723 4.99712 -18.4481 5.12852 -17.9503 5.33262C-17.4206 5.54061 -16.9485 5.87356 -16.5735 6.30344C-16.1985 6.73332 -15.9318 7.24753 -15.7957 7.80277C-15.582 8.61894 -15.5615 9.47413 -15.7358 10.2997C-15.831 10.8478 -16.0593 11.3638 -16.4003 11.802C-16.7412 12.2402 -17.1844 12.587 -17.6905 12.8117C-18.423 13.1447 -19.2178 13.316 -20.0216 13.3141C-21.5618 13.3326 -23.102 13.3141 -24.6422 13.3242C-24.6893 13.3217 -24.7366 13.3217 -24.7837 13.3242C-24.8112 13.3303 -24.838 13.3393 -24.8636 13.351C-24.8586 13.3794 -24.8514 13.4074 -24.842 13.4347C-24.7093 13.8216 -24.4847 14.17 -24.1876 14.4496C-23.8408 14.7583 -23.4231 14.9752 -22.9721 15.0809C-22.5121 15.1969 -22.0393 15.2532 -21.5651 15.2484H-14.7051C-14.6035 15.2484 -14.6052 15.2484 -14.5869 15.1396C-14.5469 14.895 -14.5153 14.6472 -14.4586 14.406C-14.31 13.7068 -14.0128 13.0482 -13.5875 12.4753C-13.1621 11.9024 -12.6187 11.4288 -11.9944 11.0868C-11.1516 10.6277 -10.2259 10.343 -9.27198 10.2495C-8.8296 10.2018 -8.38481 10.1806 -7.93993 10.1858C-6.68114 10.1858 -5.42235 10.1858 -4.16357 10.1858C-4.09697 10.1858 -4.03036 10.1858 -3.94711 10.1741V9.99326C-3.94711 7.38075 -3.94711 4.76769 -3.94711 2.15407C-3.94711 2.10216 -3.94711 2.05192 -3.94711 2H-0.595337ZM-6.36478 13.3225C-6.85431 13.3225 -7.3455 13.3225 -7.83503 13.3225C-8.16804 13.3225 -8.50938 13.3225 -8.84572 13.346C-9.28913 13.3655 -9.72333 13.4797 -10.1195 13.6809C-10.3784 13.8123 -10.6075 13.9962 -10.7924 14.221C-10.9772 14.4458 -11.1138 14.7067 -11.1935 14.9872C-11.3385 15.4764 -11.3619 15.9939 -11.2617 16.4944C-11.2043 16.8429 -11.0593 17.1709 -10.8405 17.4473C-10.5476 17.7922 -10.1574 18.0392 -9.72154 18.1557C-9.29393 18.2748 -8.85145 18.3312 -8.40781 18.3231C-7.70404 18.3231 -7.00027 18.3231 -6.29651 18.3231C-6.13867 18.3214 -5.98117 18.3079 -5.8253 18.2829C-5.30531 18.2131 -4.82822 17.9558 -4.48275 17.5587C-4.13728 17.1616 -3.94694 16.6519 -3.94711 16.1243C-3.9238 15.2367 -3.94711 14.3491 -3.94711 13.4615C-3.94711 13.3359 -3.94711 13.3292 -4.07532 13.3259H-6.36478V13.3225ZM-24.9569 10.1909H-20.5528C-20.4545 10.1909 -20.3563 10.1909 -20.2581 10.1909C-20.0361 10.1897 -19.8164 10.1466 -19.6104 10.0636C-19.4617 10.0066 -19.3309 9.91073 -19.2314 9.78591C-19.1319 9.66109 -19.0673 9.51183 -19.0442 9.35353C-19.024 9.23973 -19.0178 9.12386 -19.0259 9.00854C-19.0288 8.81058 -19.0943 8.61869 -19.2128 8.46063C-19.3314 8.30257 -19.4968 8.18654 -19.6853 8.12933C-19.8415 8.07151 -20.0066 8.04148 -20.1731 8.04058C-20.7759 8.04058 -21.377 8.04058 -21.9781 8.04058C-22.2338 8.04353 -22.489 8.06255 -22.7423 8.09752C-23.1461 8.14702 -23.5343 8.28477 -23.8796 8.50111C-24.4318 8.86671 -24.8175 9.43762 -24.9519 10.0887C-24.9563 10.1226 -24.958 10.1567 -24.9569 10.1909ZM6.81918 10.1758C6.89411 10.1758 6.95073 10.1892 7.009 10.1892H10.1576C10.5972 10.1892 11.0368 10.1892 11.4764 10.1892C11.7156 10.1941 11.9533 10.1508 12.1757 10.0619C12.3179 10.0063 12.4442 9.91595 12.543 9.799C12.6418 9.68205 12.7102 9.54219 12.7418 9.39204C12.7841 9.19864 12.7812 8.99802 12.7335 8.80591C12.7024 8.66242 12.6368 8.52879 12.5424 8.41669C12.4481 8.30459 12.3279 8.21743 12.1923 8.16283C12.017 8.08319 11.8269 8.04154 11.6345 8.04058C10.9602 8.04058 10.2858 8.04058 9.6115 8.04058C9.26566 8.04377 8.92202 8.09621 8.59081 8.19632C7.62175 8.49107 7.05895 9.17099 6.81918 10.1758Z\" fill=\"#FFF200\"/>\n</g>\n</svg>",
    6: "<svg viewBox=\"0 0 24 24\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n<rect width=\"24\" height=\"24\" rx=\"4\" fill=\"#FF0000\"/>\n<path d=\"M5 16.3961C5 16.2735 5 16.151 5 16.0284C5 15.9059 5 15.9672 5.08169 15.9672H7.32823C7.32823 16.0795 7.32823 16.202 7.32823 16.3144C7.35529 16.4839 7.42469 16.644 7.53 16.7796C7.63531 16.9153 7.77313 17.0222 7.93071 17.0904C8.20023 17.2195 8.49078 17.2991 8.78847 17.3253C9.31286 17.4076 9.84687 17.4076 10.3713 17.3253C10.5718 17.2974 10.7676 17.2425 10.9533 17.1619C11.1958 17.084 11.4004 16.9182 11.527 16.6972C11.6536 16.4761 11.693 16.2158 11.6375 15.9672C11.6252 15.8265 11.5908 15.6886 11.5354 15.5587C11.4655 15.4099 11.3582 15.2818 11.2239 15.187C11.0897 15.0921 10.9331 15.0337 10.7695 15.0175C10.5909 14.9848 10.4098 14.9678 10.2283 14.9664H7.67542C7.20338 14.9835 6.73088 14.9493 6.26623 14.8643L5.91904 14.752C5.71033 14.6706 5.52925 14.5312 5.39717 14.3503C5.26508 14.1694 5.18751 13.9544 5.1736 13.7308C5.12028 13.4267 5.14487 13.1141 5.24508 12.822C5.39168 12.4426 5.67616 12.1326 6.04158 11.954C6.20496 11.8621 6.37856 11.7907 6.55215 11.6988C6.27604 11.5214 6.04174 11.2861 5.86543 11.0093C5.68912 10.7325 5.57502 10.4208 5.531 10.0955C5.3806 9.40852 5.45951 8.69114 5.75565 8.05324C6.07263 7.36593 6.63281 6.82029 7.32823 6.52151C7.8765 6.27403 8.46419 6.12538 9.06419 6.08241C9.89645 6.02393 10.7317 6.14226 11.515 6.42961C12.192 6.66658 12.7729 7.11842 13.1692 7.71626C13.5698 8.31647 13.7269 9.04673 13.6083 9.75856C13.5341 10.202 13.3518 10.6202 13.0775 10.9764C12.8033 11.3327 12.4454 11.6158 12.0357 11.8009C11.5451 12.0463 11.0172 12.2085 10.4734 12.2808C9.97214 12.3434 9.46713 12.3707 8.96207 12.3625H8.07367C7.91268 12.3713 7.75723 12.4243 7.62436 12.5157C7.56345 12.5575 7.5147 12.6148 7.48307 12.6816C7.45144 12.7484 7.43806 12.8223 7.44428 12.896C7.45051 12.9696 7.47611 13.0403 7.5185 13.1009C7.56089 13.1614 7.61856 13.2097 7.68563 13.2407C7.8233 13.3028 7.97392 13.3308 8.12473 13.3224H11.1882C11.8734 13.3406 12.5449 13.5189 13.1488 13.8432C13.6268 14.0897 13.9922 14.5099 14.1699 15.0175C14.2289 15.1998 14.2665 15.3882 14.2823 15.5791C14.316 16.0422 14.2569 16.5074 14.1087 16.9475C13.8883 17.5391 13.455 18.0271 12.8935 18.3158C12.388 18.5791 11.8431 18.7584 11.2801 18.8468C10.7702 18.9333 10.255 18.9845 9.73815 19H8.71699C8.3698 19 8.0124 18.9489 7.69584 18.8877C7.15711 18.8242 6.6364 18.6541 6.16411 18.3873C5.90669 18.2395 5.68292 18.0397 5.50709 17.8006C5.33126 17.5615 5.20724 17.2883 5.14296 16.9985L5.08169 16.6616L5 16.3961ZM9.41138 10.7797C9.63603 10.7797 9.86069 10.7184 10.0853 10.6674C10.3301 10.6232 10.5568 10.509 10.7381 10.3387C10.9193 10.1683 11.0473 9.94908 11.1065 9.7075C11.1588 9.44458 11.1588 9.17393 11.1065 8.91101C11.0707 8.65347 10.9595 8.4123 10.7868 8.21786C10.6142 8.02342 10.3879 7.88443 10.1364 7.81837C9.74603 7.7063 9.33201 7.7063 8.94165 7.81837C8.71455 7.87274 8.50599 7.98649 8.33732 8.14798C8.16865 8.30947 8.04594 8.51289 7.98176 8.73741C7.87871 9.10127 7.87871 9.4866 7.98176 9.85047C8.03354 10.0589 8.14053 10.2495 8.29147 10.4022C8.44242 10.555 8.63175 10.6642 8.83953 10.7184C9.02885 10.7496 9.21976 10.7701 9.41138 10.7797Z\" fill=\"white\"/>\n<path d=\"M15.0254 5H15.6994V5.67396H15.0254V5Z\" fill=\"white\"/>\n<path d=\"M17.4558 5H18.14V5.67396H17.4558V5Z\" fill=\"white\"/>\n<path d=\"M15.0254 6.21509H15.6994V6.89926H15.0254V6.21509Z\" fill=\"white\"/>\n<path d=\"M16.2304 6.21509H16.9146V6.89926H16.2304V6.21509Z\" fill=\"white\"/>\n<path d=\"M18.14 6.21509V6.89926H17.4558V6.21509H18.14Z\" fill=\"white\"/>\n<path d=\"M15.0254 7.43042H15.6994V8.11459H15.0254V7.43042Z\" fill=\"white\"/>\n<path d=\"M18.14 8.11459H17.4558V7.43042H18.14V8.11459Z\" fill=\"white\"/>\n<path d=\"M16.9146 5V5.67396H16.2917H16.2304V5H16.9146Z\" fill=\"white\"/>\n<path d=\"M16.2304 7.43042H16.8839C16.8839 7.64486 16.8839 7.86952 16.8839 8.09417H16.2304V7.43042Z\" fill=\"white\"/>\n</svg>\n",
    70: "<svg viewBox=\"0 0 24 24\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n<rect width=\"24\" height=\"24\" rx=\"4\" fill=\"#A7DBDA\"/>\n<path fill-rule=\"evenodd\" clip-rule=\"evenodd\" d=\"M11.2701 5.03622C6.35068 5.60196 3.49892 10.8076 5.82065 15.3383C7.00648 17.6524 9.74837 19.258 12.6633 18.9657C16.2083 18.6101 19.2897 15.3787 18.8665 11.3377C18.7577 10.2986 18.4802 9.50201 18.0502 8.68971C17.84 8.29282 17.601 7.97066 17.3565 7.6483C16.1711 6.08494 13.6547 4.76199 11.2701 5.03622Z\" fill=\"#040607\"/>\n<path fill-rule=\"evenodd\" clip-rule=\"evenodd\" d=\"M14.1659 17.017C14.0326 16.9021 13.5325 16.7228 13.2965 16.5391C11.1032 14.8329 11.8418 11.8178 13.9532 10.9755L14.4639 10.7798C14.1613 10.295 13.2059 9.63331 12.3969 9.37055C9.64445 8.47649 6.6026 10.3733 6.40154 13.4133C6.25836 15.578 7.57591 17.199 8.9325 17.856C10.6794 18.7021 13.0046 18.3556 14.1659 17.017Z\" fill=\"#A7DBDA\"/>\n<path fill-rule=\"evenodd\" clip-rule=\"evenodd\" d=\"M6.40241 11.587C6.44428 11.5474 6.88875 10.7867 7.26902 10.3417C7.54551 10.0181 7.98183 9.67095 8.43779 9.40087C10.1591 8.38124 12.4463 8.48544 14.0581 9.77465C14.1635 9.85895 14.2515 9.90982 14.3435 10.0045L14.8605 10.567C15.177 10.9955 15.8752 10.4339 17.1461 11.4228C17.311 11.5511 17.2847 11.6036 17.4727 11.6785C17.8018 8.24017 15.2577 5.48537 12.0209 5.43528C10.4727 5.41133 8.83959 6.11702 7.90237 7.17818C6.92139 8.28889 6.28196 9.52335 6.40241 11.587Z\" fill=\"#DDE461\"/>\n<path fill-rule=\"evenodd\" clip-rule=\"evenodd\" d=\"M14.6445 11.2281C13.3158 11.5094 12.1475 12.7576 12.451 14.4301C12.6952 15.7761 14.0198 16.9861 15.7061 16.6562C17.0147 16.4002 18.1776 15.0992 17.8852 13.4467C17.6466 12.0982 16.2874 10.8802 14.6445 11.2281Z\" fill=\"#F4E13D\"/>\n</svg>\n",
    75: "<svg viewBox=\"0 0 24 24\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n<rect width=\"24\" height=\"24\" rx=\"4\" fill=\"#1E2446\"/>\n<path fill-rule=\"evenodd\" clip-rule=\"evenodd\" d=\"M14.2277 11.9485C14.2277 12.0566 14.2443 12.1566 14.2774 12.2487C14.3105 12.3407 14.3587 12.4211 14.4221 12.4897C14.4854 12.5583 14.5609 12.6124 14.6488 12.6518C14.7366 12.6913 14.8352 12.711 14.9446 12.711C15.054 12.711 15.1526 12.6913 15.2404 12.6518C15.3282 12.6124 15.4038 12.5583 15.4671 12.4897C15.5304 12.4211 15.5787 12.3407 15.6118 12.2487C15.6449 12.1566 15.6615 12.0566 15.6615 11.9485C15.6615 11.8404 15.6449 11.7404 15.6118 11.6483C15.5787 11.5563 15.5304 11.476 15.4671 11.4073C15.4038 11.3387 15.3282 11.2846 15.2404 11.2452C15.1526 11.2057 15.054 11.186 14.9446 11.186C14.8352 11.186 14.7366 11.2057 14.6488 11.2452C14.5609 11.2846 14.4854 11.3387 14.4221 11.4073C14.3587 11.476 14.3105 11.5563 14.2774 11.6483C14.2443 11.7404 14.2277 11.8404 14.2277 11.9485ZM13.8909 10.9231H14.2277V11.221H14.2364C14.3285 11.1101 14.4357 11.0239 14.5581 10.9625C14.6804 10.9012 14.8151 10.8705 14.9619 10.8705C15.1202 10.8705 15.2649 10.8975 15.3959 10.9515C15.5269 11.0057 15.6384 11.0808 15.7306 11.1772C15.8227 11.2736 15.8947 11.3876 15.9465 11.519C15.9983 11.6505 16.0242 11.7937 16.0242 11.9485C16.0242 12.1034 15.9983 12.2465 15.9465 12.3779C15.8947 12.5094 15.8234 12.6233 15.7327 12.7197C15.642 12.8162 15.5348 12.8914 15.411 12.9454C15.2872 12.9994 15.1547 13.0265 15.0137 13.0265C14.8323 13.0265 14.6732 12.9863 14.5365 12.906C14.3997 12.8257 14.2997 12.7271 14.2364 12.6102H14.2277V13.973H13.8909V10.9231ZM19.0038 13.3902C18.9686 13.4779 18.9326 13.5574 18.8959 13.629C18.8591 13.7006 18.815 13.7619 18.7636 13.8131C18.7122 13.8642 18.6505 13.9036 18.5785 13.9314C18.5065 13.9591 18.4191 13.973 18.3162 13.973C18.2662 13.973 18.2141 13.9701 18.1598 13.9643C18.1054 13.9584 18.0547 13.9438 18.0077 13.9205L18.0518 13.6225C18.087 13.6371 18.1237 13.6466 18.162 13.651C18.2001 13.6553 18.2442 13.6576 18.2942 13.6576C18.4058 13.6576 18.4881 13.6269 18.541 13.5655C18.5939 13.5042 18.6394 13.4223 18.6777 13.3201L18.8187 12.9345L17.9636 10.8705H18.3647L19.0038 12.4787H19.0127L19.6254 10.8705H20L19.0038 13.3902Z\" fill=\"white\"/>\n<path fill-rule=\"evenodd\" clip-rule=\"evenodd\" d=\"M4.66427 12.2872C4.69914 12.3559 4.74544 12.4115 4.80315 12.4541C4.86083 12.4967 4.92854 12.5283 5.00641 12.5489C5.08421 12.5695 5.16473 12.5798 5.24793 12.5798C5.30427 12.5798 5.36466 12.575 5.42906 12.5654C5.49345 12.5558 5.55382 12.5372 5.61018 12.5097C5.66652 12.4823 5.71345 12.4445 5.75107 12.3964C5.7886 12.3484 5.80741 12.2872 5.80741 12.213C5.80741 12.1334 5.78256 12.0688 5.73293 12.0193C5.68325 11.9699 5.61821 11.9287 5.53773 11.8957C5.45724 11.8627 5.36596 11.8339 5.26401 11.8092C5.16202 11.7844 5.05875 11.757 4.9541 11.7267C4.84674 11.6993 4.74209 11.6656 4.64016 11.6258C4.53815 11.586 4.44693 11.5345 4.36646 11.4712C4.28594 11.4081 4.22083 11.329 4.17122 11.2343C4.12152 11.1395 4.09674 11.0248 4.09674 10.8901C4.09674 10.7391 4.12825 10.6079 4.19133 10.4966C4.25436 10.3853 4.33689 10.2926 4.43886 10.2184C4.54083 10.1442 4.65624 10.0893 4.78503 10.0536C4.91382 10.0179 5.04265 10 5.17144 10C5.3217 10 5.46592 10.0172 5.60414 10.0515C5.7423 10.0859 5.86509 10.1415 5.97245 10.2184C6.07975 10.2954 6.16496 10.3936 6.22804 10.5131C6.29102 10.6326 6.3226 10.7775 6.3226 10.9479H5.71079C5.7054 10.8599 5.68728 10.7871 5.65648 10.7294C5.62557 10.6717 5.58466 10.6264 5.53369 10.5934C5.48271 10.5605 5.42431 10.5372 5.35862 10.5234C5.29282 10.5097 5.22107 10.5028 5.14325 10.5028C5.09226 10.5028 5.04124 10.5083 4.99031 10.5193C4.93934 10.5303 4.89304 10.5495 4.85144 10.5769C4.80983 10.6044 4.77561 10.6388 4.74882 10.68C4.72196 10.7212 4.70858 10.7734 4.70858 10.8366C4.70858 10.8943 4.71927 10.941 4.74077 10.9767C4.76219 11.0124 4.80449 11.0454 4.86758 11.0756C4.93057 11.1059 5.0178 11.1361 5.12919 11.1663C5.24051 11.1965 5.38609 11.235 5.56592 11.2816C5.61955 11.2927 5.69399 11.3126 5.78929 11.3414C5.88451 11.3703 5.9791 11.4163 6.07304 11.4795C6.16698 11.5427 6.24817 11.6272 6.31659 11.7329C6.38501 11.8387 6.41921 11.974 6.41921 12.1389C6.41921 12.2735 6.39369 12.3985 6.34271 12.5139C6.29172 12.6293 6.21596 12.7289 6.11531 12.8126C6.0147 12.8965 5.88992 12.9617 5.741 13.0084C5.59209 13.0551 5.41962 13.0784 5.22377 13.0784C5.0654 13.0784 4.91185 13.0585 4.76291 13.0187C4.61399 12.9789 4.48248 12.9164 4.36845 12.8312C4.25436 12.7461 4.1638 12.6375 4.09674 12.5056C4.02966 12.3737 3.99743 12.2172 4.00016 12.0358H4.61196C4.61196 12.1347 4.62938 12.2186 4.66427 12.2872ZM8.00807 12.0101C7.98382 12.032 7.95355 12.049 7.91716 12.0613C7.88081 12.0736 7.84174 12.0839 7.79998 12.0921C7.7582 12.1002 7.71444 12.1071 7.66869 12.1125C7.62286 12.1181 7.5771 12.1248 7.5313 12.133C7.48817 12.1412 7.44576 12.1522 7.40404 12.1658C7.36224 12.1795 7.32589 12.198 7.29497 12.2212C7.26395 12.2444 7.23902 12.2738 7.22021 12.3093C7.20133 12.3449 7.19192 12.3899 7.19192 12.4446C7.19192 12.4965 7.20133 12.5403 7.22021 12.5758C7.23902 12.6113 7.26466 12.6393 7.29699 12.6598C7.3293 12.6803 7.367 12.6946 7.41011 12.7028C7.45315 12.711 7.49758 12.7151 7.54345 12.7151C7.65658 12.7151 7.74408 12.696 7.80607 12.6577C7.86799 12.6195 7.91377 12.5737 7.94343 12.5204C7.97304 12.4671 7.99121 12.4132 7.99799 12.3585C8.00468 12.3039 8.00807 12.2601 8.00807 12.2273V12.0101ZM6.68282 11.5796C6.69091 11.443 6.72456 11.3296 6.78383 11.2394C6.84306 11.1492 6.9185 11.0768 7.0101 11.0222C7.10166 10.9675 7.20467 10.9286 7.3192 10.9053C7.43366 10.8822 7.54881 10.8705 7.66464 10.8705C7.7697 10.8705 7.87605 10.878 7.98382 10.893C8.09152 10.9081 8.18988 10.9375 8.27877 10.9812C8.36766 11.0249 8.44038 11.0857 8.49698 11.1636C8.55351 11.2415 8.5818 11.3447 8.5818 11.4731V12.5758C8.5818 12.6715 8.58717 12.763 8.59797 12.8504C8.60872 12.9379 8.62758 13.0035 8.65455 13.0472H8.07271C8.06193 13.0144 8.05315 12.9809 8.04648 12.9467C8.0397 12.9126 8.03499 12.8777 8.03232 12.8422C7.94073 12.9379 7.83297 13.0048 7.70908 13.043C7.58517 13.0813 7.45858 13.1004 7.3293 13.1004C7.22962 13.1004 7.13669 13.0881 7.0505 13.0636C6.96428 13.039 6.88889 13.0007 6.82425 12.9488C6.75961 12.8969 6.70909 12.8313 6.67274 12.752C6.63639 12.6728 6.61818 12.5785 6.61818 12.4692C6.61818 12.3489 6.63902 12.2499 6.68082 12.172C6.72254 12.0941 6.77638 12.032 6.84241 11.9855C6.9084 11.939 6.98384 11.9042 7.0687 11.8809C7.15355 11.8578 7.23902 11.8393 7.32524 11.8256C7.41143 11.812 7.49628 11.801 7.5798 11.7928C7.66325 11.7846 7.73737 11.7723 7.80201 11.7559C7.86664 11.7395 7.91781 11.7156 7.95555 11.6842C7.99323 11.6528 8.01074 11.607 8.00807 11.5469C8.00807 11.484 7.99799 11.4341 7.97778 11.3972C7.9576 11.3603 7.93063 11.3317 7.89698 11.3112C7.86325 11.2906 7.82423 11.277 7.7798 11.2702C7.73535 11.2634 7.6875 11.2599 7.63638 11.2599C7.52326 11.2599 7.43433 11.2845 7.36969 11.3337C7.30505 11.3829 7.26729 11.4649 7.25656 11.5796H6.68282ZM8.75152 11.2844V10.8974H9.09806V10.7344C9.09806 10.547 9.15646 10.3936 9.27333 10.2741C9.39018 10.1546 9.56689 10.0948 9.80333 10.0948C9.85494 10.0948 9.90659 10.0969 9.95824 10.101C10.0098 10.105 10.0602 10.1084 10.1091 10.1111V10.5429C10.0411 10.5348 9.97049 10.5307 9.89709 10.5307C9.81824 10.5307 9.76185 10.5491 9.72793 10.5857C9.69391 10.6224 9.67696 10.6842 9.67696 10.7711V10.8974H10.0765V11.2844H9.67696V13.0035H9.09806V11.2844H8.75152ZM10.7564 10.9267V11.3124H10.7646C10.7917 11.2481 10.8284 11.1885 10.8747 11.1336C10.9208 11.0788 10.9738 11.0319 11.0336 10.993C11.0934 10.9542 11.1573 10.9241 11.2253 10.9026C11.2932 10.8812 11.3639 10.8705 11.4373 10.8705C11.4753 10.8705 11.5174 10.8772 11.5636 10.8906V11.4208C11.5365 11.4155 11.5038 11.4108 11.4658 11.4067C11.4277 11.4027 11.391 11.4007 11.3557 11.4007C11.2497 11.4007 11.1601 11.4182 11.0867 11.453C11.0133 11.4878 10.9542 11.5353 10.9093 11.5955C10.8645 11.6558 10.8325 11.7261 10.8135 11.8064C10.7945 11.8868 10.785 11.9738 10.785 12.0676V13.0035H10.2061V10.9267H10.7564Z\" fill=\"#C4AD6C\"/>\n<path fill-rule=\"evenodd\" clip-rule=\"evenodd\" d=\"M17.5016 12.5347C17.452 12.5896 17.3897 12.6338 17.3149 12.6669C17.2403 12.7004 17.1529 12.7168 17.053 12.7168C16.9243 12.7168 16.8164 12.6901 16.73 12.6367C16.6436 12.5832 16.6003 12.4927 16.6003 12.3652C16.6003 12.2265 16.6649 12.1264 16.7937 12.0659C16.9228 12.005 17.0973 11.9747 17.3171 11.9747H17.66V12.105C17.6571 12.1887 17.6426 12.2675 17.6163 12.3415C17.5897 12.4152 17.5517 12.4798 17.5016 12.5347ZM18.4977 12.6632H18.0392C18.0193 12.6632 18.003 12.6473 18.003 12.6274V11.7272C18.003 11.4379 17.9355 11.2223 17.8006 11.0804C17.6658 10.9388 17.446 10.8705 17.1413 10.8705H15.8303C15.8854 10.91 15.9333 10.9512 15.9802 10.999C16.0321 11.0518 16.0789 11.109 16.1209 11.1704H17.2511C17.3644 11.1879 17.4563 11.2343 17.526 11.2931C17.6153 11.3685 17.66 11.4799 17.66 11.6273V11.6881H17.528C17.4021 11.6881 17.2634 11.6939 17.1126 11.7056C16.9616 11.7173 16.8209 11.7461 16.6904 11.7923C16.5601 11.8387 16.4507 11.9095 16.363 12.005C16.2748 12.1004 16.231 12.2321 16.231 12.4001C16.231 12.4984 16.2513 12.5851 16.2924 12.6604C16.3334 12.7358 16.3885 12.7987 16.4574 12.8493C16.5262 12.8997 16.607 12.9383 16.6993 12.9644C16.7917 12.9904 16.8903 13.0035 16.996 13.0035C17.1544 13.0035 17.2898 12.97 17.403 12.9035C17.5095 12.8406 17.5958 12.7609 17.662 12.6645C17.6808 12.8542 17.8442 13.0033 18.0408 13.0033H18.6424L18.4977 12.6632Z\" fill=\"white\"/>\n<path fill-rule=\"evenodd\" clip-rule=\"evenodd\" d=\"M13.0505 12.0101C13.0263 12.032 12.996 12.049 12.9596 12.0613C12.9233 12.0736 12.8842 12.0839 12.8424 12.0921C12.8007 12.1002 12.7569 12.1071 12.7111 12.1125C12.6653 12.1181 12.6196 12.1248 12.5738 12.133C12.5306 12.1412 12.4882 12.1522 12.4465 12.1658C12.4047 12.1795 12.3683 12.198 12.3374 12.2212C12.3064 12.2444 12.2815 12.2738 12.2627 12.3093C12.2438 12.3449 12.2344 12.3899 12.2344 12.4446C12.2344 12.4965 12.2438 12.5403 12.2627 12.5758C12.2815 12.6113 12.3071 12.6393 12.3394 12.6598C12.3717 12.6803 12.4094 12.6946 12.4526 12.7028C12.4956 12.711 12.54 12.7151 12.5859 12.7151C12.699 12.7151 12.7865 12.696 12.8485 12.6577C12.9104 12.6195 12.9562 12.5737 12.9859 12.5204C13.0155 12.4671 13.0337 12.4132 13.0404 12.3585C13.0471 12.3039 13.0505 12.2601 13.0505 12.2273V12.0101ZM11.7253 11.5796C11.7334 11.443 11.767 11.3296 11.8263 11.2394C11.8855 11.1492 11.9609 11.0769 12.0525 11.0222C12.1441 10.9675 12.2471 10.9286 12.3617 10.9053C12.4761 10.8822 12.5912 10.8705 12.7071 10.8705C12.8121 10.8705 12.9185 10.878 13.0263 10.893C13.134 10.9081 13.2323 10.9375 13.3212 10.9812C13.4101 11.0249 13.4828 11.0857 13.5394 11.1636C13.596 11.2415 13.6243 11.3447 13.6243 11.4731V12.5758C13.6243 12.6715 13.6296 12.763 13.6404 12.8504C13.6512 12.9379 13.67 13.0035 13.697 13.0472H13.1152C13.1044 13.0144 13.0956 12.9809 13.0889 12.9467C13.0822 12.9126 13.0774 12.8777 13.0748 12.8422C12.9832 12.9379 12.8754 13.0048 12.7515 13.043C12.6276 13.0813 12.501 13.1004 12.3717 13.1004C12.2721 13.1004 12.1791 13.0881 12.0929 13.0636C12.0067 13.039 11.9313 13.0007 11.8667 12.9488C11.802 12.8969 11.7515 12.8313 11.7152 12.752C11.6788 12.6728 11.6606 12.5785 11.6606 12.4692C11.6606 12.3489 11.6815 12.2499 11.7233 12.172C11.765 12.0941 11.8188 12.032 11.8849 11.9855C11.9508 11.939 12.0263 11.9042 12.1112 11.8809C12.196 11.8578 12.2815 11.8393 12.3677 11.8256C12.4539 11.812 12.5387 11.801 12.6223 11.7928C12.7057 11.7846 12.7798 11.7723 12.8445 11.7559C12.9091 11.7395 12.9603 11.7156 12.998 11.6842C13.0357 11.6528 13.0532 11.607 13.0505 11.5469C13.0505 11.484 13.0404 11.4341 13.0202 11.3972C13 11.3603 12.9731 11.3317 12.9394 11.3112C12.9057 11.2907 12.8667 11.277 12.8222 11.2702C12.7778 11.2634 12.73 11.2599 12.6788 11.2599C12.5657 11.2599 12.4768 11.2845 12.4121 11.3337C12.3475 11.3829 12.3097 11.4649 12.299 11.5796H11.7253Z\" fill=\"#C4AD6C\"/>\n</svg>\n",
    126: "<svg viewBox=\"0 0 24 24\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n<rect width=\"24\" height=\"24\" rx=\"4\" fill=\"#026BBF\"/>\n<path d=\"M15.0632 10.7344L15.8876 10.7504L16.9491 10.7714C17.0089 10.7714 17.0686 10.7806 17.1283 10.7815C17.1687 10.7815 17.1855 10.8067 17.204 10.8345C17.3226 11.0103 17.4379 11.1886 17.5615 11.3611C17.8543 11.7674 18.1546 12.1678 18.4456 12.5757C18.6837 12.9122 18.9142 13.2487 19.1447 13.5911C19.3179 13.8434 19.4862 14.1025 19.6561 14.3591C19.7181 14.4367 19.7482 14.5351 19.7402 14.6341C19.7318 14.6703 19.7206 14.7058 19.7066 14.7401H19.6326L15.0623 14.7443C15.0295 14.7443 14.9976 14.7443 14.9648 14.7393C14.9766 14.584 14.9497 14.4282 14.8865 14.2859C14.8455 14.2064 14.7979 14.1304 14.7444 14.0588C14.284 13.4172 13.8227 12.7768 13.3606 12.1375C13.0839 11.7564 12.8029 11.3804 12.5236 10.9994C12.5076 10.9775 12.495 10.9539 12.4816 10.9312C12.5281 10.8777 12.5928 10.8432 12.6633 10.8345C12.8463 10.7834 13.0352 10.7569 13.2252 10.7554C13.4641 10.7478 13.703 10.7554 13.9419 10.7554C14.3128 10.747 14.6889 10.7663 15.0632 10.7344Z\" fill=\"white\" fill-opacity=\"0.8\"/>\n<path d=\"M9.92941 5H11.2543C11.4579 5.00589 11.6614 5.01262 11.8658 5.01682C12.1754 5.02439 12.4858 5.03028 12.7962 5.03701C13.0132 5.04122 13.2311 5.04711 13.4481 5.053C13.5028 5.053 13.5566 5.06225 13.6113 5.06309C13.6492 5.06309 13.6618 5.09001 13.6778 5.1144C13.7737 5.25656 13.8645 5.40209 13.9638 5.54173C14.2801 5.98756 14.6031 6.42919 14.9168 6.87586C15.1347 7.18542 15.3425 7.50087 15.5536 7.81463C15.7025 8.03587 15.8506 8.2571 15.9961 8.48086C16.0538 8.56663 16.1055 8.65629 16.1509 8.7492C16.1726 8.79168 16.1831 8.83899 16.1815 8.88667C16.1799 8.93435 16.1662 8.98084 16.1416 9.02175H16.0432L12.3714 9.03689H11.4663C11.4621 8.95277 11.4612 8.86276 11.4528 8.77696C11.4354 8.64105 11.3823 8.51218 11.2989 8.40347C11.0886 8.10905 10.8791 7.81407 10.6705 7.51853C10.4442 7.19972 10.2188 6.87923 9.98997 6.56125C9.67536 6.12299 9.35908 5.6881 9.04363 5.25152L8.99652 5.18506C9.29767 5.04879 9.61312 5.01935 9.92941 5Z\" fill=\"white\" fill-opacity=\"0.8\"/>\n<path d=\"M12.4168 14.7402C12.4017 14.7688 12.3874 14.7983 12.3705 14.8244L10.1346 18.3574C10.1208 18.3773 10.1081 18.3981 10.0968 18.4196C10.0754 18.4657 10.0406 18.5042 9.99689 18.5302C9.95321 18.5562 9.90271 18.5683 9.852 18.5651C9.7948 18.5651 9.7376 18.5651 9.68376 18.5651L5.1859 18.5433H5L5.06393 18.3876C5.14216 18.3818 5.21787 18.3717 5.29358 18.3717C5.31747 18.3728 5.3412 18.3672 5.36204 18.3554C5.38287 18.3437 5.39996 18.3263 5.41134 18.3052C5.70912 17.8566 6.00831 17.4079 6.3089 16.9593C6.71884 16.3452 7.12878 15.7317 7.53872 15.1188C7.61314 15.017 7.65586 14.8956 7.66153 14.7697C7.66366 14.7595 7.66765 14.7498 7.67331 14.7411H12.4168V14.7402Z\" fill=\"white\"/>\n<path d=\"M14.9623 14.7385C14.9951 14.7385 15.027 14.7436 15.0598 14.7436L19.63 14.7394H19.7041C19.6898 14.7654 19.6763 14.7924 19.6603 14.8168C18.9139 15.9944 18.1675 17.1746 17.4211 18.3573C17.4085 18.3751 17.397 18.3937 17.3866 18.4129C17.3651 18.462 17.3284 18.5031 17.282 18.53C17.2355 18.5569 17.1817 18.5683 17.1283 18.5626C16.7708 18.5626 16.4142 18.5584 16.0575 18.5567L14.1379 18.5432C13.5463 18.5399 12.9552 18.5357 12.3647 18.5306C12.3445 18.5306 12.3234 18.5306 12.2932 18.5256L12.3546 18.375C12.4311 18.375 12.5043 18.3641 12.5775 18.3632C12.6029 18.3638 12.628 18.3574 12.65 18.3448C12.6721 18.3322 12.6903 18.3139 12.7028 18.2917C13.4161 17.22 14.1309 16.1489 14.847 15.0784C14.9094 14.9886 14.9453 14.8831 14.9505 14.7739C14.953 14.7617 14.957 14.7498 14.9623 14.7385Z\" fill=\"white\"/>\n<path d=\"M12.3461 14.7905H7.60265C7.61956 14.5599 7.55099 14.3311 7.41002 14.1478C7.35618 14.0763 7.30992 13.999 7.26029 13.9249L6.35264 12.5672C6.02457 12.076 5.69651 11.585 5.36844 11.0943C5.33512 11.0414 5.28953 10.9972 5.23553 10.9656C5.16908 10.9286 5.10683 10.8815 5.0429 10.8436C5.02769 10.8315 5.01335 10.8183 5 10.8041H5.07823H5.46181L6.96419 10.7856C7.02139 10.7856 7.07859 10.7856 7.13243 10.7755C7.15379 10.7726 7.17553 10.7763 7.19466 10.7863C7.21379 10.7962 7.22937 10.8119 7.23926 10.831C7.36207 11.0169 7.49162 11.2011 7.61359 11.3862C7.90015 11.809 8.18672 12.2324 8.47329 12.6564C8.48473 12.6778 8.50255 12.695 8.52427 12.7057C8.54599 12.7164 8.57052 12.7201 8.59442 12.7161C8.65667 12.7111 8.71891 12.7102 8.78116 12.7086C8.78116 12.7986 8.78116 12.7986 8.86528 12.8003C9.10755 12.8003 9.34981 12.8103 9.59207 12.812C10.1388 12.8154 10.6862 12.8176 11.2341 12.8188C11.2419 12.8357 11.2506 12.8523 11.2602 12.8684C11.5966 13.3653 11.93 13.8624 12.2603 14.3598C12.3245 14.4382 12.3666 14.5323 12.3823 14.6324C12.3909 14.6878 12.3779 14.7444 12.3461 14.7905Z\" fill=\"white\" fill-opacity=\"0.8\"/>\n<path d=\"M11.3039 12.7651C10.7565 12.7651 10.2092 12.7629 9.66186 12.7584C9.4196 12.7584 9.17734 12.7508 8.93507 12.7466C8.85095 12.7466 8.85095 12.7466 8.85095 12.6549C9.00573 12.6339 9.00573 12.6339 9.0949 12.5027L11.4191 9.09331C11.4334 9.07312 11.4477 9.05378 11.4629 9.03443H12.368L16.0398 9.01929H16.1382C16.1205 9.04957 16.1037 9.08069 16.0852 9.11014L15.101 10.6562C15.085 10.6815 15.0733 10.7084 15.0598 10.7345C14.6855 10.7664 14.3111 10.7471 13.936 10.7505C13.6971 10.7505 13.4582 10.7505 13.2193 10.7505C13.0293 10.7519 12.8403 10.7785 12.6574 10.8295C12.5869 10.8383 12.5222 10.8727 12.4757 10.9263C12.4541 10.9499 12.4342 10.9749 12.4159 11.0011C12.0598 11.5619 11.7043 12.1227 11.3493 12.6835L11.3039 12.7651Z\" fill=\"white\"/>\n</svg>\n",
    5: "<svg viewBox=\"0 0 24 24\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n<rect width=\"24\" height=\"24\" rx=\"4\" fill=\"#026BBF\"/>\n<path d=\"M15.0632 10.7344L15.8876 10.7504L16.9491 10.7714C17.0089 10.7714 17.0686 10.7806 17.1283 10.7815C17.1687 10.7815 17.1855 10.8067 17.204 10.8345C17.3226 11.0103 17.4379 11.1886 17.5615 11.3611C17.8543 11.7674 18.1546 12.1678 18.4456 12.5757C18.6837 12.9122 18.9142 13.2487 19.1447 13.5911C19.3179 13.8434 19.4862 14.1025 19.6561 14.3591C19.7181 14.4367 19.7482 14.5351 19.7402 14.6341C19.7318 14.6703 19.7206 14.7058 19.7066 14.7401H19.6326L15.0623 14.7443C15.0295 14.7443 14.9976 14.7443 14.9648 14.7393C14.9766 14.584 14.9497 14.4282 14.8865 14.2859C14.8455 14.2064 14.7979 14.1304 14.7444 14.0588C14.284 13.4172 13.8227 12.7768 13.3606 12.1375C13.0839 11.7564 12.8029 11.3804 12.5236 10.9994C12.5076 10.9775 12.495 10.9539 12.4816 10.9312C12.5281 10.8777 12.5928 10.8432 12.6633 10.8345C12.8463 10.7834 13.0352 10.7569 13.2252 10.7554C13.4641 10.7478 13.703 10.7554 13.9419 10.7554C14.3128 10.747 14.6889 10.7663 15.0632 10.7344Z\" fill=\"white\" fill-opacity=\"0.8\"/>\n<path d=\"M9.92941 5H11.2543C11.4579 5.00589 11.6614 5.01262 11.8658 5.01682C12.1754 5.02439 12.4858 5.03028 12.7962 5.03701C13.0132 5.04122 13.2311 5.04711 13.4481 5.053C13.5028 5.053 13.5566 5.06225 13.6113 5.06309C13.6492 5.06309 13.6618 5.09001 13.6778 5.1144C13.7737 5.25656 13.8645 5.40209 13.9638 5.54173C14.2801 5.98756 14.6031 6.42919 14.9168 6.87586C15.1347 7.18542 15.3425 7.50087 15.5536 7.81463C15.7025 8.03587 15.8506 8.2571 15.9961 8.48086C16.0538 8.56663 16.1055 8.65629 16.1509 8.7492C16.1726 8.79168 16.1831 8.83899 16.1815 8.88667C16.1799 8.93435 16.1662 8.98084 16.1416 9.02175H16.0432L12.3714 9.03689H11.4663C11.4621 8.95277 11.4612 8.86276 11.4528 8.77696C11.4354 8.64105 11.3823 8.51218 11.2989 8.40347C11.0886 8.10905 10.8791 7.81407 10.6705 7.51853C10.4442 7.19972 10.2188 6.87923 9.98997 6.56125C9.67536 6.12299 9.35908 5.6881 9.04363 5.25152L8.99652 5.18506C9.29767 5.04879 9.61312 5.01935 9.92941 5Z\" fill=\"white\" fill-opacity=\"0.8\"/>\n<path d=\"M12.4168 14.7402C12.4017 14.7688 12.3874 14.7983 12.3705 14.8244L10.1346 18.3574C10.1208 18.3773 10.1081 18.3981 10.0968 18.4196C10.0754 18.4657 10.0406 18.5042 9.99689 18.5302C9.95321 18.5562 9.90271 18.5683 9.852 18.5651C9.7948 18.5651 9.7376 18.5651 9.68376 18.5651L5.1859 18.5433H5L5.06393 18.3876C5.14216 18.3818 5.21787 18.3717 5.29358 18.3717C5.31747 18.3728 5.3412 18.3672 5.36204 18.3554C5.38287 18.3437 5.39996 18.3263 5.41134 18.3052C5.70912 17.8566 6.00831 17.4079 6.3089 16.9593C6.71884 16.3452 7.12878 15.7317 7.53872 15.1188C7.61314 15.017 7.65586 14.8956 7.66153 14.7697C7.66366 14.7595 7.66765 14.7498 7.67331 14.7411H12.4168V14.7402Z\" fill=\"white\"/>\n<path d=\"M14.9623 14.7385C14.9951 14.7385 15.027 14.7436 15.0598 14.7436L19.63 14.7394H19.7041C19.6898 14.7654 19.6763 14.7924 19.6603 14.8168C18.9139 15.9944 18.1675 17.1746 17.4211 18.3573C17.4085 18.3751 17.397 18.3937 17.3866 18.4129C17.3651 18.462 17.3284 18.5031 17.282 18.53C17.2355 18.5569 17.1817 18.5683 17.1283 18.5626C16.7708 18.5626 16.4142 18.5584 16.0575 18.5567L14.1379 18.5432C13.5463 18.5399 12.9552 18.5357 12.3647 18.5306C12.3445 18.5306 12.3234 18.5306 12.2932 18.5256L12.3546 18.375C12.4311 18.375 12.5043 18.3641 12.5775 18.3632C12.6029 18.3638 12.628 18.3574 12.65 18.3448C12.6721 18.3322 12.6903 18.3139 12.7028 18.2917C13.4161 17.22 14.1309 16.1489 14.847 15.0784C14.9094 14.9886 14.9453 14.8831 14.9505 14.7739C14.953 14.7617 14.957 14.7498 14.9623 14.7385Z\" fill=\"white\"/>\n<path d=\"M12.3461 14.7905H7.60265C7.61956 14.5599 7.55099 14.3311 7.41002 14.1478C7.35618 14.0763 7.30992 13.999 7.26029 13.9249L6.35264 12.5672C6.02457 12.076 5.69651 11.585 5.36844 11.0943C5.33512 11.0414 5.28953 10.9972 5.23553 10.9656C5.16908 10.9286 5.10683 10.8815 5.0429 10.8436C5.02769 10.8315 5.01335 10.8183 5 10.8041H5.07823H5.46181L6.96419 10.7856C7.02139 10.7856 7.07859 10.7856 7.13243 10.7755C7.15379 10.7726 7.17553 10.7763 7.19466 10.7863C7.21379 10.7962 7.22937 10.8119 7.23926 10.831C7.36207 11.0169 7.49162 11.2011 7.61359 11.3862C7.90015 11.809 8.18672 12.2324 8.47329 12.6564C8.48473 12.6778 8.50255 12.695 8.52427 12.7057C8.54599 12.7164 8.57052 12.7201 8.59442 12.7161C8.65667 12.7111 8.71891 12.7102 8.78116 12.7086C8.78116 12.7986 8.78116 12.7986 8.86528 12.8003C9.10755 12.8003 9.34981 12.8103 9.59207 12.812C10.1388 12.8154 10.6862 12.8176 11.2341 12.8188C11.2419 12.8357 11.2506 12.8523 11.2602 12.8684C11.5966 13.3653 11.93 13.8624 12.2603 14.3598C12.3245 14.4382 12.3666 14.5323 12.3823 14.6324C12.3909 14.6878 12.3779 14.7444 12.3461 14.7905Z\" fill=\"white\" fill-opacity=\"0.8\"/>\n<path d=\"M11.3039 12.7651C10.7565 12.7651 10.2092 12.7629 9.66186 12.7584C9.4196 12.7584 9.17734 12.7508 8.93507 12.7466C8.85095 12.7466 8.85095 12.7466 8.85095 12.6549C9.00573 12.6339 9.00573 12.6339 9.0949 12.5027L11.4191 9.09331C11.4334 9.07312 11.4477 9.05378 11.4629 9.03443H12.368L16.0398 9.01929H16.1382C16.1205 9.04957 16.1037 9.08069 16.0852 9.11014L15.101 10.6562C15.085 10.6815 15.0733 10.7084 15.0598 10.7345C14.6855 10.7664 14.3111 10.7471 13.936 10.7505C13.6971 10.7505 13.4582 10.7505 13.2193 10.7505C13.0293 10.7519 12.8403 10.7785 12.6574 10.8295C12.5869 10.8383 12.5222 10.8727 12.4757 10.9263C12.4541 10.9499 12.4342 10.9749 12.4159 11.0011C12.0598 11.5619 11.7043 12.1227 11.3493 12.6835L11.3039 12.7651Z\" fill=\"white\"/>\n</svg>",
    95: "<svg viewBox=\"0 0 24 24\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n<rect width=\"24\" height=\"24\" rx=\"4\" fill=\"#40B83C\"/>\n<path d=\"M5 10.477C5.05596 10.2794 5.10716 10.0805 5.16848 9.88466C5.47966 8.88988 6.01049 7.97777 6.7217 7.21579C6.74022 7.19923 6.76014 7.18429 6.78123 7.17114C6.95149 7.5087 7.10866 7.85399 7.29381 8.18321C7.65884 8.81773 8.08387 9.4158 8.56305 9.9692C8.63747 10.0567 8.70712 10.1478 8.77916 10.2377C8.57258 10.2448 8.3654 10.2466 8.15942 10.2603C7.44979 10.3073 6.74075 10.355 6.03171 10.4097C5.68761 10.4365 5.3447 10.4794 5.00119 10.5145L5 10.477Z\" fill=\"white\" fill-opacity=\"0.7\"/>\n<path d=\"M11.6987 7.99392C11.4606 7.71947 11.2361 7.43609 10.9885 7.17236C10.4771 6.62763 9.95496 6.09362 9.43583 5.55604C9.40263 5.52641 9.36675 5.4999 9.32867 5.47686L9.34475 5.43459C9.62813 5.35184 9.90972 5.26135 10.1955 5.18932C10.5824 5.09205 10.9781 5.03342 11.3766 5.01429C11.3896 5.01136 11.402 5.00655 11.4135 5H12.1958C12.2887 5.01131 12.3815 5.02084 12.4738 5.03453C12.5661 5.04822 12.6524 5.06668 12.7405 5.08335C12.6941 5.16074 12.6453 5.23635 12.6018 5.31553C12.2957 5.88807 12.0589 6.49502 11.8963 7.12354C11.8183 7.41049 11.7636 7.70399 11.6987 7.99392Z\" fill=\"white\" fill-opacity=\"0.7\"/>\n<path d=\"M5.10178 13.7621C5.6738 13.28 6.29197 12.8554 6.9473 12.4946C7.6703 12.0828 8.44185 11.7628 9.24409 11.5421C9.60545 11.4462 9.96801 11.3474 10.3472 11.3808C10.4503 11.3908 10.5509 11.4182 10.6449 11.4617C10.6767 11.4732 10.7058 11.4912 10.7302 11.5146C10.7546 11.5381 10.7738 11.5664 10.7865 11.5977C10.7993 11.629 10.8053 11.6627 10.8041 11.6965C10.803 11.7303 10.7948 11.7635 10.78 11.7939C10.7243 11.9137 10.6515 12.0248 10.5639 12.1237C10.152 12.6 9.73047 13.0763 9.3185 13.5525C9.18336 13.7085 9.05954 13.8734 8.92975 14.0341L8.41955 14.0675H7.21163C7.1646 14.0621 7.11697 14.0544 7.06934 14.0502C6.79787 14.027 6.52462 14.0163 6.25434 13.9794C5.88225 13.9276 5.51315 13.8567 5.14285 13.793C5.12738 13.7895 5.11428 13.7722 5.10178 13.7621Z\" fill=\"white\"/>\n<path d=\"M8.77793 10.2342C8.70589 10.1449 8.63624 10.0556 8.56182 9.96566C8.08264 9.41226 7.65761 8.81419 7.29258 8.17966C7.10743 7.85104 6.95026 7.50575 6.78 7.1676C7.01813 7.22714 7.25626 7.27714 7.48606 7.3462C8.59256 7.66043 9.6444 8.14228 10.605 8.775C10.9699 9.01908 11.3301 9.27329 11.6206 9.60846C11.719 9.72418 11.7977 9.85532 11.8534 9.99661C11.9254 10.1752 11.8415 10.3217 11.6504 10.3598C11.5282 10.3819 11.4035 10.3859 11.2801 10.3717C10.4734 10.2848 9.66438 10.2526 8.85413 10.2407C8.82853 10.2395 8.80353 10.2359 8.77793 10.2342Z\" fill=\"white\"/>\n<path d=\"M9.60847 18.642C9.59716 18.5425 9.5799 18.4437 9.57692 18.3443C9.55429 17.7101 9.59417 17.0752 9.69599 16.4488C9.83232 15.6189 10.0568 14.8152 10.4294 14.0591C10.5237 13.8792 10.6313 13.7066 10.7515 13.5429C10.8071 13.472 10.8748 13.4115 10.9515 13.3643C11.1498 13.2316 11.3349 13.2858 11.4278 13.5072C11.4662 13.6102 11.4928 13.7173 11.507 13.8263C11.6234 14.5693 11.7774 15.3058 11.9684 16.0332C11.9708 16.047 11.972 16.0609 11.9719 16.0749C11.8725 16.2011 11.7761 16.3291 11.6743 16.4529C11.3885 16.7994 11.1039 17.1465 10.8128 17.4888C10.53 17.8166 10.221 18.1208 9.88887 18.3985C9.79124 18.4753 9.70075 18.5598 9.60847 18.642Z\" fill=\"white\"/>\n<path d=\"M11.6987 7.99395C11.7635 7.70402 11.8177 7.41052 11.8951 7.12357C12.0585 6.49494 12.2961 5.88799 12.603 5.31555C12.6464 5.23637 12.6952 5.16077 12.7417 5.08337C12.9054 5.44534 13.0834 5.80194 13.231 6.17104C13.5011 6.84973 13.6882 7.55854 13.7883 8.28209C13.8514 8.73692 13.8996 9.19473 13.8436 9.65135C13.8241 9.80511 13.7793 9.95458 13.7109 10.0937C13.6204 10.2764 13.4525 10.2997 13.2941 10.1675C13.227 10.111 13.1685 10.045 13.1203 9.97163C12.6869 9.3007 12.2184 8.65476 11.7225 8.02788C11.7138 8.01713 11.7058 8.00579 11.6987 7.99395Z\" fill=\"white\"/>\n<path d=\"M5.10173 13.7621C5.11602 13.7722 5.12912 13.7895 5.1446 13.7924C5.51489 13.8561 5.884 13.927 6.25608 13.9788C6.52636 14.0157 6.79962 14.0264 7.07109 14.0496C7.11872 14.0538 7.16634 14.0615 7.21337 14.0669C7.23677 14.0746 7.26091 14.0798 7.28541 14.0824C7.63943 14.0824 7.99365 14.0824 8.34807 14.0824C8.37237 14.0798 8.39632 14.0746 8.41951 14.0669L8.92971 14.0336C8.80588 14.2094 8.68166 14.3848 8.55703 14.5598C8.00457 15.3338 7.50568 16.1375 7.03061 16.959L6.97881 17.0471C6.95798 17.0293 6.93893 17.0144 6.91928 16.9977C6.04106 16.1289 5.40915 15.0425 5.08804 13.8496C5.08709 13.8198 5.09174 13.7901 5.10173 13.7621Z\" fill=\"white\" fill-opacity=\"0.7\"/>\n<path d=\"M15.529 17.8931C15.506 17.8841 15.4837 17.8733 15.4623 17.861C14.3585 17.1454 13.4638 16.1505 12.869 14.9772C12.7561 14.7736 12.6858 14.5492 12.6625 14.3176C12.6398 13.9663 12.8524 13.8103 13.1733 13.9604C13.4114 14.0705 13.634 14.2134 13.871 14.3265C14.2966 14.5301 14.7271 14.7224 15.1551 14.9218C15.173 14.9302 15.1896 14.9403 15.2063 14.9498C15.242 15.1111 15.2837 15.2713 15.3129 15.4338C15.3653 15.7237 15.4147 16.0137 15.4563 16.3048C15.4825 16.4911 15.4974 16.6786 15.5099 16.8668C15.5248 17.0882 15.5349 17.3109 15.5403 17.5329C15.5451 17.6508 15.5337 17.7723 15.529 17.8931Z\" fill=\"white\"/>\n<path d=\"M17.5382 8.11353C17.4876 8.24509 17.4436 8.37904 17.387 8.50763C16.9536 9.49291 16.3708 10.3758 15.573 11.1057C15.4069 11.2547 15.2276 11.3884 15.0372 11.5051C14.936 11.5604 14.8238 11.5923 14.7086 11.5986C14.6772 11.6029 14.6453 11.6003 14.615 11.5912C14.5847 11.582 14.5567 11.5664 14.533 11.5454C14.5093 11.5245 14.4903 11.4986 14.4775 11.4697C14.4647 11.4408 14.4582 11.4094 14.4586 11.3777C14.4502 11.2739 14.4597 11.1694 14.4866 11.0687C14.692 10.3544 14.867 9.63698 15.0039 8.90889C15.0069 8.89804 15.0113 8.88763 15.017 8.87793C15.0587 8.86245 15.1021 8.84995 15.1432 8.83209C15.6504 8.60824 16.1612 8.38916 16.7024 8.26057C16.9774 8.19509 17.2596 8.16115 17.5382 8.11353Z\" fill=\"white\"/>\n<path d=\"M18.5908 13.3656C18.2765 13.4572 17.9663 13.565 17.6478 13.6358C17.0281 13.7738 16.3915 13.821 15.7582 13.7757C15.4106 13.7513 15.0635 13.7162 14.7319 13.6037C14.6009 13.5595 14.4777 13.4948 14.3669 13.412C14.1663 13.2602 14.1776 13.0548 14.3812 12.9054C14.4406 12.8621 14.5047 12.8257 14.5723 12.797C15.2042 12.5351 15.818 12.2314 16.4095 11.8879C16.422 11.882 16.4349 11.8773 16.4482 11.8737C16.4673 11.885 16.4851 11.8987 16.5048 11.9088C16.9381 12.122 17.3538 12.3695 17.7478 12.6488C18.0507 12.8607 18.333 13.1007 18.5908 13.3656Z\" fill=\"white\"/>\n<path d=\"M9.60846 18.6421C9.70074 18.5599 9.79123 18.4754 9.88529 18.3956C10.2174 18.1179 10.5264 17.8137 10.8092 17.4859C11.1004 17.1436 11.3849 16.7965 11.6707 16.4501C11.7731 16.3262 11.8695 16.1982 11.9684 16.072C12.0457 16.3173 12.113 16.5656 12.2017 16.8067C12.4458 17.4722 12.6988 18.1348 12.9489 18.798C12.9602 18.829 12.9727 18.8576 12.9893 18.904C12.8441 18.9243 12.7083 18.9475 12.5726 18.9635C11.5659 19.0737 10.5866 18.9243 9.61977 18.6552C9.61501 18.6522 9.61203 18.6462 9.60846 18.6421Z\" fill=\"white\" fill-opacity=\"0.7\"/>\n<path d=\"M17.5382 8.1136C17.2596 8.16123 16.9774 8.19517 16.7048 8.26065C16.1636 8.38924 15.6528 8.60832 15.1456 8.83217C15.1045 8.85003 15.0611 8.86253 15.0194 8.87801C15.0504 8.65952 15.0855 8.44163 15.1111 8.22315C15.1629 7.77903 15.2129 7.33432 15.2563 6.8896C15.2825 6.61873 15.295 6.34726 15.3159 6.07579C15.3159 6.04602 15.323 6.01625 15.329 5.96863C15.4808 6.06864 15.6213 6.15675 15.7576 6.25201C16.4488 6.73508 17.046 7.34034 17.5198 8.038C17.5314 8.05725 17.5419 8.07713 17.5513 8.09753L17.5394 8.1148L17.5382 8.1136Z\" fill=\"white\" fill-opacity=\"0.7\"/>\n<path d=\"M15.529 17.8931C15.5338 17.774 15.5451 17.6508 15.5427 17.5299C15.5373 17.3079 15.5272 17.0852 15.5123 16.8637C15.4998 16.6756 15.4849 16.4881 15.4587 16.3018C15.4171 16.0106 15.3677 15.7207 15.3153 15.4308C15.2861 15.2683 15.2444 15.1081 15.2087 14.9468L15.8773 15.1885C16.445 15.3884 17.0229 15.5583 17.6085 15.6975C17.6299 15.7028 17.6508 15.7106 17.6954 15.7243C17.5001 15.9862 17.3221 16.2446 17.1245 16.4875C16.6914 17.0158 16.1807 17.4754 15.61 17.8508C15.5839 17.8667 15.5569 17.8808 15.529 17.8931Z\" fill=\"white\" fill-opacity=\"0.7\"/>\n<path d=\"M18.5907 13.3656C18.3324 13.1015 18.0498 12.8623 17.7466 12.6513C17.3525 12.3719 16.9369 12.1245 16.5035 11.9113C16.4839 11.9011 16.466 11.8874 16.447 11.8761C16.5898 11.785 16.7315 11.6928 16.8756 11.6047C17.4326 11.2587 17.9693 10.8811 18.483 10.4735C18.5032 10.4581 18.5235 10.4438 18.555 10.4211C18.5776 10.564 18.6021 10.6968 18.6193 10.8301C18.6971 11.38 18.7201 11.9362 18.6878 12.4905C18.6693 12.7697 18.6342 13.0477 18.6062 13.324C18.6028 13.3385 18.5976 13.3525 18.5907 13.3656Z\" fill=\"white\" fill-opacity=\"0.7\"/>\n</svg>\n",
    94: "<svg viewBox=\"0 0 24 24\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n<rect width=\"24\" height=\"24\" rx=\"4\" fill=\"#6AC431\"/>\n<path d=\"M16.6755 13.2819H13.3596V10.8568C11.3758 12.8154 11.0831 13.6901 11.4273 16.504H13.3379V14.367H16.6194C16.6194 15.5104 16.696 16.6652 16.592 17.7972C16.5234 18.5426 15.8877 18.9657 15.1616 18.9783C12.8188 19.0171 10.4737 18.992 8.04512 18.992C8.04512 17.2369 8.13888 15.5355 8.01654 13.8467C7.91135 12.3912 8.3001 11.2707 9.40805 10.3182C10.0609 9.7591 10.5846 9.04905 11.2718 8.29098H8.11144V5.00487C9.7625 5.00487 11.4071 5.00487 13.0452 5.00487C13.7164 5.00487 14.3887 4.98658 15.0576 5.02088C16.0717 5.07462 16.6503 5.62231 16.6583 6.62963C16.6949 8.82266 16.6755 11.0157 16.6755 13.2819Z\" fill=\"white\"/>\n</svg>\n",
    39: "<svg viewBox=\"0 0 24 24\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n<rect width=\"24\" height=\"24\" rx=\"4\" fill=\"#2E376F\"/>\n<ellipse cx=\"11.75\" cy=\"12.375\" rx=\"7.75\" ry=\"4.375\" fill=\"white\"/>\n<path d=\"M6.03168 14.1716C6.15428 14.2207 6.27533 14.2746 6.39988 14.3178C6.79416 14.454 7.19953 14.5272 7.61794 14.5177C7.99081 14.5091 8.33371 14.4009 8.65267 14.2104C8.7277 14.1656 8.7968 14.1116 8.85838 14.0496C8.98643 13.9208 9.05299 13.7643 9.07556 13.5855C9.10261 13.3648 9.04987 13.1626 8.93933 12.9732C8.83646 12.8019 8.70387 12.6504 8.54778 12.5256C8.42518 12.425 8.29615 12.3322 8.16849 12.2382C8.02058 12.1292 7.86976 12.0241 7.72264 11.9146C7.60161 11.825 7.50864 11.7028 7.45466 11.5623C7.36495 11.3315 7.41029 11.1256 7.57785 10.9462C7.67515 10.8411 7.80068 10.7784 7.93612 10.7356C8.11477 10.679 8.29868 10.6648 8.48473 10.6673C8.7239 10.6704 8.95841 10.709 9.19155 10.7586C9.23106 10.7669 9.27102 10.7729 9.31123 10.7765C9.33447 10.7784 9.35786 10.7771 9.38071 10.7724C9.39528 10.7698 9.40913 10.7641 9.42132 10.7557C9.43352 10.7473 9.44378 10.7364 9.45141 10.7238C9.45904 10.7111 9.46387 10.6969 9.46557 10.6822C9.46727 10.6675 9.46581 10.6526 9.46128 10.6385C9.44292 10.5874 9.41371 10.541 9.37565 10.5023C9.31515 10.4392 9.24227 10.3893 9.16158 10.3557C8.95629 10.2697 8.74023 10.2121 8.51937 10.1845C8.35563 10.1634 8.19027 10.1576 8.02545 10.1672C7.67807 10.1866 7.34587 10.2662 7.03703 10.4307C6.74862 10.5842 6.54272 10.8125 6.44055 11.1241C6.35006 11.3992 6.39015 11.662 6.54934 11.9043C6.62952 12.0261 6.7348 12.1259 6.84339 12.2222C6.98328 12.3459 7.13298 12.4579 7.29099 12.5574C7.46113 12.6618 7.61425 12.7917 7.74502 12.9425C7.79138 12.9951 7.83063 13.0536 7.86178 13.1165C7.94819 13.3002 7.92678 13.4763 7.80457 13.6386C7.74529 13.7133 7.6713 13.7749 7.58719 13.8198C7.44786 13.8963 7.29701 13.9496 7.14056 13.9776C6.9203 14.0214 6.69423 14.0276 6.47188 13.9961C6.42732 13.9899 6.38373 13.9776 6.33975 13.9681L6.3378 13.9531C6.4592 13.973 6.58307 13.9723 6.70425 13.9511C6.87434 13.9206 7.03022 13.8601 7.16177 13.7445C7.20433 13.709 7.23876 13.6648 7.26274 13.6148C7.28671 13.5648 7.29967 13.5103 7.30072 13.4549C7.30282 13.35 7.2734 13.2469 7.21626 13.1589C7.15493 13.061 7.07847 12.9734 6.98974 12.8995C6.83074 12.7648 6.66766 12.635 6.50789 12.5013C6.37491 12.3932 6.25395 12.271 6.14708 12.137C6.05354 12.02 5.98451 11.8854 5.94408 11.7412C5.90366 11.5969 5.89268 11.446 5.9118 11.2975C5.93395 11.1113 5.99817 10.9326 6.0996 10.7749C6.20509 10.6098 6.33397 10.4608 6.4822 10.3326C6.63418 10.1989 6.79829 10.0797 6.97242 9.97645C7.23806 9.81823 7.52141 9.69797 7.81255 9.5958C8.071 9.50601 8.33387 9.42949 8.60013 9.36655C8.93272 9.28695 9.26861 9.22487 9.60723 9.17816C9.81624 9.14917 10.0262 9.12523 10.2364 9.10421C10.4032 9.08728 10.5707 9.07658 10.7383 9.06529C10.8745 9.05692 11.0108 9.04953 11.1483 9.04719C11.5701 9.0398 11.9918 9.0396 12.4133 9.05576H12.4273C12.5978 9.06743 12.7685 9.07794 12.9387 9.09079C13.0471 9.09896 13.1557 9.10752 13.2635 9.12173C13.4204 9.14255 13.5771 9.16688 13.7331 9.19315C14.0379 9.24604 14.3386 9.3199 14.6332 9.41423C14.9716 9.52009 15.3029 9.64659 15.6319 9.77834C15.9822 9.91904 16.3187 10.0868 16.6276 10.3057C16.8952 10.4916 17.1316 10.7186 17.3282 10.9785C17.4896 11.1931 17.6132 11.4336 17.6936 11.6898C17.7402 11.8397 17.7704 11.9942 17.7837 12.1506C17.7984 12.3087 17.7932 12.4681 17.7684 12.6249C17.7234 12.8973 17.6166 13.1464 17.4694 13.3788C17.3097 13.6261 17.1172 13.8507 16.8973 14.0465C16.7264 14.2012 16.5452 14.3443 16.3551 14.4746C16.1846 14.5914 16.0079 14.7 15.8267 14.7998C15.6386 14.9036 15.4476 15.002 15.2447 15.0742C15.0734 15.1352 14.9014 15.1945 14.728 15.2494C14.4638 15.3312 14.1952 15.3984 13.9237 15.4508C13.7043 15.4944 13.4838 15.532 13.263 15.5658C13.0911 15.5921 12.9181 15.6114 12.7451 15.6281C12.6028 15.6419 12.46 15.6493 12.317 15.6563C12.1523 15.6645 11.9875 15.6729 11.8229 15.6758C11.4681 15.6804 11.1133 15.6851 10.7589 15.6602C10.6272 15.6509 10.4952 15.6442 10.3639 15.6316C10.1985 15.6158 10.033 15.5979 9.86859 15.5756C9.70415 15.5532 9.53659 15.5275 9.37195 15.4963C9.01613 15.4292 8.66452 15.3413 8.31892 15.2332C7.86553 15.0922 7.42321 14.9178 6.99558 14.7115C6.79941 14.6169 6.60636 14.5153 6.41467 14.4122C6.28058 14.34 6.15059 14.2598 6.01883 14.1833L6.03168 14.1716ZM12.1192 12.3705C12.1208 12.3596 12.121 12.3534 12.1224 12.3476C12.1876 12.093 12.2382 11.8348 12.274 11.5744C12.2866 11.4728 12.2923 11.37 12.2956 11.2677C12.2981 11.2051 12.2855 11.1428 12.2588 11.0861C12.2446 11.0519 12.2189 11.0237 12.1861 11.0065C12.1533 10.9893 12.1156 10.9841 12.0794 10.9919C12.0186 11.0004 11.9627 11.0301 11.9215 11.0756C11.885 11.1158 11.8518 11.1589 11.8225 11.2046C11.7475 11.3249 11.6846 11.4522 11.6345 11.5847C11.3737 12.248 11.19 12.939 11.0868 13.6443C11.0712 13.7476 11.0731 13.8529 11.0927 13.9556C11.1081 14.0344 11.1336 14.1092 11.19 14.1697C11.2667 14.2518 11.3718 14.2608 11.4568 14.1892C11.4923 14.159 11.5234 14.124 11.549 14.085C11.6788 13.8854 11.8068 13.6847 11.9332 13.4831C12.1008 13.2149 12.2786 12.9544 12.4711 12.7035C12.4765 12.697 12.4823 12.6908 12.4884 12.685L12.5201 12.7066C12.5036 12.8139 12.4863 12.9164 12.4723 13.0196C12.4425 13.2379 12.4333 13.4565 12.4662 13.6754C12.4794 13.7742 12.5074 13.8705 12.5495 13.9609C12.5728 14.0122 12.6059 14.0584 12.6468 14.0971C12.7132 14.1567 12.7885 14.1777 12.8757 14.15C12.9628 14.1208 13.0441 14.0767 13.116 14.0195C13.1974 13.9576 13.2347 13.8809 13.2196 13.7764C13.2069 13.6855 13.1988 13.5941 13.1952 13.5024C13.1867 13.311 13.1907 13.1193 13.2071 12.9285C13.2318 12.6366 13.2781 12.3482 13.3219 12.0592C13.3417 11.9378 13.3516 11.8149 13.3515 11.6919C13.3527 11.6249 13.3435 11.5582 13.3243 11.494C13.2945 11.4045 13.2349 11.3599 13.1407 11.3545C13.0812 11.3492 13.0216 11.3638 12.9712 11.3959C12.9201 11.4283 12.8723 11.4659 12.8288 11.508C12.759 11.5772 12.694 11.651 12.6342 11.7289C12.482 11.9336 12.3349 12.1421 12.1866 12.3491L12.1552 12.3917L12.1192 12.3705ZM10.026 13.1184C10.0817 13.1688 10.1428 13.1715 10.2029 13.1587C10.2457 13.1512 10.2872 13.1382 10.3265 13.1198C10.3947 13.0863 10.4598 13.0469 10.5211 13.002C10.7983 12.7891 11.007 12.4997 11.1215 12.1695C11.2006 11.9537 11.2255 11.7217 11.1941 11.494C11.1836 11.404 11.1519 11.3177 11.1014 11.2424C11.0738 11.2007 11.0376 11.1654 10.9951 11.139C10.9527 11.1126 10.9051 11.0956 10.8555 11.0892C10.7811 11.0805 10.7057 11.0864 10.6336 11.1067C10.4816 11.1447 10.3479 11.2196 10.223 11.3119C10.0064 11.4735 9.82345 11.6759 9.6843 11.9076C9.41399 12.3503 9.22794 12.8257 9.15263 13.341C9.13031 13.4846 9.13546 13.6311 9.1678 13.7727C9.17745 13.8135 9.18987 13.8536 9.20498 13.8928C9.31785 14.1804 9.57648 14.2732 9.82578 14.2255C9.94785 14.2002 10.0647 14.1541 10.1712 14.0893C10.454 13.9236 10.7035 13.7066 10.9068 13.4494C10.9347 13.4122 10.9607 13.3735 10.9847 13.3337C11.0236 13.2727 11.0152 13.212 10.9792 13.1534C10.9327 13.0777 10.8665 13.0614 10.7943 13.1118C10.7422 13.1482 10.6941 13.1908 10.6451 13.2313C10.561 13.3006 10.4797 13.3734 10.3921 13.4387C10.3461 13.4732 10.2954 13.5009 10.2415 13.5209C10.1284 13.5633 10.0352 13.5092 10.0095 13.3911C9.99217 13.3012 10.0048 13.2138 10.026 13.1184ZM15.6767 12.6903C15.682 12.6479 15.6857 12.6124 15.6911 12.577C15.7355 12.2881 15.7944 12.0016 15.8676 11.7186C15.905 11.5726 15.9449 11.4273 15.9875 11.2827C16.0158 11.1784 16.071 11.0834 16.1475 11.0071C16.2179 10.9384 16.3004 10.9012 16.4005 10.9123C16.4345 10.916 16.468 10.923 16.502 10.9269C16.5311 10.9315 16.5606 10.9332 16.59 10.932C16.6638 10.9252 16.7068 10.8703 16.6992 10.7967C16.6934 10.7533 16.6746 10.7126 16.6453 10.68C16.5979 10.6213 16.5334 10.5789 16.4608 10.5587C16.2487 10.4994 16.054 10.5344 15.8834 10.6772C15.8084 10.7434 15.7429 10.8195 15.6888 10.9036C15.551 11.1048 15.4445 11.3228 15.3511 11.5469C15.0773 12.2045 14.9012 12.8898 14.772 13.5888C14.7179 13.8807 14.6766 14.175 14.6443 14.4704C14.6368 14.5305 14.6331 14.5911 14.6332 14.6517C14.6352 14.7652 14.697 14.838 14.807 14.8643C14.8661 14.8792 14.9277 14.8821 14.988 14.8728C15.109 14.8534 15.205 14.7959 15.2482 14.6741C15.2756 14.5963 15.3021 14.5184 15.3229 14.4386C15.3961 14.157 15.4438 13.8702 15.491 13.5833C15.4996 13.5316 15.5082 13.4798 15.5169 13.4265C15.5712 13.4199 15.622 13.414 15.6726 13.407C15.7699 13.3944 15.8616 13.3708 15.9351 13.2992C16.0388 13.1995 16.1154 13.075 16.1576 12.9374C16.1689 12.8972 16.1745 12.8555 16.1743 12.8137C16.1747 12.7916 16.1684 12.77 16.1563 12.7515C16.1443 12.7331 16.1269 12.7186 16.1066 12.7101C16.0856 12.7001 16.0634 12.6927 16.0406 12.6881C15.9667 12.672 15.8919 12.6792 15.8174 12.6835C15.7734 12.6858 15.7281 12.6874 15.6767 12.6899V12.6903ZM14.3773 12.6903C14.3862 12.6264 14.3931 12.5694 14.4022 12.513C14.4474 12.2333 14.5067 11.9568 14.5774 11.683C14.612 11.5491 14.6489 11.4158 14.6881 11.2831C14.717 11.1771 14.7737 11.0807 14.8523 11.004C14.922 10.937 15.0035 10.9008 15.102 10.9119C15.1374 10.9158 15.1725 10.9234 15.2079 10.9275C15.2355 10.9317 15.2635 10.9332 15.2914 10.9318C15.3651 10.925 15.4109 10.8701 15.4002 10.7971C15.3944 10.7636 15.382 10.7316 15.3636 10.7029C15.3175 10.6314 15.2461 10.5798 15.1637 10.5585C14.9496 10.4978 14.7537 10.5342 14.5828 10.6794C14.4931 10.7555 14.425 10.8508 14.3611 10.9491C14.2409 11.1382 14.1382 11.3379 14.0544 11.5458C13.76 12.2545 13.5749 12.9939 13.448 13.7486C13.4091 13.986 13.3797 14.2255 13.3482 14.4645C13.3396 14.5277 13.3357 14.5915 13.3365 14.6552C13.3389 14.7631 13.3969 14.8327 13.5004 14.8611C13.5637 14.8789 13.6301 14.8825 13.695 14.8718C13.816 14.851 13.9104 14.7919 13.953 14.6698C13.9756 14.6054 13.9988 14.5408 14.0165 14.4752C14.0943 14.1804 14.1453 13.8797 14.1948 13.5791L14.2201 13.4269C14.2413 13.4238 14.259 13.4206 14.2784 13.4183C14.3292 13.4115 14.3804 13.4059 14.431 13.3988C14.5087 13.3886 14.5812 13.3542 14.6383 13.3004C14.7434 13.1998 14.8207 13.0738 14.8628 12.9345C14.8734 12.8972 14.8787 12.8586 14.8786 12.8199C14.8795 12.7955 14.8726 12.7714 14.859 12.7512C14.8454 12.7309 14.8257 12.7155 14.8027 12.7072C14.784 12.699 14.7644 12.6929 14.7443 12.6889C14.6704 12.673 14.5956 12.68 14.5211 12.684C14.4756 12.6858 14.4306 12.6874 14.3773 12.6901V12.6903Z\" fill=\"#2E376F\"/>\n<path d=\"M6.02003 14.1829C6.15178 14.2594 6.28178 14.3386 6.41587 14.4118C6.60775 14.5149 6.80061 14.6165 6.99677 14.7111C7.4244 14.9174 7.86673 15.0918 8.32012 15.2328C8.66572 15.3409 9.01733 15.4288 9.37315 15.496C9.53779 15.5271 9.70398 15.5524 9.86979 15.5752C10.0356 15.5979 10.2006 15.6154 10.3651 15.6312C10.4964 15.6439 10.6284 15.6507 10.7601 15.6598C11.1145 15.6847 11.4693 15.6793 11.8241 15.6754C11.9887 15.6732 12.1535 15.6649 12.3182 15.6559C12.461 15.6489 12.6039 15.6415 12.7463 15.6277C12.9193 15.611 13.0923 15.5917 13.2642 15.5654C13.485 15.5316 13.7055 15.494 13.9249 15.4504C14.1963 15.3974 14.4647 15.3296 14.7288 15.2472C14.9022 15.1928 15.0742 15.1334 15.2455 15.0721C15.4485 14.9999 15.6394 14.9014 15.8276 14.7977C16.0087 14.6979 16.1854 14.5901 16.3559 14.4725C16.546 14.3421 16.7272 14.1991 16.8981 14.0444C17.118 13.8486 17.3105 13.624 17.4702 13.3767C17.6174 13.1443 17.7232 12.8952 17.7692 12.6227C17.794 12.4659 17.7992 12.3066 17.7845 12.1485C17.7708 11.9928 17.7403 11.839 17.6937 11.6898C17.6134 11.4339 17.49 11.1935 17.329 10.9791C17.1324 10.7192 16.896 10.4921 16.6284 10.3063C16.3195 10.0874 15.9834 9.91963 15.6327 9.77892C15.3037 9.64717 14.9724 9.52068 14.634 9.41481C14.3392 9.32046 14.0383 9.24659 13.7334 9.19373C13.5777 9.16746 13.4206 9.14314 13.2638 9.12231C13.156 9.10811 13.0474 9.09954 12.939 9.09137C12.7687 9.07853 12.598 9.06802 12.4275 9.05634H12.4135C11.9918 9.04019 11.5701 9.04038 11.1486 9.04778C11.0123 9.05011 10.8749 9.05751 10.7385 9.06588C10.571 9.07639 10.4034 9.08709 10.2366 9.1048C10.0264 9.12582 9.81647 9.14975 9.60746 9.17875C9.26884 9.22546 8.93294 9.28754 8.60035 9.36713C8.33409 9.43007 8.07122 9.50659 7.81277 9.59638C7.52086 9.69855 7.23828 9.81882 6.97264 9.97704C6.79847 10.08 6.63429 10.1991 6.48223 10.3326C6.33339 10.4606 6.20392 10.6095 6.09787 10.7747C5.99644 10.9324 5.93222 11.1111 5.91008 11.2973C5.89096 11.4458 5.90194 11.5967 5.94236 11.741C5.98278 11.8852 6.05182 12.0198 6.14536 12.1368C6.25223 12.2708 6.37319 12.393 6.50616 12.5011C6.66594 12.6348 6.82902 12.7646 6.98802 12.8993C7.07675 12.9733 7.15321 13.0608 7.21454 13.1587C7.27168 13.2467 7.3011 13.3498 7.299 13.4547C7.29794 13.5101 7.28499 13.5646 7.26101 13.6146C7.23704 13.6646 7.20261 13.7088 7.16005 13.7443C7.0285 13.8599 6.87261 13.9204 6.70253 13.951C6.58135 13.9721 6.45747 13.9728 6.33608 13.9529C6.30358 13.943 6.27224 13.9247 6.23624 13.9387C6.0806 13.8838 5.93068 13.8139 5.78864 13.7299C5.62601 13.6316 5.47708 13.5122 5.34571 13.3749C5.25727 13.2787 5.17798 13.1745 5.10887 13.0635C4.98971 12.8843 4.89587 12.6895 4.83 12.4846C4.7936 12.3673 4.76921 12.2467 4.75721 12.1245C4.72822 11.8284 4.78796 11.5491 4.9129 11.2821C5.0263 11.0428 5.17553 10.8221 5.35544 10.6278C5.60668 10.3515 5.90035 10.1275 6.21678 9.93247C6.43196 9.80118 6.65553 9.68416 6.88604 9.58217C7.16502 9.45869 7.45093 9.35147 7.74232 9.26107C8.02825 9.17053 8.31875 9.09511 8.61261 9.03513C8.81948 8.99329 9.02694 8.95339 9.23536 8.91836C9.37918 8.89365 9.52416 8.87691 9.66895 8.85842C9.7961 8.84221 9.92376 8.82761 10.0519 8.81464C10.1432 8.80549 10.2347 8.79985 10.3261 8.79323C10.447 8.78447 10.5679 8.7763 10.6887 8.76793H10.7027C10.8257 8.76423 10.9485 8.75976 11.0713 8.75684C11.2003 8.75372 11.3294 8.74964 11.4586 8.75003C11.6328 8.75003 11.8071 8.75411 11.9813 8.75898C12.1179 8.76287 12.2545 8.76936 12.3911 8.77844C12.5385 8.78778 12.6856 8.80024 12.8325 8.81269C12.9765 8.82495 13.1207 8.83546 13.264 8.85297C13.4843 8.87983 13.7042 8.91019 13.9237 8.94269C14.2635 8.99329 14.599 9.06529 14.932 9.14897C15.3667 9.25651 15.7931 9.39564 16.2076 9.56524C16.5924 9.72443 16.9617 9.9132 17.305 10.1504C17.4629 10.2586 17.6139 10.3767 17.7569 10.5038C17.846 10.5838 17.9352 10.6642 18.0185 10.7502C18.2284 10.9668 18.411 11.2042 18.5439 11.4773C18.6454 11.6791 18.7101 11.8975 18.7348 12.122C18.745 12.2069 18.7501 12.2923 18.75 12.3777C18.7458 12.6537 18.6832 12.9256 18.5665 13.1756C18.4604 13.3978 18.3246 13.6045 18.1629 13.79C17.9431 14.0469 17.689 14.2658 17.4171 14.4649C17.1679 14.646 16.9065 14.8098 16.6348 14.9551C16.3671 15.1016 16.0907 15.2315 15.8071 15.3444C15.4672 15.4785 15.1204 15.5943 14.7681 15.6912C14.5357 15.7546 14.301 15.8101 14.0648 15.854C13.8999 15.8846 13.7339 15.9103 13.5679 15.9319C13.4019 15.9535 13.2321 15.9722 13.0635 15.9885C12.9368 16.0007 12.8097 16.0099 12.6825 16.0161C12.4962 16.0251 12.3096 16.0307 12.1232 16.0356C11.9957 16.0391 11.868 16.0416 11.7406 16.0409C11.6043 16.0409 11.4668 16.0366 11.3299 16.0321C11.1962 16.0274 11.0627 16.0218 10.9292 16.0136C10.7736 16.0041 10.6194 15.9916 10.4645 15.9794C10.3516 15.9702 10.2382 15.9628 10.1259 15.9484C9.97974 15.929 9.83398 15.9076 9.68861 15.8813C9.38158 15.8244 9.07771 15.7517 8.77823 15.6633C8.52407 15.5885 8.27315 15.5046 8.02548 15.4119C7.62265 15.263 7.22921 15.0899 6.84731 14.8934C6.50394 14.7171 6.17598 14.5122 5.86687 14.281C5.76181 14.2062 5.66354 14.1222 5.57321 14.0302C5.52981 13.9836 5.4905 13.9329 5.45041 13.8838C5.43833 13.8663 5.42735 13.8481 5.41752 13.8293C5.43066 13.8296 5.44372 13.8315 5.45644 13.8348C5.48213 13.8459 5.50697 13.8589 5.53078 13.8737C5.61077 13.9247 5.68939 13.9778 5.76957 14.0294C5.8155 14.0586 5.86318 14.0847 5.91008 14.1121C5.91747 14.1351 5.93557 14.1384 5.9562 14.1376C5.96593 14.1664 5.99551 14.1709 6.02003 14.1829Z\" fill=\"#97A4AC\"/>\n<path d=\"M6.23626 13.9381C6.27226 13.9241 6.30359 13.9424 6.33609 13.9523C6.33609 13.9571 6.33746 13.9622 6.33804 13.9673L6.23626 13.9381Z\" fill=\"#5E678D\"/>\n<path d=\"M6.02004 14.1829C5.99551 14.1709 5.96593 14.166 5.95523 14.1353L6.03171 14.1716L6.02004 14.1829Z\" fill=\"#5B648B\"/>\n<path d=\"M5.95543 14.1356C5.9348 14.1356 5.91651 14.1331 5.90931 14.1101L5.95543 14.1356Z\" fill=\"#5B648B\"/>\n<path d=\"M10.5978 11.6659C10.5857 11.8918 10.5435 12.1151 10.4725 12.3299C10.4106 12.5159 10.3237 12.6927 10.2142 12.8553C10.1943 12.8848 10.1696 12.9107 10.141 12.932C10.1033 12.9596 10.0681 12.9444 10.0646 12.8983C10.0609 12.8457 10.0624 12.7928 10.069 12.7405C10.0979 12.5274 10.1517 12.3184 10.2292 12.1177C10.2802 11.9757 10.3438 11.8385 10.4193 11.7079C10.4417 11.6705 10.4676 11.6355 10.4935 11.6005C10.504 11.5869 10.5165 11.5751 10.5307 11.5654C10.5558 11.5479 10.5768 11.5536 10.5848 11.583C10.591 11.6103 10.5953 11.638 10.5978 11.6659Z\" fill=\"#303971\"/>\n</svg>\n",
    15: "<svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n<rect width=\"24\" height=\"24\" rx=\"4\" fill=\"#013F61\"/>\n<path d=\"M6.71294 9V10.7991H7.42245C7.68235 10.7991 7.9424 10.7943 8.20215 10.8008C9.19346 10.8256 9.97331 11.6167 9.98627 12.6102C9.99074 12.9538 9.99491 13.2981 9.98211 13.6413C9.9784 13.7383 9.93892 13.8572 9.87414 13.925C9.26951 14.5535 8.65901 15.1763 8.04266 15.7933C7.98297 15.8535 7.89335 15.9184 7.81593 15.9204C7.43911 15.9306 7.06014 15.9437 6.68487 15.9124C5.70558 15.8309 5.00362 15.0486 5.00193 14.0564C4.99936 12.371 4.99936 10.6856 5.00193 9H6.71294ZM6.73237 14.1298H8.25768V12.5874H6.73237V14.1298Z\" fill=\"white\"/>\n<path d=\"M12.9107 10.8641C12.8336 10.8395 12.7564 10.7941 12.6793 10.7933C12.1466 10.787 11.6138 10.7899 11.0422 10.7899V9.00073H12.9548L12.9483 10.8637L12.9107 10.8641Z\" fill=\"white\"/>\n<path d=\"M15.9886 15.917H14.0606V15.3869C14.0606 14.5652 14.0564 13.7436 14.0661 12.9223C14.0674 12.8192 14.1169 12.6926 14.1875 12.6184C14.7317 12.0485 15.2835 11.4859 15.843 10.9307C15.9261 10.8486 16.0708 10.7908 16.1885 10.7885C16.6573 10.7792 17.1294 10.7678 17.5949 10.8105C18.3459 10.8795 18.9727 11.5364 18.9877 12.2912C19.0112 13.4892 18.9939 14.6879 18.9939 15.907H17.0887V12.8448H15.9886V15.917Z\" fill=\"#F06423\"/>\n<path d=\"M12.9107 10.8641L12.9489 10.8629C12.9556 11.422 12.9661 11.9812 12.9679 12.5405C12.9695 12.9833 12.9607 13.4263 12.9563 13.8691C12.8834 13.9371 12.8081 14.0028 12.7378 14.0735C12.1785 14.6356 11.6197 15.1984 11.0615 15.7618C11.0579 14.7893 11.0533 13.8167 11.0542 12.8442C11.0571 12.7794 11.0827 12.7178 11.1266 12.6702C11.7191 12.0657 12.3138 11.4637 12.9107 10.8641Z\" fill=\"white\"/>\n<path d=\"M11.0615 15.7618C11.6201 15.199 12.1789 14.6362 12.7378 14.0735C12.8081 14.0029 12.8834 13.9372 12.9563 13.8691V15.9289C12.3548 15.9289 11.7627 15.9318 11.1707 15.9216C11.1333 15.921 11.0979 15.8175 11.0615 15.7618Z\" fill=\"#EE6526\"/>\n</svg>\n\n",
    63: "<svg viewBox=\"0 0 24 24\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n<rect width=\"24\" height=\"24\" rx=\"4\" fill=\"#005930\"/>\n<path fill-rule=\"evenodd\" clip-rule=\"evenodd\" d=\"M8.37784 11.0628V11.209C8.37784 12.2633 7.82939 13.0981 6.85742 13.1225C5.8824 13.0981 5.337 12.2633 5.337 11.209V10.9135C5.337 9.85924 5.88545 9.02438 6.85742 9C7.83244 9.02438 8.37784 9.85924 8.37784 10.9135V11.0628ZM6.86656 9.67033C7.1743 9.67033 7.4272 10.0817 7.4272 10.6606V11.4558C7.4272 12.1414 7.1743 12.4583 6.86656 12.4583C6.86352 12.4583 6.86047 12.4583 6.85742 12.4583C6.85437 12.4583 6.85133 12.4583 6.84828 12.4583C6.54054 12.4583 6.28764 12.1414 6.28764 11.4558V10.6606C6.28764 10.0786 6.54054 9.67033 6.84828 9.67033C6.85133 9.67033 6.85437 9.67033 6.85742 9.67033C6.86047 9.67033 6.86352 9.67033 6.86656 9.67033ZM11.7904 11.0628V11.209C11.7904 12.2633 11.242 13.0981 10.27 13.1225C9.29497 13.0981 8.74957 12.2633 8.74957 11.209V10.9135C8.74957 9.85924 9.29802 9.02438 10.27 9C11.245 9.02438 11.7904 9.85924 11.7904 10.9135V11.0628ZM10.2791 9.67033C10.5869 9.67033 10.8398 10.0817 10.8398 10.6606V11.4558C10.8398 12.1414 10.5869 12.4583 10.2791 12.4583C10.2761 12.4583 10.273 12.4583 10.27 12.4583C10.2669 12.4583 10.2639 12.4583 10.2608 12.4583C9.95311 12.4583 9.70021 12.1414 9.70021 11.4558V10.6606C9.70021 10.0786 9.95311 9.67033 10.2608 9.67033C10.2639 9.67033 10.2669 9.67033 10.27 9.67033C10.273 9.67033 10.2761 9.67033 10.2791 9.67033ZM5.37356 12.833C5.142 13.0128 4.85863 13.1164 4.52042 13.1256C3.5454 13.1012 3 12.2663 3 11.2121V10.9165C3 9.86228 3.54845 9.02742 4.52042 9.00305C4.84949 9.01219 5.12676 9.11274 5.35528 9.28032L5.17856 9.7922C5.05668 9.71298 4.91348 9.66728 4.76113 9.66728C3.63681 9.66728 3.58196 12.3851 4.76113 12.3851C4.89519 12.3851 5.02317 12.3486 5.13286 12.2876L5.37356 12.833ZM12.1103 9.26204C13.0549 8.84765 14.816 8.82023 14.816 10.2401C14.8465 10.6423 14.7216 11.8367 13.0397 11.6265L13.0671 13.1256H12.1103V9.26204ZM13.0336 9.63072C13.3718 9.59415 13.5851 9.60329 13.7191 9.68556C14.0086 9.86228 14.0177 10.685 13.7557 10.8952C13.6247 10.9988 13.4053 11.0414 13.0336 10.9988C13.0336 10.5265 13.0336 10.103 13.0336 9.63072ZM17.4912 9.30165C18.4358 8.88726 20.1969 8.85984 20.1969 10.2797C20.2213 10.5905 20.1512 11.2029 19.3438 11.3675L20.3553 13.1225H19.362L18.4175 11.3797L18.4449 13.1195H17.4882V9.30165H17.4912ZM18.4144 9.66119C18.7527 9.62462 18.9659 9.63376 19.1 9.71603C19.3895 9.89275 19.3986 10.7642 19.1366 10.9744C19.0056 11.078 18.7862 11.1786 18.4144 11.1389C18.4144 10.6636 18.4144 10.1335 18.4144 9.66119ZM17.1804 9.76783H16.1323V10.7642H17.0342V11.404H16.1323V12.4857H17.1804V13.1256H15.1969C15.1969 11.794 15.1969 10.4595 15.1969 9.12797H17.1804V9.76783Z\" fill=\"#F1A600\"/>\n<path fill-rule=\"evenodd\" clip-rule=\"evenodd\" d=\"M18.0488 13.5369C17.9604 13.5765 17.8568 13.6527 17.7837 13.7228C17.7106 13.7959 17.6649 13.8599 17.6253 13.9208C17.5856 13.9818 17.5552 14.0366 17.5369 14.1097C17.5186 14.1829 17.5156 14.2682 17.5217 14.3444C17.5278 14.4205 17.5399 14.4815 17.5704 14.5302C17.6009 14.579 17.6466 14.6155 17.7045 14.6399C17.7624 14.6673 17.8385 14.6826 17.9086 14.6673C17.9817 14.6521 18.0488 14.6033 18.1067 14.5424C18.1646 14.4815 18.2103 14.4083 18.2316 14.3718C18.2529 14.3352 18.2529 14.3352 18.2529 14.3352C18.2529 14.3352 18.2529 14.3352 18.2468 14.384C18.2407 14.4297 18.2316 14.5241 18.2712 14.582C18.3108 14.6399 18.4022 14.6612 18.4875 14.643C18.5728 14.6247 18.649 14.5698 18.6978 14.5028C18.7465 14.4358 18.7679 14.3596 18.7709 14.3139C18.7739 14.2682 18.7557 14.253 18.7161 14.2773C18.6764 14.2987 18.6125 14.3596 18.582 14.3901C18.5515 14.4205 18.5515 14.4205 18.6033 14.253C18.6551 14.0854 18.7618 13.7533 18.8471 13.5034C18.9354 13.2505 19.0055 13.0799 19.039 12.9946C19.0725 12.9093 19.0725 12.9093 19.0725 12.9093C19.0725 12.9093 19.0725 12.9093 19.164 12.9062C19.2554 12.9032 19.4382 12.8971 19.6058 12.9214C19.7764 12.9489 19.9318 13.0068 20.0354 13.1012C20.139 13.1926 20.1877 13.3206 20.1603 13.4577C20.1329 13.5948 20.0323 13.7472 19.8952 13.9026C19.7581 14.0579 19.5814 14.2194 19.3254 14.3779C19.0695 14.5363 18.7343 14.6948 18.3718 14.8502C18.0092 15.0055 17.6222 15.1609 17.4272 15.2371C17.2322 15.3133 17.2322 15.3133 17.2322 15.3133C17.2322 15.3133 17.2322 15.3133 17.546 15.228C17.8599 15.1427 18.4906 14.972 18.9263 14.8288C19.362 14.6887 19.6088 14.5759 19.8769 14.4205C20.1451 14.2682 20.4345 14.0701 20.6295 13.8965C20.8245 13.7228 20.922 13.5674 20.9677 13.4364C21.0165 13.3054 21.0104 13.1957 20.9464 13.0799C20.8824 12.9641 20.7545 12.8361 20.5625 12.76C20.3705 12.6838 20.1116 12.6564 19.9044 12.6503C19.6972 12.6442 19.5448 12.6624 19.3986 12.6838C19.2523 12.7051 19.1122 12.7356 18.9903 12.7813C18.8684 12.827 18.7679 12.894 18.7161 12.9275C18.6643 12.961 18.6643 12.961 18.6155 12.9001C18.5637 12.8422 18.4632 12.7203 18.3078 12.6655C18.1524 12.6076 17.9421 12.6107 17.7837 12.635C17.6253 12.6564 17.5156 12.699 17.4363 12.7569C17.3571 12.8117 17.3084 12.8818 17.284 12.9184C17.2596 12.9519 17.2596 12.9519 17.3114 12.9306C17.3632 12.9093 17.4699 12.8635 17.5795 12.83C17.6892 12.7996 17.805 12.7813 17.9421 12.7904C18.0792 12.7996 18.2407 12.8392 18.3565 12.8879C18.4723 12.9336 18.5424 12.9915 18.5759 13.0189C18.6094 13.0464 18.6094 13.0464 18.585 13.1317C18.5729 13.1713 18.4449 13.5247 18.4296 13.5339C18.2956 13.4729 18.1798 13.4821 18.0488 13.5369ZM17.9513 14.1158C17.9787 14.0122 18.0305 13.9178 18.0792 13.8477C18.128 13.7746 18.1737 13.7258 18.2194 13.6923C18.2682 13.6588 18.3169 13.6405 18.3504 13.6375C18.3839 13.6314 18.4053 13.6405 18.3931 13.7075C18.3778 13.7746 18.3291 13.9056 18.2803 14.0275C18.2285 14.1494 18.1767 14.2651 18.1249 14.3352C18.0732 14.4053 18.0244 14.4297 17.9909 14.4388C17.9574 14.448 17.936 14.4449 17.9269 14.387C17.9178 14.3322 17.9239 14.2194 17.9513 14.1158ZM16.4034 14.2072C16.3669 14.3596 16.3273 14.5058 16.2998 14.579C16.2724 14.6521 16.2602 14.646 16.3242 14.646C16.3882 14.643 16.5284 14.643 16.5984 14.646C16.6685 14.6491 16.6685 14.6521 16.6929 14.5759C16.7173 14.4998 16.766 14.3474 16.8178 14.2225C16.8696 14.0976 16.9275 14.0031 16.9763 13.9361C17.025 13.869 17.0677 13.8325 17.089 13.8111C17.1103 13.7929 17.1103 13.7929 17.1103 13.7929C17.1103 13.7929 17.1103 13.7929 17.1256 13.8142C17.1408 13.8355 17.1682 13.8782 17.2017 13.9026C17.2352 13.93 17.2749 13.9391 17.3114 13.93C17.348 13.9208 17.3845 13.8934 17.412 13.8568C17.4424 13.8233 17.4668 13.7807 17.4668 13.7319C17.4699 13.6832 17.4485 13.6314 17.4181 13.5948C17.3876 13.5582 17.351 13.5369 17.3175 13.5217C17.284 13.5065 17.2566 13.5004 17.2261 13.5034C17.1956 13.5065 17.1591 13.5217 17.1012 13.5887C17.0433 13.6558 16.958 13.7746 16.9153 13.8325C16.8727 13.8934 16.8727 13.8934 16.8727 13.8934C16.8727 13.8934 16.8727 13.8934 16.8818 13.8447C16.8909 13.799 16.9123 13.7045 16.9001 13.6375C16.8879 13.5704 16.8422 13.5339 16.7965 13.5125C16.7508 13.4912 16.7051 13.4882 16.6502 13.4973C16.5954 13.5065 16.5284 13.5308 16.4644 13.5857C16.4004 13.6375 16.3425 13.7197 16.3151 13.7746C16.2876 13.8294 16.2968 13.8629 16.3181 13.8721C16.3394 13.8812 16.3791 13.8721 16.4156 13.8447C16.4491 13.8172 16.4827 13.7776 16.4979 13.7563C16.5131 13.735 16.5131 13.735 16.5131 13.735C16.5131 13.735 16.5131 13.735 16.4948 13.8142C16.4766 13.8965 16.44 14.0549 16.4034 14.2072ZM14.6789 13.8386C14.6484 13.7868 14.6118 13.7167 14.5814 13.6832C14.5509 13.6497 14.5204 13.6527 14.4869 13.7015C14.4534 13.7472 14.4107 13.8386 14.3772 13.9422C14.3467 14.0427 14.3254 14.1554 14.3163 14.2499C14.3071 14.3444 14.3102 14.4205 14.3315 14.4662C14.3498 14.5119 14.3864 14.5241 14.4351 14.518C14.4839 14.5089 14.5478 14.4784 14.5996 14.4449C14.6545 14.4114 14.7002 14.3779 14.7368 14.3626C14.7733 14.3474 14.8007 14.3565 14.8007 14.3809C14.7977 14.4083 14.7672 14.454 14.7154 14.5028C14.6636 14.5546 14.5905 14.6094 14.5204 14.643C14.4534 14.6765 14.3894 14.6856 14.3285 14.6917C14.2706 14.6978 14.2127 14.6978 14.1487 14.6765C14.0847 14.6551 14.0146 14.6125 13.9689 14.5637C13.9232 14.515 13.8958 14.4601 13.8928 14.3748C13.8897 14.2895 13.908 14.1798 13.9324 14.0854C13.9567 13.994 13.9872 13.9178 14.0603 13.8325C14.1335 13.7472 14.2492 13.6497 14.3681 13.5887C14.4869 13.5308 14.6088 13.5095 14.7063 13.5308C14.8038 13.5522 14.8769 13.6192 14.9135 13.6771C14.95 13.735 14.95 13.7837 14.9409 13.8233C14.9318 13.8629 14.9135 13.8965 14.883 13.9147C14.8525 13.9361 14.8068 13.9452 14.7703 13.933C14.7398 13.9239 14.7124 13.8904 14.6789 13.8386ZM15.9129 14.4388C15.8672 14.4175 15.9129 14.189 16.1627 13.5369C16.0622 13.54 15.9647 13.54 15.8641 13.543L15.8154 13.6283C15.8123 13.6131 15.8032 13.5918 15.7849 13.5735C15.7666 13.5552 15.7331 13.5369 15.6478 13.543C15.5107 13.5552 15.4132 13.6161 15.3979 13.6253C15.3126 13.6801 15.2669 13.738 15.206 13.8142C15.142 13.8965 15.0597 14.0031 15.0201 14.1646C15.0018 14.2347 14.9836 14.3047 14.9988 14.3962C15.0079 14.4388 15.0323 14.5668 15.142 14.6308C15.1633 14.643 15.2151 14.6734 15.2791 14.6643C15.4345 14.646 15.5076 14.4266 15.5594 14.448C15.5869 14.4571 15.5655 14.5119 15.6143 14.579C15.6234 14.5912 15.663 14.646 15.727 14.6643C15.8154 14.6887 15.8976 14.6338 15.9342 14.6094C16.0926 14.5058 16.1505 14.2987 16.1201 14.2773C16.0926 14.2621 15.9586 14.4632 15.9129 14.4388ZM15.6295 14.125C15.5655 14.253 15.4376 14.4053 15.3827 14.3809C15.3187 14.3535 15.3461 14.0793 15.4741 13.8751C15.5229 13.7929 15.6295 13.6588 15.6813 13.6801C15.7422 13.7045 15.724 13.9391 15.6295 14.125Z\" fill=\"white\"/>\n</svg>\n",
    77: "<svg viewBox=\"0 0 24 24\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n<rect width=\"24\" height=\"24\" rx=\"4\" fill=\"#005930\"/>\n<path fill-rule=\"evenodd\" clip-rule=\"evenodd\" d=\"M8.37784 11.0628V11.209C8.37784 12.2633 7.82939 13.0981 6.85742 13.1225C5.8824 13.0981 5.337 12.2633 5.337 11.209V10.9135C5.337 9.85924 5.88545 9.02438 6.85742 9C7.83244 9.02438 8.37784 9.85924 8.37784 10.9135V11.0628ZM6.86656 9.67033C7.1743 9.67033 7.4272 10.0817 7.4272 10.6606V11.4558C7.4272 12.1414 7.1743 12.4583 6.86656 12.4583C6.86352 12.4583 6.86047 12.4583 6.85742 12.4583C6.85437 12.4583 6.85133 12.4583 6.84828 12.4583C6.54054 12.4583 6.28764 12.1414 6.28764 11.4558V10.6606C6.28764 10.0786 6.54054 9.67033 6.84828 9.67033C6.85133 9.67033 6.85437 9.67033 6.85742 9.67033C6.86047 9.67033 6.86352 9.67033 6.86656 9.67033ZM11.7904 11.0628V11.209C11.7904 12.2633 11.242 13.0981 10.27 13.1225C9.29497 13.0981 8.74957 12.2633 8.74957 11.209V10.9135C8.74957 9.85924 9.29802 9.02438 10.27 9C11.245 9.02438 11.7904 9.85924 11.7904 10.9135V11.0628ZM10.2791 9.67033C10.5869 9.67033 10.8398 10.0817 10.8398 10.6606V11.4558C10.8398 12.1414 10.5869 12.4583 10.2791 12.4583C10.2761 12.4583 10.273 12.4583 10.27 12.4583C10.2669 12.4583 10.2639 12.4583 10.2608 12.4583C9.95311 12.4583 9.70021 12.1414 9.70021 11.4558V10.6606C9.70021 10.0786 9.95311 9.67033 10.2608 9.67033C10.2639 9.67033 10.2669 9.67033 10.27 9.67033C10.273 9.67033 10.2761 9.67033 10.2791 9.67033ZM5.37356 12.833C5.142 13.0128 4.85863 13.1164 4.52042 13.1256C3.5454 13.1012 3 12.2663 3 11.2121V10.9165C3 9.86228 3.54845 9.02742 4.52042 9.00305C4.84949 9.01219 5.12676 9.11274 5.35528 9.28032L5.17856 9.7922C5.05668 9.71298 4.91348 9.66728 4.76113 9.66728C3.63681 9.66728 3.58196 12.3851 4.76113 12.3851C4.89519 12.3851 5.02317 12.3486 5.13286 12.2876L5.37356 12.833ZM12.1103 9.26204C13.0549 8.84765 14.816 8.82023 14.816 10.2401C14.8465 10.6423 14.7216 11.8367 13.0397 11.6265L13.0671 13.1256H12.1103V9.26204ZM13.0336 9.63072C13.3718 9.59415 13.5851 9.60329 13.7191 9.68556C14.0086 9.86228 14.0177 10.685 13.7557 10.8952C13.6247 10.9988 13.4053 11.0414 13.0336 10.9988C13.0336 10.5265 13.0336 10.103 13.0336 9.63072ZM17.4912 9.30165C18.4358 8.88726 20.1969 8.85984 20.1969 10.2797C20.2213 10.5905 20.1512 11.2029 19.3438 11.3675L20.3553 13.1225H19.362L18.4175 11.3797L18.4449 13.1195H17.4882V9.30165H17.4912ZM18.4144 9.66119C18.7527 9.62462 18.9659 9.63376 19.1 9.71603C19.3895 9.89275 19.3986 10.7642 19.1366 10.9744C19.0056 11.078 18.7862 11.1786 18.4144 11.1389C18.4144 10.6636 18.4144 10.1335 18.4144 9.66119ZM17.1804 9.76783H16.1323V10.7642H17.0342V11.404H16.1323V12.4857H17.1804V13.1256H15.1969C15.1969 11.794 15.1969 10.4595 15.1969 9.12797H17.1804V9.76783Z\" fill=\"#F1A600\"/>\n<path fill-rule=\"evenodd\" clip-rule=\"evenodd\" d=\"M18.0488 13.5369C17.9604 13.5765 17.8568 13.6527 17.7837 13.7228C17.7106 13.7959 17.6649 13.8599 17.6253 13.9208C17.5856 13.9818 17.5552 14.0366 17.5369 14.1097C17.5186 14.1829 17.5156 14.2682 17.5217 14.3444C17.5278 14.4205 17.5399 14.4815 17.5704 14.5302C17.6009 14.579 17.6466 14.6155 17.7045 14.6399C17.7624 14.6673 17.8385 14.6826 17.9086 14.6673C17.9817 14.6521 18.0488 14.6033 18.1067 14.5424C18.1646 14.4815 18.2103 14.4083 18.2316 14.3718C18.2529 14.3352 18.2529 14.3352 18.2529 14.3352C18.2529 14.3352 18.2529 14.3352 18.2468 14.384C18.2407 14.4297 18.2316 14.5241 18.2712 14.582C18.3108 14.6399 18.4022 14.6612 18.4875 14.643C18.5728 14.6247 18.649 14.5698 18.6978 14.5028C18.7465 14.4358 18.7679 14.3596 18.7709 14.3139C18.7739 14.2682 18.7557 14.253 18.7161 14.2773C18.6764 14.2987 18.6125 14.3596 18.582 14.3901C18.5515 14.4205 18.5515 14.4205 18.6033 14.253C18.6551 14.0854 18.7618 13.7533 18.8471 13.5034C18.9354 13.2505 19.0055 13.0799 19.039 12.9946C19.0725 12.9093 19.0725 12.9093 19.0725 12.9093C19.0725 12.9093 19.0725 12.9093 19.164 12.9062C19.2554 12.9032 19.4382 12.8971 19.6058 12.9214C19.7764 12.9489 19.9318 13.0068 20.0354 13.1012C20.139 13.1926 20.1877 13.3206 20.1603 13.4577C20.1329 13.5948 20.0323 13.7472 19.8952 13.9026C19.7581 14.0579 19.5814 14.2194 19.3254 14.3779C19.0695 14.5363 18.7343 14.6948 18.3718 14.8502C18.0092 15.0055 17.6222 15.1609 17.4272 15.2371C17.2322 15.3133 17.2322 15.3133 17.2322 15.3133C17.2322 15.3133 17.2322 15.3133 17.546 15.228C17.8599 15.1427 18.4906 14.972 18.9263 14.8288C19.362 14.6887 19.6088 14.5759 19.8769 14.4205C20.1451 14.2682 20.4345 14.0701 20.6295 13.8965C20.8245 13.7228 20.922 13.5674 20.9677 13.4364C21.0165 13.3054 21.0104 13.1957 20.9464 13.0799C20.8824 12.9641 20.7545 12.8361 20.5625 12.76C20.3705 12.6838 20.1116 12.6564 19.9044 12.6503C19.6972 12.6442 19.5448 12.6624 19.3986 12.6838C19.2523 12.7051 19.1122 12.7356 18.9903 12.7813C18.8684 12.827 18.7679 12.894 18.7161 12.9275C18.6643 12.961 18.6643 12.961 18.6155 12.9001C18.5637 12.8422 18.4632 12.7203 18.3078 12.6655C18.1524 12.6076 17.9421 12.6107 17.7837 12.635C17.6253 12.6564 17.5156 12.699 17.4363 12.7569C17.3571 12.8117 17.3084 12.8818 17.284 12.9184C17.2596 12.9519 17.2596 12.9519 17.3114 12.9306C17.3632 12.9093 17.4699 12.8635 17.5795 12.83C17.6892 12.7996 17.805 12.7813 17.9421 12.7904C18.0792 12.7996 18.2407 12.8392 18.3565 12.8879C18.4723 12.9336 18.5424 12.9915 18.5759 13.0189C18.6094 13.0464 18.6094 13.0464 18.585 13.1317C18.5729 13.1713 18.4449 13.5247 18.4296 13.5339C18.2956 13.4729 18.1798 13.4821 18.0488 13.5369ZM17.9513 14.1158C17.9787 14.0122 18.0305 13.9178 18.0792 13.8477C18.128 13.7746 18.1737 13.7258 18.2194 13.6923C18.2682 13.6588 18.3169 13.6405 18.3504 13.6375C18.3839 13.6314 18.4053 13.6405 18.3931 13.7075C18.3778 13.7746 18.3291 13.9056 18.2803 14.0275C18.2285 14.1494 18.1767 14.2651 18.1249 14.3352C18.0732 14.4053 18.0244 14.4297 17.9909 14.4388C17.9574 14.448 17.936 14.4449 17.9269 14.387C17.9178 14.3322 17.9239 14.2194 17.9513 14.1158ZM16.4034 14.2072C16.3669 14.3596 16.3273 14.5058 16.2998 14.579C16.2724 14.6521 16.2602 14.646 16.3242 14.646C16.3882 14.643 16.5284 14.643 16.5984 14.646C16.6685 14.6491 16.6685 14.6521 16.6929 14.5759C16.7173 14.4998 16.766 14.3474 16.8178 14.2225C16.8696 14.0976 16.9275 14.0031 16.9763 13.9361C17.025 13.869 17.0677 13.8325 17.089 13.8111C17.1103 13.7929 17.1103 13.7929 17.1103 13.7929C17.1103 13.7929 17.1103 13.7929 17.1256 13.8142C17.1408 13.8355 17.1682 13.8782 17.2017 13.9026C17.2352 13.93 17.2749 13.9391 17.3114 13.93C17.348 13.9208 17.3845 13.8934 17.412 13.8568C17.4424 13.8233 17.4668 13.7807 17.4668 13.7319C17.4699 13.6832 17.4485 13.6314 17.4181 13.5948C17.3876 13.5582 17.351 13.5369 17.3175 13.5217C17.284 13.5065 17.2566 13.5004 17.2261 13.5034C17.1956 13.5065 17.1591 13.5217 17.1012 13.5887C17.0433 13.6558 16.958 13.7746 16.9153 13.8325C16.8727 13.8934 16.8727 13.8934 16.8727 13.8934C16.8727 13.8934 16.8727 13.8934 16.8818 13.8447C16.8909 13.799 16.9123 13.7045 16.9001 13.6375C16.8879 13.5704 16.8422 13.5339 16.7965 13.5125C16.7508 13.4912 16.7051 13.4882 16.6502 13.4973C16.5954 13.5065 16.5284 13.5308 16.4644 13.5857C16.4004 13.6375 16.3425 13.7197 16.3151 13.7746C16.2876 13.8294 16.2968 13.8629 16.3181 13.8721C16.3394 13.8812 16.3791 13.8721 16.4156 13.8447C16.4491 13.8172 16.4827 13.7776 16.4979 13.7563C16.5131 13.735 16.5131 13.735 16.5131 13.735C16.5131 13.735 16.5131 13.735 16.4948 13.8142C16.4766 13.8965 16.44 14.0549 16.4034 14.2072ZM14.6789 13.8386C14.6484 13.7868 14.6118 13.7167 14.5814 13.6832C14.5509 13.6497 14.5204 13.6527 14.4869 13.7015C14.4534 13.7472 14.4107 13.8386 14.3772 13.9422C14.3467 14.0427 14.3254 14.1554 14.3163 14.2499C14.3071 14.3444 14.3102 14.4205 14.3315 14.4662C14.3498 14.5119 14.3864 14.5241 14.4351 14.518C14.4839 14.5089 14.5478 14.4784 14.5996 14.4449C14.6545 14.4114 14.7002 14.3779 14.7368 14.3626C14.7733 14.3474 14.8007 14.3565 14.8007 14.3809C14.7977 14.4083 14.7672 14.454 14.7154 14.5028C14.6636 14.5546 14.5905 14.6094 14.5204 14.643C14.4534 14.6765 14.3894 14.6856 14.3285 14.6917C14.2706 14.6978 14.2127 14.6978 14.1487 14.6765C14.0847 14.6551 14.0146 14.6125 13.9689 14.5637C13.9232 14.515 13.8958 14.4601 13.8928 14.3748C13.8897 14.2895 13.908 14.1798 13.9324 14.0854C13.9567 13.994 13.9872 13.9178 14.0603 13.8325C14.1335 13.7472 14.2492 13.6497 14.3681 13.5887C14.4869 13.5308 14.6088 13.5095 14.7063 13.5308C14.8038 13.5522 14.8769 13.6192 14.9135 13.6771C14.95 13.735 14.95 13.7837 14.9409 13.8233C14.9318 13.8629 14.9135 13.8965 14.883 13.9147C14.8525 13.9361 14.8068 13.9452 14.7703 13.933C14.7398 13.9239 14.7124 13.8904 14.6789 13.8386ZM15.9129 14.4388C15.8672 14.4175 15.9129 14.189 16.1627 13.5369C16.0622 13.54 15.9647 13.54 15.8641 13.543L15.8154 13.6283C15.8123 13.6131 15.8032 13.5918 15.7849 13.5735C15.7666 13.5552 15.7331 13.5369 15.6478 13.543C15.5107 13.5552 15.4132 13.6161 15.3979 13.6253C15.3126 13.6801 15.2669 13.738 15.206 13.8142C15.142 13.8965 15.0597 14.0031 15.0201 14.1646C15.0018 14.2347 14.9836 14.3047 14.9988 14.3962C15.0079 14.4388 15.0323 14.5668 15.142 14.6308C15.1633 14.643 15.2151 14.6734 15.2791 14.6643C15.4345 14.646 15.5076 14.4266 15.5594 14.448C15.5869 14.4571 15.5655 14.5119 15.6143 14.579C15.6234 14.5912 15.663 14.646 15.727 14.6643C15.8154 14.6887 15.8976 14.6338 15.9342 14.6094C16.0926 14.5058 16.1505 14.2987 16.1201 14.2773C16.0926 14.2621 15.9586 14.4632 15.9129 14.4388ZM15.6295 14.125C15.5655 14.253 15.4376 14.4053 15.3827 14.3809C15.3187 14.3535 15.3461 14.0793 15.4741 13.8751C15.5229 13.7929 15.6295 13.6588 15.6813 13.6801C15.7422 13.7045 15.724 13.9391 15.6295 14.125Z\" fill=\"white\"/>\n</svg>\n",
    113: "<svg viewBox=\"0 0 24 24\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n<rect width=\"24\" height=\"24\" rx=\"4\" fill=\"#BDD753\"/>\n<path d=\"M14.7444 7C13.6619 7 12.6555 7.32833 11.8204 7.88981C11.7609 7.93026 11.3493 8.2229 11.3326 8.23717C10.6498 8.75108 10.193 8.84149 9.56491 8.68208C9.52684 8.67256 9.34602 8.61071 9.2913 8.58929C8.86305 8.42751 8.39673 8.33948 7.91138 8.33948C5.75108 8.33948 4 10.0906 4 12.2509C4 14.4112 5.75108 16.1622 7.91138 16.1622C8.34439 16.1622 8.76074 16.0909 9.14855 15.9624C10.0836 15.6816 10.5927 15.7578 11.178 16.1741C11.2946 16.2574 11.5777 16.4382 11.6372 16.481C12.508 17.1234 13.5833 17.5041 14.7491 17.5041C17.6494 17.5041 20 15.1535 20 12.2532C19.9929 9.35063 17.6422 7 14.7444 7Z\" fill=\"#008060\"/>\n<path d=\"M12.8505 13.0621C12.6792 13.2311 12.4437 13.3334 12.1844 13.3286C12.0059 13.3262 11.8418 13.2739 11.7014 13.1835L11.354 13.7354C11.592 13.8853 11.8727 13.9757 12.1749 13.9805C12.615 13.9876 13.0147 13.814 13.3074 13.5285L12.8505 13.0621Z\" fill=\"white\"/>\n<path d=\"M12.2224 10.8091C11.3469 10.7948 10.626 11.4943 10.6117 12.3698C10.607 12.6981 10.7021 13.005 10.8687 13.2596L13.7427 12.032C13.5809 11.342 12.9647 10.8209 12.2224 10.8091ZM11.2708 12.4935C11.266 12.4554 11.2636 12.4198 11.266 12.3793C11.2731 11.863 11.699 11.4514 12.2129 11.4609C12.4937 11.4657 12.7435 11.5942 12.91 11.7917L11.2708 12.4935Z\" fill=\"white\"/>\n<path d=\"M14.642 10.0953V13.1573L15.1726 13.3786L14.9228 13.9829L14.397 13.764C14.278 13.7141 14.1995 13.6356 14.1377 13.5475C14.0782 13.4571 14.0353 13.3334 14.0353 13.1669V10.0977H14.642V10.0953Z\" fill=\"white\"/>\n<path d=\"M10.0193 10.0953V13.1573L10.5498 13.3786L10.3 13.9829L9.77423 13.764C9.65527 13.7141 9.57676 13.6356 9.5149 13.5475C9.45542 13.4571 9.4126 13.3334 9.4126 13.1669V10.0977H10.0193V10.0953Z\" fill=\"white\"/>\n<path d=\"M17.2568 11.5538C17.7231 11.7775 17.9182 12.3342 17.6946 12.8005L18.2823 13.0836C18.6629 12.2938 18.3298 11.3468 17.5399 10.9685C16.9404 10.6807 16.2481 10.8044 15.7865 11.2255L16.2266 11.7085C16.4979 11.4563 16.9047 11.3825 17.2568 11.5538Z\" fill=\"#BDD753\"/>\n<path d=\"M16.4478 13.2382C15.9839 13.0145 15.7864 12.4578 16.0101 11.9915L15.4224 11.7084C15.0441 12.4983 15.3748 13.4452 16.1647 13.8258C16.7643 14.1137 17.4566 13.99 17.9205 13.5689L17.4804 13.0859C17.2068 13.3334 16.8 13.4071 16.4478 13.2382Z\" fill=\"white\"/>\n<path d=\"M8.81546 13.2811V12.3984C8.81546 12.3961 8.81546 12.3961 8.81546 12.3937C8.81546 11.6871 8.35151 11.0875 7.71151 10.8853C7.55925 10.8377 7.39984 10.8115 7.23092 10.8115C7.06676 10.8115 6.90973 10.8377 6.75984 10.8829C6.51241 10.959 6.29114 11.097 6.11033 11.2755C5.82482 11.561 5.64639 11.9583 5.64639 12.3937C5.64639 13.2668 6.35538 13.9758 7.22854 13.9758C7.48073 13.9758 7.72103 13.9164 7.93516 13.8093L7.67821 13.2121C7.54497 13.2859 7.3927 13.3287 7.22854 13.3287C6.71226 13.3287 6.29352 12.91 6.29352 12.3937C6.29352 12.2343 6.33397 12.0868 6.40296 11.9559C6.52906 11.7204 6.75033 11.5467 7.01679 11.4848C7.08579 11.4682 7.15479 11.4587 7.22854 11.4587C7.36653 11.4587 7.49739 11.4896 7.61635 11.5443C7.93992 11.6918 8.16356 12.0154 8.16356 12.3937C8.16356 12.4199 8.16356 13.2716 8.16356 13.2716C8.16356 13.4381 8.20638 13.5619 8.26586 13.6499C8.32534 13.7379 8.40624 13.8164 8.5252 13.8688L8.82259 13.9854L9.07241 13.381L8.81546 13.2811Z\" fill=\"white\"/>\n</svg>\n",
    12: "<svg viewBox=\"0 0 24 24\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n<rect width=\"24\" height=\"24\" rx=\"4\" fill=\"#053484\"/>\n<path d=\"M7.57029 7.8258L11.0184 9.39682L11.4232 9.5815C12.1518 8.06361 12.8753 6.54572 13.6216 5C13.8341 6.57608 14.039 8.10661 14.249 9.65486L14.5576 9.55367L18.5421 8.16227C18.5819 8.14896 18.6224 8.13798 18.6635 8.12938L18.6812 8.14962L16.961 10.3657L15.6961 11.9899C15.6657 12.0278 15.6379 12.0658 15.605 12.1113L19 14.7449L14.4615 15.094C14.3806 16.6979 14.2996 18.2917 14.2085 19.9335L11.6787 16.3589L8.02566 19.7362L7.99783 19.721L9.36899 14.9624L5 14.3603L9.25768 11.9418L8.68594 10.5858C8.32165 9.72064 7.95651 8.85544 7.59053 7.99024C7.57354 7.94558 7.55918 7.89997 7.54753 7.85363L7.57029 7.8258Z\" fill=\"white\"/>\n</svg>\n",
    65: "<svg viewBox=\"0 0 24 24\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n<rect width=\"24\" height=\"24\" rx=\"4\" fill=\"#0EA44A\"/>\n<path fill-rule=\"evenodd\" clip-rule=\"evenodd\" d=\"M0 19.5C0 21.9853 1.71356 24 3.82734 24H20.1727C22.2864 24 24 21.9853 24 19.5V18H0V19.5Z\" fill=\"#A19060\"/>\n<path d=\"M21.0147 16.4051H16.1769L14.5031 10.1407C14.5031 10.1407 15.5441 10.1407 15.7023 10.1407C15.9422 10.161 16.8607 9.80508 16.8556 8.9C16.8505 8.08135 16.1004 8.10169 15.8401 8.08644C15.4676 8.08644 14.35 8.08644 14.35 8.08644L11.1146 16.4H6.32278L3.0874 7.61356H7.04232L8.60388 12.2763L10.4563 5H17.5446C19.4633 5 21.0147 6.62712 21.0147 8.64068C21.0147 10.0034 20.3002 11.1932 19.2388 11.8186L21.0147 16.4051Z\" fill=\"white\"/>\n<path d=\"M2.75574 22.6068V19.8661H3.75595C4.06214 19.8661 4.29688 19.922 4.46528 20.0339C4.62858 20.1458 4.71023 20.3034 4.71023 20.5068C4.71023 20.6542 4.6592 20.7864 4.55714 20.8932C4.45508 21.0051 4.3275 21.0814 4.17441 21.122V21.1322C4.36833 21.1576 4.52652 21.2288 4.64389 21.3458C4.76127 21.4627 4.8174 21.6102 4.8174 21.7831C4.8174 22.0322 4.72554 22.2356 4.54693 22.3831C4.36833 22.5305 4.11827 22.6017 3.80698 22.6017H2.75574V22.6068ZM3.37832 20.3237V20.9746H3.64878C3.77636 20.9746 3.87842 20.9441 3.94987 20.8831C4.02131 20.822 4.06214 20.7356 4.06214 20.6288C4.06214 20.4254 3.91415 20.3288 3.60796 20.3288H3.37832V20.3237ZM3.37832 21.4322V22.1542H3.71513C3.85801 22.1542 3.97028 22.1187 4.05193 22.0526C4.13358 21.9864 4.17441 21.8949 4.17441 21.7831C4.17441 21.6712 4.13358 21.5848 4.05703 21.5237C3.97538 21.4627 3.86822 21.4322 3.72023 21.4322H3.37832ZM6.97602 21.8034H5.69514C5.71555 22.0881 5.89416 22.2305 6.23607 22.2305C6.4504 22.2305 6.63922 22.1797 6.80252 22.078V22.5102C6.6188 22.6068 6.38406 22.6525 6.09318 22.6525C5.77679 22.6525 5.53184 22.5661 5.35323 22.3881C5.17972 22.2153 5.09297 21.9712 5.09297 21.6559C5.09297 21.3305 5.18993 21.0763 5.37874 20.8831C5.56756 20.6949 5.8023 20.5983 6.07787 20.5983C6.36365 20.5983 6.58819 20.6848 6.74128 20.8526C6.89948 21.0203 6.97602 21.2492 6.97602 21.5441V21.8034ZM6.41468 21.4322C6.41468 21.1525 6.30241 21.0153 6.07277 21.0153C5.97581 21.0153 5.88906 21.0559 5.82272 21.1373C5.75127 21.2187 5.71045 21.3153 5.69514 21.4373H6.41468V21.4322ZM9.23671 22.6068H8.62944V21.5187C8.62944 21.2136 8.52227 21.0661 8.30284 21.0661C8.19567 21.0661 8.11402 21.1068 8.04258 21.1881C7.97624 21.2695 7.94051 21.3712 7.94051 21.4932V22.6068H7.33324V20.6492H7.94051V20.9593H7.95072C8.09361 20.7203 8.30794 20.6034 8.58351 20.6034C9.01727 20.6034 9.23671 20.8729 9.23671 21.4119V22.6068ZM11.477 21.8034H10.1961C10.2165 22.0881 10.3951 22.2305 10.737 22.2305C10.9514 22.2305 11.1402 22.1797 11.3035 22.078V22.5102C11.1198 22.6068 10.885 22.6525 10.5941 22.6525C10.2777 22.6525 10.0328 22.5661 9.85419 22.3881C9.68068 22.2153 9.59393 21.9712 9.59393 21.6559C9.59393 21.3305 9.69089 21.0763 9.8797 20.8831C10.0685 20.6949 10.3033 20.5983 10.5788 20.5983C10.8646 20.5983 11.0891 20.6848 11.2422 20.8526C11.4004 21.0203 11.477 21.2492 11.477 21.5441V21.8034ZM10.9156 21.4322C10.9156 21.1525 10.8034 21.0153 10.5737 21.0153C10.4768 21.0153 10.39 21.0559 10.3237 21.1373C10.2522 21.2187 10.2114 21.3153 10.1961 21.4373H10.9156V21.4322ZM13.1202 20.1712C13.0436 20.1407 12.9671 20.1254 12.8956 20.1254C12.7017 20.1254 12.6048 20.2322 12.6048 20.4407V20.6492H13.0538V21.0966H12.6048V22.6068H12.0026V21.0966H11.6709V20.6492H12.0026V20.4051C12.0026 20.1814 12.074 20.0034 12.222 19.8661C12.3649 19.7288 12.5639 19.6627 12.814 19.6627C12.9365 19.6627 13.0385 19.6729 13.1202 19.6983V20.1712ZM13.952 22.6068H13.3447V20.6492H13.952V22.6068ZM14.2633 19.7237L13.6611 20.3441H13.2222L13.7275 19.7237H14.2633ZM15.9473 22.5356C15.8095 22.6119 15.6105 22.6525 15.3554 22.6525C15.0543 22.6525 14.8093 22.561 14.6205 22.378C14.4317 22.1949 14.3398 21.961 14.3398 21.6763C14.3398 21.3458 14.4419 21.0814 14.6409 20.8932C14.8399 20.7 15.1104 20.6034 15.4421 20.6034C15.6718 20.6034 15.8402 20.6339 15.9473 20.6949V21.2085C15.8197 21.1119 15.682 21.0661 15.5238 21.0661C15.3503 21.0661 15.2125 21.117 15.1104 21.2187C15.0083 21.3203 14.9573 21.4576 14.9573 21.6356C14.9573 21.8085 15.0032 21.9458 15.1053 22.0424C15.2023 22.139 15.3349 22.1898 15.5033 22.1898C15.6564 22.1898 15.7993 22.1441 15.9473 22.0475V22.5356ZM16.6515 20.3441C16.5495 20.3441 16.4627 20.3136 16.4015 20.2526C16.3352 20.1915 16.3045 20.1153 16.3045 20.0288C16.3045 19.9373 16.3352 19.8661 16.4015 19.8051C16.4678 19.7492 16.5495 19.7187 16.6515 19.7187C16.7536 19.7187 16.8404 19.7492 16.9067 19.8051C16.973 19.861 17.0037 19.9373 17.0037 20.0288C17.0037 20.1203 16.973 20.1966 16.9067 20.2526C16.8404 20.3136 16.7536 20.3441 16.6515 20.3441ZM16.9526 22.6068H16.3454V20.6492H16.9526V22.6068ZM18.3968 22.6525C18.0702 22.6525 17.81 22.561 17.6262 22.378C17.4374 22.1949 17.3456 21.9458 17.3456 21.6356C17.3456 21.3102 17.4425 21.061 17.6365 20.878C17.8304 20.6949 18.0957 20.6034 18.4223 20.6034C18.7489 20.6034 19.0041 20.6949 19.1878 20.878C19.3715 21.061 19.4685 21.3 19.4685 21.6C19.4685 21.9254 19.3715 22.1797 19.1827 22.3678C18.9888 22.561 18.7285 22.6525 18.3968 22.6525ZM18.4121 21.0661C18.2692 21.0661 18.157 21.117 18.0804 21.2136C18.0039 21.3102 17.9631 21.4526 17.9631 21.6305C17.9631 22.0068 18.1161 22.1949 18.4172 22.1949C18.7081 22.1949 18.851 22.0017 18.851 21.6153C18.851 21.2492 18.7081 21.0661 18.4121 21.0661ZM19.7338 22.5559V22.0678C19.8359 22.1288 19.9329 22.1695 20.0298 22.2C20.1268 22.2305 20.2237 22.2458 20.3105 22.2458C20.4177 22.2458 20.5044 22.2305 20.5656 22.2C20.6269 22.1695 20.6575 22.1237 20.6575 22.0678C20.6575 22.0271 20.6422 21.9966 20.6167 21.9712C20.5912 21.9458 20.5503 21.9203 20.5095 21.9051C20.4636 21.8848 20.4177 21.8695 20.3666 21.8542C20.3156 21.839 20.2646 21.8237 20.2135 21.8034C20.137 21.7729 20.0655 21.7424 20.0094 21.7068C19.9482 21.6712 19.9022 21.6356 19.8614 21.5898C19.8206 21.5441 19.79 21.4932 19.7696 21.4373C19.7491 21.3763 19.7389 21.3102 19.7389 21.2288C19.7389 21.117 19.7645 21.0254 19.8104 20.9441C19.8563 20.8627 19.9227 20.8017 20.0043 20.7509C20.086 20.7 20.1778 20.6644 20.2799 20.639C20.3819 20.6136 20.4891 20.6034 20.6014 20.6034C20.6881 20.6034 20.7749 20.6085 20.8667 20.6237C20.9586 20.639 21.0453 20.6542 21.1321 20.6797V21.1475C21.0555 21.1017 20.9739 21.0712 20.8871 21.0458C20.8004 21.0254 20.7136 21.0102 20.6269 21.0102C20.5861 21.0102 20.5503 21.0153 20.5146 21.0203C20.4789 21.0254 20.4483 21.0356 20.4228 21.0509C20.3972 21.0661 20.3768 21.0814 20.3615 21.1017C20.3462 21.122 20.3411 21.1475 20.3411 21.1729C20.3411 21.2085 20.3513 21.239 20.3768 21.2644C20.3972 21.2898 20.4279 21.3102 20.4687 21.3305C20.5044 21.3509 20.5452 21.3661 20.5912 21.3814C20.6371 21.3966 20.683 21.4119 20.7238 21.4271C20.8055 21.4576 20.8769 21.4881 20.9433 21.5187C21.0096 21.5542 21.0658 21.5898 21.1117 21.6356C21.1576 21.6814 21.1933 21.7322 21.2188 21.7932C21.2444 21.8542 21.2546 21.9254 21.2546 22.0068C21.2546 22.1237 21.2291 22.2203 21.178 22.3017C21.127 22.3831 21.0607 22.4492 20.9739 22.5C20.8922 22.5509 20.7953 22.5915 20.683 22.6119C20.5759 22.6373 20.4585 22.6475 20.3411 22.6475C20.1166 22.6526 19.9176 22.622 19.7338 22.5559Z\" fill=\"white\"/>\n</svg>\n",
    57: "<svg viewBox=\"0 0 24 24\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n<rect width=\"24\" height=\"24\" rx=\"4\" fill=\"#F5F5F5\"/>\n<path d=\"M11.9998 21C16.9697 21 20.9986 16.9706 20.9986 12C20.9986 7.02944 16.9697 3 11.9998 3C7.02993 3 3.00104 7.02944 3.00104 12C3.00104 16.9706 7.02993 21 11.9998 21Z\" fill=\"white\"/>\n<path fill-rule=\"evenodd\" clip-rule=\"evenodd\" d=\"M18.8391 12.6364H16.1111C16.2144 13.2288 16.7793 13.4561 17.2684 13.4561C17.5784 13.4561 17.8539 13.3872 18.1226 13.2633L18.0469 14.0761C17.7437 14.2001 17.3787 14.2483 17.0136 14.2483C15.8012 14.2483 14.9469 13.5389 14.9469 12.3333C14.9469 11.2862 15.7116 10.5009 16.8826 10.5009C18.2052 10.5009 18.8665 11.3414 18.8391 12.6364ZM13.9067 14.1795C13.8515 14.0485 13.7688 13.835 13.7 13.6215L13.5416 13.091C13.4589 12.8087 13.3487 12.6915 13.08 12.6915H12.6253V14.1795H11.5713V9.31609H12.6253V11.9958H12.7425L13.7413 10.5699H14.9123L13.7344 12.0577H13.7964C14.2648 12.0577 14.4026 12.3195 14.5197 12.7053L14.7195 13.3735C14.7884 13.6215 14.9331 13.9728 15.0432 14.1795H13.9067ZM10.5311 13.3735C10.8067 13.3735 11.034 13.2977 11.2062 13.2151L11.1098 14.09C10.8894 14.2001 10.5793 14.2552 10.3107 14.2552C9.174 14.2552 8.38879 13.5182 8.38879 12.3678C8.38879 11.2312 9.16029 10.5009 10.3038 10.5009C10.724 10.5009 11.0478 10.5836 11.3784 10.7351L11.0753 11.548C10.9169 11.4516 10.6965 11.3758 10.4622 11.3758C9.88363 11.3758 9.50473 11.7546 9.50473 12.3678C9.50473 12.974 9.90422 13.3803 10.5311 13.3735ZM6.99029 10.1083H8.06488V9.31609H6.99029V10.1083ZM6.99029 14.1795H8.06488V10.5699H6.99029V14.1795ZM19.0666 12.23V9.77761L20.1411 9.34366V10.6387H20.8644L20.7198 11.4447H20.1274V12.2713C20.1274 13.0742 20.4317 13.6398 20.7544 14.0938C20.9146 13.4218 20.9998 12.7208 20.9998 11.9998C20.9998 7.02932 16.9704 3 11.9999 3C7.96413 3 4.54888 5.65638 3.40701 9.31609H6.75597L6.6251 10.2805H5.22668V14.1795H4.0831V10.2805H3.16471C3.05707 10.8371 3 11.4118 3 11.9998C3.00008 16.9704 7.0294 20.9997 12 20.9997C16.2188 20.9997 19.759 18.0968 20.7335 14.1795H19.6727C19.4867 13.8557 19.0597 13.2701 19.0666 12.23ZM16.9171 11.2449C16.4624 11.2449 16.1731 11.5411 16.0835 11.9338H17.7024C17.6473 11.4998 17.3442 11.2449 16.9171 11.2449Z\" fill=\"#D52B1E\"/>\n</svg>\n",
    91: "<svg viewBox=\"0 0 24 24\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n<path d=\"M0 5C0 2.23858 2.23858 0 5 0H19C21.7614 0 24 2.23858 24 5V19C24 21.7614 21.7614 24 19 24H5C2.23858 24 0 21.7614 0 19V5Z\" fill=\"#F5F5F5\"/>\n<path fill-rule=\"evenodd\" clip-rule=\"evenodd\" d=\"M15.3788 9.53768C14.8778 9.52546 14.4745 9.1222 14.4623 8.62118C14.4012 5.50509 11.8595 3 8.73116 3C5.56619 3 3 5.56619 3 8.73116V20.0835C3 20.5845 3.40326 21 3.9165 21H15.2688C18.4338 21 21 18.4338 21 15.2688C21 12.1405 18.4949 9.59878 15.3788 9.53768Z\" fill=\"#15130E\"/>\n<path fill-rule=\"evenodd\" clip-rule=\"evenodd\" d=\"M13.4969 15.1955C13.4603 15.5255 13.3747 15.5988 13.0448 15.5988H10.6008V15.7943C10.6008 16.4297 10.9674 16.6864 11.8595 16.6864C12.2261 16.6864 12.5927 16.6375 12.9959 16.5519C13.277 16.4786 13.3625 16.5519 13.3625 16.8574V16.9674C13.3625 17.2607 13.3136 17.3218 12.9959 17.3951C12.6415 17.4929 12.2627 17.5417 11.8595 17.5417C10.3808 17.5417 9.69653 16.9919 9.69653 15.6599V14.89C9.69653 13.6191 10.3442 12.9837 11.6517 12.9837C12.8737 12.9837 13.5092 13.6069 13.5092 14.8045C13.5092 14.9511 13.5092 15.0733 13.4969 15.1955ZM6.8004 12.9959C6.7393 12.9959 6.8615 12.9959 6.8004 12.9959C6.4338 12.9959 5.945 13.057 5.68838 13.167V11.7006C5.68838 11.3829 5.61506 11.3096 5.29734 11.3096H5.18736C4.86965 11.3096 4.79633 11.3829 4.79633 11.7006V15.6721C4.79633 16.9308 5.54174 17.554 6.8004 17.554C8.14459 17.554 8.81669 16.943 8.81669 15.6721V14.9145C8.80447 13.6314 8.0224 12.9959 6.8004 12.9959ZM7.9002 15.6477C7.9002 16.3809 7.66802 16.6986 6.8004 16.6986C5.93278 16.6986 5.68838 16.3809 5.68838 15.6477V14.89C5.68838 14.1568 5.93278 13.8391 6.78818 13.8391H6.8004C7.6558 13.8391 7.9002 14.1568 7.9002 14.89V15.6477ZM15.3177 17.1507C15.3177 17.4684 15.2444 17.5417 14.9267 17.5417H14.8167C14.499 17.5417 14.4257 17.4684 14.4257 17.1507V14.6945C14.4257 13.558 15.0611 12.9959 16.3442 12.9959C17.6762 12.9959 18.2505 13.5703 18.2505 14.6945V17.1507C18.2505 17.4684 18.1772 17.5417 17.8595 17.5417H17.7495C17.4318 17.5417 17.3584 17.4684 17.3584 17.1507V14.6945C17.3584 14.0957 17.1385 13.8391 16.3564 13.8391C15.5743 13.8391 15.3422 14.1079 15.3422 14.6945V17.1507H15.3177ZM10.6008 14.8656H12.6171V14.7067C12.6171 14.1324 12.2872 13.8391 11.6028 13.8391C10.943 13.8391 10.6008 14.1324 10.6008 14.7067V14.8656Z\" fill=\"white\"/>\n</svg>\n",
    103: "<svg viewBox=\"0 0 24 24\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\"><rect width=\"24\" height=\"24\" rx=\"4\" fill=\"#EA1D2C\"/><path d=\"M7.59414 11.9676C10.4229 11.9676 12.3863 9.3758 12.3863 7.25522C12.3863 5.6732 10.9553 5 9.55761 5C6.46265 5 4.76542 7.79378 4.76542 9.71239C4.76542 11.2944 6.2297 11.9676 7.59414 11.9676ZM15.1818 11.9676C18.0105 11.9676 19.974 9.3758 19.974 7.25522C19.974 5.6732 18.5097 5 17.112 5C14.017 5 12.3198 7.79378 12.3198 9.71239C12.3198 11.2944 13.8173 11.9676 15.1818 11.9676ZM16.4797 16.8483C14.6198 18.4068 12.2311 19.1679 9.82384 18.9689C6.66233 18.7669 4.39935 16.3097 4 13.7179H4.13312C4.86526 15.3336 6.62905 16.8483 8.79219 17.0839C10.9886 17.3532 13.6177 16.3434 15.0487 14.9634L13.4513 13.7179H18.2767L17.2118 18.9016L16.5129 16.882L16.4797 16.8483Z\" fill=\"white\"/>\n</svg>\n"
  },
  normal: {
    41: "<svg viewBox=\"0 0 63 18\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n<path fill-rule=\"evenodd\" clip-rule=\"evenodd\" d=\"M0.00169176 15.1962C-0.000681178 15.0281 0.0300813 14.8612 0.0922223 14.705C0.154363 14.5488 0.246666 14.4064 0.363858 14.2859C0.48105 14.1653 0.620837 14.0691 0.775235 14.0026C0.929632 13.9361 1.09562 13.9007 1.26371 13.8983C1.50489 13.9016 1.74138 13.9654 1.95154 14.0837C3.1325 14.9214 4.53548 15.3897 5.98281 15.4295C7.34651 15.4295 8.142 14.8314 8.142 13.9342V13.8983C8.142 12.8277 6.67064 12.4569 5.0378 11.9604C2.98627 11.3623 0.701483 10.5489 0.701483 7.89925V7.84542C0.701483 5.22569 2.87861 3.65864 5.64189 3.65864C7.16445 3.6783 8.65994 4.06397 10.0021 4.78309C10.2277 4.89237 10.4187 5.06198 10.5538 5.27312C10.6889 5.48426 10.763 5.72868 10.7677 5.97931C10.7677 6.31831 10.6339 6.64359 10.3953 6.88441C10.1567 7.12523 9.8327 7.2621 9.49373 7.26526H9.45186C9.23039 7.27136 9.01137 7.21764 8.81786 7.10975C7.81777 6.53342 6.69816 6.19569 5.54619 6.12286C4.31408 6.12286 3.59036 6.72097 3.59036 7.49254V7.54637C3.59036 8.56914 5.09162 8.98782 6.71849 9.50818C8.74609 10.1422 11.0309 11.0573 11.0309 13.5454V13.5993C11.0309 16.5121 8.77001 17.9475 5.88113 17.9475C3.99553 17.9301 2.15751 17.3535 0.599804 16.2908C0.408137 16.1805 0.250775 16.0193 0.145193 15.825C0.0396098 15.6308 -0.0100624 15.411 0.00169176 15.1902V15.1962ZM19.7394 10.7881C19.741 9.83617 19.93 8.89383 20.2958 8.01493C20.6615 7.13602 21.1968 6.33777 21.8711 5.66574C22.5453 4.99371 23.3453 4.46106 24.2254 4.09821C25.1055 3.73536 26.0485 3.54941 27.0005 3.55098H27.156C29.0587 3.49626 30.9053 4.19964 32.2894 5.5064C33.6736 6.81315 34.4819 8.61623 34.5367 10.519C34.5367 10.5908 34.5367 10.6625 34.5367 10.7343V10.7822C34.5272 12.7027 33.756 14.5409 32.3923 15.8933C31.0287 17.2457 29.1842 18.0017 27.2636 17.9954H27.1021C25.2035 18.0453 23.3624 17.3406 21.9823 16.0356C20.6023 14.7306 19.7957 12.9319 19.7394 11.0334V10.7881ZM31.3547 10.7881C31.378 10.2264 31.2902 9.66564 31.0965 9.13788C30.9028 8.61011 30.607 8.12571 30.2259 7.7124C29.8448 7.29909 29.3859 6.96497 28.8756 6.72917C28.3653 6.49337 27.8134 6.3605 27.2517 6.33818H27.0962C24.5422 6.33818 22.9094 8.3299 22.9094 10.7403V10.7941C22.8674 11.9259 23.2767 13.0281 24.0473 13.8581C24.8178 14.6882 25.8866 15.1781 27.0184 15.2201H27.138C29.7219 15.2201 31.3248 13.2284 31.3248 10.842L31.3547 10.7881ZM38.9747 16.225C38.9747 16.6469 38.8071 17.0516 38.5087 17.35C38.2103 17.6483 37.8056 17.816 37.3837 17.816C36.9617 17.816 36.5571 17.6483 36.2587 17.35C35.9603 17.0516 35.7927 16.6469 35.7927 16.225V9.79527C35.8429 8.17656 36.5212 6.64094 37.6839 5.51367C38.8467 4.38639 40.4026 3.75599 42.022 3.75599C43.6415 3.75599 45.1974 4.38639 46.3602 5.51367C47.5229 6.64094 48.2012 8.17656 48.2514 9.79527V16.231C48.2266 16.6353 48.0485 17.0149 47.7534 17.2924C47.4583 17.5699 47.0685 17.7244 46.6634 17.7244C46.2583 17.7244 45.8685 17.5699 45.5734 17.2924C45.2784 17.0149 45.1002 16.6353 45.0754 16.231V9.47827C45.0754 9.07876 44.9966 8.68317 44.8436 8.31414C44.6905 7.94511 44.4661 7.60989 44.1834 7.32767C43.9006 7.04545 43.5649 6.82177 43.1956 6.66943C42.8263 6.51709 42.4305 6.43907 42.031 6.43986C41.9135 6.43391 41.7957 6.43391 41.6781 6.43986C40.9266 6.53638 40.2365 6.90494 39.7383 7.47584C39.2402 8.04675 38.9685 8.78041 38.9747 9.53808V16.225ZM18.3518 6.72097H15.9115V13.043C15.9115 13.5713 16.1201 14.0783 16.492 14.4535C16.8639 14.8288 17.3689 15.042 17.8972 15.0467H18.3278C18.5288 15.0307 18.7309 15.0561 18.9217 15.1212C19.1125 15.1862 19.2879 15.2897 19.4373 15.4251C19.5866 15.5605 19.7066 15.7251 19.7899 15.9087C19.8733 16.0922 19.9182 16.2909 19.9218 16.4924C19.9255 16.694 19.8879 16.8942 19.8113 17.0806C19.7348 17.2671 19.6208 17.4359 19.4765 17.5767C19.3323 17.7175 19.1607 17.8273 18.9724 17.8993C18.7841 17.9713 18.5831 18.004 18.3817 17.9954H17.7058C17.6322 18.0015 17.5581 18.0015 17.4845 17.9954C16.2375 17.9391 15.0573 17.4157 14.1786 16.5292C13.2998 15.6427 12.7868 14.4579 12.7415 13.2105V1.49347C12.7663 1.08916 12.9444 0.709542 13.2395 0.432026C13.5346 0.154511 13.9244 0 14.3295 0C14.7345 0 15.1244 0.154511 15.4194 0.432026C15.7145 0.709542 15.8926 1.08916 15.9175 1.49347V3.83807H18.3637C18.7308 3.8617 19.075 4.02416 19.3266 4.29245C19.5782 4.56074 19.7182 4.91473 19.7182 5.28251C19.7182 5.6503 19.5782 6.00429 19.3266 6.27258C19.075 6.54086 18.7308 6.70333 18.3637 6.72695L18.3518 6.72097ZM54.8366 10.525C54.8366 10.1643 54.9795 9.81837 55.2339 9.5628C55.4883 9.30723 55.8337 9.16285 56.1943 9.16127H59.6335C59.1789 7.51048 58.0186 6.32622 56.3618 6.32622C53.8557 6.32622 52.486 8.31793 52.486 10.7343V10.7822C52.486 13.1746 54.2146 15.2082 56.6728 15.2082C57.6674 15.2285 58.6337 14.8766 59.3823 14.2213C59.6733 13.9754 60.0502 13.8553 60.4299 13.8872C60.8096 13.9192 61.161 14.1007 61.4069 14.3918C61.6527 14.6828 61.7729 15.0597 61.7409 15.4394C61.709 15.8191 61.5275 16.1705 61.2364 16.4164C59.9216 17.4519 58.2925 18.0069 56.619 17.9894C55.6858 18.0068 54.7584 17.8403 53.8896 17.4992C53.0208 17.1581 52.2278 16.6493 51.5557 16.0016C50.8836 15.354 50.3457 14.5803 49.9727 13.7248C49.5997 12.8692 49.3989 11.9486 49.3818 11.0154V10.7881C49.3818 6.82863 52.2528 3.55098 56.4395 3.55098C60.1239 3.55098 62.7735 6.57145 62.7735 10.5309C62.7735 10.71 62.7383 10.8874 62.6697 11.0528C62.6012 11.2183 62.5008 11.3686 62.3741 11.4952C62.2475 11.6219 62.0972 11.7223 61.9317 11.7908C61.7663 11.8594 61.5889 11.8946 61.4099 11.8946H56.2242C55.8625 11.8946 55.5157 11.751 55.2599 11.4952C55.0042 11.2395 54.8605 10.8926 54.8605 10.5309L54.8366 10.525Z\" fill=\"#0DB14B\"/>\n</svg>\n",
    1: "<svg viewBox=\"0 0 53 18\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n<path d=\"M35.4764 0.344191C35.3153 0.344264 35.1557 0.376095 35.0069 0.437864C34.8581 0.499633 34.7229 0.590129 34.6091 0.704179C34.3841 0.929171 34.2491 1.24697 34.2491 1.57321V16.4075C34.2491 16.7338 34.3784 17.0459 34.6091 17.2766C34.7229 17.3906 34.8582 17.4811 35.0071 17.5428C35.1559 17.6045 35.3155 17.6363 35.4767 17.6363C35.6378 17.6363 35.7974 17.6045 35.9463 17.5428C36.0952 17.4811 36.2304 17.3906 36.3443 17.2766C36.5693 17.0516 36.7043 16.7338 36.7043 16.4075V1.57265C36.7043 1.24641 36.5749 0.934235 36.3443 0.703617C36.2304 0.5895 36.0951 0.498965 35.9462 0.437194C35.7973 0.375422 35.6376 0.343627 35.4764 0.343628V0.344191ZM16.7784 5.57302C16.7784 4.89466 16.2289 4.34456 15.5522 4.34456C14.8755 4.34456 14.326 4.89466 14.326 5.57302V16.4064C14.326 17.0848 14.8755 17.6349 15.5522 17.6349C16.2289 17.6349 16.7784 17.0848 16.7784 16.4064V5.57302Z\" fill=\"#5A646E\"/>\n<path d=\"M17.1249 1.57495C17.1169 1.98708 16.9477 2.37965 16.6535 2.66841C16.3594 2.95696 15.9639 3.1184 15.5522 3.1184C15.1405 3.1184 14.745 2.9564 14.4509 2.66841C14.1567 2.37965 13.9875 1.98708 13.9795 1.57495C13.9793 1.15732 14.145 0.75671 14.4402 0.461234C14.7343 0.165932 15.1337 0 15.5516 0C15.9696 0 16.3689 0.165932 16.6637 0.461234C16.9588 0.75671 17.1245 1.15732 17.1243 1.57495H17.1249Z\" fill=\"#00AEEF\"/>\n<path d=\"M32.0318 8.26519C30.8528 5.59565 28.0635 3.70909 24.8809 4.03533C23.808 4.14874 22.7758 4.50915 21.8655 5.08829C20.9548 5.66782 20.1905 6.4502 19.6324 7.37422C19.0741 8.29875 18.7371 9.3398 18.6475 10.4161C18.5575 11.4927 18.7184 12.576 19.1161 13.5795C19.5137 14.5833 20.138 15.4815 20.9402 16.204C21.7422 16.926 22.7003 17.4527 23.7397 17.743C24.7786 18.0332 25.8771 18.0782 26.9306 17.8752C27.9842 17.6721 28.9882 17.2266 29.8471 16.573C29.9915 16.4623 30.1093 16.3206 30.1919 16.1585C30.2746 15.9965 30.3201 15.8176 30.3246 15.6354C30.3339 15.3122 30.2145 14.9985 29.9927 14.7633C29.771 14.528 29.4649 14.3903 29.1417 14.3805C28.864 14.3716 28.5916 14.4581 28.37 14.6257C27.5204 15.2818 26.4643 15.6126 25.3922 15.5583C24.5204 15.5133 23.6789 15.2191 22.9736 14.7118C22.2621 14.2042 21.7101 13.5043 21.3823 12.6942C21.3376 12.5849 21.3349 12.463 21.3747 12.3519C21.4144 12.2408 21.4939 12.1484 21.5977 12.0923C21.6666 12.0553 21.7435 12.036 21.8216 12.0361H30.3404C30.6126 12.0372 30.8826 11.9843 31.1346 11.8808C31.3866 11.7773 31.6155 11.6249 31.8085 11.4325C32.0014 11.2401 32.155 11.0118 32.2596 10.7598C32.3643 10.5081 32.4184 10.2382 32.4188 9.96556C32.4019 9.38058 32.2725 8.80348 32.0396 8.26687L32.0318 8.26519ZM25.6054 6.436C26.5174 6.43622 27.4084 6.71015 28.163 7.22235C28.9181 7.73514 29.502 8.46266 29.8392 9.31084C29.8677 9.38318 29.8783 9.46133 29.8702 9.53864C29.8617 9.6159 29.8345 9.68993 29.791 9.75432C29.7475 9.81872 29.6889 9.87153 29.6204 9.90819C29.5518 9.94475 29.4753 9.96444 29.3977 9.96444H21.8126C21.7348 9.96454 21.6583 9.9452 21.5899 9.90819C21.5212 9.87107 21.4627 9.81819 21.4189 9.75463C21.375 9.69107 21.348 9.61626 21.3401 9.53864C21.332 9.46133 21.3426 9.38318 21.3711 9.31084C21.7083 8.46266 22.2922 7.73514 23.0473 7.22235C23.8021 6.71611 24.6931 6.436 25.6049 6.436H25.6054ZM45.5302 15.5628C44.6558 15.563 43.7999 15.3113 43.0648 14.8378C42.3297 14.3642 41.7458 13.6886 41.3774 12.8916C41.0149 12.0948 40.8889 11.2107 41.0146 10.3444C41.1402 9.47816 41.5122 8.66623 42.0861 8.00532L40.2299 6.42081C39.629 7.11875 39.1721 7.92872 38.8856 8.80404C38.5984 9.67939 38.4866 10.6028 38.5565 11.5214C38.6263 12.4399 38.8772 13.336 39.2878 14.1577C39.7041 14.9791 40.2785 15.7103 40.978 16.3092C41.6772 16.9083 42.4877 17.3628 43.3629 17.6479C44.238 17.9329 45.1607 18.0418 46.078 17.9685C46.9949 17.8954 47.8892 17.6412 48.7082 17.2204C49.5274 16.8002 50.2554 16.2224 50.8507 15.5201L48.9945 13.9361C48.5674 14.4458 48.0336 14.8556 47.4308 15.1365C46.8278 15.4177 46.172 15.5628 45.5071 15.5623L45.5302 15.5628Z\" fill=\"#5A646E\"/>\n<path d=\"M45.5302 3.99366C44.5262 3.99253 43.5334 4.20853 42.6222 4.62645C41.7091 5.04471 40.8971 5.65523 40.2418 6.41626L42.0923 8.00077C42.8809 7.09124 43.9963 6.53101 45.1955 6.4427C46.3947 6.35439 47.5805 6.7425 48.4945 7.52548C49.4085 8.30845 49.9761 9.42104 50.0751 10.6208C50.1731 11.8207 49.7935 13.0107 49.0187 13.9321L50.8693 15.5161C51.7299 14.4969 52.2828 13.2527 52.4611 11.9297C52.6393 10.6068 52.4359 9.26045 51.875 8.04915C51.3143 6.83839 50.4191 5.8132 49.2949 5.09443C48.1682 4.38065 46.8633 3.99366 45.5302 3.99366Z\" fill=\"#00AEEF\"/>\n<path d=\"M12.0648 14.6808C11.8533 14.4975 11.5856 14.3917 11.3055 14.3816C11.0254 14.3715 10.7514 14.4575 10.5276 14.6251C9.85258 15.1415 9.04711 15.4587 8.2017 15.5409C7.35629 15.623 6.5047 15.4677 5.74366 15.0909C4.98262 14.714 4.34083 14.1324 3.89141 13.4107C3.44216 12.6887 3.2034 11.8556 3.20201 11.0053C3.20062 10.1549 3.43665 9.32106 3.88353 8.59759C4.33006 7.87465 4.96963 7.29079 5.73016 6.91183C6.49063 6.53328 7.34167 6.37466 8.18708 6.45397C9.03249 6.53328 9.83909 6.84771 10.5157 7.36238C10.7373 7.53314 11.0108 7.62263 11.2904 7.61587C11.57 7.60912 11.8389 7.50652 12.0519 7.32525C12.1897 7.20713 12.2994 7.06089 12.3725 6.89608C12.4456 6.73127 12.4827 6.55128 12.4794 6.37016C12.476 6.18904 12.431 6.0113 12.35 5.84987C12.269 5.68843 12.152 5.54613 12.0097 5.43588C10.9735 4.64263 9.73574 4.1555 8.43682 4.02968C7.13749 3.90368 5.83028 4.14442 4.66088 4.72434C3.49149 5.30426 2.50827 6.20198 1.82092 7.31232C1.13356 8.42265 0.770763 9.70455 0.773576 11.0106C0.776388 12.3167 1.14313 13.5969 1.83385 14.705C2.52458 15.8131 3.51117 16.7058 4.68226 17.2812C5.85334 17.8566 7.1628 18.0934 8.46044 17.9635C9.75881 17.8333 10.9948 17.342 12.0283 16.5454C12.1687 16.4353 12.2829 16.2953 12.3626 16.1355C12.4423 15.9758 12.4854 15.8003 12.4889 15.6219C12.4925 15.4434 12.4564 15.2664 12.3831 15.1036C12.3099 14.9409 12.2013 14.7965 12.0654 14.6808H12.0648Z\" fill=\"#5A646E\"/>\n</svg>\n\n",
    2: "<svg viewBox=\"0 0 56 18\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n<path d=\"M33.6323 0C33.6323 0.0401924 33.6236 0.0803847 33.6236 0.120577C33.6236 2.37135 33.6236 4.62021 33.6236 6.86715V6.98199C33.727 7.01787 36.9582 7.02074 37.0788 6.98199L37.1204 6.80543C37.5582 4.8805 38.7281 3.5886 40.5726 2.87088C41.0193 2.70101 41.4849 2.58582 41.9593 2.52781C42.1893 2.49913 42.4208 2.48331 42.6526 2.48044C43.1636 2.47327 43.6746 2.47039 44.1856 2.48044C44.7973 2.48386 45.4037 2.59464 45.9771 2.80772C46.6252 3.03891 47.1798 3.47604 47.556 4.05225C47.8115 4.47005 47.9754 4.93728 48.0369 5.4231C48.0895 5.77989 48.1035 6.14132 48.0785 6.50111C48.0571 7.02824 47.9188 7.54402 47.6737 8.0112C47.3415 8.61234 46.81 9.07884 46.1708 9.33037C45.7924 9.48365 45.3958 9.58785 44.9909 9.64042C44.6341 9.68871 44.2743 9.71126 43.9143 9.70789C42.7047 9.70789 41.4942 9.70789 40.2827 9.70789C40.2339 9.70789 40.1836 9.70789 40.1205 9.71794C40.1391 9.77823 40.1506 9.82416 40.1678 9.86148C40.2868 10.1772 40.479 10.4601 40.7285 10.6872C40.978 10.9143 41.2778 11.0789 41.6033 11.1677C41.9628 11.2747 42.335 11.3336 42.71 11.3429C42.8349 11.3429 42.9598 11.3429 43.0861 11.3429H55.049C55.1222 11.3419 55.1953 11.3482 55.2672 11.3615C55.3877 11.3903 55.4953 11.4582 55.5732 11.5545C55.6511 11.6508 55.6949 11.7702 55.6979 11.8941C55.6893 12.4381 55.6979 12.9836 55.6979 13.5276C55.6969 13.6723 55.6403 13.8112 55.5399 13.9154C55.4394 14.0196 55.3027 14.0812 55.1581 14.0874H43.1162C42.4285 14.0982 41.7423 14.0191 41.075 13.852C40.2899 13.6537 39.5559 13.2906 38.9219 12.7869C38.0936 12.119 37.4982 11.206 37.2209 10.1787C37.1878 10.061 37.1606 9.9433 37.1319 9.8256C37.1032 9.70789 37.106 9.70502 36.9783 9.70502H33.882C33.7643 9.70502 33.7586 9.70502 33.7586 9.83134C33.7586 10.5706 33.7586 11.3098 33.7586 12.0491C33.7555 12.805 33.5635 13.5481 33.2002 14.2109C32.6661 15.188 31.8007 15.9423 30.7599 16.3382C30.2406 16.5475 29.69 16.6687 29.1307 16.6971C28.9326 16.7071 28.7345 16.7114 28.5364 16.7143C28.2895 16.7143 28.0427 16.7143 27.7972 16.7143C27.2374 16.7143 26.679 16.7143 26.1206 16.6698C25.3491 16.6174 24.5926 16.4304 23.8856 16.1171C23.0232 15.7399 22.3341 15.0523 21.9549 14.1908C21.9438 14.1581 21.9213 14.1306 21.8915 14.1132C21.8617 14.0958 21.8266 14.0897 21.7927 14.096H18.8975C17.7046 14.096 16.5132 14.1104 15.3218 14.0874C14.3433 14.0767 13.3798 13.8461 12.5026 13.4128C11.8319 13.0927 11.2403 12.6285 10.7698 12.0533C10.2993 11.4781 9.96169 10.8062 9.78096 10.0854C9.75513 9.98637 9.73216 9.88588 9.71063 9.7854C9.70997 9.77341 9.7068 9.76168 9.70134 9.75099C9.69588 9.74029 9.68824 9.73085 9.67891 9.72328C9.66958 9.71571 9.65877 9.71017 9.64718 9.70703C9.63558 9.70388 9.62346 9.7032 9.61158 9.70502C9.59723 9.70502 9.58287 9.70502 9.56852 9.70502C8.75893 9.70502 7.94934 9.70502 7.13975 9.70502C6.60579 9.70025 6.07395 9.77277 5.56077 9.92034C5.10895 10.0472 4.69436 10.2811 4.35213 10.6022C3.97367 10.9777 3.70768 11.4515 3.58416 11.9701C3.47891 12.3761 3.4268 12.7939 3.42914 13.2132C3.42914 14.553 3.42914 15.8879 3.42914 17.2181C3.42951 17.3141 3.42328 17.4101 3.41048 17.5052C3.40983 17.5731 3.39537 17.6401 3.36797 17.7022C3.34057 17.7643 3.3008 17.8201 3.2511 17.8663C3.2014 17.9125 3.14281 17.9481 3.07889 17.9709C3.01498 17.9937 2.94709 18.0033 2.87936 17.999H1.12525C1.05885 17.9966 0.992914 17.987 0.928598 17.9703C0.830662 17.9469 0.743034 17.8922 0.679037 17.8145C0.61504 17.7368 0.578174 17.6403 0.574044 17.5397C0.574044 17.4794 0.574044 17.4133 0.523804 17.3645V7.21596C0.571173 7.21596 0.618543 7.22458 0.667348 7.22458H3.22674C3.2698 7.22458 3.31287 7.22458 3.37028 7.22458C3.37028 7.27769 3.37746 7.32075 3.37746 7.36812C3.37746 7.67674 3.37746 7.98536 3.37746 8.29398C3.37746 8.33561 3.37746 8.37724 3.39038 8.4447C3.43488 8.39877 3.45928 8.37293 3.48512 8.34853C3.57555 8.25666 3.66311 8.16192 3.75929 8.07579C4.18552 7.71133 4.68472 7.44215 5.22344 7.2863C5.84042 7.09962 6.48227 7.00813 7.12683 7.015H9.56708C9.65752 7.015 9.66469 7.00352 9.68479 6.91596C9.70489 6.82839 9.72785 6.70064 9.75513 6.59442C10.0397 5.40506 10.7396 4.35641 11.7289 3.63741C12.7371 2.9007 13.9497 2.49632 15.1983 2.48044C15.573 2.46896 15.9476 2.48044 16.3237 2.48044C16.6592 2.47482 16.9947 2.48872 17.3285 2.52207C17.7896 2.56896 18.2415 2.68159 18.6707 2.85653C19.1272 3.0348 19.5343 3.3202 19.8576 3.68866C20.1808 4.05713 20.4108 4.49789 20.5281 4.9738C20.7123 5.67338 20.73 6.4064 20.5798 7.11405C20.4976 7.58386 20.3009 8.02615 20.0069 8.40174C19.713 8.77732 19.3309 9.07459 18.8946 9.26721C18.2631 9.55261 17.5779 9.69945 16.885 9.69784C15.5572 9.71363 14.2294 9.69784 12.9016 9.70646C12.861 9.70429 12.8202 9.70429 12.7796 9.70646C12.7559 9.71172 12.7328 9.71942 12.7107 9.72942C12.715 9.7538 12.7212 9.7778 12.7294 9.80119C12.8437 10.1328 13.0374 10.4314 13.2935 10.6711C13.5924 10.9357 13.9526 11.1216 14.3414 11.2122C14.7379 11.3117 15.1455 11.3599 15.5543 11.3558H21.4683C21.5559 11.3558 21.5545 11.3558 21.5702 11.2625C21.6047 11.0529 21.632 10.8405 21.6808 10.6337C21.8089 10.0344 22.0651 9.4699 22.4318 8.97884C22.7985 8.48778 23.267 8.0818 23.8052 7.7887C24.5318 7.39517 25.3298 7.15114 26.1522 7.07098C26.5335 7.03012 26.917 7.01191 27.3005 7.01644C28.3857 7.01644 29.4709 7.01644 30.5561 7.01644C30.6135 7.01644 30.6709 7.01644 30.7427 7.00639V6.85136C30.7427 4.61207 30.7427 2.37231 30.7427 0.132061C30.7427 0.0875619 30.7427 0.0444987 30.7427 0H33.6323ZM28.6585 9.70502C28.2364 9.70502 27.813 9.70502 27.391 9.70502C27.1039 9.70502 26.8096 9.70502 26.5196 9.72512C26.1374 9.74184 25.7631 9.8397 25.4215 10.0122C25.1983 10.1248 25.0008 10.2824 24.8414 10.4751C24.6821 10.6678 24.5644 10.8914 24.4957 11.1318C24.3707 11.5512 24.3505 11.9948 24.4368 12.4237C24.4863 12.7225 24.6113 13.0036 24.8 13.2405C25.0524 13.5361 25.3889 13.7479 25.7646 13.8477C26.1332 13.9498 26.5147 13.9982 26.8972 13.9912C27.5039 13.9912 28.1106 13.9912 28.7173 13.9912C28.8534 13.9898 28.9892 13.9782 29.1235 13.9568C29.5718 13.897 29.9831 13.6764 30.2809 13.336C30.5788 12.9957 30.7429 12.5588 30.7427 12.1065C30.7628 11.3457 30.7427 10.5849 30.7427 9.82416C30.7427 9.7165 30.7427 9.71076 30.6322 9.70789H28.6585V9.70502ZM12.6303 7.02074H16.4271C16.5118 7.02074 16.5964 7.02074 16.6811 7.02074C16.8725 7.01978 17.0619 6.98277 17.2395 6.91165C17.3677 6.86279 17.4804 6.78062 17.5662 6.67364C17.652 6.56665 17.7077 6.43871 17.7276 6.30302C17.745 6.20549 17.7503 6.10616 17.7434 6.00732C17.7408 5.83764 17.6844 5.67316 17.5822 5.53768C17.48 5.4022 17.3374 5.30275 17.1749 5.25372C17.0402 5.20415 16.8979 5.17841 16.7543 5.17764C16.2347 5.17764 15.7165 5.17764 15.1983 5.17764C14.9779 5.18017 14.7578 5.19647 14.5395 5.22644C14.1913 5.26888 13.8567 5.38695 13.559 5.57238C13.0829 5.88575 12.7505 6.37511 12.6346 6.93318C12.6308 6.9622 12.6294 6.99149 12.6303 7.02074ZM40.0243 7.00782C40.0889 7.00782 40.1377 7.01931 40.1879 7.01931H42.9023C43.2813 7.01931 43.6603 7.01931 44.0392 7.01931C44.2454 7.02349 44.4504 6.9864 44.6421 6.91021C44.7647 6.86255 44.8735 6.7851 44.9587 6.68486C45.044 6.58462 45.1029 6.46474 45.1301 6.33604C45.1666 6.17026 45.1641 5.9983 45.123 5.83363C45.0961 5.71065 45.0396 5.59611 44.9582 5.50002C44.8769 5.40393 44.7733 5.32923 44.6565 5.28242C44.5053 5.21416 44.3414 5.17846 44.1756 5.17764C43.5942 5.17764 43.0129 5.17764 42.4315 5.17764C42.1334 5.18037 41.8371 5.22532 41.5516 5.31113C40.7162 5.56377 40.231 6.14656 40.0243 7.00782Z\" fill=\"#FF7800\"/>\n</svg>\n",
    6: "<svg viewBox=\"0 0 70 18\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n<path d=\"M0.697876 14.9195C0.697876 14.7745 0.697876 14.6295 0.697876 14.4846C0.697876 14.3396 0.697876 14.4121 0.79452 14.4121H3.45224C3.45224 14.545 3.45224 14.6899 3.45224 14.8228C3.48426 15.0235 3.56635 15.2128 3.69094 15.3732C3.81552 15.5337 3.97857 15.6602 4.16499 15.7409C4.48384 15.8937 4.82757 15.9878 5.17975 16.0188C5.80012 16.1161 6.43187 16.1161 7.05224 16.0188C7.28946 15.9858 7.5211 15.9208 7.74083 15.8255C8.02772 15.7333 8.2698 15.5372 8.41954 15.2757C8.56929 15.0142 8.6159 14.7062 8.55022 14.4121C8.53571 14.2456 8.49494 14.0826 8.42942 13.9289C8.34672 13.7529 8.21976 13.6013 8.06094 13.4891C7.90213 13.3769 7.7169 13.3078 7.52338 13.2886C7.31211 13.25 7.09788 13.2298 6.88311 13.2282H3.86298C3.30454 13.2484 2.74556 13.2079 2.19586 13.1074L1.78512 12.9745C1.53821 12.8782 1.32399 12.7133 1.16774 12.4993C1.01148 12.2852 0.919705 12.031 0.903245 11.7665C0.840174 11.4067 0.869267 11.0368 0.987808 10.6913C1.16125 10.2425 1.4978 9.87572 1.93009 9.66444C2.12338 9.55571 2.32875 9.47115 2.53412 9.36243C2.20747 9.15257 1.93028 8.8743 1.7217 8.54683C1.51313 8.21937 1.37814 7.85052 1.32606 7.46578C1.14814 6.65302 1.2415 5.80433 1.59184 5.04968C1.96682 4.23657 2.62954 3.59106 3.45224 3.2376C4.10086 2.94482 4.79611 2.76896 5.50593 2.71813C6.49053 2.64895 7.47862 2.78893 8.40526 3.12887C9.20617 3.40922 9.89344 3.94376 10.3623 4.65102C10.8363 5.36109 11.022 6.22501 10.8818 7.06712C10.794 7.59168 10.5783 8.08652 10.2538 8.50792C9.92935 8.92932 9.50606 9.26429 9.02136 9.48323C8.44095 9.77355 7.81634 9.96542 7.17304 10.051C6.58006 10.125 5.98262 10.1573 5.38512 10.1477H4.33412C4.14366 10.1581 3.95976 10.2208 3.80257 10.3289C3.73051 10.3784 3.67284 10.4461 3.63542 10.5251C3.598 10.6041 3.58217 10.6917 3.58953 10.7788C3.5969 10.8659 3.62719 10.9495 3.67734 11.0212C3.72749 11.0928 3.79571 11.1499 3.87506 11.1866C4.03792 11.2601 4.21611 11.2932 4.39452 11.2832H8.01868C8.82932 11.3047 9.62368 11.5157 10.3381 11.8993C10.9036 12.191 11.3359 12.6881 11.5462 13.2886C11.6159 13.5042 11.6605 13.7272 11.6791 13.953C11.7189 14.5009 11.6491 15.0512 11.4737 15.5718C11.213 16.2717 10.7004 16.8491 10.0361 17.1906C9.43813 17.502 8.79348 17.7142 8.1274 17.8188C7.52425 17.9211 6.91474 17.9817 6.30324 18H5.09519C4.68445 18 4.26163 17.9396 3.88714 17.8671C3.2498 17.7921 2.63378 17.5909 2.07506 17.2752C1.77052 17.1004 1.50579 16.864 1.29778 16.5811C1.08977 16.2982 0.943051 15.975 0.867003 15.6322L0.79452 15.2336L0.697876 14.9195ZM5.91667 8.27518C6.18244 8.27518 6.44821 8.2027 6.71398 8.14229C7.00356 8.09003 7.27178 7.95496 7.48619 7.75342C7.70059 7.55188 7.85198 7.29252 7.92204 7.00672C7.98388 6.69567 7.98388 6.37549 7.92204 6.06444C7.87967 5.75977 7.74808 5.47445 7.54385 5.24443C7.33963 5.01441 7.0719 4.84997 6.77438 4.77182C6.31257 4.63924 5.82278 4.63924 5.36096 4.77182C5.0923 4.83614 4.84556 4.97071 4.64603 5.16176C4.44649 5.3528 4.30132 5.59346 4.22539 5.85907C4.10348 6.28953 4.10348 6.74539 4.22539 7.17585C4.28664 7.42241 4.41321 7.6479 4.59179 7.8286C4.77036 8.0093 4.99434 8.13853 5.24016 8.20269C5.46412 8.23955 5.68998 8.26375 5.91667 8.27518Z\" fill=\"#FF0000\"/>\n<path d=\"M33.0858 13.4457V2.87521H35.9489V4.08326H36.0093C36.9026 3.47368 37.9158 3.06182 38.9811 2.87521C39.6735 2.71877 40.3925 2.7229 41.0831 2.88729C41.5439 2.99963 41.9614 3.24511 42.2837 3.59312C42.6059 3.94113 42.8186 4.37628 42.8952 4.84434C43.0019 5.3487 43.0546 5.86302 43.0522 6.37856V13.4336H40.0321V13.3007C40.0321 11.2229 40.0321 9.14501 40.0321 7.06715C40.0385 6.7234 40.0142 6.37976 39.9596 6.04031C39.9187 5.79318 39.7945 5.56745 39.6078 5.40048C39.4211 5.23352 39.1829 5.13534 38.9328 5.12219C38.3924 5.05001 37.8426 5.12082 37.3381 5.32756C36.9636 5.47252 36.6012 5.65373 36.2388 5.82286C36.2014 5.83412 36.1695 5.85893 36.1494 5.89244C36.1293 5.92595 36.1224 5.96575 36.1301 6.00407V13.2524C36.1301 13.4336 36.1301 13.4215 35.973 13.4215H33.0858V13.4457Z\" fill=\"#FF0000\"/>\n<path d=\"M21.573 10.6913L22.1892 12.5517C21.8871 12.6846 21.5851 12.8295 21.271 12.9503C20.5502 13.2306 19.794 13.4095 19.0241 13.4819C18.3592 13.5684 17.6875 13.5886 17.0187 13.5423C16.1744 13.5097 15.3485 13.2867 14.6026 12.8899C14.1529 12.629 13.7599 12.2809 13.4466 11.866C13.1334 11.4511 12.9062 10.9778 12.7784 10.4738C12.6186 9.93558 12.5252 9.37976 12.5006 8.8188C12.4764 8.38424 12.4764 7.94867 12.5006 7.51411C12.5341 6.54412 12.8081 5.59766 13.2979 4.75975C13.6266 4.22379 14.0662 3.76434 14.5871 3.41222C15.108 3.06009 15.6982 2.82344 16.318 2.71814C17.3259 2.55826 18.3566 2.6201 19.3382 2.89934C20.0393 3.04672 20.6832 3.39277 21.193 3.89616C21.7029 4.39956 22.0571 5.03905 22.2133 5.73827C22.3158 6.1335 22.3766 6.53841 22.3945 6.94632C22.3945 7.56243 22.3945 8.15438 22.3945 8.80672V8.89129H15.569C15.569 9.02417 15.569 9.1329 15.569 9.2537C15.5909 9.57864 15.6686 9.89738 15.7986 10.196C15.9245 10.4751 16.1171 10.7191 16.3593 10.9066C16.6015 11.094 16.886 11.2192 17.1878 11.2712C17.6527 11.3654 18.1285 11.3939 18.6012 11.3557C19.5758 11.2933 20.5361 11.0898 21.4522 10.7517H21.5247L21.573 10.6913ZM15.6053 7.06713H19.6643C19.6931 6.48535 19.5812 5.90521 19.3382 5.37585C19.264 5.22823 19.1603 5.09738 19.0336 4.99141C18.9068 4.88544 18.7597 4.80659 18.6012 4.75975C18.2102 4.64095 17.7981 4.60799 17.3932 4.6631C17.1222 4.68408 16.8602 4.7696 16.629 4.91251C16.3978 5.05542 16.2042 5.25157 16.0643 5.48458C15.882 5.78138 15.7551 6.10885 15.6898 6.45102C15.714 6.63223 15.6415 6.82552 15.6053 7.06713Z\" fill=\"#FF0000\"/>\n<path d=\"M54.9274 8.90338H48.0777C48.0642 9.18723 48.0886 9.47161 48.1502 9.74902C48.2293 10.2206 48.4734 10.6487 48.8388 10.9571C49.1538 11.1881 49.5252 11.33 49.914 11.3678C50.7771 11.4831 51.6543 11.4339 52.4992 11.2228C52.9945 11.102 53.4777 10.945 53.973 10.8H54.0576L54.6737 12.6604L54.0938 12.9383C53.3263 13.2773 52.5116 13.4973 51.6777 13.5906C50.9666 13.6598 50.2505 13.6598 49.5395 13.5906C48.6949 13.5601 47.8685 13.337 47.1234 12.9383C46.6696 12.6793 46.2723 12.3321 45.9549 11.9171C45.6374 11.5022 45.4063 11.0279 45.275 10.5222C44.9904 9.44704 44.9206 8.32632 45.0697 7.22419C45.1351 6.60386 45.2939 5.997 45.5408 5.42419C45.8179 4.80746 46.2316 4.26183 46.7506 3.82859C47.2697 3.39535 47.8805 3.08585 48.5368 2.92352C49.2276 2.75241 49.9417 2.69529 50.6509 2.75439C51.2337 2.76984 51.8097 2.88422 52.3542 3.09264C52.967 3.31472 53.5117 3.6919 53.9352 4.18736C54.3586 4.68281 54.6464 5.27961 54.7703 5.91949C54.903 6.5672 54.9637 7.22757 54.9515 7.88862L54.9274 8.90338ZM52.1609 7.06714C52.167 6.96253 52.167 6.85766 52.1609 6.75305C52.1376 6.2891 52.014 5.83574 51.7985 5.42419C51.7257 5.27431 51.6226 5.14114 51.4958 5.03303C51.3689 4.92492 51.2211 4.84422 51.0616 4.796C50.7326 4.67914 50.3833 4.62984 50.0348 4.65103C49.7045 4.65739 49.3826 4.75572 49.1052 4.93499C48.8277 5.11425 48.6058 5.36733 48.4643 5.6658C48.3071 5.98976 48.2011 6.33617 48.1502 6.69264V7.0309L52.1609 7.06714Z\" fill=\"#FF0000\"/>\n<path d=\"M25.0643 2.87517V0H28.0724V2.86309H31.1167V5.13423H28.0724V9.62819C28.0601 9.93804 28.0968 10.2479 28.1811 10.5463C28.2348 10.7447 28.3482 10.9218 28.506 11.0536C28.6637 11.1855 28.8582 11.2656 29.063 11.2832C29.4627 11.3527 29.8713 11.3527 30.271 11.2832L31.2254 11.102C31.2254 11.2953 31.3099 11.4886 31.3462 11.6698L31.5999 12.9624C31.5999 13.047 31.5999 13.0832 31.5274 13.1074C30.9501 13.3411 30.3451 13.4995 29.7274 13.5785C29.2681 13.6508 28.8025 13.6751 28.3381 13.651C27.7377 13.6545 27.1424 13.5396 26.5865 13.3127C26.1874 13.153 25.8382 12.8896 25.5749 12.5498C25.3116 12.21 25.1436 11.8062 25.0885 11.3799C25.0418 11.0799 25.0136 10.7773 25.0039 10.4738V5.13423H23.6026V2.87517H25.0643Z\" fill=\"#FF0000\"/>\n<path d=\"M63.7583 11.0537C63.7583 11.2832 63.8549 11.5248 63.8911 11.7544C63.9274 11.9839 64.0482 12.5396 64.1207 12.9624C64.1292 12.9772 64.1337 12.9939 64.1336 13.011C64.1336 13.028 64.129 13.0447 64.1205 13.0594C64.1119 13.0742 64.0996 13.0863 64.0847 13.0948C64.0699 13.1032 64.0532 13.1075 64.0361 13.1074C63.4553 13.3432 62.8461 13.5016 62.224 13.5785C61.7647 13.6511 61.2991 13.6754 60.8348 13.651C60.1873 13.6606 59.5463 13.52 58.9623 13.2403C58.6007 13.0708 58.2868 12.8144 58.0486 12.494C57.8104 12.1735 57.6553 11.7991 57.5972 11.404C57.5451 11.1047 57.5168 10.8018 57.5126 10.498V5.13423H56.075V2.87517H57.5247V0H60.5328V2.87517H63.5771V5.13423H60.5448C60.539 5.17023 60.539 5.20695 60.5448 5.24295V9.66443C60.5386 9.95413 60.5752 10.2432 60.6536 10.5221C60.7013 10.7259 60.8124 10.9093 60.9708 11.046C61.1292 11.1827 61.3269 11.2658 61.5354 11.2832C61.9351 11.3529 62.3438 11.3529 62.7435 11.2832L63.7583 11.0537Z\" fill=\"#FF0000\"/>\n<path d=\"M65.5583 1.43762H66.3556V2.23494H65.5583V1.43762Z\" fill=\"#FF0000\"/>\n<path d=\"M68.4334 1.43762H69.2428V2.23494H68.4334V1.43762Z\" fill=\"#FF0000\"/>\n<path d=\"M65.5583 2.87512H66.3556V3.68452H65.5583V2.87512Z\" fill=\"#FF0000\"/>\n<path d=\"M66.9838 2.87512H67.7932V3.68452H66.9838V2.87512Z\" fill=\"#FF0000\"/>\n<path d=\"M69.2428 2.87512V3.68452H68.4334V2.87512H69.2428Z\" fill=\"#FF0000\"/>\n<path d=\"M65.5583 4.31274H66.3556V5.12214H65.5583V4.31274Z\" fill=\"#FF0000\"/>\n<path d=\"M69.2428 5.12214H68.4334V4.31274H69.2428V5.12214Z\" fill=\"#FF0000\"/>\n<path d=\"M67.7932 1.43762V2.23494H67.0562H66.9838V1.43762H67.7932Z\" fill=\"#FF0000\"/>\n<path d=\"M66.9838 4.31274H67.7569C67.7569 4.56644 67.7569 4.83221 67.7569 5.09798H66.9838V4.31274Z\" fill=\"#FF0000\"/>\n</svg>\n\n",
    70: "<svg viewBox=\"0 0 83 18\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n<path fill-rule=\"evenodd\" clip-rule=\"evenodd\" d=\"M8.30441 0.0465708C1.97942 0.773945 -1.68713 7.46697 1.29795 13.2921C2.82259 16.2674 6.34787 18.3317 10.0956 17.9559C14.6534 17.4987 18.6153 13.3441 18.0712 8.14846C17.9313 6.8125 17.5745 5.7883 17.0216 4.74391C16.7515 4.23363 16.4441 3.81942 16.1298 3.40496C14.6057 1.39492 11.3703 -0.306007 8.30441 0.0465708Z\" fill=\"#040607\"/>\n<path fill-rule=\"evenodd\" clip-rule=\"evenodd\" d=\"M12.0275 15.4505C11.8562 15.3028 11.2133 15.0722 10.9097 14.8361C8.08987 12.6423 9.03943 8.7658 11.7541 7.68279L12.4107 7.43127C12.0217 6.80788 10.7933 5.95715 9.75315 5.61931C6.21428 4.46981 2.30333 6.90859 2.04482 10.8171C1.86073 13.6003 3.55473 15.6845 5.29892 16.5292C7.54498 17.617 10.5345 17.1715 12.0275 15.4505Z\" fill=\"#A7DBDA\"/>\n<path fill-rule=\"evenodd\" clip-rule=\"evenodd\" d=\"M2.04591 8.46913C2.09973 8.41811 2.6712 7.44017 3.16011 6.86796C3.5156 6.45192 4.07659 6.00558 4.66282 5.65833C6.87599 4.34737 9.81664 4.48135 11.889 6.13891C12.0245 6.24729 12.1376 6.31269 12.2559 6.43445L12.9206 7.15766C13.3276 7.70854 14.2252 6.98652 15.8592 8.25799C16.0712 8.42293 16.0374 8.49044 16.2791 8.58667C16.7022 4.166 13.4313 0.624122 9.26965 0.55972C7.27907 0.528923 5.17943 1.43624 3.97442 2.80059C2.71316 4.22864 1.89105 5.8158 2.04591 8.46913Z\" fill=\"#DDE461\"/>\n<path fill-rule=\"evenodd\" clip-rule=\"evenodd\" d=\"M12.6429 8.00746C10.9346 8.3692 9.43247 9.97401 9.82268 12.1243C10.1367 13.855 11.8397 15.4107 14.0079 14.9865C15.6903 14.6573 17.1854 12.9846 16.8095 10.86C16.5028 9.12618 14.7552 7.56013 12.6429 8.00746Z\" fill=\"#F4E13D\"/>\n<path d=\"M56.3129 13.2169C57.5192 13.6896 58.6999 13.9702 59.8401 13.188C60.3451 12.8414 60.6776 12.1038 60.8344 11.1022C60.1471 11.8563 59.3236 12.0857 58.3855 12.0164C57.4177 11.9446 56.7197 11.348 56.619 10.3769C56.4697 8.93551 56.9367 7.68881 57.9911 6.69706C59.3632 5.40663 61.0093 4.97017 62.8583 5.24162C63.1165 5.2804 63.3731 5.33155 63.6322 5.35053C64.0398 5.38023 64.0324 5.62115 63.9622 5.92313C63.6974 7.0865 63.4408 8.25151 63.1784 9.4157C63.0035 10.1921 62.8484 10.9743 62.6413 11.7416C62.317 12.9322 61.8442 14.0452 60.6174 14.589C60.2281 14.7586 59.8167 14.8717 59.3954 14.9248C58.3228 15.0609 57.2568 15.0263 56.2164 14.7053C56.1165 14.6748 55.9804 14.4891 55.9969 14.4017C56.072 14.0188 56.1974 13.6426 56.3129 13.2169ZM61.8665 6.60383C61.289 6.45036 60.9928 6.50069 60.3145 6.8398C59.2626 7.36538 58.4556 8.94376 58.6487 10.098C58.7419 10.6558 59.1594 10.9471 59.6957 10.7507C60.0147 10.6345 60.3016 10.4445 60.5332 10.1962C61.4383 9.18386 61.5604 7.8695 61.8665 6.60383Z\" fill=\"black\"/>\n<path d=\"M35.9045 13.2185C37.1223 13.6979 38.3039 13.9784 39.4375 13.1756C39.9581 12.8068 40.3393 11.938 40.3872 11.1335C39.7156 11.8678 38.8954 12.0823 37.973 12.0147C36.8938 11.9322 36.2288 11.2111 36.1875 10.1352C36.0753 7.24077 38.5275 5.36619 40.9342 5.20117C41.7048 5.14837 42.4895 5.30183 43.2675 5.36619C43.5431 5.38929 43.6446 5.5378 43.5802 5.81586C43.091 7.91404 42.6529 10.0238 42.1067 12.1088C41.5902 14.0807 40.3212 15.0007 38.2717 14.9726C37.4689 14.9611 36.6677 14.8191 35.8657 14.7342C35.5687 14.702 35.5134 14.5386 35.6034 14.2705C35.7114 13.947 35.7923 13.6153 35.9045 13.2185ZM38.2147 9.77047C38.2222 10.1459 38.2147 10.5378 38.6355 10.7177C39.0382 10.8909 39.4326 10.8002 39.7535 10.532C40.0159 10.3145 40.2464 10.0612 40.4383 9.77955C40.9284 9.0444 41.086 8.18797 41.2774 7.34391C41.4689 6.49985 41.3649 6.38351 40.5043 6.57658C40.4516 6.5898 40.4 6.60718 40.3501 6.62856C39.0918 7.11288 38.2106 8.41404 38.218 9.77047H38.2147Z\" fill=\"black\"/>\n<path d=\"M21.2428 12.0122C21.4524 11.0353 21.6488 10.1277 21.8418 9.21928C22.2445 7.32737 22.6521 5.43546 23.039 3.53943C23.1042 3.21929 23.2337 3.11203 23.5564 3.11698C24.5869 3.13514 25.6191 3.12771 26.6496 3.12523C27.6496 3.12193 28.5143 3.42639 29.0167 4.33398C29.553 5.30592 29.3625 6.29685 28.8344 7.19949C28.1537 8.3645 27.0002 8.70691 25.7428 8.77952C25.2907 8.80592 24.8352 8.79767 24.3823 8.78447C24.0687 8.77622 23.9194 8.881 23.8633 9.21516C23.728 10.027 23.5382 10.8298 23.3889 11.6392C23.3369 11.9165 23.2238 12.0345 22.9268 12.0196C22.3839 11.994 21.8377 12.0122 21.2428 12.0122ZM24.2725 7.3282C25.0935 7.38018 25.86 7.39833 26.5506 6.98661C27.0927 6.66401 27.2436 6.12853 27.2065 5.5287C27.1776 5.06335 26.8641 4.7754 26.4747 4.68299C26.0035 4.5716 25.5044 4.58728 25.0093 4.57325C24.9433 4.57325 24.8319 4.70609 24.8121 4.79355C24.6281 5.61863 24.4582 6.44619 24.2725 7.3282Z\" fill=\"black\"/>\n<path d=\"M45.5382 12.2366C44.8616 12.1335 44.1859 12.0246 43.5085 11.9281C43.1265 11.8736 42.9722 11.7135 43.1454 11.3224C43.2423 11.0948 43.3188 10.859 43.374 10.6178C43.4524 10.2985 43.6017 10.235 43.9062 10.3703C44.6359 10.7059 45.4524 10.8046 46.2411 10.6525C46.7519 10.5559 47.2147 10.3612 47.4788 9.85958C47.6859 9.46189 47.6553 9.10958 47.3071 8.8274C47.0232 8.6127 46.7212 8.42304 46.4045 8.26057C46.0695 8.0741 45.7189 7.91321 45.3765 7.73912C43.5505 6.80925 44.0753 4.58153 45.2189 3.81751C46.2288 3.14589 47.35 2.9586 48.5192 3.00728C49.0753 3.03121 49.6256 3.18302 50.1792 3.27626C50.4408 3.32081 50.5258 3.4685 50.4424 3.7185C50.4292 3.75728 50.4284 3.80101 50.4136 3.83814C50.2972 4.14507 50.2585 4.56008 50.0357 4.7218C49.8707 4.84061 49.4639 4.63929 49.1702 4.55678C48.473 4.37526 47.7832 4.35546 47.1124 4.65084C46.9228 4.72821 46.7483 4.83824 46.5967 4.97592C46.1322 5.42559 46.1776 5.94292 46.7362 6.27048C47.2436 6.56833 47.7923 6.79358 48.3121 7.07245C48.9028 7.39011 49.4276 7.7845 49.6215 8.47509C49.7732 9.00748 49.7524 9.57422 49.562 10.094C49.3717 10.6139 49.0217 11.0601 48.5621 11.3687C47.7576 11.9248 46.7997 12.183 45.5382 12.2366Z\" fill=\"black\"/>\n<path d=\"M33.1009 12.0073C33.1603 11.5774 33.2098 11.2276 33.2568 10.8901C33.0093 11.1277 32.7519 11.3909 32.4755 11.6327C31.8674 12.1566 31.1438 12.263 30.3856 12.1228C29.4524 11.9503 28.8666 11.1954 28.8517 10.1517C28.822 8.11784 29.7808 6.66239 31.5539 5.74243C32.9788 5.00398 34.4903 5.05101 36.0167 5.36619C36.3938 5.44375 36.2766 5.69622 36.2296 5.90662C35.9639 7.12526 35.671 8.33896 35.4218 9.5609C35.2799 10.2581 35.2131 10.9701 35.0918 11.6715C35.0695 11.7952 34.9375 11.9899 34.8443 11.9949C34.2865 12.0238 33.7263 12.0073 33.1009 12.0073ZM30.888 9.834C30.8988 10.1145 30.9227 10.5089 31.3303 10.7144C31.7643 10.933 32.143 10.7375 32.4664 10.4668C32.6933 10.269 32.8918 10.0408 33.0563 9.78862C33.6182 8.96354 33.8179 8.00645 34.011 7.04936C34.1174 6.52625 33.9994 6.41487 33.4582 6.518C31.9994 6.80183 30.8864 8.18879 30.888 9.83565V9.834Z\" fill=\"black\"/>\n<path d=\"M82.8013 7.7903C82.7188 9.95201 81.5695 11.5246 79.666 12.0246C78.8541 12.2391 78.0357 12.2449 77.2378 11.933C76.3475 11.584 75.7584 10.9685 75.7031 9.98419C75.6033 8.24079 76.1248 6.75234 77.6611 5.77215C78.6594 5.13518 79.7749 5.00812 80.9119 5.27132C82.2064 5.57165 82.8475 6.46851 82.8013 7.7903ZM80.7848 7.91571C80.7964 7.3662 80.7122 6.86043 80.1347 6.61208C79.8773 6.50627 79.5929 6.48522 79.3227 6.55199C79.0525 6.61875 78.8107 6.76985 78.6322 6.98337C77.921 7.8299 77.5942 8.81917 77.7568 9.92561C77.8574 10.6137 78.4738 10.9735 79.133 10.7334C79.4172 10.6338 79.6723 10.4654 79.8756 10.2433C80.4397 9.59649 80.7611 8.77359 80.7848 7.91571Z\" fill=\"black\"/>\n<path d=\"M68.0489 12.0114V11.1822C67.907 11.3035 67.8137 11.3769 67.7271 11.4578C67.0909 12.0584 66.3187 12.2589 65.4787 12.1385C64.4012 11.9842 63.8855 11.2647 64.0538 10.1211C64.2353 8.88352 64.5357 7.67148 64.7824 6.44706C64.8393 6.16488 64.9037 5.8827 64.9391 5.59723C64.9746 5.31175 65.1215 5.23172 65.388 5.24657C65.7724 5.27353 66.1581 5.27822 66.5431 5.26059C66.9111 5.23749 66.9556 5.38353 66.8863 5.70119C66.6124 6.96026 66.3558 8.22428 66.0926 9.48666C66.0716 9.56627 66.0567 9.64736 66.048 9.72923C66.0282 10.0997 65.9705 10.485 66.3863 10.7061C66.7378 10.8934 67.3203 10.8522 67.6124 10.5147C67.8913 10.1913 68.1668 9.80679 68.2725 9.40498C68.5959 8.16735 68.85 6.91653 69.1033 5.66571C69.166 5.35795 69.2972 5.25317 69.5984 5.26884C69.9831 5.2903 70.3687 5.2903 70.7535 5.26884C71.0769 5.24987 71.1215 5.37445 71.0612 5.66323C70.6762 7.50371 70.298 9.3464 69.9268 11.1913C69.7617 12.0164 69.7815 12.0164 68.9309 12.0164L68.0489 12.0114Z\" fill=\"black\"/>\n<path d=\"M55.4721 10.3877C55.4721 10.8002 55.4853 11.1534 55.4631 11.5024C55.4487 11.5529 55.4232 11.5995 55.3883 11.6388C55.3535 11.6781 55.3102 11.709 55.2617 11.7293C53.9952 12.2243 52.704 12.3778 51.4037 11.8852C50.5233 11.5552 50.0934 10.8423 50.0835 9.92811C50.0687 7.86541 51.1718 6.02713 53.1941 5.34974C53.9438 5.10331 54.7498 5.08465 55.5101 5.29611C56.0877 5.44875 56.5827 5.75568 56.7147 6.40419C56.8649 7.11706 56.7032 7.74165 56.1372 8.2268C55.3319 8.91491 54.3327 9.04775 53.3368 9.17977C53.078 9.21521 52.8161 9.2235 52.5555 9.20452C52.1842 9.17564 52.0712 9.36953 52.0538 9.68967C52.0217 10.3085 52.374 10.7837 52.9845 10.9083C53.6561 11.0461 54.2939 10.9174 54.9086 10.6393L55.4721 10.3877ZM52.3665 8.08158C53.1297 8.10963 53.7849 8.05188 54.3938 7.73752C54.9078 7.47267 55.1207 7.04858 54.9507 6.69545C54.7956 6.37366 54.3121 6.26145 53.8146 6.457C53.1025 6.73835 52.7238 7.32746 52.3665 8.08158Z\" fill=\"black\"/>\n<path d=\"M70.7584 12.0139C71.1462 10.178 71.515 8.4363 71.8805 6.69373C71.9564 6.33234 72.0125 5.96601 72.0951 5.60545C72.119 5.50231 72.2007 5.33069 72.2601 5.32822C72.8129 5.30677 73.3673 5.31584 73.949 5.31584C73.9053 5.63102 73.8739 5.85627 73.8343 6.14505C74.1116 5.91238 74.3335 5.71766 74.5653 5.53614C75.0026 5.1929 75.5216 5.14835 76.0505 5.15165C76.2766 5.15165 76.3805 5.26551 76.3203 5.49736C76.2106 5.92145 76.1099 6.34802 75.9787 6.76551C75.9531 6.84802 75.7955 6.95198 75.7188 6.93795C74.7048 6.75973 74.0538 7.27954 73.7023 8.12112C73.3946 8.85874 73.2535 9.66732 73.0546 10.4478C72.9531 10.8455 72.8814 11.2515 72.8022 11.6549C72.7502 11.9223 72.6182 12.037 72.3244 12.0213C71.8228 11.9949 71.3178 12.0139 70.7584 12.0139Z\" fill=\"black\"/>\n</svg>\n\n",
    75: "<svg viewBox=\"0 0 74 18\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n<path fill-rule=\"evenodd\" clip-rule=\"evenodd\" d=\"M47.1409 8.8277C47.1409 9.31743 47.2158 9.77061 47.3659 10.1876C47.5157 10.6046 47.7342 10.9687 48.0213 11.2797C48.308 11.5907 48.6504 11.8355 49.0485 12.0141C49.4462 12.1928 49.8928 12.2822 50.3887 12.2822C50.8842 12.2822 51.3308 12.1928 51.7288 12.0141C52.1266 11.8355 52.469 11.5907 52.756 11.2797C53.0428 10.9687 53.2614 10.6046 53.4114 10.1876C53.5612 9.77061 53.6364 9.31743 53.6364 8.8277C53.6364 8.33817 53.5612 7.88469 53.4114 7.46765C53.2614 7.05072 53.0428 6.68695 52.756 6.37575C52.469 6.06495 52.1266 5.81984 51.7288 5.64121C51.3308 5.46248 50.8842 5.37316 50.3887 5.37316C49.8928 5.37316 49.4462 5.46248 49.0485 5.64121C48.6504 5.81984 48.308 6.06495 48.0213 6.37575C47.7342 6.68695 47.5157 7.05072 47.3659 7.46765C47.2158 7.88469 47.1409 8.33817 47.1409 8.8277ZM45.6148 4.18193H47.1409V5.53197H47.18C47.5973 5.02912 48.083 4.63862 48.6376 4.36066C49.1918 4.0827 49.8017 3.94373 50.4669 3.94373C51.1841 3.94373 51.8396 4.06628 52.4332 4.311C53.0266 4.55611 53.5319 4.89665 53.9495 5.33351C54.3668 5.77017 54.6929 6.28644 54.9278 6.882C55.1625 7.47767 55.2799 8.1263 55.2799 8.8277C55.2799 9.5294 55.1625 10.1776 54.9278 10.7733C54.6929 11.3689 54.3702 11.8851 53.9593 12.3218C53.5484 12.7587 53.0623 13.0997 52.5018 13.3444C51.9407 13.589 51.3407 13.7116 50.7016 13.7116C49.88 13.7116 49.1591 13.5296 48.5398 13.1657C47.9201 12.8017 47.4668 12.355 47.18 11.8256H47.1409V18H45.6148V4.18193ZM68.7792 15.3595C68.6195 15.7566 68.4562 16.117 68.2899 16.4415C68.1234 16.7657 67.9236 17.0436 67.6909 17.2754C67.4577 17.5068 67.1782 17.6855 66.8522 17.8114C66.5257 17.937 66.1298 18 65.6639 18C65.4374 18 65.2013 17.9867 64.9551 17.9603C64.7086 17.9337 64.479 17.8675 64.266 17.7618L64.4658 16.4117C64.6256 16.4778 64.7919 16.521 64.9651 16.5408C65.1379 16.5606 65.3376 16.5707 65.5641 16.5707C66.0699 16.5707 66.4428 16.4316 66.6824 16.1537C66.9221 15.8758 67.1282 15.505 67.3014 15.0419L67.9405 13.2947L64.0664 3.94373H65.8837L68.7792 11.23H68.8191L71.5949 3.94373H73.2923L68.7792 15.3595Z\" fill=\"#1E2446\"/>\n<path fill-rule=\"evenodd\" clip-rule=\"evenodd\" d=\"M3.81316 10.3623C3.97114 10.6735 4.1809 10.9255 4.44234 11.1184C4.70367 11.3116 5.01042 11.4544 5.36325 11.5479C5.71569 11.6412 6.08049 11.6879 6.45744 11.6879C6.7127 11.6879 6.9863 11.6662 7.27804 11.6225C7.56978 11.579 7.84328 11.495 8.09864 11.3705C8.35389 11.2462 8.5665 11.075 8.73693 10.8571C8.90697 10.6395 8.99219 10.3623 8.99219 10.0261C8.99219 9.66539 8.87961 9.37282 8.65475 9.14862C8.4297 8.92462 8.13502 8.73788 7.77042 8.58848C7.40572 8.43918 6.99218 8.30846 6.5303 8.19651C6.06823 8.08446 5.60037 7.96016 5.12623 7.82301C4.63984 7.69872 4.1657 7.54621 3.70392 7.36558C3.24174 7.18536 2.8285 6.95193 2.4639 6.66548C2.09911 6.37933 1.80413 6.0213 1.57937 5.59188C1.35422 5.16246 1.24193 4.64288 1.24193 4.03284C1.24193 3.3485 1.38471 2.75402 1.67047 2.24981C1.95603 1.74579 2.32995 1.32561 2.79193 0.989561C3.2539 0.653516 3.77678 0.40462 4.36026 0.242671C4.94373 0.0811247 5.52741 0 6.11089 0C6.79164 0 7.44504 0.0779119 8.07128 0.233434C8.69722 0.389158 9.25353 0.641267 9.73992 0.989561C10.226 1.33826 10.6121 1.78304 10.8979 2.3245C11.1832 2.86587 11.3263 3.5226 11.3263 4.29429H8.55443C8.53002 3.89599 8.44794 3.56607 8.30839 3.30473C8.16836 3.04338 7.98302 2.83796 7.75208 2.68856C7.52114 2.53926 7.25656 2.43364 6.95894 2.37119C6.66083 2.30904 6.33575 2.27792 5.98321 2.27792C5.75217 2.27792 5.52103 2.30302 5.29029 2.35252C5.05935 2.40242 4.84959 2.48957 4.66112 2.61386C4.47264 2.73846 4.3176 2.89398 4.1962 3.08063C4.0745 3.26738 4.0139 3.50403 4.0139 3.79017C4.0139 4.05162 4.06234 4.26336 4.15972 4.42501C4.2568 4.58686 4.44842 4.73626 4.73427 4.87311C5.01964 5.01015 5.41483 5.147 5.91947 5.28385C6.42381 5.4209 7.08338 5.5951 7.8981 5.80654C8.1411 5.85644 8.47834 5.9466 8.91011 6.07733C9.34149 6.20805 9.77003 6.41658 10.1956 6.70283C10.6212 6.98928 10.9891 7.37201 11.299 7.85103C11.609 8.33035 11.764 8.9433 11.764 9.69019C11.764 10.3001 11.6483 10.8664 11.4174 11.3892C11.1864 11.912 10.8431 12.3633 10.3871 12.7427C9.93134 13.1226 9.36601 13.4182 8.69133 13.6296C8.01665 13.8411 7.23528 13.947 6.348 13.947C5.63047 13.947 4.93481 13.8566 4.26003 13.6762C3.58536 13.496 2.98952 13.2128 2.47292 12.8267C1.95603 12.4411 1.54573 11.9493 1.24193 11.3517C0.938034 10.7543 0.792017 10.0449 0.804373 9.22332H3.57614C3.57614 9.67141 3.65508 10.0512 3.81316 10.3623ZM18.9624 9.10666C18.8525 9.20593 18.7154 9.28313 18.5505 9.33885C18.3858 9.39458 18.2088 9.44102 18.0196 9.47817C17.8303 9.51522 17.6321 9.54628 17.4248 9.57085C17.2172 9.59592 17.0099 9.62668 16.8024 9.66383C16.607 9.70098 16.4148 9.75051 16.2258 9.81233C16.0364 9.87445 15.8717 9.95804 15.7317 10.0631C15.5911 10.1685 15.4782 10.3017 15.3929 10.4624C15.3074 10.6235 15.2648 10.8277 15.2648 11.0753C15.2648 11.3106 15.3074 11.5088 15.3929 11.6696C15.4782 11.8306 15.5943 11.9574 15.7408 12.0503C15.8872 12.1432 16.058 12.2082 16.2533 12.2453C16.4483 12.2824 16.6496 12.301 16.8574 12.301C17.3699 12.301 17.7663 12.2145 18.0472 12.041C18.3277 11.8677 18.5351 11.6602 18.6695 11.4188C18.8037 11.1773 18.886 10.9331 18.9167 10.6853C18.947 10.4377 18.9624 10.2396 18.9624 10.0909V9.10666ZM12.9583 7.15662C12.9949 6.53763 13.1474 6.02381 13.4159 5.61524C13.6843 5.20668 14.026 4.87871 14.441 4.63093C14.8559 4.38346 15.3225 4.20689 15.8414 4.10163C16.36 3.99667 16.8817 3.94374 17.4065 3.94374C17.8824 3.94374 18.3643 3.97799 18.8525 4.0459C19.3405 4.11411 19.7861 4.24734 20.1888 4.44528C20.5915 4.64342 20.921 4.91876 21.1774 5.27169C21.4335 5.62453 21.5617 6.09202 21.5617 6.67375V11.6696C21.5617 12.1031 21.586 12.5178 21.6349 12.9139C21.6837 13.3102 21.7691 13.6074 21.8913 13.8053H19.2552C19.2064 13.6568 19.1666 13.5052 19.1364 13.3503C19.1057 13.1956 19.0843 13.0377 19.0722 12.8767C18.6573 13.3102 18.1691 13.6134 17.6078 13.7866C17.0464 13.96 16.4729 14.0467 15.8872 14.0467C15.4356 14.0467 15.0145 13.9909 14.624 13.8796C14.2334 13.7681 13.8919 13.5949 13.599 13.3596C13.3062 13.1245 13.0773 12.8274 12.9126 12.468C12.7479 12.1091 12.6654 11.6821 12.6654 11.1867C12.6654 10.6419 12.7598 10.1931 12.9492 9.8403C13.1382 9.48746 13.3822 9.20593 13.6813 8.99521C13.9803 8.78488 14.322 8.62699 14.7065 8.52163C15.0909 8.41667 15.4782 8.33308 15.8688 8.27096C16.2593 8.20914 16.6437 8.1595 17.0221 8.12245C17.4002 8.0852 17.7359 8.02957 18.0288 7.95527C18.3216 7.88097 18.5534 7.77271 18.7244 7.6302C18.8951 7.48808 18.9745 7.28056 18.9624 7.00811C18.9624 6.72349 18.9167 6.49738 18.8251 6.3302C18.7337 6.16302 18.6115 6.03309 18.459 5.94022C18.3063 5.84734 18.1295 5.78552 17.9282 5.75456C17.7268 5.7237 17.51 5.70812 17.2784 5.70812C16.7659 5.70812 16.363 5.81947 16.0702 6.04238C15.7773 6.26519 15.6062 6.6367 15.5576 7.15662H12.9583ZM22.3306 5.81887V4.06555H23.9006V3.32724C23.9006 2.47826 24.1652 1.78322 24.6947 1.24172C25.2241 0.70042 26.0246 0.42967 27.0959 0.42967C27.3297 0.42967 27.5637 0.438801 27.7977 0.45736C28.0315 0.47582 28.2594 0.491303 28.4811 0.503412V2.4598C28.1731 2.42288 27.8532 2.40442 27.5207 2.40442C27.1634 2.40442 26.9079 2.48749 26.7543 2.65354C26.6001 2.81968 26.5233 3.09976 26.5233 3.49338V4.06555H28.3333V5.81887H26.5233V13.6074H23.9006V5.81887H22.3306ZM31.4139 4.19858V5.94566H31.4509C31.5739 5.65451 31.7401 5.3847 31.9495 5.13583C32.1588 4.88735 32.3989 4.67489 32.6698 4.49883C32.9406 4.32306 33.23 4.18664 33.538 4.08936C33.8456 3.99237 34.166 3.94374 34.4985 3.94374C34.6707 3.94374 34.8615 3.97427 35.071 4.03475V6.43704C34.9478 6.41287 34.7999 6.39163 34.6278 6.37333C34.4552 6.35513 34.2888 6.34613 34.129 6.34613C33.6488 6.34613 33.2425 6.4251 32.91 6.58267C32.5775 6.74042 32.3098 6.95573 32.1066 7.22867C31.9035 7.50162 31.7585 7.82017 31.6725 8.18413C31.5862 8.54809 31.5432 8.94258 31.5432 9.36712V13.6074H28.9205V4.19858H31.4139Z\" fill=\"#C4AD6C\"/>\n<path fill-rule=\"evenodd\" clip-rule=\"evenodd\" d=\"M61.9733 11.4835C61.7483 11.7321 61.4663 11.9326 61.1274 12.0826C60.7894 12.2342 60.3936 12.3087 59.941 12.3087C59.3575 12.3087 58.8691 12.1877 58.4774 11.9454C58.0858 11.7033 57.8899 11.2933 57.8899 10.7158C57.8899 10.087 58.1825 9.63387 58.766 9.35944C59.351 9.08352 60.1417 8.94635 61.1371 8.94635H62.6909V9.53677C62.6779 9.91613 62.612 10.2731 62.4926 10.6084C62.3724 10.942 62.2 11.2347 61.9733 11.4835ZM66.4859 12.0658H64.4088C64.3186 12.0658 64.2446 11.9937 64.2446 11.9037V7.82503C64.2446 6.51437 63.9391 5.53745 63.3279 4.89496C62.7169 4.25336 61.7214 3.94373 60.3408 3.94373H54.4013C54.6508 4.12255 54.8678 4.3095 55.0806 4.52601C55.3156 4.76503 55.5277 5.02419 55.7178 5.30249H60.8381C61.3517 5.38193 61.7678 5.59199 62.0839 5.85829C62.4885 6.20007 62.6909 6.70449 62.6909 7.37267V7.64779H62.0928C61.5224 7.64779 60.8942 7.67427 60.2108 7.72714C59.5265 7.7801 58.8895 7.91092 58.2978 8.12019C57.7079 8.33035 57.2122 8.65119 56.8148 9.08352C56.415 9.51584 56.2167 10.1127 56.2167 10.8739C56.2167 11.319 56.3086 11.7121 56.4947 12.0529C56.6808 12.3946 56.9302 12.6794 57.2423 12.9088C57.5543 13.1374 57.92 13.3121 58.3385 13.4301C58.7569 13.548 59.2039 13.6074 59.6826 13.6074C60.4001 13.6074 61.0136 13.4559 61.5264 13.1543C62.0091 12.8695 62.4 12.5085 62.6998 12.0714C62.7851 12.9312 63.5255 13.6065 64.4161 13.6065H67.1417L66.4859 12.0658Z\" fill=\"#1E2446\"/>\n<path fill-rule=\"evenodd\" clip-rule=\"evenodd\" d=\"M41.8073 9.10665C41.6975 9.20592 41.5603 9.28312 41.3955 9.33884C41.2308 9.39457 41.0537 9.44101 40.8646 9.47816C40.6753 9.51521 40.4771 9.54627 40.2697 9.57084C40.0621 9.59591 39.8548 9.62667 39.6473 9.66382C39.4519 9.70097 39.2598 9.7505 39.0708 9.81232C38.8814 9.87444 38.7167 9.95803 38.5765 10.0631C38.4361 10.1685 38.3232 10.3017 38.2379 10.4624C38.1524 10.6235 38.1097 10.8277 38.1097 11.0753C38.1097 11.3106 38.1524 11.5088 38.2379 11.6696C38.3232 11.8306 38.4392 11.9574 38.5857 12.0503C38.7321 12.1432 38.9029 12.2082 39.0982 12.2453C39.2933 12.2824 39.4946 12.301 39.7024 12.301C40.2148 12.301 40.6113 12.2145 40.8921 12.041C41.1727 11.8677 41.38 11.6602 41.5145 11.4188C41.6487 11.1773 41.731 10.9331 41.7617 10.6853C41.7919 10.4377 41.8073 10.2396 41.8073 10.0909V9.10665ZM35.8032 7.15661C35.8399 6.53762 35.9924 6.0238 36.2609 5.61523C36.5291 5.20667 36.8709 4.8787 37.2859 4.63092C37.7007 4.38345 38.1674 4.20688 38.6864 4.10162C39.205 3.99666 39.7266 3.94373 40.2513 3.94373C40.7274 3.94373 41.2092 3.97798 41.6975 4.04589C42.1854 4.1141 42.6311 4.24733 43.0338 4.44527C43.4365 4.64341 43.7659 4.91875 44.0223 5.27168C44.2785 5.62452 44.4067 6.09201 44.4067 6.67374V11.6696C44.4067 12.1031 44.431 12.5178 44.4798 12.9139C44.5286 13.3102 44.614 13.6073 44.7361 13.8053H42.1002C42.0514 13.6568 42.0116 13.5052 41.9814 13.3503C41.9507 13.1956 41.9292 13.0377 41.9172 12.8767C41.5023 13.3102 41.014 13.6134 40.4527 13.7866C39.8914 13.96 39.3178 14.0467 38.7321 14.0467C38.2805 14.0467 37.8595 13.9909 37.469 13.8796C37.0783 13.7681 36.7367 13.5949 36.4439 13.3596C36.151 13.1245 35.9222 12.8274 35.7576 12.468C35.5928 12.1091 35.5103 11.6821 35.5103 11.1867C35.5103 10.6419 35.6048 10.1931 35.7942 9.84029C35.9831 9.48745 36.2271 9.20592 36.5263 8.99519C36.8252 8.78487 37.167 8.62698 37.5515 8.52162C37.9358 8.41665 38.3232 8.33306 38.7138 8.27095C39.1043 8.20913 39.4886 8.15949 39.867 8.12244C40.2451 8.08519 40.5809 8.02956 40.8738 7.95526C41.1666 7.88096 41.3984 7.7727 41.5694 7.63019C41.7401 7.48807 41.8194 7.28055 41.8073 7.0081C41.8073 6.72348 41.7617 6.49737 41.6701 6.33019C41.5786 6.16301 41.4564 6.03308 41.3039 5.9402C41.1512 5.84733 40.9745 5.78551 40.7731 5.75455C40.5718 5.72369 40.355 5.70811 40.1234 5.70811C39.6108 5.70811 39.208 5.81946 38.9152 6.04237C38.6223 6.26518 38.4511 6.63669 38.4026 7.15661H35.8032Z\" fill=\"#C4AD6C\"/>\n</svg>\n\n",
    126: "<svg viewBox=\"0 0 86 18\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n<g clip-path=\"url(#clip0)\">\n<path fill-rule=\"evenodd\" clip-rule=\"evenodd\" d=\"M0 0L7.14286 17.6571H12.0857L19.2571 0H13.5714L9.62857 10.9143L5.68571 0H0ZM85.4571 12.7143H79.6286L76.2 17.7143H81.7714L85.4571 12.7143ZM80.8571 5.05714H75L74.9714 5.02857L71.8857 10.0571H75.0572L76.5143 7.82857H78.9714C79.7143 7 80.8286 5.57143 80.8571 5.05714ZM76.2 12.7143H70.3429L70.3143 12.6857L66.7143 17.7143H72.8286H72.8571L76.2 12.7143ZM22.8 6.8C22.8857 4.94286 24.4286 3.45714 26.3429 3.45714C28.2571 3.45714 29.8 4.94286 29.8857 6.8H22.8ZM47.7429 4.8C46.3429 4.28571 44.8 4.48571 43.5714 5.28571C42.3429 6.08571 41.5429 7.45714 41.4571 8.91429L36.2 12.1714V0.0285714H41.2V2.17143C42.5714 0.771428 44.4571 0 46.4286 0C48.3714 0 50.2571 0.771428 51.6571 2.17143L47.7429 4.8ZM17.8571 7.85714C18.0286 5.25714 19.3714 2.8 21.6286 1.4C26.5429 -1.71429 33.9714 0.571429 34.8 6.82857V10.5143L22.8857 10.5429C23.0286 11.8571 24.1429 13.2 25.3714 13.6857H33.8L27.3714 17.7143C21.4571 17.7143 17.2857 13.8571 17.8571 7.85714Z\" fill=\"#102A83\"/>\n<path fill-rule=\"evenodd\" clip-rule=\"evenodd\" d=\"M47.5143 6.42857C46.8286 9.34286 47.6 12.4 49.5714 14.6286C51.4857 16.8 54.0857 17.7143 56.6571 17.7143C61.4 17.7143 66.0286 14.3714 66.0286 8.71428C66.0286 3.97143 62.2286 0.0857143 57.4857 0L47.5143 6.42857ZM85.3714 12.1714C85.4857 12.3429 85.5143 12.5429 85.4857 12.7429H79.6286L77.0286 8.25714C76.9143 8.05714 76.7143 7.94286 76.4857 7.91429C76.5143 7.8 76.6571 7.65714 76.8 7.65714H82.1143C82.4 7.65714 82.6571 7.8 82.8 8.02857L85.3714 12.1714ZM80.7429 4.51429C80.8571 4.68571 80.8857 4.85714 80.8571 5.08571H75L72.4 0.628571C72.2857 0.428571 72.0857 0.285714 71.8571 0.285714C71.8857 0.171429 72.0286 0.0285714 72.1429 0.0285714H77.4571C77.7429 0.0285714 78 0.171429 78.1429 0.4L80.7429 4.51429ZM76.0857 12.1714C76.2 12.3429 76.2286 12.5429 76.2 12.7429H70.3429L67.7143 8.22857C67.6 8.02857 67.4 7.91429 67.1714 7.88571C67.2 7.77143 67.3429 7.62857 67.4857 7.62857H69.1429C69.5714 7.62857 70.1143 7.65714 70.4857 8.22857L71.7143 10.0286H74.7714L76.0857 12.1714ZM36.2286 13.7143L41.3429 10.4286V17.7143H36.2286V13.7143ZM52.4 8.8C52.4 14.6 61.0286 14.6 61.0286 8.8C61.0571 3 52.4 3 52.4 8.8Z\" fill=\"#009EE0\"/>\n</g>\n<defs>\n<clipPath id=\"clip0\">\n<rect width=\"85.7143\" height=\"18\" fill=\"white\"/>\n</clipPath>\n</defs>\n</svg>\n\n",
    5: "<svg viewBox=\"0 0 86 18\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n<g clip-path=\"url(#clip0)\">\n<path fill-rule=\"evenodd\" clip-rule=\"evenodd\" d=\"M0 0L7.14286 17.6571H12.0857L19.2571 0H13.5714L9.62857 10.9143L5.68571 0H0ZM85.4571 12.7143H79.6286L76.2 17.7143H81.7714L85.4571 12.7143ZM80.8571 5.05714H75L74.9714 5.02857L71.8857 10.0571H75.0572L76.5143 7.82857H78.9714C79.7143 7 80.8286 5.57143 80.8571 5.05714ZM76.2 12.7143H70.3429L70.3143 12.6857L66.7143 17.7143H72.8286H72.8571L76.2 12.7143ZM22.8 6.8C22.8857 4.94286 24.4286 3.45714 26.3429 3.45714C28.2571 3.45714 29.8 4.94286 29.8857 6.8H22.8ZM47.7429 4.8C46.3429 4.28571 44.8 4.48571 43.5714 5.28571C42.3429 6.08571 41.5429 7.45714 41.4571 8.91429L36.2 12.1714V0.0285714H41.2V2.17143C42.5714 0.771428 44.4571 0 46.4286 0C48.3714 0 50.2571 0.771428 51.6571 2.17143L47.7429 4.8ZM17.8571 7.85714C18.0286 5.25714 19.3714 2.8 21.6286 1.4C26.5429 -1.71429 33.9714 0.571429 34.8 6.82857V10.5143L22.8857 10.5429C23.0286 11.8571 24.1429 13.2 25.3714 13.6857H33.8L27.3714 17.7143C21.4571 17.7143 17.2857 13.8571 17.8571 7.85714Z\" fill=\"#102A83\"/>\n<path fill-rule=\"evenodd\" clip-rule=\"evenodd\" d=\"M47.5143 6.42857C46.8286 9.34286 47.6 12.4 49.5714 14.6286C51.4857 16.8 54.0857 17.7143 56.6571 17.7143C61.4 17.7143 66.0286 14.3714 66.0286 8.71428C66.0286 3.97143 62.2286 0.0857143 57.4857 0L47.5143 6.42857ZM85.3714 12.1714C85.4857 12.3429 85.5143 12.5429 85.4857 12.7429H79.6286L77.0286 8.25714C76.9143 8.05714 76.7143 7.94286 76.4857 7.91429C76.5143 7.8 76.6571 7.65714 76.8 7.65714H82.1143C82.4 7.65714 82.6571 7.8 82.8 8.02857L85.3714 12.1714ZM80.7429 4.51429C80.8571 4.68571 80.8857 4.85714 80.8571 5.08571H75L72.4 0.628571C72.2857 0.428571 72.0857 0.285714 71.8571 0.285714C71.8857 0.171429 72.0286 0.0285714 72.1429 0.0285714H77.4571C77.7429 0.0285714 78 0.171429 78.1429 0.4L80.7429 4.51429ZM76.0857 12.1714C76.2 12.3429 76.2286 12.5429 76.2 12.7429H70.3429L67.7143 8.22857C67.6 8.02857 67.4 7.91429 67.1714 7.88571C67.2 7.77143 67.3429 7.62857 67.4857 7.62857H69.1429C69.5714 7.62857 70.1143 7.65714 70.4857 8.22857L71.7143 10.0286H74.7714L76.0857 12.1714ZM36.2286 13.7143L41.3429 10.4286V17.7143H36.2286V13.7143ZM52.4 8.8C52.4 14.6 61.0286 14.6 61.0286 8.8C61.0571 3 52.4 3 52.4 8.8Z\" fill=\"#009EE0\"/>\n</g>\n<defs>\n<clipPath id=\"clip0\">\n<rect width=\"85.7143\" height=\"18\" fill=\"white\"/>\n</clipPath>\n</defs>\n</svg>\n",
    95: "<svg viewBox=\"0 0 78 18\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n<path d=\"M0.768921 7.04191C0.840871 6.78779 0.906698 6.53214 0.985536 6.28031C1.38563 5.00131 2.06812 3.8286 2.98253 2.84891C3.00635 2.82761 3.03196 2.8084 3.05907 2.7915C3.27799 3.2255 3.48006 3.66945 3.7181 4.09273C4.18744 4.90854 4.7339 5.67749 5.34999 6.389C5.44567 6.50152 5.53523 6.61863 5.62784 6.73421C5.36224 6.74339 5.09587 6.74569 4.83103 6.7633C3.91865 6.82376 3.00703 6.885 2.0954 6.95542C1.65299 6.98986 1.2121 7.04497 0.770451 7.09013L0.768921 7.04191Z\" fill=\"#40B83C\"/>\n<path d=\"M9.38149 3.84932C9.07532 3.49646 8.78675 3.13212 8.46833 2.79304C7.81083 2.09267 7.13956 1.40609 6.4721 0.714908C6.42941 0.676807 6.38329 0.642729 6.33433 0.613106L6.35499 0.558761C6.71934 0.452367 7.08138 0.336022 7.44879 0.243405C7.9463 0.118353 8.45499 0.0429716 8.96739 0.01837C8.98403 0.0146089 9.00002 0.00841925 9.01485 0H10.0206C10.14 0.0145431 10.2594 0.02679 10.3781 0.0443948C10.4967 0.0619996 10.6077 0.0857278 10.721 0.10716C10.6613 0.206665 10.5985 0.303874 10.5426 0.405676C10.1491 1.14181 9.84465 1.92216 9.63561 2.73027C9.53534 3.09921 9.46492 3.47656 9.38149 3.84932Z\" fill=\"#40B83D\"/>\n<path d=\"M77.3115 2.90867C77.2747 3.12988 77.2349 3.35032 77.202 3.57229C77.1255 4.08666 77.0489 4.60179 76.9724 5.11616C76.9688 5.12902 76.9642 5.14157 76.9586 5.15366H74.1265C74.2398 4.37982 74.3562 3.60827 74.4679 2.82141H77.3061L77.3115 2.90867Z\" fill=\"#40B83C\"/>\n<path d=\"M69.3855 6.30178C69.5554 5.15568 69.7263 4.00423 69.8983 2.84741H72.7511C72.1566 6.8562 71.5618 10.8619 70.9669 14.8646H68.6981V13.5243L68.545 13.6552C67.9603 14.1627 67.3204 14.5821 66.584 14.8363C65.9366 15.07 65.2398 15.1328 64.561 15.0184C63.654 14.8592 63.0845 14.312 62.812 13.444C62.6153 12.8194 62.5908 12.1757 62.6229 11.5304C62.6624 10.6715 62.7985 9.81988 63.0286 8.99148C63.1731 8.43369 63.4101 7.90407 63.7297 7.42466C64.2081 6.73577 64.8741 6.35306 65.6892 6.21222C66.3659 6.09358 67.0471 6.11654 67.7276 6.16017C68.2764 6.19538 68.8229 6.25279 69.3855 6.30178ZM69.0939 8.11201C68.8527 8.11201 68.6239 8.10742 68.395 8.11201C67.922 8.12425 67.4482 8.12349 66.9767 8.161C66.7556 8.17082 66.5426 8.24677 66.3652 8.379C66.1878 8.51123 66.0542 8.69367 65.9816 8.90269C65.911 9.07692 65.853 9.25598 65.8079 9.43849C65.6393 10.1734 65.5318 10.9209 65.4864 11.6735C65.4748 11.9022 65.4889 12.1315 65.5285 12.3571C65.5668 12.5966 65.7114 12.7069 65.9502 12.7268C66.3553 12.7563 66.7613 12.685 67.1321 12.5193C67.6128 12.3127 68.0207 11.9958 68.4287 11.6774C68.4858 11.6347 68.5332 11.5805 68.5677 11.5182C68.6023 11.456 68.6233 11.3871 68.6292 11.3161C68.7517 10.4328 68.8841 9.55101 69.012 8.66847C69.041 8.48554 69.0663 8.30643 69.0939 8.11201Z\" fill=\"#40B83C\"/>\n<path d=\"M22.174 14.8654C22.174 14.8309 22.174 14.8057 22.1794 14.7804C22.2904 14.0357 22.4021 13.2909 22.5154 12.5331H22.6455C23.9827 12.5331 25.3207 12.537 26.6579 12.5278C26.978 12.5257 27.2975 12.4978 27.6132 12.4443C28.1865 12.3464 28.4368 12.08 28.5378 11.5059C28.5616 11.3696 28.5759 11.2317 28.5807 11.0934C28.592 10.974 28.5647 10.8542 28.5026 10.7517C28.4406 10.6491 28.3472 10.5692 28.2362 10.5239C28.0181 10.4251 27.793 10.341 27.5688 10.2552C26.775 9.94905 25.9774 9.65207 25.1868 9.33671C24.7438 9.16508 24.3394 8.90696 23.9973 8.57741C23.5462 8.14156 23.2814 7.54789 23.2586 6.92103C23.2005 6.08759 23.3656 5.2537 23.737 4.50535C24.0723 3.84096 24.618 3.41538 25.3123 3.16968C25.8309 2.98301 26.3763 2.88118 26.9273 2.8681C28.3663 2.83825 29.8053 2.83366 31.2443 2.82141C31.5941 2.82141 31.9432 2.82141 32.3113 2.82141C32.1942 3.60521 32.0817 4.37905 31.9623 5.15979H31.823C30.3358 5.15979 28.8486 5.15979 27.3621 5.15979C27.195 5.1636 27.0287 5.18515 26.8661 5.22408C26.7547 5.24769 26.6508 5.29809 26.5633 5.37091C26.4758 5.44373 26.4074 5.53678 26.364 5.642C26.241 5.92319 26.1801 6.22762 26.1856 6.53449C26.1834 6.64154 26.214 6.74672 26.2732 6.83592C26.3324 6.92512 26.4175 6.99408 26.5171 7.03355C26.7681 7.1476 27.0253 7.24863 27.2825 7.34508C28.0563 7.63288 28.8348 7.9069 29.6048 8.20465C30.0711 8.37766 30.4957 8.64708 30.8509 8.99533C31.258 9.40251 31.4931 9.95056 31.5076 10.5262C31.5538 11.3713 31.4142 12.2162 31.0989 13.0016C30.7659 13.8221 30.1391 14.315 29.3055 14.5684C28.7082 14.748 28.0884 14.8418 27.4647 14.847C25.7187 14.8677 23.9728 14.8661 22.2276 14.873C22.2096 14.8716 22.1917 14.869 22.174 14.8654Z\" fill=\"#40B83C\"/>\n<path d=\"M60.8747 12.6747C60.9987 13.2334 61.1258 13.8044 61.2574 14.3984C61.0745 14.4612 60.8694 14.5408 60.6589 14.602C59.8553 14.8252 59.0314 14.9675 58.1996 15.0268C57.6006 15.0804 56.9984 15.0865 56.3985 15.0452C55.7862 14.9985 55.193 14.8921 54.6304 14.6426C53.7172 14.2377 53.1891 13.5281 52.9916 12.5599C52.8607 11.9177 52.8699 11.2716 52.9388 10.6241C52.9942 10.0368 53.107 9.45643 53.2756 8.89117C53.4547 8.3148 53.7096 7.77977 54.1252 7.33276C54.573 6.85131 55.134 6.56734 55.7586 6.38976C56.2974 6.24737 56.8504 6.16548 57.4073 6.14559C58.0369 6.1092 58.6684 6.12379 59.2956 6.18922C59.8038 6.23328 60.3019 6.35727 60.7714 6.55662C61.4962 6.88422 61.9195 7.43074 61.9854 8.23367C62.0391 8.78779 61.9587 9.34669 61.7511 9.86326C61.4733 10.5453 60.9421 10.9463 60.2639 11.1813C59.7586 11.3476 59.2341 11.4489 58.7032 11.4829C57.7847 11.5594 56.8585 11.6191 55.9354 11.6865C55.9071 11.6865 55.878 11.6942 55.8505 11.698C55.8022 12.2399 56.1429 12.6854 56.6878 12.7964C57.1019 12.8813 57.5214 12.8676 57.9401 12.853C58.5256 12.8331 59.1119 12.8086 59.7006 12.7765C60.094 12.7489 60.492 12.7068 60.8747 12.6747ZM56.0166 9.98879C56.6075 9.93597 57.18 9.88852 57.7526 9.8357C57.9987 9.81379 58.2434 9.77879 58.4858 9.73084C58.6071 9.71168 58.7221 9.6641 58.8215 9.592C58.9209 9.5199 59.0018 9.42532 59.0576 9.31598C59.1664 9.10022 59.2143 8.85887 59.1961 8.61791C59.1801 8.37374 59.0905 8.26199 58.8479 8.22831C58.2822 8.13969 57.7053 8.15239 57.144 8.26582C56.9738 8.30041 56.8138 8.3736 56.6763 8.47976C56.5389 8.58593 56.4276 8.72222 56.3511 8.87816C56.1712 9.22183 56.0923 9.59842 56.0166 9.98879Z\" fill=\"#40B83C\"/>\n<path d=\"M44.6171 12.6494C44.562 13.0268 44.5092 13.3942 44.4548 13.7608C44.4158 14.031 44.3721 14.3004 44.3354 14.5706C44.3358 14.5955 44.3275 14.6197 44.312 14.6391C44.2965 14.6585 44.2747 14.6719 44.2504 14.677C43.7118 14.8459 43.156 14.954 42.5933 14.9993C42.0491 15.0391 41.5026 15.0659 40.9568 15.0643C40.2511 15.0643 39.5561 14.9664 38.8902 14.6985C37.9808 14.3303 37.4405 13.6567 37.2437 12.7007C37.1213 12.106 37.1312 11.5066 37.1955 10.9065C37.2625 10.2407 37.3969 9.58343 37.5966 8.94476C37.8025 8.30333 38.0987 7.71242 38.5855 7.23174C39.0915 6.73191 39.7122 6.45483 40.3958 6.30251C41.1413 6.13718 41.8968 6.11498 42.6561 6.13871C43.3298 6.15454 44.0017 6.21695 44.6668 6.32547C44.9493 6.3737 45.2287 6.43799 45.5188 6.49693C45.492 6.69058 45.4682 6.86586 45.4422 7.04115C45.3794 7.46596 45.3121 7.89077 45.2554 8.31635C45.2432 8.4036 45.2134 8.42044 45.133 8.41968C44.193 8.40513 43.2531 8.38906 42.3132 8.38677C42.0766 8.39086 41.8409 8.41648 41.609 8.46331C41.0693 8.56052 40.7119 8.88582 40.5052 9.38641C40.3403 9.80744 40.2372 10.2501 40.199 10.7006C40.1638 11.0443 40.1485 11.3895 40.1325 11.7355C40.1303 11.8383 40.1398 11.941 40.1608 12.0417C40.245 12.4925 40.4669 12.716 40.9308 12.7757C41.2097 12.8144 41.4913 12.8308 41.7728 12.8247C42.5045 12.8056 43.2363 12.7704 43.9672 12.7336C44.1793 12.7145 44.3913 12.6762 44.6171 12.6494Z\" fill=\"#40B83C\"/>\n<path d=\"M49.3359 7.98032C49.7133 7.69788 50.073 7.41237 50.4496 7.15289C50.9563 6.80309 51.5029 6.52295 52.1183 6.42727C52.4952 6.37933 52.8749 6.35606 53.2549 6.35762C52.7505 7.20494 52.3364 8.07753 52.0907 9.02819C51.9078 9.02819 51.7294 9.02819 51.5549 9.02819C50.7543 9.04579 50.0738 9.36115 49.4798 9.88011C49.4227 9.934 49.385 10.0053 49.3727 10.0829C49.2196 11.1163 49.0765 12.1496 48.9303 13.1852C48.8542 13.7266 48.7777 14.2675 48.7006 14.8079C48.7006 14.8255 48.6914 14.8424 48.6861 14.8653H45.8364C46.2518 12.0317 46.6674 9.19964 47.0833 6.3691H49.3359V7.98032Z\" fill=\"#40B83C\"/>\n<path d=\"M76.791 6.36987C76.3746 9.20552 75.9587 12.0376 75.5433 14.8661H72.7059C73.1213 12.031 73.5369 9.19889 73.9528 6.36987H76.791Z\" fill=\"#40B83C\"/>\n<path d=\"M33.5835 6.36914H36.4155C35.9992 9.2053 35.5833 12.0374 35.1679 14.8654H32.3335C32.7499 12.0323 33.1666 9.20019 33.5835 6.36914Z\" fill=\"#40B83C\"/>\n<path d=\"M0.899803 11.2655C1.63527 10.6457 2.43005 10.0998 3.27262 9.63592C4.20219 9.10645 5.19419 8.69504 6.22563 8.41124C6.69025 8.28801 7.15639 8.16095 7.64397 8.20381C7.77648 8.21675 7.90587 8.25194 8.02668 8.30791C8.06759 8.32265 8.10494 8.34583 8.13631 8.37595C8.16768 8.40607 8.19236 8.44246 8.20874 8.48274C8.22513 8.52302 8.23286 8.5663 8.23143 8.60976C8.22999 8.65322 8.21943 8.6959 8.20043 8.73501C8.12882 8.88906 8.03522 9.0319 7.92258 9.15906C7.39291 9.7714 6.85099 10.3837 6.32131 10.9961C6.14756 11.1966 5.98835 11.4086 5.82149 11.6153L5.16552 11.6582H3.61247C3.552 11.6513 3.49077 11.6413 3.42953 11.636C3.0805 11.6061 2.72917 11.5923 2.38167 11.5449C1.90328 11.4783 1.42871 11.3872 0.952618 11.3053C0.932717 11.3007 0.915877 11.2785 0.899803 11.2655Z\" fill=\"#0F6828\"/>\n<path d=\"M5.62631 6.72957C5.53369 6.61476 5.44414 6.49994 5.34846 6.38436C4.73237 5.67285 4.1859 4.9039 3.71657 4.08809C3.47852 3.66557 3.27645 3.22163 3.05754 2.78687C3.36371 2.86341 3.66988 2.9277 3.96534 3.01649C5.38798 3.4205 6.74035 4.04002 7.9754 4.85351C8.4446 5.16734 8.90769 5.49417 9.28121 5.92511C9.40772 6.07389 9.50883 6.2425 9.5805 6.42417C9.67311 6.65379 9.56519 6.84209 9.31949 6.89108C9.1624 6.91953 9.00198 6.92468 8.84339 6.90638C7.80624 6.79463 6.76603 6.7533 5.72428 6.73799C5.69137 6.73646 5.65922 6.73187 5.62631 6.72957Z\" fill=\"#106828\"/>\n<path d=\"M6.69408 17.5397C6.67954 17.4119 6.65734 17.2848 6.65351 17.157C6.62441 16.3415 6.67569 15.5252 6.8066 14.7199C6.98188 13.6529 7.27045 12.6195 7.7496 11.6474C7.87075 11.4161 8.00917 11.1943 8.1637 10.9838C8.23512 10.8926 8.3222 10.8149 8.42088 10.7542C8.67577 10.5835 8.91382 10.6532 9.03322 10.9379C9.08263 11.0703 9.11678 11.208 9.13502 11.3482C9.28473 12.3034 9.48271 13.2504 9.72823 14.1856C9.73133 14.2033 9.73286 14.2212 9.73282 14.2392C9.60499 14.4014 9.481 14.566 9.35011 14.7252C8.9827 15.1707 8.61683 15.6169 8.24254 16.0571C7.87892 16.4785 7.48163 16.8696 7.0546 17.2266C6.92907 17.3254 6.81272 17.4341 6.69408 17.5397Z\" fill=\"#106828\"/>\n<path d=\"M9.38148 3.84934C9.46492 3.47658 9.53457 3.09923 9.63408 2.73029C9.84409 1.92205 10.1496 1.14169 10.5442 0.405694C10.6 0.303892 10.6628 0.206683 10.7225 0.107178C10.933 0.572556 11.1619 1.03105 11.3517 1.50561C11.6989 2.37821 11.9394 3.28954 12.0681 4.21981C12.1493 4.80459 12.2113 5.39321 12.1393 5.98029C12.1142 6.17799 12.0566 6.37016 11.9686 6.549C11.8523 6.78398 11.6364 6.81384 11.4328 6.64391C11.3465 6.57121 11.2713 6.48639 11.2093 6.39209C10.6521 5.52945 10.0497 4.69896 9.4121 3.89297C9.40091 3.87915 9.39068 3.86457 9.38148 3.84934Z\" fill=\"#106828\"/>\n<path d=\"M0.89981 11.2655C0.91818 11.2785 0.93502 11.3007 0.954921 11.3045C1.43102 11.3864 1.90558 11.4775 2.38397 11.5441C2.73147 11.5916 3.0828 11.6054 3.43184 11.6352C3.49307 11.6406 3.55431 11.6505 3.61477 11.6574C3.64485 11.6673 3.6759 11.674 3.70739 11.6773C4.16256 11.6773 4.61799 11.6773 5.07367 11.6773C5.10492 11.674 5.13571 11.6673 5.16553 11.6574L5.8215 11.6145C5.66229 11.8406 5.50257 12.0661 5.34234 12.2912C4.63202 13.2862 3.9906 14.3195 3.37979 15.3758L3.3132 15.4891C3.28641 15.4662 3.26191 15.447 3.23665 15.4256C2.10752 14.3085 1.29505 12.9118 0.882205 11.378C0.880985 11.3397 0.886957 11.3016 0.89981 11.2655Z\" fill=\"#40B83C\"/>\n<path d=\"M14.3062 16.5768C14.2767 16.5652 14.248 16.5514 14.2205 16.5355C12.8013 15.6156 11.651 14.3363 10.8863 12.8278C10.7411 12.5661 10.6507 12.2775 10.6207 11.9797C10.5916 11.5281 10.8649 11.3276 11.2774 11.5204C11.5836 11.662 11.8699 11.8457 12.1745 11.9912C12.7218 12.253 13.2752 12.5002 13.8255 12.7566C13.8485 12.7673 13.8699 12.7803 13.8914 12.7926C13.9373 13 13.9909 13.2059 14.0284 13.4149C14.0957 13.7876 14.1593 14.1604 14.2128 14.5347C14.2465 14.7743 14.2657 15.0154 14.2817 15.2572C14.3009 15.542 14.3139 15.8283 14.3208 16.1138C14.3269 16.2653 14.3124 16.4215 14.3062 16.5768Z\" fill=\"#106828\"/>\n<path d=\"M16.8895 4.00317C16.8245 4.17233 16.7678 4.34455 16.6951 4.50989C16.1379 5.77666 15.3885 6.91179 14.3629 7.8502C14.1493 8.04188 13.9187 8.21379 13.674 8.3638C13.5439 8.43483 13.3995 8.47589 13.2515 8.48397C13.2111 8.48948 13.1701 8.48622 13.1311 8.47443C13.0922 8.46263 13.0562 8.44257 13.0257 8.41562C12.9952 8.38867 12.9708 8.35546 12.9543 8.31825C12.9378 8.28104 12.9295 8.24071 12.93 8.2C12.9192 8.0665 12.9314 7.93214 12.966 7.80275C13.23 6.88423 13.4551 5.9619 13.6311 5.02578C13.635 5.01183 13.6406 4.99845 13.648 4.98598C13.7015 4.96608 13.7574 4.95 13.8102 4.92704C14.4624 4.63924 15.1191 4.35757 15.8149 4.19223C16.1685 4.10804 16.5313 4.06441 16.8895 4.00317Z\" fill=\"#106828\"/>\n<path d=\"M18.2428 10.7558C17.8387 10.8737 17.4399 11.0122 17.0304 11.1033C16.2336 11.2807 15.4152 11.3413 14.6009 11.2832C14.1539 11.2518 13.7077 11.2066 13.2813 11.062C13.1129 11.0051 12.9545 10.9219 12.8121 10.8155C12.5542 10.6203 12.5687 10.3562 12.8305 10.1641C12.9068 10.1085 12.9893 10.0617 13.0762 10.0248C13.8887 9.68811 14.6778 9.29765 15.4383 8.85602C15.4543 8.84843 15.471 8.84229 15.4881 8.83765C15.5125 8.85219 15.5355 8.86979 15.5608 8.88281C16.1179 9.15698 16.6524 9.47513 17.159 9.83423C17.5484 10.1067 17.9113 10.4152 18.2428 10.7558Z\" fill=\"#106829\"/>\n<path d=\"M6.69408 17.5397C6.81272 17.4341 6.92906 17.3254 7.05 17.2228C7.47703 16.8658 7.87432 16.4747 8.23794 16.0532C8.61223 15.6131 8.97811 15.1669 9.34551 14.7214C9.47716 14.5622 9.60116 14.3976 9.72822 14.2354C9.82773 14.5507 9.91422 14.8699 10.0283 15.1799C10.3421 16.0356 10.6674 16.8876 10.9889 17.7402C11.0034 17.78 11.0195 17.8168 11.0409 17.8765C10.8542 17.9025 10.6796 17.9324 10.5051 17.953C9.2108 18.0946 7.95167 17.9025 6.70862 17.5565C6.7025 17.5527 6.69867 17.5451 6.69408 17.5397Z\" fill=\"#40B83D\"/>\n<path d=\"M36.597 5.15664H33.7595C33.8736 4.3782 33.9892 3.60665 34.1009 2.82898H36.9383C36.8243 3.60436 36.711 4.3759 36.597 5.15664Z\" fill=\"#40B83C\"/>\n<path d=\"M16.8895 4.00319C16.5313 4.06442 16.1685 4.10805 15.818 4.19225C15.1222 4.35758 14.4654 4.63926 13.8133 4.92706C13.7605 4.95002 13.7046 4.96609 13.651 4.986C13.6908 4.70508 13.736 4.42494 13.7689 4.14403C13.8355 3.57302 13.8998 3.00125 13.9557 2.42947C13.9894 2.08121 14.0054 1.73217 14.0322 1.38314C14.0322 1.34487 14.0414 1.3066 14.0491 1.24536C14.2442 1.37395 14.4249 1.48724 14.6002 1.6097C15.4889 2.2308 16.2567 3.009 16.8658 3.90598C16.8807 3.93074 16.8943 3.95629 16.9064 3.98252L16.8911 4.00472L16.8895 4.00319Z\" fill=\"#41B83D\"/>\n<path d=\"M14.3062 16.5768C14.3124 16.4237 14.3269 16.2653 14.3238 16.1099C14.317 15.8244 14.3039 15.5381 14.2848 15.2534C14.2687 15.0115 14.2496 14.7704 14.2159 14.5308C14.1623 14.1565 14.0988 13.7837 14.0315 13.411C13.9939 13.202 13.9404 12.9961 13.8944 12.7887L14.754 13.0995C15.484 13.3565 16.227 13.5749 16.9799 13.7539C17.0074 13.7608 17.0342 13.7707 17.0916 13.7883C16.8406 14.1251 16.6117 14.4573 16.3576 14.7696C15.8007 15.4488 15.1442 16.0398 14.4103 16.5224C14.3769 16.5429 14.3421 16.561 14.3062 16.5768Z\" fill=\"#41B83D\"/>\n<path d=\"M18.2428 10.7558C17.9107 10.4162 17.5473 10.1087 17.1574 9.83725C16.6508 9.47815 16.1164 9.16 15.5592 8.88583C15.534 8.87282 15.511 8.85521 15.4865 8.84067C15.6702 8.72356 15.8524 8.60492 16.0376 8.49164C16.7538 8.04685 17.4438 7.56128 18.1043 7.03733C18.1303 7.01743 18.1563 6.99906 18.1969 6.96997C18.226 7.15367 18.2574 7.32436 18.2796 7.49582C18.3796 8.20273 18.4091 8.91784 18.3676 9.63059C18.3439 9.98957 18.2987 10.347 18.2627 10.7022C18.2583 10.7208 18.2517 10.7388 18.2428 10.7558Z\" fill=\"#41B83D\"/>\n<path d=\"M16.8865 4.00389L16.9018 3.98169L16.8865 4.00389Z\" fill=\"#106828\"/>\n<path d=\"M5.16322 11.6575C5.13341 11.6674 5.10261 11.674 5.07137 11.6774C4.6162 11.6774 4.16077 11.6774 3.70509 11.6774C3.6736 11.674 3.64255 11.6674 3.61247 11.6575H5.16322Z\" fill=\"#53A75B\"/>\n</svg>\n\n",
    94: "<svg viewBox=\"0 0 45 18\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n<path d=\"M0.311401 12.7578C0.702304 12.0809 1.30522 11.8479 2.06384 11.8545C4.0305 11.8733 5.99606 11.8612 8.0091 11.8612V9.95635C6.8143 9.95635 5.65153 9.95635 4.48766 9.95635C2.98588 9.95083 2.57842 9.54336 2.57731 8.05594C2.57731 6.98372 2.56737 5.9115 2.57731 4.83928C2.58836 3.98349 3.02895 3.38057 3.8483 3.364C6.38806 3.31431 8.91899 3.34634 11.4466 3.34634C11.6531 5.01043 11.0502 5.71273 9.47001 5.71605C8.27964 5.71605 7.08926 5.71605 5.86244 5.71605V7.60983C7.04399 7.60983 8.18136 7.60983 9.32646 7.60983C10.7454 7.61645 11.2456 8.12662 11.249 9.55993C11.249 10.6321 11.2545 11.7044 11.249 12.7766C11.2434 13.8488 10.8724 14.2353 9.74055 14.2353C7.47243 14.2497 5.20321 14.2353 2.93398 14.2353C2.06163 14.2353 1.18928 14.243 0.316923 14.2463L0.311401 12.7578Z\" fill=\"#6AC431\"/>\n<path d=\"M39.3134 17.9897C39.1554 16.2362 39.5905 15.7525 41.4722 15.5438C41.4788 15.4334 41.4898 15.313 41.4909 15.1938C41.4909 14.8989 41.4909 14.6041 41.4909 14.2419H36.6532V3.12879H40.3867C41.3805 3.12879 42.3821 3.11002 43.3792 3.13763C44.5121 3.17075 44.966 3.63454 44.966 4.75424C44.966 8.6456 44.966 12.5351 44.966 16.4228C44.966 17.4166 44.4658 17.9621 43.4742 17.9842C42.1005 18.0162 40.7312 17.9897 39.3134 17.9897ZM41.7317 5.5504H39.8721V11.7872H41.7317V5.5504Z\" fill=\"#03323C\"/>\n<path d=\"M35.2486 8.71404H32.0463V6.37193C30.1305 8.26351 29.8478 9.10825 30.1801 11.8258H32.0253V9.76197H35.1945C35.1945 10.8662 35.2685 11.9815 35.168 13.0747C35.1018 13.7947 34.4878 14.2032 33.7866 14.2154C31.524 14.2529 29.2592 14.2286 26.9138 14.2286C26.9138 12.5336 27.0043 10.8905 26.8862 9.25954C26.7846 7.85383 27.16 6.77167 28.23 5.85183C28.8606 5.31186 29.3663 4.62612 30.03 3.89401H26.9778V0.720405C28.5724 0.720405 30.1606 0.720405 31.7427 0.720405C32.3908 0.720405 33.0401 0.702737 33.6861 0.735864C34.6656 0.787764 35.2243 1.3167 35.2321 2.28954C35.2674 4.40748 35.2486 6.52542 35.2486 8.71404Z\" fill=\"#02303B\"/>\n<path d=\"M17.2638 3.33524C19.5198 3.33524 21.7371 3.32088 23.9533 3.34186C24.8599 3.3507 25.5092 3.91386 25.5246 4.81272C25.5673 7.45481 25.5673 10.0976 25.5246 12.7412C25.5092 13.6897 24.829 14.2242 23.8153 14.2386C22.6989 14.2551 21.5825 14.2386 20.3921 14.2386C20.3921 15.0171 20.3921 15.7337 20.3921 16.447C20.3833 17.463 19.978 17.9058 18.9665 17.9632C18.421 17.9941 17.8733 17.9687 17.2649 17.9687L17.2638 3.33524ZM22.2903 11.8302V5.76458H20.4517V11.8302H22.2903Z\" fill=\"#03313C\"/>\n<path d=\"M12.6469 3.354H15.8492V12.0908C15.8492 13.7196 15.3369 14.2341 13.7114 14.243C13.3691 14.243 13.0268 14.243 12.6425 14.243L12.6469 3.354Z\" fill=\"#6CC534\"/>\n<path d=\"M15.8139 2.62744H12.7032C12.2483 0.365944 13.04 -0.275623 15.8139 0.100925V2.62744Z\" fill=\"#70C638\"/>\n</svg>\n\n",
    39: "<svg viewBox=\"0 0 36 18\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n<path d=\"M4.13032 13.385C4.433 13.506 4.73185 13.6391 5.03933 13.7458C6.01273 14.0821 7.0135 14.2627 8.04647 14.2392C8.96701 14.2181 9.81357 13.9509 10.601 13.4806C10.7862 13.37 10.9568 13.2367 11.1089 13.0837C11.425 12.7657 11.5893 12.3794 11.645 11.9378C11.7118 11.393 11.5816 10.8938 11.3087 10.4263C11.0548 10.0035 10.7274 9.62926 10.3421 9.32131C10.0394 9.07291 9.72084 8.84374 9.40566 8.61168C9.04052 8.34263 8.66817 8.08318 8.30495 7.81269C8.00616 7.59169 7.77665 7.29 7.64337 6.94308C7.42189 6.37326 7.53383 5.86495 7.9475 5.42197C8.18772 5.16253 8.49761 5.00782 8.83201 4.90212C9.27306 4.76231 9.72709 4.72724 10.1864 4.73349C10.7769 4.74117 11.3558 4.8363 11.9314 4.95882C12.0289 4.97928 12.1276 4.99404 12.2269 5.00302C12.2842 5.00784 12.342 5.00444 12.3984 4.99293C12.4344 4.98653 12.4686 4.9725 12.4987 4.95178C12.5288 4.93107 12.5541 4.90416 12.5729 4.87284C12.5918 4.84153 12.6037 4.80655 12.6079 4.77025C12.6121 4.73395 12.6085 4.69717 12.5973 4.66238C12.552 4.53631 12.4799 4.42156 12.3859 4.32606C12.2366 4.17033 12.0566 4.04716 11.8574 3.96428C11.3506 3.75188 10.8172 3.60964 10.2719 3.54149C9.86767 3.48933 9.45944 3.47502 9.05253 3.49873C8.19493 3.54677 7.3748 3.74328 6.61233 4.14926C5.9003 4.52833 5.39198 5.0919 5.13975 5.8611C4.91634 6.54046 5.01531 7.18907 5.40832 7.78723C5.60626 8.08799 5.86619 8.33446 6.13428 8.57228C6.47964 8.8775 6.8492 9.15418 7.23931 9.39962C7.65934 9.65741 8.03736 9.97807 8.36021 10.3504C8.47466 10.4804 8.57157 10.6248 8.64848 10.78C8.86179 11.2335 8.80895 11.6683 8.50722 12.069C8.36089 12.2533 8.17822 12.4056 7.97056 12.5163C7.62659 12.7051 7.25417 12.8367 6.86793 12.9059C6.32415 13.014 5.76602 13.0295 5.2171 12.9516C5.10708 12.9362 4.99946 12.9059 4.89087 12.8824L4.88607 12.8454C5.18577 12.8945 5.49159 12.8929 5.79076 12.8406C6.21067 12.7652 6.59551 12.6158 6.9203 12.3304C7.02536 12.2427 7.11037 12.1336 7.16955 12.0102C7.22874 11.8869 7.26072 11.7522 7.26334 11.6155C7.26852 11.3565 7.19588 11.1019 7.05482 10.8847C6.9034 10.643 6.71465 10.4269 6.49558 10.2443C6.10305 9.91178 5.70043 9.59132 5.30598 9.26125C4.9777 8.99423 4.67907 8.69269 4.41523 8.36185C4.1843 8.07301 4.01386 7.74066 3.91407 7.38457C3.81427 7.02849 3.78717 6.65596 3.83436 6.28918C3.88904 5.82957 4.04758 5.38843 4.298 4.99917C4.55844 4.59143 4.87661 4.22359 5.24256 3.90711C5.61776 3.57704 6.02293 3.28269 6.45282 3.02789C7.10863 2.63728 7.80817 2.34036 8.52692 2.08813C9.16498 1.86645 9.81395 1.67755 10.4713 1.52216C11.2924 1.32565 12.1216 1.17239 12.9576 1.05708C13.4736 0.985493 13.992 0.926398 14.5109 0.874509C14.9227 0.83271 15.3363 0.806285 15.75 0.778419C16.0863 0.75776 16.4226 0.739503 16.7623 0.733737C17.8035 0.71548 18.8446 0.715 19.8852 0.754877H19.9198C20.3407 0.783704 20.7621 0.809649 21.1825 0.841358C21.4501 0.861537 21.7182 0.882677 21.9843 0.91775C22.3716 0.969158 22.7583 1.02921 23.1437 1.09407C23.896 1.22464 24.6385 1.407 25.3657 1.63987C26.2012 1.90123 27.019 2.21352 27.8314 2.53879C28.6962 2.88615 29.5269 3.3003 30.2894 3.84081C30.9501 4.29958 31.5339 4.86017 32.019 5.50173C32.4175 6.03149 32.7226 6.62536 32.9213 7.25777C33.0361 7.6279 33.1107 8.00935 33.1437 8.39548C33.1799 8.78582 33.1672 9.17916 33.1058 9.56634C32.9948 10.239 32.731 10.8539 32.3678 11.4276C31.9734 12.0382 31.4983 12.5927 30.9553 13.076C30.5333 13.458 30.0861 13.8111 29.6168 14.133C29.1959 14.4213 28.7596 14.6894 28.3123 14.9358C27.8477 15.1919 27.3764 15.435 26.8753 15.6133C26.4525 15.7637 26.0278 15.9102 25.5997 16.0457C24.9474 16.2476 24.2845 16.4136 23.614 16.543C23.0726 16.6506 22.5282 16.7433 21.9829 16.8269C21.5587 16.8918 21.1315 16.9393 20.7044 16.9806C20.3532 17.0148 20.0006 17.033 19.6474 17.0503C19.241 17.0705 18.834 17.0911 18.4276 17.0984C17.5517 17.1099 16.6758 17.1214 15.8009 17.0599C15.4757 17.0369 15.1499 17.0205 14.8256 16.9893C14.4172 16.9504 14.0089 16.9062 13.6029 16.8509C13.1969 16.7957 12.7832 16.7323 12.3768 16.6554C11.4983 16.4895 10.6303 16.2726 9.77705 16.0058C8.65773 15.6577 7.56572 15.2272 6.50999 14.7177C6.0257 14.4842 5.54909 14.2334 5.07585 13.9788C4.74482 13.8005 4.42388 13.6026 4.09861 13.4138L4.13032 13.385ZM19.1593 8.93839C19.1631 8.91148 19.1636 8.89611 19.167 8.88169C19.3281 8.25309 19.4531 7.61577 19.5412 6.97286C19.5725 6.72207 19.5864 6.46839 19.5946 6.21567C19.6008 6.06112 19.5697 5.90735 19.5038 5.76741C19.4688 5.68294 19.4053 5.61341 19.3244 5.57092C19.2435 5.52843 19.1502 5.51567 19.0608 5.53488C18.9107 5.55592 18.7728 5.62904 18.6711 5.74147C18.5809 5.84068 18.4991 5.94723 18.4266 6.06001C18.2416 6.35688 18.0862 6.67116 17.9625 6.99833C17.3187 8.63586 16.8651 10.3419 16.6105 12.0829C16.5718 12.3381 16.5767 12.5981 16.6249 12.8517C16.6629 13.0462 16.7258 13.2307 16.8651 13.3801C17.0544 13.5829 17.3139 13.605 17.5238 13.4282C17.6116 13.3538 17.6883 13.2672 17.7516 13.1712C18.0719 12.6782 18.388 12.1829 18.7 11.6851C19.1136 11.0231 19.5528 10.3797 20.0279 9.76044C20.0412 9.74434 20.0555 9.7291 20.0707 9.71479L20.149 9.76812C20.1082 10.0329 20.0654 10.286 20.0308 10.5407C19.9573 11.0798 19.9347 11.6193 20.0159 12.1598C20.0483 12.4038 20.1177 12.6415 20.2216 12.8646C20.2791 12.9912 20.3607 13.1055 20.4618 13.2009C20.6256 13.348 20.8116 13.3998 21.0268 13.3316C21.2418 13.2595 21.4427 13.1504 21.6202 13.0092C21.821 12.8565 21.9132 12.6672 21.8757 12.4092C21.8444 12.1848 21.8244 11.959 21.8157 11.7327C21.7947 11.2603 21.8045 10.787 21.845 10.3158C21.906 9.59516 22.0204 8.88313 22.1285 8.16967C22.1773 7.86993 22.2017 7.56674 22.2015 7.26306C22.2045 7.09769 22.1818 6.93286 22.1342 6.77444C22.0607 6.55343 21.9137 6.44341 21.6812 6.42996C21.5342 6.41701 21.3871 6.45299 21.2627 6.53229C21.1363 6.61227 21.0185 6.705 20.911 6.80903C20.7387 6.97974 20.5782 7.16193 20.4306 7.35434C20.0548 7.85978 19.6916 8.37434 19.3255 8.88554L19.2482 8.99076L19.1593 8.93839ZM13.9916 10.7848C14.129 10.9092 14.2798 10.9159 14.4283 10.8842C14.5338 10.8658 14.6364 10.8335 14.7334 10.7881C14.9017 10.7054 15.0624 10.6081 15.2138 10.4974C15.8981 9.97184 16.4134 9.2573 16.696 8.44208C16.8913 7.90924 16.9529 7.33661 16.8752 6.77444C16.8494 6.55214 16.771 6.33918 16.6465 6.15322C16.5784 6.05028 16.4889 5.96322 16.3841 5.89798C16.2793 5.83273 16.1617 5.79082 16.0392 5.7751C15.8556 5.75353 15.6695 5.76822 15.4915 5.81834C15.1163 5.91203 14.7862 6.097 14.4778 6.32474C13.9431 6.7239 13.4914 7.22343 13.1479 7.79539C12.4805 8.88842 12.0212 10.0622 11.8353 11.3344C11.7802 11.6888 11.7929 12.0504 11.8728 12.4C11.8966 12.5008 11.9272 12.5999 11.9645 12.6965C12.2432 13.4066 12.8817 13.6357 13.4972 13.518C13.7985 13.4554 14.087 13.3417 14.35 13.1817C15.0482 12.7725 15.6641 12.2368 16.1661 11.602C16.2349 11.51 16.299 11.4146 16.3583 11.3161C16.4544 11.1658 16.4337 11.0159 16.3448 10.8712C16.23 10.6843 16.0666 10.644 15.8884 10.7684C15.7596 10.8583 15.6409 10.9635 15.5199 11.0634C15.3123 11.2345 15.1115 11.4141 14.8953 11.5756C14.7817 11.6607 14.6565 11.7289 14.5234 11.7783C14.2443 11.8831 14.0141 11.7495 13.9507 11.4579C13.908 11.2359 13.9392 11.0202 13.9916 10.7848ZM27.9419 9.72777C27.9549 9.62303 27.964 9.53559 27.9775 9.44814C28.0871 8.73486 28.2325 8.02755 28.4132 7.32888C28.5055 6.96854 28.6041 6.6098 28.7092 6.25267C28.7791 5.99529 28.9153 5.76073 29.1041 5.57235C29.278 5.40275 29.4818 5.31099 29.7287 5.33837C29.8128 5.3475 29.8954 5.3648 29.9795 5.37441C30.0513 5.38573 30.124 5.38991 30.1967 5.3869C30.3788 5.37008 30.4849 5.2346 30.4662 5.05299C30.4518 4.9457 30.4055 4.84523 30.3331 4.76472C30.2163 4.61983 30.057 4.51516 29.8776 4.46539C29.354 4.31886 28.8735 4.40534 28.4522 4.75799C28.2671 4.92128 28.1054 5.10931 27.9717 5.31675C27.6315 5.81354 27.3687 6.35164 27.1381 6.90512C26.4621 8.52856 26.0273 10.2202 25.7083 11.946C25.5747 12.6667 25.4729 13.3931 25.3931 14.1224C25.3747 14.271 25.3655 14.4205 25.3657 14.5702C25.3705 14.8503 25.5233 15.03 25.7948 15.0949C25.9408 15.1318 26.0928 15.139 26.2416 15.116C26.5404 15.068 26.7773 14.9262 26.884 14.6255C26.9517 14.4333 27.017 14.2411 27.0685 14.0441C27.2491 13.3489 27.3668 12.6407 27.4836 11.9326C27.5047 11.8048 27.5258 11.677 27.5475 11.5453C27.6815 11.529 27.8069 11.5146 27.9318 11.4973C28.1721 11.466 28.3983 11.4079 28.58 11.2311C28.8359 10.9849 29.0249 10.6775 29.1291 10.3379C29.1571 10.2385 29.171 10.1357 29.1704 10.0324C29.1713 9.97794 29.1558 9.92449 29.126 9.87894C29.0962 9.83338 29.0534 9.79779 29.0032 9.77677C28.9514 9.75197 28.8967 9.73373 28.8404 9.72248C28.6578 9.6826 28.4733 9.70038 28.2893 9.71095C28.1807 9.71671 28.0688 9.72056 27.9419 9.72681V9.72777ZM24.7339 9.72777C24.7561 9.57018 24.7729 9.42941 24.7954 9.29008C24.9069 8.59967 25.0534 7.91695 25.2279 7.24096C25.3134 6.91041 25.4045 6.5813 25.5012 6.25363C25.5727 5.992 25.7127 5.75417 25.9067 5.56466C26.0787 5.39939 26.28 5.31003 26.5231 5.33741C26.6106 5.34702 26.6971 5.36576 26.7845 5.37585C26.8527 5.3863 26.9217 5.38984 26.9906 5.38642C27.1727 5.3696 27.2856 5.23411 27.2592 5.05395C27.245 4.97117 27.2142 4.89209 27.1689 4.82141C27.0551 4.64476 26.8789 4.51747 26.6754 4.46491C26.147 4.31501 25.6631 4.40486 25.2413 4.76327C25.0198 4.95113 24.8517 5.18655 24.6941 5.42918C24.3971 5.89597 24.1436 6.38906 23.9369 6.90224C23.21 8.65204 22.7531 10.4773 22.4398 12.3405C22.3437 12.9266 22.2712 13.518 22.1933 14.108C22.172 14.264 22.1623 14.4214 22.1645 14.5789C22.1703 14.845 22.3134 15.017 22.569 15.0872C22.7253 15.131 22.8893 15.14 23.0495 15.1136C23.3483 15.0622 23.5813 14.9161 23.6866 14.6149C23.7423 14.4559 23.7995 14.2964 23.8432 14.1345C24.0354 13.4066 24.1613 12.6643 24.2833 11.922L24.3457 11.5463C24.3981 11.5386 24.4418 11.5309 24.4899 11.5251C24.6153 11.5083 24.7416 11.4944 24.8666 11.4771C25.0584 11.4518 25.2375 11.3668 25.3782 11.234C25.6377 10.9856 25.8286 10.6745 25.9327 10.3307C25.9586 10.2387 25.9717 10.1434 25.9716 10.0477C25.9738 9.98752 25.9568 9.92815 25.9232 9.87816C25.8895 9.82818 25.8409 9.79016 25.7842 9.76956C25.7379 9.74943 25.6896 9.73429 25.6401 9.7244C25.4575 9.68501 25.273 9.7023 25.089 9.71239C24.9766 9.71671 24.8656 9.72056 24.7339 9.72729V9.72777Z\" fill=\"#2E376F\"/>\n<path d=\"M4.10151 13.4128C4.42678 13.6016 4.74772 13.7972 5.07875 13.9778C5.55247 14.2324 6.0286 14.4832 6.51289 14.7167C7.56862 15.2262 8.66063 15.6567 9.77995 16.0048C10.6332 16.2716 11.5012 16.4885 12.3797 16.6544C12.7861 16.7313 13.1964 16.7937 13.6058 16.8499C14.0151 16.9061 14.4225 16.9494 14.8285 16.9883C15.1528 17.0195 15.4786 17.0363 15.8038 17.0589C16.6787 17.1204 17.5546 17.107 18.4305 17.0974C18.8369 17.0921 19.2439 17.0714 19.6503 17.0493C20.003 17.032 20.3556 17.0138 20.7073 16.9797C21.1344 16.9383 21.5616 16.8908 21.9858 16.8259C22.5311 16.7423 23.0755 16.6496 23.6169 16.542C24.2872 16.4112 24.9497 16.2437 25.6017 16.0404C26.0297 15.9058 26.4545 15.7593 26.8773 15.608C27.3784 15.4297 27.8497 15.1866 28.3143 14.9305C28.7616 14.6841 29.1978 14.4179 29.6187 14.1277C30.0881 13.8058 30.5353 13.4527 30.9572 13.0707C31.5002 12.5874 31.9753 12.0329 32.3698 11.4223C32.733 10.8486 32.9943 10.2337 33.1077 9.56102C33.1691 9.17384 33.1819 8.78051 33.1457 8.39017C33.1117 8.00575 33.0364 7.62609 32.9213 7.25775C32.7231 6.62597 32.4186 6.0326 32.021 5.50314C31.5358 4.86159 30.952 4.30099 30.2913 3.84222C29.5289 3.30172 28.6991 2.88757 27.8333 2.5402C27.0209 2.21494 26.2032 1.90265 25.3677 1.64128C24.64 1.40835 23.897 1.22599 23.1442 1.09549C22.7598 1.03063 22.3721 0.970573 21.9848 0.919165C21.7187 0.884092 21.4506 0.862952 21.183 0.842774C20.7626 0.811064 20.3412 0.785119 19.9203 0.756292H19.8857C18.8446 0.716415 17.8035 0.716896 16.7628 0.735153C16.4265 0.740918 16.0873 0.759175 15.7505 0.779835C15.3368 0.805779 14.9232 0.832204 14.5114 0.875925C13.9925 0.927813 13.4741 0.986908 12.9581 1.0585C12.1221 1.1738 11.2929 1.32707 10.4718 1.52357C9.81445 1.67896 9.16547 1.86787 8.52742 2.08954C7.80674 2.34178 7.10913 2.6387 6.45332 3.0293C6.02333 3.28362 5.61799 3.57749 5.24258 3.90709C4.87513 4.22311 4.5555 4.59081 4.29369 4.99867C4.04328 5.38793 3.88473 5.82907 3.83006 6.28868C3.78286 6.65546 3.80997 7.02798 3.90976 7.38407C4.00955 7.74015 4.17999 8.07251 4.41092 8.36134C4.67476 8.69219 4.97339 8.99372 5.30168 9.26074C5.69613 9.59081 6.09874 9.91127 6.49127 10.2437C6.71034 10.4264 6.89909 10.6425 7.05051 10.8842C7.19157 11.1014 7.26421 11.356 7.25903 11.6149C7.25642 11.7517 7.22443 11.8864 7.16525 12.0097C7.10606 12.1331 7.02106 12.2422 6.91599 12.3299C6.5912 12.6152 6.20636 12.7647 5.78645 12.8401C5.48729 12.8924 5.18146 12.894 4.88176 12.8449C4.80153 12.8204 4.72417 12.7752 4.63529 12.8098C4.25103 12.6744 3.88093 12.5017 3.53026 12.2943C3.12875 12.0516 2.76107 11.757 2.43675 11.418C2.21841 11.1804 2.02266 10.9231 1.85204 10.6492C1.55787 10.2067 1.32619 9.72576 1.16356 9.2199C1.07371 8.93048 1.0135 8.63267 0.98387 8.33107C0.912283 7.59983 1.05978 6.91038 1.36823 6.2512C1.64818 5.66037 2.0166 5.11568 2.46077 4.63593C3.08103 3.95369 3.80603 3.40069 4.58725 2.91928C5.11848 2.59515 5.67042 2.30626 6.23951 2.05447C6.92827 1.7496 7.63411 1.48491 8.3535 1.26173C9.05939 1.03819 9.77658 0.851999 10.5021 0.703924C11.0128 0.600627 11.5249 0.502134 12.0395 0.415653C12.3946 0.354636 12.7525 0.313317 13.11 0.267675C13.4238 0.227637 13.739 0.191603 14.0555 0.159573C14.2808 0.136992 14.5066 0.123059 14.7324 0.106724C15.0308 0.0851036 15.3292 0.0649245 15.6275 0.0442652H15.6621C15.9657 0.0351366 16.2689 0.0240863 16.5721 0.0168795C16.8906 0.0091923 17.2092 -0.000897081 17.5282 6.38199e-05C17.9582 6.38199e-05 18.3887 0.0101532 18.8187 0.0221645C19.1559 0.0317735 19.4932 0.0477885 19.8305 0.0702095C20.1942 0.0932711 20.5574 0.12402 20.9202 0.154769C21.2757 0.185037 21.6317 0.210982 21.9853 0.254222C22.5292 0.320524 23.0721 0.395474 23.614 0.47571C24.4529 0.600627 25.2812 0.778393 26.1032 0.984987C27.1766 1.25047 28.2292 1.59395 29.2526 2.01267C30.2024 2.40568 31.1143 2.87171 31.9619 3.45738C32.3517 3.72449 32.7243 4.0159 33.0775 4.32988C33.2975 4.52735 33.5176 4.72577 33.7232 4.93813C34.2416 5.47287 34.6923 6.05902 35.0204 6.73309C35.271 7.23138 35.4306 7.77042 35.4917 8.32483C35.5169 8.53432 35.5294 8.74514 35.5292 8.95614C35.5187 9.63735 35.3643 10.3086 35.0761 10.926C34.8142 11.4744 34.479 11.9846 34.0797 12.4428C33.5373 13.077 32.9098 13.6175 32.2386 14.109C31.6232 14.5561 30.9779 14.9604 30.3072 15.3192C29.6462 15.6807 28.9638 16.0016 28.2638 16.2801C27.4248 16.6113 26.5685 16.8971 25.6987 17.1363C25.125 17.2929 24.5456 17.4298 23.9624 17.5384C23.5554 17.6138 23.1456 17.6773 22.7358 17.7306C22.3259 17.7839 21.9065 17.8301 21.4904 17.8704C21.1775 17.9005 20.8639 17.9233 20.5497 17.9386C20.0899 17.9607 19.6292 17.9747 19.1689 17.9867C18.8542 17.9953 18.539 18.0016 18.2243 17.9997C17.888 17.9997 17.5484 17.9891 17.2106 17.978C16.8805 17.9665 16.5509 17.9526 16.2213 17.9324C15.837 17.9088 15.4565 17.8781 15.074 17.8478C14.7954 17.8252 14.5153 17.807 14.238 17.7714C13.8772 17.7234 13.5174 17.6705 13.1585 17.6057C12.4005 17.4653 11.6503 17.2857 10.9109 17.0676C10.2835 16.8828 9.664 16.6758 9.05255 16.4468C8.05806 16.0793 7.08674 15.6519 6.14391 15.1669C5.29618 14.7315 4.48651 14.2258 3.7234 13.6549C3.46401 13.4702 3.22141 13.263 2.9984 13.0356C2.89126 12.9208 2.79421 12.7954 2.69523 12.6743C2.66542 12.6312 2.6383 12.5863 2.61404 12.5398C2.64648 12.5406 2.67872 12.5451 2.71013 12.5533C2.77354 12.5808 2.83487 12.613 2.89366 12.6494C3.09112 12.7752 3.28523 12.9064 3.48317 13.0337C3.59656 13.1058 3.71427 13.1702 3.83006 13.2379C3.84831 13.2946 3.893 13.3028 3.94392 13.3008C3.96795 13.372 4.04097 13.383 4.10151 13.4128Z\" fill=\"#97A4AC\"/>\n<path d=\"M4.63528 12.8083C4.72417 12.7738 4.80152 12.8189 4.88176 12.8434C4.88176 12.8554 4.88512 12.8679 4.88656 12.8804L4.63528 12.8083Z\" fill=\"#5E678D\"/>\n<path d=\"M4.10152 13.4128C4.04098 13.383 3.96795 13.371 3.94153 13.295L4.13034 13.3849L4.10152 13.4128Z\" fill=\"#5B648B\"/>\n<path d=\"M3.94199 13.2961C3.89106 13.2961 3.8459 13.2898 3.82812 13.2332L3.94199 13.2961Z\" fill=\"#5B648B\"/>\n<path d=\"M15.4031 7.19863C15.3732 7.75637 15.2691 8.30765 15.0937 8.83793C14.9409 9.29718 14.7264 9.73357 14.4562 10.1351C14.4071 10.208 14.346 10.272 14.2755 10.3244C14.1823 10.3927 14.0953 10.3552 14.0867 10.2413C14.0776 10.1114 14.0813 9.98089 14.0978 9.85168C14.169 9.3255 14.3017 8.80949 14.4932 8.31424C14.619 7.96358 14.7761 7.62494 14.9626 7.30241C15.0178 7.21016 15.0817 7.12368 15.1456 7.0372C15.1715 7.00374 15.2024 6.97455 15.2374 6.95072C15.2994 6.90748 15.3512 6.92141 15.3709 6.99396C15.3863 7.06138 15.397 7.12976 15.4031 7.19863Z\" fill=\"#303971\"/>\n</svg>\n\n",
    15: "<svg viewBox=\"0 0 37 18\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n<path d=\"M4.97708 0V4.6716H6.81945C7.49431 4.6716 8.16958 4.65918 8.84405 4.676C11.4181 4.74048 13.4432 6.79472 13.4768 9.37443C13.4884 10.2668 13.4992 11.1607 13.466 12.0519C13.4564 12.3038 13.3538 12.6126 13.1856 12.7884C11.6156 14.4206 10.0304 16.0378 8.42991 17.6398C8.27492 17.796 8.04222 17.9647 7.84116 17.9699C6.8627 17.9963 5.87864 18.0303 4.90419 17.949C2.36133 17.7376 0.538587 15.7062 0.534181 13.1297C0.527506 8.75337 0.527506 4.37682 0.534181 0H4.97708ZM5.02755 13.3203H8.98823V9.31516H5.02755V13.3203Z\" fill=\"#013F61\"/>\n<path d=\"M21.0705 4.84056C20.8703 4.77648 20.67 4.65873 20.4698 4.65673C19.0864 4.64031 17.703 4.64792 16.2187 4.64792V0.00195312H21.1851L21.1683 4.83936L21.0705 4.84056Z\" fill=\"#054264\"/>\n<path d=\"M29.0628 17.9611H24.0564V16.5845C24.0564 14.451 24.0456 12.3174 24.0708 10.1847C24.074 9.91716 24.2026 9.58834 24.386 9.39569C25.799 7.91592 27.2319 6.45511 28.6847 5.01326C28.9006 4.80019 29.2763 4.65 29.5819 4.64399C30.799 4.61996 32.025 4.59032 33.2338 4.70126C35.1839 4.88029 36.8116 6.58608 36.8504 8.5462C36.9113 11.657 36.8664 14.7694 36.8664 17.935H31.9193V9.98364H29.0628V17.9611Z\" fill=\"#F06423\"/>\n<path d=\"M21.0705 4.84061L21.1699 4.8374C21.1871 6.28927 21.2143 7.74113 21.2191 9.19339C21.2231 10.3433 21.2003 11.4935 21.1891 12.6434C20.9996 12.82 20.8042 12.9907 20.6216 13.1741C19.1693 14.6338 17.7184 16.0952 16.2688 17.5581C16.2596 15.0329 16.2475 12.5072 16.2499 9.98201C16.2573 9.81396 16.3238 9.65393 16.4378 9.53023C17.9763 7.96074 19.5205 6.39754 21.0705 4.84061Z\" fill=\"#034062\"/>\n<path d=\"M16.2688 17.5581C17.7194 16.0965 19.1704 14.6352 20.6216 13.1741C20.8042 12.9907 20.9996 12.8201 21.1891 12.6434V17.9919C19.6271 17.9919 18.0895 17.9995 16.5523 17.9731C16.4554 17.9715 16.3633 17.7027 16.2688 17.5581Z\" fill=\"#EE6526\"/>\n</svg>\n\n",
    63: "<svg viewBox=\"0 0 37 18\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n<path d=\"M4.97708 0V4.6716H6.81945C7.49431 4.6716 8.16958 4.65918 8.84405 4.676C11.4181 4.74048 13.4432 6.79472 13.4768 9.37443C13.4884 10.2668 13.4992 11.1607 13.466 12.0519C13.4564 12.3038 13.3538 12.6126 13.1856 12.7884C11.6156 14.4206 10.0304 16.0378 8.42991 17.6398C8.27492 17.796 8.04222 17.9647 7.84116 17.9699C6.8627 17.9963 5.87864 18.0303 4.90419 17.949C2.36133 17.7376 0.538587 15.7062 0.534181 13.1297C0.527506 8.75337 0.527506 4.37682 0.534181 0H4.97708ZM5.02755 13.3203H8.98823V9.31516H5.02755V13.3203Z\" fill=\"#013F61\"/>\n<path d=\"M21.0705 4.84056C20.8703 4.77648 20.67 4.65873 20.4698 4.65673C19.0864 4.64031 17.703 4.64792 16.2187 4.64792V0.00195312H21.1851L21.1683 4.83936L21.0705 4.84056Z\" fill=\"#054264\"/>\n<path d=\"M29.0628 17.9611H24.0564V16.5845C24.0564 14.451 24.0456 12.3174 24.0708 10.1847C24.074 9.91716 24.2026 9.58834 24.386 9.39569C25.799 7.91592 27.2319 6.45511 28.6847 5.01326C28.9006 4.80019 29.2763 4.65 29.5819 4.64399C30.799 4.61996 32.025 4.59032 33.2338 4.70126C35.1839 4.88029 36.8116 6.58608 36.8504 8.5462C36.9113 11.657 36.8664 14.7694 36.8664 17.935H31.9193V9.98364H29.0628V17.9611Z\" fill=\"#F06423\"/>\n<path d=\"M21.0705 4.84061L21.1699 4.8374C21.1871 6.28927 21.2143 7.74113 21.2191 9.19339C21.2231 10.3433 21.2003 11.4935 21.1891 12.6434C20.9996 12.82 20.8042 12.9907 20.6216 13.1741C19.1693 14.6338 17.7184 16.0952 16.2688 17.5581C16.2596 15.0329 16.2475 12.5072 16.2499 9.98201C16.2573 9.81396 16.3238 9.65393 16.4378 9.53023C17.9763 7.96074 19.5205 6.39754 21.0705 4.84061Z\" fill=\"#034062\"/>\n<path d=\"M16.2688 17.5581C17.7194 16.0965 19.1704 14.6352 20.6216 13.1741C20.8042 12.9907 20.9996 12.8201 21.1891 12.6434V17.9919C19.6271 17.9919 18.0895 17.9995 16.5523 17.9731C16.4554 17.9715 16.3633 17.7027 16.2688 17.5581Z\" fill=\"#EE6526\"/>\n</svg>\n\n",
    77: "<svg viewBox=\"0 0 114 18\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n<path d=\"M36.7404 6.35332C36.6813 7.2546 36.3562 8.05245 35.8834 8.80598C35.322 9.69248 34.6128 10.4312 33.8149 11.0961C32.1453 12.485 30.2394 13.4601 28.2152 14.2136C26.5308 14.8342 24.8021 15.2774 23.0439 15.5582C22.8075 15.6025 22.5711 15.632 22.3347 15.6616C22.2313 15.632 22.1279 15.6468 22.0392 15.6911C21.9801 15.7059 21.9062 15.6616 21.8619 15.7207C21.8324 15.7502 21.8028 15.7502 21.7733 15.7355C21.5369 15.7059 21.3005 15.7798 21.0641 15.7798C21.005 15.8093 20.9459 15.765 20.8868 15.8241C20.8424 15.8537 20.7981 15.8537 20.739 15.8537C20.6208 15.8241 20.5026 15.8537 20.3844 15.8537C20.2958 15.8537 20.1923 15.8537 20.1037 15.8684C19.6457 15.898 19.1876 15.8832 18.7444 15.8832C18.2863 15.8832 17.8135 15.8832 17.3555 15.8389C17.2373 15.8241 17.1339 15.8684 17.0305 15.8832C16.3508 16.1344 15.6712 16.3708 14.9767 16.5776C13.6027 16.9766 12.199 17.2868 10.7954 17.5232C10.2044 17.6267 9.6134 17.7153 9.0224 17.7892C8.9633 17.7744 8.9042 17.7596 8.8451 17.804C8.81555 17.8335 8.77123 17.8335 8.74168 17.8335C8.68258 17.8188 8.62348 17.804 8.56438 17.8483C8.53483 17.8778 8.4905 17.8778 8.44618 17.8778C8.3723 17.8778 8.29843 17.8483 8.23933 17.8926C8.20978 17.9222 8.16545 17.9222 8.12112 17.9074C8.04725 17.8926 7.97337 17.9074 7.8995 17.8926C7.86995 17.8926 7.86995 17.9074 7.88472 17.8926C7.8995 17.8926 7.8995 17.8926 7.8995 17.9074C7.85517 17.937 7.81085 17.9369 7.75175 17.9369C7.6631 17.9222 7.57445 17.9222 7.4858 17.9369C7.20507 17.9665 6.93912 17.9665 6.6584 17.9813C6.61407 17.9813 6.56975 18.0108 6.55497 17.9665C6.5402 17.9074 6.61407 17.8926 6.64362 17.8778C6.98345 17.7892 7.32327 17.6858 7.6631 17.5823C8.47573 17.3459 9.27358 17.1243 10.0862 16.8879C11.1943 16.5629 12.2877 16.223 13.3663 15.8537C12.2434 15.8537 11.1057 15.7798 9.968 15.6025C9.89413 15.5729 9.7907 15.5729 9.7316 15.4991C9.74638 15.3956 9.83503 15.4252 9.89413 15.4104C9.98278 15.4104 10.0862 15.4104 10.1749 15.3809C10.3965 15.3365 10.6033 15.4104 10.825 15.3956C11.4307 15.3809 12.0217 15.3513 12.6275 15.3218C12.7014 15.3218 12.79 15.3365 12.8491 15.2774C13.0708 15.2922 13.2776 15.2922 13.4845 15.2331C13.5288 15.174 13.6027 15.174 13.6765 15.174C13.78 15.1888 13.8686 15.1592 13.9425 15.0854C14.3562 15.1888 14.7403 15.0706 15.1393 14.9819C15.3609 14.9967 15.5677 14.9672 15.7598 14.8637C16.4542 14.5239 17.1339 14.1545 17.7249 13.6522C18.1681 13.2828 18.5375 12.8396 18.7444 12.2929C18.966 11.7314 18.9512 11.1552 18.8035 10.579C18.5818 9.76636 18.1386 9.0867 17.6362 8.4366C17.3112 8.00813 16.9418 7.6092 16.5577 7.21028C16.4838 7.1364 16.3951 7.0773 16.3213 7.00342C16.2769 6.94432 16.2474 6.9 16.1883 6.85567C15.9667 6.63405 15.7155 6.4272 15.4791 6.20557C15.4348 6.16125 15.3757 6.1317 15.3757 6.05782C15.3904 6.02827 15.4052 6.0135 15.4348 6.0135C15.7155 6.08737 15.9371 6.26467 16.1883 6.39765C17.2078 7.00342 18.1977 7.63875 19.099 8.42183C19.7639 8.99805 20.3696 9.60383 20.7981 10.3869C21.3152 11.3325 21.4039 12.2781 20.8277 13.2237C20.8129 13.2533 20.7833 13.2976 20.7686 13.3271C20.7538 13.3715 20.6947 13.3862 20.6799 13.4601C21.3743 13.1646 22.0392 12.8691 22.6893 12.5145C23.4281 12.1156 24.152 11.6871 24.8169 11.1848C25.3636 10.7858 25.8659 10.3574 26.3387 9.86978C26.7968 9.41176 27.2105 8.9094 27.5651 8.36273C28.0231 7.65353 28.3186 6.88522 28.3925 6.05782C28.4811 5.11222 28.2447 4.24049 27.6833 3.44264C27.0923 2.58569 26.2796 1.99469 25.3636 1.52189C24.8317 1.24116 24.2702 1.01954 23.694 0.842236C23.3837 0.73881 23.0587 0.67971 22.7336 0.783135C22.6893 0.783135 22.645 0.783135 22.6007 0.76836C22.5563 0.73881 22.512 0.70926 22.5859 0.664935C22.6302 0.635385 22.6893 0.605835 22.7484 0.56151C22.7632 0.56151 22.7484 0.546735 22.7484 0.546735C22.7041 0.576285 22.6598 0.576285 22.6745 0.50241C22.6893 0.487635 22.7189 0.47286 22.7484 0.47286C22.8371 0.47286 22.9257 0.487635 22.9996 0.546735C22.9996 0.56151 22.9848 0.576285 22.9996 0.59106C23.0144 0.576285 23.0291 0.56151 23.0439 0.546735C23.1769 0.53196 23.2951 0.576285 23.4281 0.56151C23.5906 0.576285 23.7531 0.53196 23.9156 0.53196C23.9452 0.53196 23.9747 0.53196 24.0043 0.53196C24.7135 0.65016 25.4079 0.79791 26.0876 1.01954C26.9002 1.27071 27.6833 1.59576 28.4072 2.05379C29.2346 2.57091 29.9586 3.22102 30.4462 4.07797C31.0963 5.2452 31.1111 6.45675 30.6383 7.68308C30.3428 8.46615 29.8848 9.1458 29.3233 9.76636C28.4663 10.7415 27.4764 11.5394 26.3978 12.2338C25.0681 13.076 23.6497 13.7261 22.1722 14.258C21.2118 14.6126 20.2367 14.8933 19.232 15.1297C18.966 15.1888 18.7 15.2479 18.4341 15.2627C18.375 15.2922 18.3159 15.307 18.242 15.2922C18.3159 15.307 18.3898 15.2774 18.4636 15.2627C18.9955 15.1888 19.5274 15.1297 20.0594 15.041C20.148 15.0263 20.2514 15.0115 20.3401 15.0115C20.414 15.0263 20.4878 15.041 20.5617 15.0115C20.9163 14.9376 21.2709 14.9081 21.6107 14.7899C21.7289 14.7012 21.8619 14.716 21.9949 14.6864C22.1574 14.6864 22.3052 14.6273 22.4677 14.583C23.7531 14.258 25.0238 13.859 26.2501 13.3419C27.7571 12.7066 29.1903 11.9383 30.4905 10.9336C31.4066 10.2244 32.2192 9.42653 32.8545 8.46615C33.3126 7.7865 33.6376 7.04775 33.7558 6.23512C33.9036 5.21565 33.6672 4.29959 33.1057 3.44264C32.559 2.63001 31.8203 2.05379 30.9781 1.58099C30.2837 1.19684 29.5449 0.916111 28.7914 0.67971C28.7323 0.65016 28.6584 0.635385 28.5993 0.62061C28.5402 0.605835 28.4959 0.59106 28.4368 0.576285C28.3334 0.53196 28.1856 0.56151 28.1117 0.44331C28.1413 0.38421 28.2004 0.41376 28.2447 0.41376C29.0278 0.44331 29.7961 0.576285 30.5644 0.724035C31.6134 0.945661 32.6329 1.25594 33.5933 1.74351C34.4355 2.17199 35.189 2.71866 35.7948 3.44264C36.3414 4.12229 36.6813 4.87582 36.7256 5.74755C36.7256 5.99872 36.7256 6.17602 36.7404 6.35332Z\" fill=\"#68A679\"/>\n<path d=\"M45.3246 9.78101C45.3985 9.44118 45.3985 9.44118 45.7679 9.44118C47.334 9.39686 48.9149 9.36731 50.4811 9.36731C50.6584 9.36731 50.6879 9.41163 50.6732 9.58893C50.5845 10.5641 50.4368 11.5392 50.1265 12.4848C49.8605 13.2827 49.4764 14.0214 48.8854 14.642C48.4717 15.0852 47.9398 15.3807 47.4374 15.7058C46.876 15.9717 46.2702 16.1638 45.6644 16.2672C44.3495 16.4889 43.064 16.4298 41.8229 15.9274C40.5523 15.4251 39.7101 14.509 39.2668 13.2236C38.8384 11.9973 38.8384 10.7414 39.1043 9.47073C39.3703 8.21485 39.9317 7.10673 40.7887 6.14635C41.0251 5.8804 41.2615 5.644 41.5422 5.42237C41.6013 5.37805 41.6752 5.33372 41.7047 5.27462C42.8276 4.46199 44.0392 3.87099 45.4428 3.72324C46.5066 3.61982 47.5556 3.59027 48.5899 3.87099C48.9445 3.95964 49.2695 4.09262 49.5946 4.25514C49.7128 4.31424 49.7128 4.35857 49.6685 4.47677C49.3434 5.25985 49.0036 6.04292 48.6933 6.826C48.649 6.9442 48.6047 6.98853 48.4865 6.89988C48.4274 6.87033 48.3683 6.79645 48.2796 6.85555C47.4818 6.4714 46.6248 6.30887 45.7383 6.33842C45.2951 6.3532 44.8666 6.44185 44.4824 6.67825C44.3938 6.73735 44.2756 6.75213 44.2017 6.84078C43.3595 7.28403 42.9015 8.02278 42.5321 8.85018C42.2514 9.48551 42.1036 10.1799 42.0741 10.8744C42.0593 11.4949 42.1627 12.1007 42.4583 12.6621C42.8276 13.3566 43.4334 13.6964 44.1722 13.8294C44.8075 13.9476 45.4133 13.8737 46.0043 13.6225C46.1225 13.5782 46.2259 13.5043 46.3293 13.4452C46.8169 13.1054 47.2601 12.7212 47.3783 12.0859C47.4227 11.8938 47.4079 11.8791 47.201 11.8643C46.5657 11.82 45.9452 11.8347 45.3098 11.8347C45.0734 11.8347 45.0143 11.7756 45.0587 11.554C45.1325 11.0369 45.1916 10.5198 45.2803 10.0174C45.2655 9.91398 45.2803 9.84011 45.3246 9.78101Z\" fill=\"#327850\"/>\n<path d=\"M83.7989 12.6178C84.1387 13.0315 84.6115 13.2088 85.1138 13.327C85.6901 13.4748 86.2663 13.3566 86.8277 13.2827C87.4631 13.1941 88.0541 13.0168 88.6007 12.6178C88.6303 12.8247 88.5564 13.002 88.5712 13.1941C88.6303 13.3861 88.5564 13.5782 88.5417 13.7703C88.4973 14.3613 88.453 14.9375 88.3791 15.5285C88.3496 15.7058 88.2757 15.824 88.0984 15.8979C87.4188 16.1491 86.7243 16.2968 86.0151 16.3707C85.1877 16.4594 84.3603 16.3707 83.5625 16.1934C83.267 16.1195 82.9715 16.0309 82.6907 15.8831C82.6612 15.8684 82.6169 15.8388 82.5725 15.8536C82.0111 15.499 81.4349 15.1887 80.9768 14.7011C80.9473 14.6716 80.9177 14.642 80.8734 14.6568C80.8143 14.5829 80.8586 14.4943 80.8586 14.4204C81.0507 13.2679 81.2132 12.1155 81.4053 10.963C81.4644 10.5493 81.4792 10.1356 81.3314 9.72194C81.1541 9.24914 80.8439 8.92408 80.3415 8.79111C80.2529 8.76156 80.1347 8.76156 80.0903 8.65813C81.1394 6.20548 82.9271 4.58022 85.5423 3.9449C86.9755 3.5903 88.3791 3.81192 89.7532 4.28472C89.8714 4.32905 89.8566 4.40292 89.8419 4.4768C89.8271 4.55067 89.7828 4.63932 89.8862 4.69842C89.7532 5.28943 89.6793 5.88043 89.5759 6.47143C89.5316 6.70783 89.502 6.92945 89.4577 7.16585C89.4134 7.3727 89.3838 7.40226 89.1917 7.29883C88.7042 7.0772 88.2166 6.88513 87.6847 6.81125C86.8277 6.69305 86.0003 6.70783 85.2173 7.12153C84.2421 7.62388 83.5772 8.40696 83.1931 9.44121C82.8976 10.2538 82.8976 11.0369 83.2226 11.8348C83.3556 12.1303 83.5477 12.3962 83.7989 12.6178Z\" fill=\"#68A678\"/>\n<path d=\"M113.127 5.05308C112.891 5.03831 112.876 5.03831 112.906 4.81668C112.906 4.72803 112.891 4.71326 112.817 4.71326C112.123 4.72803 111.428 4.72803 110.719 4.74281C110.63 4.74281 110.601 4.78713 110.586 4.87578C110.497 5.48156 110.394 6.10211 110.305 6.70789C110.172 7.56484 110.039 8.42179 109.892 9.27874C109.862 9.45604 109.818 9.47082 109.67 9.38217C109.64 9.36739 109.596 9.33784 109.566 9.30829C109.049 8.82072 108.399 8.71729 107.734 8.73207C106.744 8.74684 105.888 9.14577 105.193 9.85497C104.454 10.6085 104.026 11.5245 103.922 12.5883C103.834 13.6669 104.144 14.6125 104.942 15.3661C105.119 15.5581 105.341 15.6911 105.592 15.7798C106.065 15.9423 106.552 15.9866 107.055 15.9571C107.705 15.9127 108.296 15.7059 108.798 15.2774C108.828 15.2479 108.843 15.2035 108.902 15.2331C108.961 15.3808 108.857 15.5434 108.975 15.6763C109.227 15.6763 109.227 15.6763 109.271 15.9275C109.271 15.9423 109.286 15.9423 109.286 15.9571C109.345 15.7207 109.522 15.7207 109.714 15.7207C110.172 15.7354 110.63 15.6763 111.088 15.6911C111.325 15.6911 111.354 15.6468 111.399 15.4252C111.886 12.1008 112.374 8.77639 112.847 5.45201C112.876 5.28948 112.906 5.15651 113.113 5.17128C113.142 5.17128 113.172 5.15651 113.186 5.12696C113.186 5.03831 113.157 5.05308 113.127 5.05308ZM109.493 12.6327C109.182 13.5044 108.178 14.0511 107.335 13.8147C107.129 13.7556 106.937 13.6817 106.804 13.5044C106.582 13.2237 106.582 12.8986 106.641 12.5588C106.818 11.6575 107.661 10.9779 108.577 11.0074C108.872 11.0222 109.168 11.0813 109.374 11.3177C109.67 11.7462 109.655 12.1894 109.493 12.6327Z\" fill=\"#68A678\"/>\n<path d=\"M97.7316 9.04231C97.7907 8.87978 97.7169 8.86501 97.5691 8.86501C97.0224 8.86501 96.4758 8.86501 95.9439 8.86501C95.7961 8.86501 95.6188 8.80591 95.5154 8.89456C95.4267 8.96843 95.412 9.14573 95.3676 9.27871V9.29348C95.3529 9.41168 95.3085 9.41168 95.2199 9.33781C94.8801 9.02753 94.4959 8.79113 94.0379 8.73203C92.8411 8.55473 91.7773 8.87978 90.876 9.67763C90.0486 10.4016 89.6054 11.3472 89.4724 12.4406C89.3394 13.5635 89.6054 14.5386 90.4771 15.3217C91.866 16.3707 93.1957 16.0605 94.5107 15.1887C94.555 15.3217 94.4664 15.499 94.5698 15.632C94.6732 15.5876 94.7766 15.6172 94.8801 15.6024C94.9392 15.6467 94.9983 15.6467 95.0574 15.6467C95.5745 15.6467 96.1064 15.6467 96.6383 15.6467C96.786 15.6467 96.8895 15.5876 96.9042 15.4251C96.9042 15.3808 96.919 15.3512 96.919 15.3069C97.185 13.3714 97.4509 11.4211 97.7169 9.48556C97.7316 9.39691 97.7316 9.30826 97.7169 9.21961C97.7316 9.16051 97.7169 9.08663 97.7316 9.04231ZM95.1312 12.3371C94.9835 13.3123 93.8901 14.051 92.9298 13.8294C92.7229 13.7851 92.5308 13.6964 92.3683 13.5487C92.058 13.135 92.1171 12.6917 92.2797 12.2485C92.5308 11.5984 93.0332 11.1995 93.7128 11.0517C94.0083 10.9778 94.3186 10.9926 94.6141 11.096C94.7175 11.1404 94.821 11.1699 94.8801 11.2881C95.1756 11.5836 95.1903 11.953 95.1312 12.3371Z\" fill=\"#68A679\"/>\n<path d=\"M11.6671 0.901268C11.9479 0.827393 12.2286 0.753518 12.5093 0.694418C12.7753 0.679642 13.0264 0.605767 13.2924 0.546667C13.3663 0.546667 13.4401 0.517117 13.514 0.517117C13.78 0.384142 14.0902 0.384142 14.3857 0.339817C15.0063 0.221616 15.6416 0.162516 16.2769 0.103416C16.7054 0.0590911 17.1487 0.0590911 17.5772 0.029541C18.0352 0.0590911 18.508 0.029541 18.966 0.044316C19.0251 0.0738661 19.0842 0.103416 19.1581 0.0738661C19.3354 0.029541 19.5127 0.0738661 19.69 0.0886411C19.823 0.103416 19.9559 0.118191 20.0889 0.118191C20.1332 0.118191 20.2071 0.103416 20.2071 0.177291C20.2071 0.236391 20.1628 0.265942 20.1185 0.295492C20.0741 0.310267 20.015 0.325042 19.9707 0.325042C19.5718 0.384142 19.1729 0.472792 18.7592 0.487567C18.6853 0.502342 18.6114 0.502342 18.5375 0.517117C18.508 0.531892 18.4784 0.531892 18.4489 0.531892C18.2716 0.517117 18.0943 0.590992 17.9318 0.546667C17.9465 0.531892 17.9761 0.546667 18.0056 0.576217C17.9909 0.635317 17.9318 0.650092 17.8874 0.650092C17.7692 0.650092 17.6658 0.679642 17.5476 0.679642C17.4737 0.664867 17.4146 0.635317 17.3407 0.694418C17.0157 0.783068 16.6759 0.797843 16.3508 0.856943C15.2279 1.06379 14.105 1.32974 13.0117 1.66957C11.7853 2.05372 10.6033 2.51175 9.46566 3.08797C8.195 3.7233 6.98345 4.47683 5.91965 5.4372C5.16612 6.10208 4.50124 6.84083 3.99889 7.71256C3.64429 8.31833 3.39312 8.96844 3.31924 9.66286C3.31924 9.70719 3.30447 9.75151 3.27492 9.79584C3.23059 10.0322 3.24537 10.2686 3.27492 10.5198C3.31924 10.5641 3.31924 10.6085 3.31924 10.6676C3.42267 11.4506 3.74772 12.1155 4.23529 12.7213C4.90017 13.5339 5.75712 14.0658 6.68795 14.5091C7.32328 14.8046 7.98815 15.0262 8.6678 15.2183C8.7269 15.233 8.80078 15.2331 8.81555 15.3217C8.75645 15.4251 8.63825 15.3512 8.56438 15.3808C8.44618 15.366 8.32798 15.3512 8.20978 15.3512C8.1359 15.3217 8.0768 15.3808 8.00293 15.3512C7.92905 15.3217 7.86995 15.3365 7.79608 15.3365C6.73228 15.1296 5.68325 14.8932 4.67854 14.4795C3.88069 14.1545 3.12717 13.7555 2.47706 13.1941C1.60534 12.4406 0.999561 11.5836 0.792711 10.4607C0.64496 9.66286 0.76316 8.89456 1.04389 8.15581C1.35416 7.31363 1.87129 6.58966 2.46229 5.92478C3.59997 4.63935 4.98882 3.67897 6.49587 2.88112C7.61878 2.27535 8.80078 1.78777 10.0123 1.37407C10.3374 1.27064 10.6624 1.16722 10.9875 1.07857C11.1943 1.01947 11.4307 0.945593 11.6671 0.901268Z\" fill=\"#68A679\"/>\n<path d=\"M64.4731 10.8597C64.3254 9.78111 63.7639 9.02758 62.7297 8.62866C61.9466 8.33315 61.134 8.3627 60.3213 8.52523C59.3166 8.71731 58.5483 9.29353 57.8835 10.0175C57.8539 10.0914 57.7948 10.1209 57.7505 10.18C57.6618 10.2982 57.5732 10.4017 57.4993 10.5199C57.0413 11.3768 56.8492 12.2781 56.9822 13.2532C57.1447 14.3909 57.7653 15.1592 58.8586 15.5286C59.4644 15.7354 60.0702 15.7945 60.7055 15.7354C61.4886 15.6616 62.2421 15.499 62.8922 14.9967C62.9365 14.9671 62.9661 14.9228 63.0252 14.908C63.1877 14.7455 63.365 14.583 63.5275 14.4057C63.7491 14.1693 63.9117 13.8886 64.0299 13.5783C64.0594 13.4749 64.0742 13.4305 63.9412 13.4305C63.2911 13.4305 62.641 13.4305 61.9909 13.4305C61.9318 13.4305 61.8875 13.4305 61.8432 13.4749C61.5033 13.9033 61.0158 14.0215 60.4986 14.0363C59.819 14.0511 59.3757 13.6522 59.3166 13.0168C59.3019 12.8691 59.3462 12.8395 59.4939 12.8395C60.9419 12.8395 62.3751 12.8395 63.8082 12.8395C63.8673 12.8395 63.9412 12.8691 63.9855 12.81C63.8969 12.7213 63.7787 12.7509 63.6753 12.7509C62.3455 12.7509 61.0158 12.7509 59.7008 12.7509C59.6269 12.7509 59.553 12.7509 59.4939 12.7509C59.4496 12.7361 59.3905 12.7361 59.4053 12.6622C59.4053 12.6031 59.4348 12.5736 59.4939 12.5588C59.5678 12.544 59.6417 12.544 59.7303 12.544C61.0749 12.544 62.4342 12.544 63.7787 12.544C63.8821 12.544 64.0003 12.5588 64.089 12.4849C64.3845 12.4849 64.3845 12.4849 64.4436 12.1747C64.5027 11.761 64.5322 11.3177 64.4731 10.8597ZM61.9614 11.037C61.917 11.1109 61.8432 11.0813 61.7841 11.0813C61.1192 11.0961 60.4543 11.1109 59.7894 11.1404C59.6417 11.1404 59.6121 11.1109 59.6565 10.9779C59.7156 10.8154 59.7747 10.6528 59.9224 10.5642C60.0258 10.4164 60.1884 10.3869 60.3509 10.3426C60.7498 10.2244 61.1487 10.2244 61.5329 10.446C61.7102 10.5494 61.8432 10.7119 61.9466 10.8892C61.9761 10.9336 61.9909 10.9779 61.9614 11.037Z\" fill=\"#327850\"/>\n<path d=\"M73.013 10.9187C72.8801 9.84011 72.3334 9.05703 71.2844 8.65811C70.649 8.40693 69.9842 8.40693 69.3193 8.48081C67.9304 8.61378 66.9257 9.33776 66.1426 10.4163C66.1279 10.4459 66.1131 10.4754 66.0983 10.4902C65.4778 11.4801 65.3448 12.5439 65.596 13.6668C65.7881 14.509 66.32 15.0852 67.0883 15.4398C68.1668 15.9126 69.275 15.8683 70.3831 15.558C70.8854 15.4251 71.3435 15.1591 71.7424 14.8045C72.097 14.4056 72.4664 14.0067 72.6141 13.4748C72.5846 13.46 72.5846 13.46 72.5698 13.46C71.8754 13.46 71.1957 13.46 70.5013 13.46C70.457 13.46 70.4274 13.46 70.3979 13.5043C70.1024 13.8885 69.6739 14.0067 69.2159 14.0658C68.418 14.1544 67.827 13.6373 67.8861 12.869C67.9157 12.8394 67.9304 12.7951 67.9452 12.7656C67.96 12.6178 68.0634 12.5735 68.1964 12.5735C69.6887 12.5883 71.1957 12.5587 72.688 12.5883C72.7175 12.5587 72.7175 12.5144 72.7766 12.5144C72.9244 12.5439 72.9539 12.4553 72.9687 12.3371C73.0426 11.8643 73.0721 11.3915 73.013 10.9187ZM70.4422 11.0812C69.7478 11.096 69.0386 11.1108 68.3441 11.1403C68.1964 11.1403 68.1816 11.096 68.2112 10.963C68.2407 10.83 68.2998 10.7266 68.4032 10.638C68.5214 10.4754 68.6987 10.4163 68.876 10.3572C69.3488 10.2095 69.8216 10.1799 70.2353 10.505C70.4126 10.638 70.5752 10.8153 70.5604 11.0664C70.5308 11.096 70.4865 11.0812 70.4422 11.0812Z\" fill=\"#327850\"/>\n<path d=\"M80.105 8.6582C80.2528 8.70252 80.3858 8.73207 80.5335 8.79117C81.1097 9.0128 81.3757 9.47082 81.4939 10.047C81.5973 10.5789 81.4496 11.0961 81.3757 11.6132C81.287 12.2633 81.1688 12.9282 81.0654 13.5783C81.0063 13.9329 80.9472 14.2875 80.8881 14.6569C80.8438 14.908 80.8142 15.1592 80.7847 15.4252C80.7699 15.5138 80.7256 15.5286 80.6517 15.5286C80.5483 15.5286 80.4596 15.5138 80.3562 15.5434C80.1494 15.5877 79.9425 15.5581 79.7357 15.5581C79.3811 15.5581 79.0117 15.5581 78.6571 15.5581C78.4207 15.5581 78.3911 15.5286 78.4207 15.307C78.5241 14.5239 78.6571 13.7408 78.7605 12.9577C78.8344 12.3667 78.923 11.7757 78.923 11.1847C78.923 10.8006 78.7753 10.6085 78.4059 10.5051C78.1104 10.4164 77.8149 10.4607 77.5342 10.5937C77.4012 10.6528 77.2535 10.7119 77.1353 10.8154C76.8545 11.037 76.7363 11.3325 76.6772 11.6723C76.4852 12.8395 76.3079 14.0068 76.1158 15.174C76.0567 15.499 76.0567 15.499 75.7316 15.5286C75.7021 15.5286 75.6725 15.5434 75.643 15.5581C75.0372 15.5877 74.4314 15.5729 73.8257 15.5581C73.6779 15.5581 73.6483 15.499 73.6779 15.307C73.7813 14.6273 73.87 13.9624 73.9734 13.2828C74.1655 12.0121 74.3428 10.7267 74.5349 9.45605C74.5496 9.35262 74.5496 9.2492 74.6235 9.17532C74.6235 9.16055 74.6383 9.14577 74.6383 9.131C74.7122 8.79117 74.7122 8.79117 75.052 8.79117C75.6578 8.79117 76.2488 8.79117 76.8545 8.7764C76.9875 8.7764 77.0318 8.79117 77.0023 8.93892C76.9727 9.14577 76.8841 9.33785 76.8841 9.55947C77.874 8.90937 78.9083 8.46612 80.105 8.6582Z\" fill=\"#327850\"/>\n<path d=\"M98.5295 15.7059C98.1749 15.7059 98.1749 15.7059 98.234 15.3365C98.3818 14.2875 98.5295 13.2532 98.6773 12.2042C98.825 11.1847 98.958 10.1505 99.1057 9.131C99.1205 9.04235 99.1648 9.01279 99.2387 9.01279C99.9479 9.01279 100.642 9.01279 101.352 9.01279C101.425 9.01279 101.47 9.02757 101.455 9.131C101.44 9.1901 101.44 9.26397 101.44 9.32307C101.47 9.50037 101.455 9.67767 101.411 9.81065C101.529 9.722 101.632 9.58902 101.75 9.47082C101.78 9.58902 101.824 9.50037 101.854 9.47082C102.282 9.14577 102.77 8.9537 103.302 8.90937C103.331 8.90937 103.376 8.90937 103.405 8.89459C103.553 8.86504 103.597 8.92414 103.568 9.0719C103.553 9.11622 103.568 9.16055 103.568 9.21965C103.612 9.3674 103.568 9.51515 103.553 9.6629C103.523 9.97317 103.479 10.2834 103.435 10.5937C103.39 10.904 103.376 10.904 103.065 10.9188C102.681 10.9335 102.312 10.9926 101.972 11.1699C101.691 11.3177 101.485 11.5246 101.366 11.8348C101.145 12.3815 101.041 12.9577 100.938 13.534C100.82 14.1988 100.746 14.8637 100.628 15.5286C100.583 15.7798 100.554 15.8093 100.288 15.8093C99.7558 15.7945 99.2387 15.765 98.7068 15.7798C98.6477 15.7502 98.5886 15.7354 98.5295 15.7059Z\" fill=\"#68A679\"/>\n<path d=\"M54.5886 11.2143C54.4408 11.2882 54.3669 11.4211 54.3078 11.5689C54.0419 12.1894 53.9089 12.8395 53.8055 13.4896C53.7168 14.0806 53.6134 14.6569 53.5395 15.2479C53.51 15.44 53.4361 15.5138 53.244 15.4843C53.2145 15.4843 53.1702 15.4843 53.1406 15.4843C53.0667 15.5286 52.9929 15.5286 52.919 15.5286C52.4314 15.5286 51.9438 15.5286 51.4415 15.5286C51.1903 15.5286 51.1608 15.4843 51.1903 15.2331C51.4563 13.2828 51.7518 11.3473 52.0325 9.39696C52.0325 9.36741 52.0473 9.32309 52.0473 9.29354C52.0768 9.16056 52.062 9.07191 51.8995 9.07191C51.8552 9.07191 51.8256 9.05714 51.7961 9.02759C51.8109 8.99804 51.8256 8.99804 51.8552 8.99804C52.062 9.02759 52.2246 8.99804 52.195 8.73209C52.195 8.65821 52.2393 8.64344 52.2984 8.65821C52.9781 8.67299 53.643 8.64344 54.3226 8.67299C54.426 8.67299 54.4556 8.70254 54.4408 8.82074C54.3817 9.07191 54.3522 9.33786 54.3078 9.58904C54.2931 9.64814 54.2783 9.72201 54.3374 9.75156C54.3965 9.78111 54.426 9.72201 54.4704 9.67769C54.8693 9.33786 55.2978 9.04236 55.7706 8.83551C56.007 8.73209 56.2434 8.64344 56.5093 8.62866C56.598 8.62866 56.6275 8.64344 56.6127 8.74686C56.5241 9.33786 56.4502 9.94364 56.3763 10.5346C56.3616 10.6381 56.332 10.6824 56.2138 10.6676C56.1399 10.6528 56.0365 10.6233 55.9774 10.7267C55.4455 10.7119 54.9727 10.8745 54.5886 11.2143Z\" fill=\"#327850\"/>\n<path d=\"M10.9875 1.10807C9.56906 1.52177 8.18021 2.05368 6.86523 2.73333C5.68323 3.3391 4.5751 4.03353 3.5704 4.90526C2.75777 5.61446 2.03379 6.39753 1.48712 7.34314C1.01432 8.17054 0.733591 9.05704 0.792691 10.0174C0.837017 10.8153 1.11774 11.5245 1.59054 12.1746C2.41795 13.2827 3.5704 13.9624 4.82628 14.4647C5.66845 14.8045 6.55495 15.0262 7.44146 15.1887C7.55966 15.2035 7.67786 15.2478 7.79606 15.2773C7.85516 15.2478 7.91426 15.2773 7.97336 15.3069C8.03246 15.3069 8.07678 15.3217 8.12111 15.3512C8.16543 15.366 8.20976 15.3808 8.25408 15.3955C8.25408 15.4694 8.20976 15.4399 8.16543 15.4251C6.89478 15.3217 5.65368 15.0557 4.4569 14.6272C3.48175 14.2726 2.58047 13.7998 1.79739 13.1202C1.01432 12.4257 0.452866 11.5836 0.26079 10.5345C0.0982649 9.58894 0.29034 8.70244 0.689266 7.84549C1.22117 6.73736 2.01902 5.85086 2.93507 5.05301C4.4569 3.73803 6.20035 2.79243 8.04723 2.0389C8.94851 1.66952 9.86456 1.35925 10.7954 1.10807C10.8397 1.0933 10.8693 1.0933 10.9136 1.07852C10.9431 1.06375 10.9875 1.04897 10.9875 1.10807Z\" fill=\"#373435\"/>\n<path d=\"M41.6752 5.27466C41.6309 5.39286 41.5127 5.43718 41.4388 5.52583C40.4488 6.44189 39.7101 7.50569 39.2964 8.80589C39.0009 9.75149 38.8827 10.7119 38.9566 11.7018C39.0304 12.6031 39.2816 13.46 39.7692 14.2283C40.2863 15.041 41.0103 15.5876 41.8968 15.9275C42.5174 16.1639 43.1527 16.2821 43.8028 16.3264C44.8961 16.415 45.9599 16.223 46.9942 15.8536C47.1419 15.8093 47.2601 15.6911 47.4374 15.7058C46.7135 16.1786 45.9156 16.4298 45.0587 16.5776C43.9505 16.7696 42.8572 16.7401 41.7786 16.415C40.0351 15.8979 38.9713 14.7159 38.5724 12.9577C37.9666 10.2686 38.9713 7.15109 41.6456 5.30421C41.6604 5.27466 41.6752 5.27466 41.6752 5.27466Z\" fill=\"#373435\"/>\n<path d=\"M83.7988 12.6179C83.7249 12.677 83.6954 12.5884 83.6658 12.544C83.2521 12.1599 83.0601 11.6723 82.9714 11.1404C82.7793 9.98795 83.1635 8.99803 83.8875 8.11152C84.4637 7.38755 85.2172 6.91475 86.1185 6.75222C87.0493 6.5897 87.9506 6.7079 88.8223 7.07727C88.9996 7.15115 89.1769 7.2398 89.369 7.32845C89.4281 6.95907 89.4872 6.5897 89.5463 6.23509C89.6202 5.76229 89.6941 5.28949 89.7679 4.83147C89.7827 4.77237 89.7679 4.69849 89.8566 4.68372C89.9896 4.69849 90.0191 4.77237 90.0043 4.90534C89.9009 5.71797 89.7532 6.51582 89.635 7.32845C89.5906 7.63872 89.5759 7.63872 89.2804 7.49097C88.2904 7.01817 87.2562 6.81132 86.1924 7.1216C84.7887 7.52052 83.9613 8.51045 83.5181 9.85498C83.2521 10.8006 83.326 11.7314 83.7988 12.6179Z\" fill=\"#373435\"/>\n<path d=\"M109.301 15.9127C109.315 15.632 109.315 15.632 109.611 15.632C110.143 15.6172 110.66 15.6025 111.192 15.6025C111.31 15.6025 111.339 15.5434 111.354 15.4399C111.443 14.8342 111.532 14.2432 111.605 13.6374C111.709 12.8691 111.827 12.1156 111.93 11.3473C112.049 10.579 112.152 9.79588 112.27 9.02758C112.389 8.1854 112.521 7.34323 112.64 6.50105C112.699 6.1169 112.758 5.73275 112.802 5.3486C112.832 5.06787 112.832 5.06787 113.112 5.06787C113.142 5.06787 113.157 5.06787 113.186 5.06787C113.157 5.5259 113.068 5.98392 112.994 6.44195C112.817 7.7126 112.625 8.96848 112.448 10.2391C112.256 11.5689 112.063 12.9134 111.857 14.2432C111.783 14.7603 111.694 15.2774 111.635 15.7945C111.62 15.898 111.591 15.9275 111.487 15.9275C110.808 15.9423 110.113 15.9571 109.434 15.9571C109.389 15.9866 109.315 16.0162 109.301 15.9127Z\" fill=\"#373435\"/>\n<path d=\"M98.5296 15.7059C99.1206 15.7206 99.7263 15.7206 100.317 15.7354C100.48 15.7354 100.524 15.6911 100.554 15.5285C100.702 14.6568 100.805 13.7851 100.982 12.9134C101.056 12.5735 101.145 12.2337 101.263 11.9087C101.47 11.3177 101.898 11.0369 102.489 10.904C102.726 10.8596 102.962 10.8153 103.213 10.8301C103.317 10.8301 103.361 10.8005 103.376 10.6823C103.435 10.2243 103.494 9.76629 103.553 9.30826C103.553 9.27871 103.568 9.23439 103.583 9.20484C103.597 9.20484 103.612 9.20484 103.612 9.20484C103.671 9.19006 103.73 9.20483 103.789 9.19006C103.893 9.16051 103.908 9.21961 103.893 9.30826C103.834 9.79584 103.775 10.2834 103.701 10.7562C103.686 10.8744 103.701 11.0222 103.627 11.096C103.553 11.1847 103.405 11.1256 103.287 11.1404C102.977 11.1699 102.667 11.2142 102.371 11.3472C102.016 11.495 101.751 11.7461 101.603 12.1007C101.366 12.677 101.248 13.2975 101.16 13.9181C101.056 14.5682 100.938 15.233 100.849 15.8832C100.834 16.0014 100.79 16.0161 100.672 16.0161C100.022 16.0014 99.357 15.9866 98.7069 15.9866C98.5443 15.9866 98.4557 15.957 98.5296 15.7797C98.5443 15.765 98.5296 15.7354 98.5296 15.7059Z\" fill=\"#373435\"/>\n<path d=\"M57.78 10.18C57.7356 10.313 57.6322 10.4164 57.5583 10.5346C57.1299 11.3029 56.923 12.1303 56.9969 13.0168C57.056 13.7556 57.2924 14.4352 57.8834 14.9523C58.2971 15.3069 58.7699 15.5138 59.3018 15.632C60.144 15.8093 60.9862 15.7354 61.8136 15.5138C62.1386 15.4251 62.4489 15.2922 62.7296 15.1001C62.7887 15.0558 62.833 15.0114 62.9069 14.9967C62.9217 15.0114 62.9217 15.0114 62.9217 15.0262C62.9217 15.041 62.9217 15.041 62.9069 15.041C62.4193 15.499 61.8431 15.7945 61.193 15.9423C60.4247 16.1196 59.6416 16.1491 58.8585 15.9718C57.5288 15.6615 56.7309 14.7603 56.6423 13.401C56.5684 12.2337 56.8787 11.1699 57.6618 10.2686C57.6913 10.2391 57.7061 10.2243 57.7356 10.1948C57.7504 10.1652 57.7652 10.1652 57.78 10.18Z\" fill=\"#373435\"/>\n<path d=\"M66.1427 10.4164C66.0984 10.6232 65.9506 10.7858 65.8768 10.9926C65.596 11.687 65.4778 12.3962 65.5517 13.135C65.6108 13.8146 65.8472 14.4352 66.3643 14.908C66.8224 15.3217 67.369 15.5581 67.9748 15.6615C68.8318 15.8093 69.6887 15.7354 70.5161 15.4694C70.915 15.3365 71.2844 15.1296 71.6095 14.8784C71.6538 14.8489 71.6833 14.7898 71.7572 14.8046C71.4174 15.1887 71.0037 15.4842 70.5309 15.6911C69.4523 16.1343 68.3294 16.223 67.2065 15.8831C66.0688 15.5433 65.4187 14.7602 65.271 13.593C65.1232 12.4701 65.3892 11.4506 66.0541 10.5198C66.0688 10.4755 66.0984 10.4459 66.1427 10.4164Z\" fill=\"#373435\"/>\n<path d=\"M51.7813 9.04236C52.1655 9.05713 52.1507 9.05713 52.0916 9.42651C52.0029 9.95841 51.9291 10.5051 51.8552 11.037C51.7813 11.5541 51.7074 12.086 51.6336 12.6031C51.5597 13.135 51.471 13.6669 51.3972 14.1988C51.3381 14.5682 51.3085 14.9376 51.2346 15.307C51.2051 15.4695 51.2642 15.4695 51.3824 15.4695C51.9734 15.4695 52.5496 15.4695 53.1406 15.4695C53.0667 15.8241 53.0667 15.8241 52.6974 15.8241C52.1359 15.8241 51.5597 15.8241 50.9982 15.8241C50.9391 15.8241 50.8653 15.8241 50.7914 15.8241C50.9835 14.4648 51.1903 13.1055 51.3824 11.761C51.5006 10.904 51.6336 10.0323 51.7518 9.17533C51.7518 9.14578 51.7665 9.08668 51.7813 9.04236Z\" fill=\"#373435\"/>\n<path d=\"M94.8801 15.5876C95.4711 15.5876 96.0769 15.5876 96.6679 15.5876C96.7861 15.5876 96.8304 15.5581 96.8452 15.4399C96.9338 14.7898 97.0225 14.1397 97.1111 13.4896C97.2145 12.7508 97.318 12.0269 97.4214 11.2881C97.51 10.638 97.5987 10.0027 97.6873 9.35258C97.6873 9.30825 97.6873 9.26393 97.7317 9.2196C98.0567 9.2196 98.0567 9.2196 98.0124 9.54465C97.7612 11.3472 97.5248 13.135 97.2736 14.9375C97.2293 15.2183 97.185 15.5138 97.1554 15.7945C97.1407 15.9275 97.0963 15.9422 96.9781 15.9422C96.328 15.9422 95.6779 15.9422 95.0278 15.957C94.8949 15.957 94.8358 15.9275 94.8653 15.7945C94.8949 15.7206 94.8801 15.6615 94.8801 15.5876Z\" fill=\"#373435\"/>\n<path d=\"M77.1205 10.7857C77.3126 10.5198 77.6081 10.4311 77.9184 10.3868C78.14 10.3573 78.3469 10.3868 78.5537 10.4755C78.8197 10.5937 78.9526 10.8005 78.9674 11.0812C78.9822 11.6279 78.9083 12.1598 78.8345 12.6917C78.731 13.4748 78.6128 14.2726 78.5094 15.0557C78.4946 15.1591 78.4946 15.2626 78.4651 15.3512C78.4355 15.4842 78.4946 15.4842 78.5833 15.4842C79.1152 15.4842 79.6323 15.4842 80.1642 15.4842C80.2233 15.4842 80.2972 15.4694 80.3563 15.5138V15.5285C80.3267 15.7945 80.3267 15.7945 80.0608 15.7945C79.455 15.7945 78.8492 15.7945 78.2435 15.7945C78.1253 15.7945 78.0809 15.7797 78.0957 15.6467C78.2582 14.4795 78.4651 13.3123 78.5685 12.1303C78.5833 11.9382 78.5981 11.7313 78.6128 11.5245C78.6276 10.9926 78.2435 10.6528 77.6525 10.6675C77.4604 10.6971 77.2978 10.7414 77.1205 10.7857Z\" fill=\"#373435\"/>\n<path d=\"M74.6087 9.14575C74.5792 9.54468 74.5053 9.92883 74.4462 10.313C74.3723 10.8301 74.2985 11.362 74.2098 11.8791C74.1212 12.4997 74.0325 13.1202 73.9439 13.7408C73.87 14.2875 73.7961 14.8489 73.7075 15.3956C73.6927 15.5286 73.7666 15.499 73.8257 15.499C74.3576 15.499 74.9043 15.499 75.4362 15.499C75.51 15.499 75.5839 15.4695 75.643 15.5433C75.643 15.5877 75.6282 15.632 75.6282 15.6911C75.6282 15.7945 75.5691 15.8388 75.4657 15.8388C74.8008 15.8388 74.1359 15.8388 73.4711 15.8388C73.3676 15.8388 73.3381 15.8241 73.3529 15.7059C73.6631 13.6226 73.9586 11.5245 74.2689 9.44125C74.2985 9.14575 74.2985 9.14575 74.6087 9.14575Z\" fill=\"#373435\"/>\n<path d=\"M18.7443 0.443251C18.9216 0.369376 19.1137 0.428476 19.291 0.384151C19.5274 0.325051 19.7934 0.310276 20.0298 0.265951C20.0889 0.251176 20.1775 0.251176 20.1627 0.192075C20.1627 0.103425 20.0741 0.132975 20.0298 0.132975C19.7934 0.162525 19.5717 0.0591001 19.3501 0.0886502C19.2762 0.103425 19.2024 0.0886502 19.1285 0.132975C19.0398 0.192075 18.9955 0.14775 18.9807 0.0591001C19.0103 0.0295501 19.0546 0.0591001 19.0841 0.0295501C19.1137 0.0295501 19.1285 0.0295501 19.158 0.0295501C19.2319 0.0591001 19.3058 0.0295501 19.3797 0.0591001C19.8081 0.0591001 20.2366 0.103425 20.6503 0.162525C20.8719 0.192075 21.0788 0.14775 21.2856 0.132975C22.1721 0.0443251 23.0586 0 23.9451 0C25.1567 0.014775 26.3535 0.1182 27.5355 0.354601C27.5502 0.354601 27.565 0.369376 27.5798 0.384151C27.5355 0.472801 27.4616 0.458026 27.3877 0.472801C27.2843 0.472801 27.1956 0.458026 27.0922 0.502351C27.0479 0.517126 27.0183 0.531901 26.974 0.531901C26.4421 0.413701 25.925 0.546676 25.3931 0.517126C25.1715 0.546676 24.9498 0.561451 24.7282 0.517126C24.8021 0.517126 24.8612 0.502351 24.9203 0.531901C24.8612 0.664877 24.7578 0.605776 24.6543 0.605776C24.5361 0.576226 24.4179 0.561451 24.2997 0.605776C24.2406 0.635326 24.1963 0.635326 24.1372 0.605776C24.0633 0.591001 23.9895 0.576226 23.9008 0.576226C23.7826 0.576226 23.6496 0.576226 23.5314 0.591001C23.3098 0.591001 23.103 0.576226 22.8961 0.517126C22.7336 0.443251 22.5711 0.517126 22.4085 0.472801C22.3347 0.443251 22.2312 0.443251 22.1426 0.428476C22.0539 0.413701 21.9653 0.384151 21.8766 0.384151C21.5368 0.339826 21.197 0.295501 20.8424 0.251176C20.7685 0.251176 20.6946 0.236401 20.6208 0.265951C20.5617 0.280726 20.5026 0.310276 20.4435 0.325051C20.2809 0.295501 20.1184 0.339826 19.9707 0.339826C19.9263 0.339826 19.8672 0.354601 19.8525 0.354601C20.148 0.310276 20.473 0.354601 20.7981 0.310276C21.1083 0.295501 21.4186 0.310276 21.7289 0.339826C21.8323 0.384151 21.9357 0.354601 22.0392 0.398926C22.0539 0.413701 22.0392 0.443251 22.0244 0.458026C21.8914 0.517126 21.7584 0.531901 21.6255 0.487576C21.5664 0.472801 21.4925 0.458026 21.4334 0.458026C20.9606 0.458026 20.4878 0.458026 20.0298 0.458026C19.9411 0.458026 19.8525 0.458026 19.7786 0.502351C19.7195 0.531901 19.6752 0.531901 19.6013 0.517126C19.4092 0.458026 19.2319 0.472801 19.0546 0.546676C19.0103 0.561451 18.9512 0.576226 18.9068 0.546676C18.8773 0.517126 18.8034 0.487576 18.7443 0.443251Z\" fill=\"#68A679\"/>\n<path d=\"M82.5873 15.8387C82.6464 15.7796 82.7055 15.8387 82.7498 15.8535C83.3999 16.1195 84.0943 16.2524 84.7888 16.3115C85.8378 16.4002 86.8573 16.2377 87.8767 15.9274C88.2461 15.824 88.3643 15.6171 88.3791 15.2773C88.4234 14.6272 88.4973 13.9771 88.5564 13.327C88.5564 13.2827 88.5712 13.2383 88.5859 13.194C88.6598 13.1497 88.7337 13.1054 88.8223 13.0463C88.8519 13.2974 88.8076 13.5486 88.7928 13.785C88.7485 14.4203 88.6746 15.0409 88.6303 15.6762C88.6303 15.7501 88.6007 15.824 88.6007 15.8831C88.6155 16.0308 88.5269 16.0899 88.3939 16.149C87.463 16.5184 86.4879 16.6809 85.4832 16.6514C84.4489 16.5923 83.4738 16.3706 82.5873 15.8387Z\" fill=\"#373435\"/>\n<path d=\"M45.3246 9.78101C45.2803 10.0913 45.2507 10.4016 45.2064 10.6971C45.1621 10.9926 45.1177 11.2881 45.0734 11.5836C45.0586 11.7165 45.0882 11.7756 45.2359 11.7756C45.6053 11.7609 45.9747 11.7756 46.3441 11.7756C46.6691 11.7756 46.9942 11.8052 47.3192 11.8052C47.4079 11.8052 47.4522 11.8347 47.4374 11.9234C47.3192 12.5883 46.9498 13.0758 46.3588 13.4157C46.3441 13.4304 46.3145 13.4304 46.285 13.4304C46.61 13.1202 46.8021 12.736 46.876 12.2928C46.9055 12.1746 46.876 12.145 46.7578 12.145C46.0633 12.1302 45.3837 12.1155 44.6893 12.1155C44.5267 12.1155 44.4972 12.0711 44.512 11.9086C44.6154 11.229 44.704 10.5641 44.7927 9.88443C44.8075 9.79578 44.837 9.78101 44.9109 9.78101C45.0734 9.78101 45.2064 9.78101 45.3246 9.78101Z\" fill=\"#373435\"/>\n<path d=\"M67.8713 12.8691C67.8713 12.8395 67.8713 12.8248 67.8713 12.7952C67.8713 12.5293 67.8861 12.5145 68.1521 12.5145C69.5852 12.5145 71.0332 12.5145 72.4664 12.5145C72.5402 12.5145 72.6289 12.4702 72.6584 12.5884C72.6289 12.8691 72.6289 12.8691 72.3482 12.8691C70.8559 12.8691 69.3636 12.8691 67.8713 12.8691Z\" fill=\"#373535\"/>\n<path d=\"M44.1722 6.82605C44.1279 6.76695 44.187 6.76695 44.2165 6.75217C44.6302 6.47145 45.0882 6.30892 45.5906 6.27937C46.4475 6.23505 47.2749 6.36802 48.0728 6.70785C48.1467 6.7374 48.2353 6.75217 48.2649 6.84082C48.2058 6.98857 48.1762 7.19542 48.0728 7.25452C47.9694 7.3284 47.8068 7.16587 47.6739 7.10677C46.743 6.69307 45.7679 6.54532 44.7484 6.66352C44.5268 6.69307 44.3495 6.76695 44.1722 6.82605Z\" fill=\"#373435\"/>\n<path d=\"M64.0003 12.8395C62.508 12.8395 61.0305 12.8395 59.5382 12.8395C59.4496 12.8395 59.3166 12.8986 59.3314 12.7213C59.3462 12.5883 59.3905 12.5144 59.553 12.5144C61.0601 12.5144 62.5819 12.5144 64.089 12.5144C64.0594 12.6178 64.0299 12.7213 64.0003 12.8395Z\" fill=\"#383536\"/>\n<path d=\"M90.4772 15.307C90.6101 15.3218 90.684 15.4252 90.7874 15.4843C91.6887 16.031 92.6048 16.0014 93.5652 15.6468C93.9345 15.5138 94.2596 15.2922 94.5699 15.0115C94.5699 15.2331 94.5699 15.4252 94.5699 15.6173C93.4765 16.3265 92.3388 16.5333 91.142 15.8684C90.8909 15.7207 90.6545 15.5434 90.4772 15.307Z\" fill=\"#373435\"/>\n<path d=\"M104.971 15.3512C105.252 15.5137 105.533 15.7206 105.873 15.7944C106.818 16.0013 107.72 15.9422 108.547 15.3955C108.665 15.3216 108.769 15.233 108.872 15.1296C108.902 15.1 108.916 15.0705 108.961 15.0852C109.005 15.1 108.99 15.1443 108.99 15.1739C108.99 15.3216 108.99 15.4842 109.005 15.6319C108.414 16.1195 107.72 16.2672 106.966 16.2525C106.242 16.2377 105.607 16.0308 105.104 15.4989C105.045 15.4398 105.016 15.3955 104.971 15.3512Z\" fill=\"#373435\"/>\n<path d=\"M9.9532 15.5434C10.3965 15.5877 10.8249 15.6468 11.2682 15.6911C11.9478 15.765 12.6423 15.7946 13.3367 15.7946C13.4106 15.7946 13.4697 15.7946 13.5583 15.7946C13.4992 15.8684 13.4253 15.8684 13.3515 15.898C11.4898 16.5333 9.58383 17.0504 7.67785 17.5971C7.33802 17.7005 6.98342 17.7892 6.6436 17.8926C6.62882 17.8926 6.56972 17.8926 6.59927 17.9369C6.59927 17.9517 6.62882 17.9369 6.6436 17.9369C6.7027 17.9369 6.77657 17.8778 6.8209 17.9665C6.55495 17.9813 6.27422 18.0108 6.00827 17.996C8.34273 17.3016 10.692 16.6958 12.9821 15.8684C11.6671 15.8684 10.3521 15.7798 9.05193 15.5286C9.0667 15.44 9.1258 15.4843 9.15535 15.4991C9.3031 15.4991 9.45085 15.4991 9.61338 15.5138C9.73158 15.5434 9.84978 15.5138 9.9532 15.5434Z\" fill=\"#383536\"/>\n<path d=\"M54.5886 11.2142C54.7511 10.9482 55.0318 10.8448 55.2978 10.7561C55.4898 10.6823 55.6967 10.6675 55.9035 10.6527C55.9479 10.6527 55.9626 10.6823 55.9774 10.7118C55.9774 10.7561 55.9626 10.8005 55.9626 10.8596C55.9626 10.9778 55.9035 11.0073 55.7853 11.0073C55.3716 10.9778 54.9579 11.0516 54.5886 11.2142Z\" fill=\"#373536\"/>\n<path d=\"M17.0157 15.8683C17.193 15.7353 17.3851 15.7797 17.5919 15.7944C17.9613 15.824 18.3454 15.824 18.7148 15.8388C18.9364 15.8683 19.1581 15.8388 19.3797 15.8535C19.424 15.8535 19.4979 15.8092 19.5274 15.8979C18.6853 15.9422 17.8431 15.9274 17.0157 15.8683Z\" fill=\"#393939\"/>\n<path d=\"M101.75 9.47071C101.691 9.64801 101.647 9.69234 101.366 9.88441C101.396 9.67756 101.425 9.50026 101.44 9.32296C101.499 9.32296 101.558 9.32296 101.618 9.32296C101.75 9.29341 101.795 9.35251 101.75 9.47071Z\" fill=\"#383636\"/>\n<path d=\"M8.53482 15.3365C8.6087 15.2774 8.71212 15.3365 8.786 15.2774C8.83032 15.2331 8.88942 15.2331 8.93375 15.2479C9.28835 15.3365 9.65772 15.366 10.0271 15.366C10.0862 15.366 10.1305 15.3661 10.1748 15.4252C10.0419 15.499 9.87935 15.3956 9.74637 15.4843C9.34745 15.4252 8.94852 15.3661 8.53482 15.3365Z\" fill=\"#5EA47D\"/>\n<path d=\"M19.5275 15.8979C19.3354 15.8388 19.1285 15.8832 18.9365 15.8684C18.8626 15.8684 18.7887 15.8979 18.7148 15.8388C19.1876 15.8388 19.6604 15.8388 20.1332 15.8241C20.1776 15.8241 20.2219 15.7797 20.2367 15.8684C20.0003 15.8832 19.7639 15.8979 19.5275 15.8979Z\" fill=\"#4A4D4B\"/>\n<path d=\"M10.9874 1.1081C10.9579 1.09332 10.9431 1.07855 10.9136 1.07855C11.1647 1.00467 11.4012 0.91602 11.6671 0.901245C11.4455 1.01945 11.2091 1.03422 10.9874 1.1081Z\" fill=\"#484D4A\"/>\n<path d=\"M13.2924 0.546726C13.056 0.635376 12.8048 0.664926 12.5536 0.724026C12.5388 0.724026 12.5093 0.709251 12.4945 0.694476C12.7309 0.620601 12.9673 0.576276 13.2037 0.546726C13.2333 0.531951 13.2628 0.531951 13.2924 0.546726Z\" fill=\"#5A876E\"/>\n<path d=\"M6.83566 17.996C6.77656 17.9369 6.71746 17.9812 6.65836 17.9664C6.76178 17.9073 6.86521 17.9369 6.96863 17.9369C7.14593 17.9221 7.33801 17.9221 7.51531 17.9073C7.53008 17.9221 7.53008 17.9369 7.51531 17.9517C7.47098 17.9664 7.42666 17.9517 7.38233 17.9664C7.19026 17.9664 7.01296 17.9812 6.83566 17.996Z\" fill=\"#4D4D4C\"/>\n<path d=\"M21.0197 15.765C21.2709 15.7354 21.5073 15.6615 21.7585 15.7206C21.5368 15.7502 21.3152 15.765 21.0936 15.7945C21.064 15.7797 21.0197 15.7945 21.0197 15.765Z\" fill=\"#558D6E\"/>\n<path d=\"M27.1071 0.428533C27.2105 0.369433 27.3139 0.413758 27.4173 0.398983C27.4764 0.398983 27.5503 0.398983 27.6094 0.354658C27.7128 0.339883 27.7867 0.384208 27.8901 0.398983C27.8754 0.487634 27.7867 0.458083 27.7276 0.472859C27.5799 0.472859 27.4321 0.472859 27.2844 0.472859C27.2253 0.487634 27.1514 0.502409 27.1071 0.428533Z\" fill=\"#5EA47D\"/>\n<path d=\"M27.7424 0.443246C27.7867 0.428471 27.8458 0.458021 27.8901 0.413696C28.0083 0.458021 28.1413 0.413696 28.2595 0.472796C28.2152 0.472796 28.1708 0.472796 28.1413 0.502346C27.9935 0.531897 27.8606 0.576222 27.7424 0.443246Z\" fill=\"#64A784\"/>\n<path d=\"M36.7403 6.35331C36.696 6.17601 36.696 5.99871 36.7403 5.82141C36.7403 5.99871 36.7403 6.17601 36.7403 6.35331Z\" fill=\"#539E77\"/>\n<path d=\"M20.2366 15.8683C20.2071 15.824 20.1627 15.8388 20.1332 15.824C20.2071 15.7797 20.2957 15.8092 20.3844 15.7944C20.4139 15.824 20.473 15.7944 20.4878 15.824C20.3991 15.8831 20.3253 15.8683 20.2366 15.8683Z\" fill=\"#62736A\"/>\n<path d=\"M9.18488 15.5137C9.15533 15.5285 9.09623 15.5137 9.08146 15.5433C9.00758 15.5285 8.93371 15.5137 8.85983 15.499C8.96326 15.4842 9.06668 15.4842 9.18488 15.5137Z\" fill=\"#767475\"/>\n<path d=\"M8.16544 15.4252C8.19499 15.4104 8.22454 15.3956 8.25409 15.3956C8.32796 15.4104 8.38706 15.4252 8.46094 15.4252C8.47571 15.4547 8.46094 15.4695 8.43139 15.4547C8.34274 15.44 8.25409 15.4547 8.16544 15.4252Z\" fill=\"#444142\"/>\n<path d=\"M22.0097 15.6615C22.1131 15.6172 22.2165 15.6024 22.32 15.6468C22.2165 15.6615 22.1131 15.6763 22.0097 15.6911C21.9949 15.6911 21.9949 15.6763 22.0097 15.6615C21.9949 15.6615 22.0097 15.6615 22.0097 15.6615Z\" fill=\"#63A07E\"/>\n<path d=\"M9.95322 15.5434C9.8498 15.5434 9.7316 15.5581 9.62817 15.5138C9.65772 15.499 9.70205 15.5138 9.7316 15.4695C9.80547 15.5138 9.87935 15.5286 9.95322 15.5434Z\" fill=\"#8E9A93\"/>\n<path d=\"M20.4878 15.8388C20.4583 15.8241 20.3992 15.8388 20.3844 15.8093C20.5026 15.8241 20.6208 15.765 20.739 15.8388C20.6503 15.8388 20.5617 15.8388 20.4878 15.8388Z\" fill=\"#3E4A43\"/>\n<path d=\"M7.89949 17.8926C7.88471 17.8926 7.86994 17.8926 7.85516 17.8778C7.84039 17.8778 7.82561 17.8483 7.85516 17.8483C7.94382 17.8483 8.03247 17.8187 8.10634 17.863C8.04724 17.8926 7.97337 17.8926 7.89949 17.8926Z\" fill=\"#454A45\"/>\n<path d=\"M13.2924 0.546716C13.2628 0.546716 13.2333 0.546716 13.2185 0.546716C13.3071 0.502391 13.4106 0.472841 13.514 0.517166C13.4401 0.546716 13.3662 0.546716 13.2924 0.546716Z\" fill=\"#659C7E\"/>\n<path d=\"M8.43137 15.4547C8.44614 15.4399 8.44614 15.4252 8.46092 15.4252C8.52002 15.4252 8.56434 15.4399 8.62344 15.4843C8.54957 15.4843 8.49047 15.499 8.43137 15.4547Z\" fill=\"#A9A8A8\"/>\n<path d=\"M8.12108 15.3365C8.07676 15.3217 8.03243 15.3217 7.97333 15.3069C7.95856 15.3069 7.95856 15.2922 7.95856 15.2922C7.95856 15.2774 7.95856 15.2774 7.97333 15.2774C8.04721 15.2774 8.12108 15.2626 8.19496 15.3069C8.16541 15.3069 8.13586 15.3217 8.12108 15.3365Z\" fill=\"#E1E2E2\"/>\n<path d=\"M57.78 10.18C57.7652 10.18 57.7504 10.18 57.7357 10.18C57.7652 10.1209 57.8243 10.0766 57.8834 10.0322C57.8834 10.1061 57.8391 10.1357 57.78 10.18Z\" fill=\"#4C524E\"/>\n<path d=\"M7.51532 17.9221V17.9073C7.60397 17.9073 7.67785 17.8777 7.7665 17.9368C7.69262 17.9368 7.61874 17.9516 7.55964 17.9516C7.53009 17.9516 7.51532 17.9368 7.51532 17.9221Z\" fill=\"#404741\"/>\n<path d=\"M8.22455 17.863C8.28365 17.7743 8.35752 17.8334 8.4314 17.8482C8.35752 17.8482 8.28365 17.863 8.22455 17.863Z\" fill=\"#4B594E\"/>\n<path d=\"M21.0197 15.765C21.0492 15.7798 21.064 15.7945 21.0936 15.7945C21.0197 15.7945 20.9606 15.8093 20.8867 15.8093C20.9015 15.7207 20.9754 15.7945 21.0197 15.765Z\" fill=\"#416150\"/>\n<path d=\"M8.53482 17.8187C8.59392 17.7448 8.65302 17.7744 8.71212 17.8039C8.65302 17.8187 8.59392 17.8187 8.53482 17.8187Z\" fill=\"#54765E\"/>\n<path d=\"M22.0096 15.6615C22.0096 15.6763 22.0096 15.6763 22.0096 15.6911C21.9505 15.6911 21.8914 15.7058 21.8471 15.7058C21.8767 15.6024 21.9505 15.6911 22.0096 15.6615Z\" fill=\"#4C936C\"/>\n<path d=\"M103.775 9.19C103.716 9.23433 103.657 9.21955 103.597 9.20478C103.657 9.17523 103.716 9.17523 103.775 9.19Z\" fill=\"#68A679\"/>\n<path d=\"M62.9069 15.0262C62.9069 15.0114 62.9069 14.9966 62.9069 14.9966C62.9217 14.9523 62.966 14.9227 63.0251 14.9227C62.9956 14.9671 62.966 14.9966 62.9069 15.0262Z\" fill=\"#515652\"/>\n<path d=\"M7.51533 17.9221C7.53011 17.9221 7.54488 17.9369 7.54488 17.9369C7.48578 17.9664 7.42668 17.9664 7.36758 17.9664C7.41191 17.9073 7.47101 17.9369 7.51533 17.9221Z\" fill=\"#68A679\"/>\n<path d=\"M8.81555 17.7892C8.87465 17.7301 8.93375 17.7448 8.99285 17.7744C8.93375 17.7892 8.87465 17.7892 8.81555 17.7892Z\" fill=\"#5A7F66\"/>\n<path d=\"M22.6893 0.723972C22.3347 0.797847 21.9801 0.856947 21.6403 0.930822C19.9707 1.25587 18.3454 1.74345 16.7645 2.37878C15.287 2.98455 13.8834 3.7233 12.5832 4.68368C11.4455 5.52586 10.4408 6.50101 9.71681 7.74211C9.33266 8.40699 9.09626 9.13097 9.00761 9.89927C8.99284 10.0766 8.99284 10.2539 9.00761 10.4312C9.15536 11.9973 10.0419 13.0907 11.3125 13.9476C12.0956 14.4648 12.9525 14.8341 13.8538 15.1149C13.8686 15.1149 13.8981 15.1444 13.9129 15.1444C13.9129 15.1887 13.9572 15.2626 13.839 15.2626C13.7208 15.2626 13.6026 15.2183 13.4844 15.2922C13.3367 15.3217 13.1889 15.2922 13.056 15.2626C11.9774 15.0853 10.9136 14.8194 9.90889 14.3909C8.87463 13.9476 7.92903 13.3862 7.17551 12.5292C6.51063 11.7757 6.1117 10.904 6.09693 9.86972C6.08215 8.83547 6.42198 7.93419 6.95388 7.07724C7.61876 5.99866 8.52003 5.14171 9.52474 4.37341C10.7215 3.45735 12.0217 2.74815 13.3958 2.14238C14.4891 1.6548 15.6121 1.27065 16.7645 0.945597C16.8088 0.930822 16.8679 0.916047 16.9123 0.901272C17.0009 0.871722 17.0896 0.856947 17.1782 0.827397C17.2373 0.812622 17.3112 0.797847 17.3703 0.783072C17.3998 0.768297 17.4294 0.753522 17.4589 0.753522C17.5476 0.738747 17.6362 0.738747 17.7101 0.679647C17.784 0.635322 17.8579 0.620547 17.9317 0.635322C18.1829 0.635322 18.4341 0.546672 18.6705 0.502346C18.7591 0.487571 18.833 0.472796 18.9069 0.517121C18.9512 0.531897 18.9808 0.561447 19.0399 0.531897C19.2319 0.413696 19.4536 0.398921 19.6604 0.502346C19.69 0.517122 19.7343 0.531897 19.7638 0.502346C19.8377 0.384146 19.9559 0.428471 20.0741 0.413696C20.5321 0.413696 21.0049 0.413696 21.463 0.413696C21.6698 0.413696 21.8619 0.487571 22.0687 0.443246C22.2904 0.384146 22.4972 0.428471 22.7041 0.517121C22.7336 0.561447 22.7779 0.546672 22.8075 0.561447C22.7632 0.620547 22.7188 0.694422 22.6302 0.694422C22.645 0.738747 22.6745 0.723972 22.6893 0.723972Z\" fill=\"#68A679\"/>\n<path d=\"M12.7161 15.3069C11.4603 15.1149 10.2339 14.8046 9.06671 14.2727C8.06201 13.8147 7.16073 13.2384 6.48108 12.3519C5.41728 10.9926 5.31385 9.50034 5.9935 7.94896C6.51063 6.78174 7.32326 5.86568 8.26886 5.03828C9.79069 3.70853 11.5489 2.76293 13.4253 1.99462C14.4744 1.56615 15.553 1.22632 16.6463 0.930822C16.6759 0.930822 16.6906 0.930822 16.7202 0.916047C16.7497 0.901272 16.7941 0.886497 16.7941 0.945597C15.7007 1.2411 14.6221 1.61047 13.5731 2.0685C12.3615 2.61518 11.1943 3.22095 10.101 3.97448C9.34744 4.49161 8.63824 5.08261 8.01768 5.74748C7.30848 6.53056 6.70271 7.37274 6.37765 8.37744C5.91963 9.79584 6.12648 11.096 7.05731 12.278C7.58921 12.9577 8.28363 13.4748 9.03716 13.9033C10.1748 14.5239 11.4159 14.8932 12.6866 15.1296C12.9525 15.174 13.2333 15.2183 13.4992 15.2774C13.3219 15.366 13.1298 15.366 12.923 15.3365C12.8934 15.3365 12.8491 15.3217 12.8196 15.3217C12.79 15.3365 12.7605 15.3365 12.7161 15.3069Z\" fill=\"#373435\"/>\n<path d=\"M22.4677 14.6125C24.2407 14.1249 25.9546 13.4896 27.5798 12.6179C28.9391 11.8939 30.2098 11.0222 31.2883 9.91402C31.9828 9.20482 32.559 8.42175 32.9432 7.49092C33.6376 5.77702 33.2978 4.09266 31.968 2.79246C31.0815 1.90596 29.9881 1.35928 28.8209 0.945579C28.4515 0.812604 28.0674 0.709179 27.6832 0.620529C27.698 0.546653 27.7423 0.576204 27.7867 0.590979C27.9787 0.605754 28.1856 0.620529 28.3777 0.635304C28.4515 0.664854 28.5402 0.635304 28.6288 0.650079C28.6879 0.694404 28.747 0.664854 28.8061 0.694404C29.8699 0.989904 30.8599 1.41838 31.7611 2.05371C32.692 2.70381 33.4012 3.53121 33.7262 4.65411C33.9922 5.57016 33.874 6.47144 33.5342 7.34317C33.2534 8.08192 32.8102 8.7468 32.293 9.3378C31.2145 10.5937 29.8995 11.5541 28.4663 12.3519C26.9888 13.1793 25.4374 13.7999 23.827 14.2874C23.3837 14.4204 22.9405 14.5534 22.4972 14.642C22.4677 14.6568 22.4677 14.642 22.4677 14.6125Z\" fill=\"#373435\"/>\n<path d=\"M20.7685 13.327C22.6154 12.5144 24.3441 11.4801 25.792 10.047C26.5603 9.29343 27.2104 8.43648 27.6094 7.417C28.3186 5.5849 27.8458 3.82667 26.2944 2.49692C25.3488 1.68429 24.2407 1.19671 23.0734 0.827337C22.9848 0.797787 22.8961 0.768237 22.8075 0.753462C23.1178 0.605712 23.428 0.694362 23.7235 0.783012C24.876 1.13761 25.9693 1.63996 26.9002 2.43782C27.7128 3.13224 28.289 3.98919 28.4663 5.06777C28.6141 5.92472 28.4516 6.75213 28.1117 7.54998C27.7423 8.39215 27.2104 9.11613 26.5751 9.76623C25.201 11.1994 23.5315 12.2337 21.7437 13.0611C21.3891 13.2236 21.0345 13.3713 20.6799 13.5339C20.6651 13.5339 20.6503 13.5339 20.6356 13.5339C20.6356 13.4304 20.7094 13.3861 20.7685 13.327Z\" fill=\"#373435\"/>\n<path d=\"M15.1688 15.041C15.8928 14.7011 16.5872 14.317 17.193 13.7851C17.7544 13.2975 18.1977 12.7361 18.3307 11.9825C18.4636 11.2733 18.3011 10.6085 18.0056 9.97312C17.5624 9.01275 16.8975 8.2149 16.1735 7.46137C15.745 7.00334 15.287 6.58964 14.8438 6.17594C14.8438 6.14639 14.8438 6.11684 14.8881 6.13162C15.3313 6.35324 15.7598 6.63397 16.1883 6.88514C16.2474 6.89992 16.2917 6.92947 16.3213 6.97379C17.1191 7.66822 17.784 8.48085 18.3307 9.3969C18.6262 9.88447 18.833 10.4016 18.9217 10.9778C19.0399 11.7905 18.8182 12.4997 18.3159 13.135C17.784 13.7999 17.0896 14.2431 16.3508 14.642C16.0258 14.8193 15.7155 15.0262 15.3313 15.0557C15.2722 15.0557 15.2279 15.0853 15.1688 15.041Z\" fill=\"#373435\"/>\n<path d=\"M20.5912 15.0262C20.9606 14.9523 21.33 14.8784 21.6846 14.8046C21.6846 14.8341 21.6698 14.8637 21.6402 14.8784C21.2856 14.9375 20.9458 15.041 20.5912 15.0557C20.5764 15.0557 20.5764 15.041 20.5912 15.0262C20.5764 15.041 20.5912 15.0262 20.5912 15.0262Z\" fill=\"#588A6F\"/>\n<path d=\"M22.9257 0.472809C23.1326 0.502359 23.3542 0.517134 23.561 0.546684C23.5758 0.650109 23.4724 0.561459 23.4576 0.605784C23.3099 0.635334 23.1769 0.591009 23.0439 0.576234C22.97 0.531909 22.8814 0.517134 22.7927 0.502359C22.8075 0.413709 22.8814 0.458034 22.9257 0.472809Z\" fill=\"#383F3B\"/>\n<path d=\"M22.9257 0.47281C22.8814 0.487585 22.8223 0.458035 22.7779 0.50236C22.7484 0.50236 22.7336 0.50236 22.7041 0.50236C22.4972 0.44326 22.2904 0.41371 22.0687 0.428485C22.0687 0.41371 22.0687 0.41371 22.0687 0.398935C22.0983 0.35461 22.1426 0.398935 22.1722 0.369385C22.4233 0.41371 22.6745 0.44326 22.9257 0.47281Z\" fill=\"#4B946C\"/>\n<path d=\"M14.3562 15.3513C14.2232 15.3365 14.105 15.3217 13.972 15.307C14.1198 15.2774 14.2675 15.2331 14.4153 15.2774C14.43 15.307 14.5039 15.2922 14.4744 15.3365C14.4596 15.3808 14.4005 15.3661 14.3562 15.3513Z\" fill=\"#39433E\"/>\n<path d=\"M14.3562 15.3512C14.4005 15.3512 14.4301 15.3512 14.4744 15.3364C14.4596 15.3217 14.4449 15.2921 14.4301 15.2773C14.5483 15.2773 14.6665 15.3217 14.7847 15.366C14.6222 15.366 14.4892 15.4103 14.3562 15.3512Z\" fill=\"#4B8A68\"/>\n<path d=\"M22.4677 14.6125C22.4824 14.6273 22.4972 14.6273 22.4972 14.6421C22.3347 14.7012 22.1722 14.7603 21.9949 14.7455C22.1426 14.6569 22.3051 14.6421 22.4677 14.6125Z\" fill=\"#565E5A\"/>\n<path d=\"M23.4576 0.620502C23.4871 0.605726 23.5315 0.576176 23.561 0.561401C23.694 0.561401 23.827 0.561401 23.9599 0.561401C23.9747 0.561401 23.9747 0.576176 23.9747 0.576176C23.9747 0.576176 23.9747 0.590951 23.9599 0.590951C23.7974 0.590951 23.6201 0.635277 23.4576 0.620502Z\" fill=\"#4B916B\"/>\n<path d=\"M18.4636 15.2773C18.4636 15.2921 18.4636 15.2921 18.4636 15.3069C18.4045 15.366 18.3307 15.3364 18.2568 15.3217C18.3159 15.3069 18.3898 15.2921 18.4636 15.2773Z\" fill=\"#B1D3C1\"/>\n<path d=\"M23.0439 0.576172C23.0439 0.709147 22.97 0.635272 22.9109 0.635272C22.9404 0.561397 22.9995 0.590947 23.0439 0.576172Z\" fill=\"#68A679\"/>\n<path d=\"M28.6288 0.650043C28.5401 0.650043 28.4515 0.650043 28.3776 0.620492C28.4072 0.605717 28.4515 0.605717 28.481 0.590942C28.5254 0.605717 28.5845 0.605717 28.6288 0.620492C28.6436 0.635268 28.6436 0.635267 28.6288 0.650043C28.6436 0.650043 28.6436 0.650043 28.6288 0.650043Z\" fill=\"#DBE8E1\"/>\n<path d=\"M12.7161 15.3069C12.7457 15.3069 12.79 15.3069 12.8196 15.3069C12.8048 15.4251 12.7309 15.3512 12.6718 15.366C12.7014 15.3512 12.7014 15.3364 12.7161 15.3069Z\" fill=\"#D3E0D9\"/>\n<path d=\"M16.336 6.9738C16.2917 6.94425 16.2474 6.9147 16.2031 6.88515C16.2178 6.87037 16.2326 6.8556 16.2474 6.84082C16.2769 6.87037 16.336 6.89992 16.336 6.9738Z\" fill=\"#D3D8D5\"/>\n<path d=\"M15.4052 6.07255C15.3609 6.05777 15.3313 6.02822 15.3018 5.96912C15.3609 5.95435 15.4052 5.99867 15.4347 6.02822C15.4347 6.043 15.42 6.05777 15.4052 6.07255Z\" fill=\"#8BBB98\"/>\n<path d=\"M28.6288 0.650156C28.6288 0.63538 28.6288 0.620605 28.6288 0.620605C28.6879 0.635381 28.747 0.664931 28.8061 0.679706C28.747 0.694481 28.6879 0.709256 28.6288 0.650156Z\" fill=\"#8CA396\"/>\n<path d=\"M23.96 0.576244C23.96 0.561469 23.96 0.561469 23.96 0.546694C24.0338 0.546694 24.1077 0.517144 24.1668 0.576244C24.1225 0.576244 24.0782 0.591019 24.0338 0.591019C24.0043 0.591019 23.9895 0.576244 23.96 0.576244Z\" fill=\"#55695E\"/>\n<path d=\"M20.5912 15.0262C20.5912 15.041 20.5912 15.041 20.5912 15.0558C20.5321 15.1149 20.473 15.1001 20.4139 15.0558C20.473 15.0558 20.5321 15.041 20.5912 15.0262Z\" fill=\"#4D946C\"/>\n<path d=\"M109.389 11.3176C108.325 10.5937 106.789 11.4506 106.671 12.7508C106.641 13.0168 106.7 13.2679 106.818 13.5043C106.552 13.327 106.449 13.0611 106.39 12.7656C106.213 11.8348 106.981 10.9039 107.897 10.7414C108.488 10.638 108.99 10.771 109.374 11.2585C109.36 11.2733 109.374 11.3029 109.389 11.3176Z\" fill=\"#373435\"/>\n<path d=\"M94.8801 11.2733C94.2005 10.9039 93.4322 10.9926 92.8412 11.5245C92.3536 11.9529 91.9842 12.736 92.3683 13.5339C91.9103 13.1793 91.7773 12.5439 91.999 11.9086C92.3092 11.0517 93.2844 10.5198 94.1414 10.7414C94.4369 10.8153 94.6585 10.9778 94.8506 11.1994C94.8801 11.229 94.9097 11.2437 94.8801 11.2733Z\" fill=\"#373435\"/>\n<path d=\"M17.9317 0.65001C18.0499 0.605685 18.1681 0.59091 18.2863 0.576135C18.3454 0.487485 18.4488 0.517035 18.5375 0.50226C18.5818 0.487485 18.6261 0.50226 18.6557 0.487485C18.6114 0.50226 18.567 0.50226 18.5375 0.47271C18.5966 0.41361 18.6852 0.457935 18.7591 0.44316C18.833 0.44316 18.9069 0.428385 18.9364 0.517035C18.6557 0.53181 18.375 0.62046 18.109 0.664785C18.0351 0.67956 17.976 0.709111 17.9317 0.65001Z\" fill=\"#538B6C\"/>\n<path d=\"M3.23057 9.75147C3.23057 9.98787 3.23057 10.239 3.23057 10.4754C3.2158 10.4754 3.2158 10.4754 3.20102 10.4754C3.18625 10.2243 3.18625 9.98787 3.20102 9.73669H3.2158C3.2158 9.75147 3.2158 9.75147 3.23057 9.75147Z\" fill=\"#5DA37C\"/>\n<path d=\"M18.2863 0.546616C18.1977 0.546616 18.109 0.546616 18.0056 0.546616C17.9761 0.531841 17.917 0.561391 17.8874 0.517066C18.0795 0.531841 18.2716 0.457966 18.4636 0.487516C18.4784 0.502291 18.4636 0.517066 18.4636 0.531841C18.4045 0.531841 18.3454 0.546616 18.2863 0.546616Z\" fill=\"#53876A\"/>\n<path d=\"M7.97335 15.2773C7.97335 15.2921 7.97335 15.2921 7.97335 15.3069C7.91425 15.2921 7.85515 15.2773 7.79605 15.2626C7.85515 15.2182 7.91425 15.2182 7.97335 15.2773Z\" fill=\"#B3C4BB\"/>\n<path d=\"M18.4636 0.502328C18.4636 0.487553 18.4636 0.487553 18.4636 0.472778C18.4932 0.472778 18.5079 0.472778 18.5375 0.472778C18.5818 0.487553 18.6409 0.458003 18.6852 0.502328C18.6261 0.502328 18.5818 0.517103 18.5227 0.517103C18.5079 0.531878 18.4784 0.531878 18.4636 0.502328Z\" fill=\"#404C45\"/>\n<path d=\"M17.5032 0.620556C17.4441 0.620556 17.385 0.635331 17.3259 0.635331C17.385 0.561456 17.4441 0.576231 17.5032 0.620556Z\" fill=\"#4A916B\"/>\n<path d=\"M61.9613 11.0369C61.6954 10.4016 61.1044 10.1652 60.3656 10.372C60.2179 10.4164 60.0701 10.4902 59.9224 10.5493C59.9224 10.505 59.9371 10.4607 59.9667 10.4311C60.4395 10.0174 61.1339 9.81059 61.7249 10.047C62.0943 10.1947 62.2716 10.4902 62.3602 10.8596C62.3898 10.9926 62.3602 11.0812 62.1977 11.0517C62.1238 11.0517 62.05 11.0812 61.9613 11.0369Z\" fill=\"#373435\"/>\n<path d=\"M70.5752 11.0664C70.3831 10.4902 69.8217 10.1947 69.1568 10.3277C68.8908 10.3868 68.6397 10.4902 68.418 10.6379C68.4476 10.4902 68.5806 10.4015 68.684 10.3277C69.1125 10.0026 69.6148 9.88442 70.1467 10.0174C70.59 10.1208 70.8264 10.4459 70.9298 10.8891C70.9593 11.0073 70.9446 11.1107 70.782 11.0812C70.7082 11.0516 70.6343 11.096 70.5752 11.0664Z\" fill=\"#373435\"/>\n<path d=\"M20.8719 0.192017C21.2265 0.206792 21.5811 0.295442 21.9357 0.339767C21.9062 0.428417 21.8471 0.384092 21.788 0.384092C21.522 0.369317 21.2413 0.398867 20.9754 0.354542C20.931 0.339767 20.8719 0.369317 20.8276 0.369317C20.7537 0.339767 20.6651 0.354542 20.5764 0.339767C20.5469 0.339767 20.5321 0.324992 20.5173 0.295442C20.5321 0.206792 20.606 0.236342 20.6651 0.221567C20.7242 0.192017 20.8128 0.236342 20.8719 0.192017Z\" fill=\"#3B423E\"/>\n<path d=\"M27.0479 0.472726C27.0775 0.472726 27.107 0.487501 27.1514 0.487501C27.107 0.576151 27.0332 0.517051 26.9741 0.517051C26.8558 0.517051 26.7377 0.502276 26.6195 0.502276C26.2648 0.472726 25.9102 0.502276 25.5556 0.487501C25.5113 0.487501 25.4374 0.531826 25.4079 0.443176C25.8955 0.457951 26.3683 0.354526 26.8558 0.443176C26.9149 0.443176 26.9741 0.457951 27.0479 0.472726Z\" fill=\"#444845\"/>\n<path d=\"M25.4079 0.443237C25.4966 0.502337 25.5852 0.472787 25.6886 0.472787C25.9989 0.487562 26.3092 0.443237 26.6195 0.502337C26.0728 0.502337 25.5113 0.517112 24.9647 0.517112C24.8908 0.517112 24.8317 0.502337 24.7578 0.502337V0.487562C24.9647 0.472787 25.1863 0.458012 25.4079 0.443237Z\" fill=\"#4B514E\"/>\n<path d=\"M20.5913 0.310278C20.6651 0.325053 20.7538 0.354603 20.8277 0.369378C20.4731 0.369378 20.1037 0.369378 19.7491 0.369378V0.354603C19.8377 0.339828 19.9412 0.325053 20.0298 0.310278C20.2071 0.310278 20.3992 0.295503 20.5913 0.310278Z\" fill=\"#68A679\"/>\n<path d=\"M20.5912 0.310301C20.3992 0.354626 20.2219 0.354626 20.0298 0.310301C20.1923 0.295526 20.3548 0.236426 20.5174 0.295526C20.5469 0.295526 20.5617 0.295526 20.5912 0.310301Z\" fill=\"#68A679\"/>\n<path d=\"M21.788 0.369398C21.8324 0.354623 21.8915 0.384173 21.9358 0.325073C22.0244 0.339848 22.0983 0.354623 22.187 0.354623C22.1574 0.398948 22.1131 0.384173 22.0835 0.384173C21.9801 0.398948 21.8767 0.428498 21.788 0.369398Z\" fill=\"#406853\"/>\n<path d=\"M24.6691 0.546703C24.5509 0.546703 24.4327 0.561478 24.3145 0.561478C24.4327 0.487603 24.5509 0.502378 24.6691 0.546703Z\" fill=\"#424A46\"/>\n<path d=\"M20.8719 0.192061C20.8128 0.251161 20.739 0.221611 20.6651 0.221611C20.7242 0.162511 20.7981 0.206836 20.8719 0.192061Z\" fill=\"#849D8E\"/>\n<path d=\"M19.4831 0.384155C19.557 0.384155 19.6013 0.384155 19.6456 0.384155C19.6013 0.413705 19.5717 0.413705 19.4831 0.384155Z\" fill=\"#7FB699\"/>\n<path d=\"M9.02238 10.4164C8.97805 10.2391 8.97805 10.0618 9.02238 9.88452C9.02238 10.0766 9.02238 10.2391 9.02238 10.4164Z\" fill=\"#4C9A72\"/>\n<path d=\"M14.8881 6.13161C14.8733 6.14639 14.8585 6.16117 14.8437 6.17594C14.8142 6.14639 14.7699 6.11684 14.7108 6.07251C14.8142 6.05774 14.8437 6.10206 14.8881 6.13161Z\" fill=\"#595657\"/>\n<path d=\"M16.8531 0.901277C16.9713 0.871727 17.0896 0.842177 17.2078 0.797852C17.2225 0.812627 17.2225 0.842177 17.2078 0.856952C17.1191 0.886502 17.0157 0.901277 16.927 0.930827C16.9122 0.916052 16.8827 0.930827 16.8531 0.901277Z\" fill=\"#5A5D5B\"/>\n<path d=\"M17.4737 0.768329C17.5476 0.709229 17.6362 0.694453 17.7249 0.724004C17.651 0.753554 17.5623 0.797879 17.4737 0.768329Z\" fill=\"#62736A\"/>\n<path d=\"M17.2225 0.857003C17.2225 0.842227 17.2225 0.812677 17.2225 0.797902C17.2816 0.812677 17.3407 0.724027 17.3998 0.783127C17.3555 0.857003 17.2816 0.827452 17.2225 0.857003Z\" fill=\"#646D68\"/>\n<path d=\"M16.8531 0.901245C16.8827 0.901245 16.9122 0.901245 16.927 0.930795C16.8827 0.94557 16.8236 0.960345 16.7793 0.960345C16.7497 0.94557 16.7349 0.94557 16.7054 0.930795C16.7645 0.901245 16.8088 0.901245 16.8531 0.901245Z\" fill=\"#585A58\"/>\n<path d=\"M18.4636 0.502319C18.4784 0.502319 18.5079 0.517094 18.5227 0.517094C18.4341 0.531869 18.3602 0.561419 18.2863 0.576195C18.2863 0.561419 18.2863 0.561419 18.2863 0.546644C18.3306 0.487544 18.4045 0.517094 18.4636 0.502319Z\" fill=\"#A4A5A4\"/>\n<path d=\"M26.9593 0.517099C27.0184 0.487549 27.0923 0.531874 27.1366 0.487549C27.1957 0.502324 27.2548 0.517099 27.3139 0.531874C27.1957 0.546649 27.0775 0.561424 26.9593 0.517099Z\" fill=\"#8D8B8C\"/>\n<path d=\"M27.7866 0.576181C27.7571 0.590956 27.7128 0.605731 27.6832 0.605731C27.6241 0.590956 27.565 0.576181 27.5059 0.561406C27.6093 0.546631 27.698 0.531856 27.7866 0.576181Z\" fill=\"#908E8F\"/>\n</svg>\n\n",
    113: "<svg viewBox=\"0 0 28 18\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n<path d=\"M18.4118 0C16.5567 0 14.8322 0.562627 13.4011 1.5248C13.2992 1.59411 12.5939 2.09558 12.5653 2.12005C11.3952 3.00068 10.6125 3.15561 9.53613 2.88245C9.4709 2.86614 9.16104 2.76014 9.06727 2.72344C8.33341 2.44621 7.53432 2.29536 6.70261 2.29536C3.00068 2.29536 0 5.29604 0 8.99796C0 12.6999 3.00068 15.7006 6.70261 15.7006C7.44462 15.7006 8.1581 15.5783 8.82265 15.3581C10.4249 14.877 11.2974 15.0075 12.3003 15.721C12.5001 15.8636 12.9853 16.1735 13.0872 16.2469C14.5794 17.3477 16.4222 18 18.4199 18C23.3898 18 27.4179 13.9719 27.4179 9.00204C27.4057 4.02809 23.3776 0 18.4118 0Z\" fill=\"#008060\"/>\n<path d=\"M15.1665 10.3882C14.8729 10.6777 14.4693 10.853 14.0249 10.8448C13.7192 10.8407 13.4378 10.751 13.1973 10.5961L12.6021 11.542C13.0098 11.7988 13.4908 11.9538 14.0086 11.9619C14.7629 11.9741 15.4478 11.6765 15.9493 11.1873L15.1665 10.3882Z\" fill=\"white\"/>\n<path d=\"M14.0901 6.52722C12.5898 6.50276 11.3545 7.7014 11.33 9.20174C11.3218 9.76437 11.4849 10.2903 11.7703 10.7265L16.6953 8.62281C16.4181 7.44047 15.3622 6.54761 14.0901 6.52722ZM12.4593 9.41375C12.4512 9.34851 12.4471 9.28736 12.4512 9.21805C12.4634 8.33334 13.1932 7.62802 14.0738 7.64432C14.5549 7.65248 14.983 7.87264 15.2684 8.21103L12.4593 9.41375Z\" fill=\"white\"/>\n<path d=\"M18.2364 5.3042V10.5513L19.1456 10.9305L18.7175 11.966L17.8165 11.5909C17.6126 11.5053 17.4781 11.3708 17.3721 11.2199C17.2702 11.065 17.1968 10.853 17.1968 10.5676V5.30828H18.2364V5.3042Z\" fill=\"white\"/>\n<path d=\"M10.3148 5.3042V10.5513L11.224 10.9305L10.7959 11.966L9.89485 11.5909C9.691 11.5053 9.55646 11.3708 9.45046 11.2199C9.34853 11.065 9.27515 10.853 9.27515 10.5676V5.30828H10.3148V5.3042Z\" fill=\"white\"/>\n<path d=\"M22.7171 7.80348C23.5162 8.18672 23.8505 9.14074 23.4673 9.93984L24.4743 10.425C25.1266 9.07143 24.5558 7.44878 23.2023 6.80054C22.1749 6.30722 20.9885 6.51923 20.1975 7.24086L20.9518 8.06849C21.4165 7.63633 22.1137 7.50994 22.7171 7.80348Z\" fill=\"#BDD753\"/>\n<path d=\"M21.3309 10.69C20.5359 10.3068 20.1975 9.35274 20.5807 8.55365L19.5737 8.06848C18.9255 9.42205 19.4922 11.0447 20.8457 11.697C21.8731 12.1903 23.0596 11.9783 23.8546 11.2567L23.1003 10.4291C22.6315 10.8531 21.9343 10.9795 21.3309 10.69Z\" fill=\"white\"/>\n<path d=\"M8.25187 10.7633V9.25074C8.25187 9.24666 8.25187 9.24666 8.25187 9.24258C8.25187 8.03171 7.45685 7.0043 6.36013 6.65776C6.09921 6.57622 5.82604 6.53137 5.53658 6.53137C5.25526 6.53137 4.98618 6.57622 4.72933 6.65368C4.30532 6.78415 3.92616 7.02061 3.61631 7.32639C3.12706 7.81563 2.82129 8.49649 2.82129 9.24258C2.82129 10.7388 4.03624 11.9538 5.5325 11.9538C5.96466 11.9538 6.37644 11.8519 6.74337 11.6684L6.30306 10.6451C6.07474 10.7715 5.81381 10.8448 5.5325 10.8448C4.64779 10.8448 3.93024 10.1273 3.93024 9.24258C3.93024 8.96942 3.99954 8.71665 4.11778 8.49241C4.33386 8.08879 4.71302 7.79117 5.16965 7.68517C5.28788 7.65663 5.40611 7.64032 5.5325 7.64032C5.76897 7.64032 5.9932 7.69332 6.19705 7.78709C6.75153 8.03987 7.13477 8.59434 7.13477 9.24258C7.13477 9.28743 7.13477 10.747 7.13477 10.747C7.13477 11.0324 7.20815 11.2444 7.31008 11.3952C7.412 11.5461 7.55062 11.6806 7.75447 11.7703L8.2641 11.9701L8.69218 10.9345L8.25187 10.7633Z\" fill=\"white\"/>\n</svg>\n\n",
    12: "<svg viewBox=\"0 0 57 18\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n<path d=\"M0.417908 17.3557C0.477645 17.1336 0.536541 16.9115 0.594595 16.6894L0.704393 16.259C0.985831 16.2981 1.26096 16.3385 1.53735 16.3739C2.44208 16.5025 3.35726 16.5418 4.26969 16.4912C4.72646 16.4719 5.17684 16.3768 5.60242 16.2098C5.8263 16.1229 6.02436 15.9805 6.17791 15.7958C6.318 15.6196 6.39211 15.4 6.38741 15.1749C6.38798 15.0625 6.35752 14.9522 6.29941 14.856C6.24129 14.7598 6.15776 14.6815 6.05802 14.6297C5.84043 14.5067 5.60144 14.4262 5.35379 14.3924C4.92469 14.323 4.49433 14.2662 4.06397 14.2006C3.62335 14.1508 3.19229 14.0372 2.78425 13.8636C2.38418 13.6756 2.08003 13.3954 1.98033 12.9474C1.9149 12.6724 1.91507 12.3859 1.98084 12.1109C2.04662 11.836 2.17614 11.5804 2.35894 11.3648C2.66317 11.0073 3.04882 10.7281 3.48343 10.5508C4.05247 10.3087 4.65281 10.1481 5.26671 10.0737C6.01414 9.96991 6.77 9.94032 7.52326 9.98537C8.1404 10.0194 8.75502 10.0914 9.3709 10.1494C9.46051 10.157 9.54885 10.1721 9.64477 10.1848L9.32168 11.0808C9.25479 11.2663 9.25479 11.26 9.05917 11.2436C8.24438 11.1705 7.42569 11.1502 6.60827 11.1831C6.12783 11.1987 5.64992 11.2595 5.18089 11.3648C4.92004 11.4154 4.67039 11.5124 4.44385 11.6513C4.35679 11.7066 4.27816 11.7742 4.21037 11.8519C4.16027 11.9083 4.12304 11.9749 4.10126 12.0472C4.07948 12.1194 4.07367 12.1955 4.08424 12.2701C4.0948 12.3448 4.12149 12.4163 4.16245 12.4797C4.20341 12.543 4.25766 12.5967 4.32143 12.6369C4.52388 12.7696 4.75316 12.8558 4.99284 12.8893C5.43961 12.9714 5.88764 13.0383 6.3344 13.1165C6.81718 13.1791 7.28676 13.3189 7.72519 13.5305C7.98519 13.6526 8.20212 13.8506 8.34742 14.0984C8.49272 14.3462 8.55958 14.6322 8.53921 14.9187C8.53957 15.4912 8.34406 16.0465 7.98517 16.4925C7.67746 16.8536 7.28808 17.1361 6.84932 17.3166C6.3501 17.5263 5.82433 17.666 5.2869 17.7318C4.63413 17.8197 3.97453 17.8459 3.31684 17.8101C2.343 17.7768 1.37604 17.6337 0.434314 17.3835H0.417908V17.3557Z\" fill=\"#053484\"/>\n<path d=\"M29.671 6.71155C29.6054 7.05861 29.5448 7.39937 29.4754 7.74012C29.2869 8.72957 29.0984 9.71902 28.91 10.7085C28.727 11.6689 28.5402 12.6293 28.361 13.5897C28.2745 14.1079 28.1336 14.6155 27.9407 15.1042C27.5798 15.9712 27.0232 16.6691 26.189 17.1235C25.7142 17.3794 25.1982 17.5503 24.6644 17.6283C24.1158 17.7157 23.5585 17.7365 23.0048 17.6901C22.2375 17.627 21.5106 17.4377 20.8795 16.9682C20.5674 16.7432 20.3053 16.4558 20.1098 16.1243C19.9143 15.7928 19.7896 15.4244 19.7437 15.0423C19.5506 13.6655 20.1324 11.6891 21.9005 10.6618C22.5677 10.2826 23.2988 10.029 24.0574 9.91337C24.855 9.78717 25.6552 9.80357 26.4553 9.83008C26.6812 9.83765 26.9071 9.84648 27.1318 9.85658C27.1734 9.85658 27.1923 9.85027 27.2012 9.80484C27.3753 8.91467 27.5503 8.02534 27.7262 7.13686C27.7426 7.05609 27.7628 6.97532 27.7729 6.89454C27.7792 6.8428 27.8044 6.83018 27.8511 6.82766C28.3038 6.80073 28.7564 6.77297 29.2091 6.74436L29.671 6.71155ZM26.8857 11.1287C26.6332 11.1098 26.3985 11.0871 26.16 11.0757C25.4027 11.0391 24.6455 11.0757 23.9198 11.3281C23.3705 11.4974 22.8838 11.826 22.5215 12.2721C21.9594 12.988 21.6792 13.8852 21.734 14.7937C21.7655 15.5333 22.1845 16.0217 22.9001 16.2123C23.3808 16.332 23.8821 16.3437 24.3679 16.2463C24.8302 16.1718 25.2563 15.9506 25.5832 15.6153C25.9246 15.2474 26.1555 14.7908 26.2496 14.2977C26.3871 13.6667 26.502 13.0357 26.6345 12.3971C26.7153 11.9768 26.7998 11.5566 26.8857 11.1237V11.1287Z\" fill=\"#053484\"/>\n<path d=\"M50.5756 17.8807C49.8045 17.8807 49.1293 17.7911 48.4869 17.5248C47.7751 17.2295 47.216 16.7676 46.8942 16.0469C46.6871 15.5729 46.6054 15.0535 46.6569 14.5388C46.7383 13.4532 47.1901 12.4284 47.9366 11.6361C48.5813 10.9456 49.396 10.4364 50.2992 10.1595C51.1588 9.88528 52.0653 9.78867 52.9634 9.87551C53.6225 9.91784 54.2625 10.1136 54.8325 10.4472C55.22 10.6704 55.5457 10.9867 55.7802 11.3675C56.0146 11.7483 56.1504 12.1816 56.1753 12.628C56.2316 13.4675 56.0445 14.3054 55.6364 15.0411C55.1204 16.0246 54.2938 16.8099 53.2852 17.2749C52.4385 17.6764 51.5127 17.8834 50.5756 17.8807ZM50.7018 16.4924C51.341 16.5068 51.9699 16.3299 52.508 15.9845C53.046 15.6392 53.4687 15.141 53.7219 14.5539C53.9932 13.957 54.1447 13.3348 54.0424 12.6747C53.9301 11.9478 53.52 11.4644 52.8094 11.2701C52.0673 11.0691 51.2757 11.1708 50.6084 11.5528C49.843 11.9691 49.2656 12.6621 48.9942 13.49C48.7889 14.0052 48.716 14.5637 48.7822 15.1143C48.8095 15.3559 48.8974 15.5867 49.0378 15.7852C49.1781 15.9838 49.3663 16.1437 49.5849 16.2501C49.9326 16.4147 50.3133 16.4976 50.698 16.4924H50.7018Z\" fill=\"#053484\"/>\n<path d=\"M13.3792 17.7999C12.6043 17.7999 11.9417 17.7103 11.3107 17.4504C10.5749 17.1462 10.0083 16.6603 9.70284 15.9081C9.51829 15.4392 9.45324 14.9318 9.51353 14.4315C9.60022 13.5089 9.95861 12.6327 10.5434 11.9137C11.0937 11.2335 11.8082 10.7045 12.6194 10.3766C13.5379 9.99847 14.5315 9.83863 15.5222 9.9096C16.139 9.93277 16.7445 10.0818 17.3017 10.3475C18.0904 10.7426 18.6167 11.3572 18.8161 12.2267C18.9308 12.7747 18.9148 13.3419 18.7694 13.8825C18.4097 15.3402 17.5351 16.3953 16.2251 17.0995C15.4984 17.4844 14.6993 17.7131 13.879 17.7709C13.6783 17.7873 13.4789 17.7949 13.3792 17.7999ZM14.8331 11.1918C14.3337 11.1958 13.843 11.3228 13.4044 11.5616C11.9834 12.3189 11.4621 13.9747 11.5959 15.0323C11.6177 15.3111 11.7215 15.5774 11.8942 15.7974C12.0668 16.0175 12.3007 16.1816 12.5664 16.2691C13.1205 16.4672 13.7217 16.4923 14.2904 16.341C15.3783 16.0747 16.1077 15.3856 16.5293 14.3646C16.7736 13.8242 16.8581 13.2251 16.7729 12.6382C16.7377 12.3653 16.6324 12.1063 16.4671 11.8864C16.3019 11.6665 16.0824 11.4933 15.8301 11.3837C15.5159 11.2473 15.1755 11.1818 14.8331 11.1918Z\" fill=\"#053484\"/>\n<path d=\"M31.1855 14.3092C31.1009 15.2103 31.3672 16.076 32.2948 16.6074C32.7567 16.8585 33.262 17.02 33.784 17.0832C34.5983 17.1908 35.4228 17.1976 36.2387 17.1033C36.2652 17.1033 36.2917 17.1033 36.3182 17.1033C36.3182 17.1033 36.3258 17.1033 36.3409 17.1172C36.221 17.1892 36.1075 17.2611 35.9901 17.3242C35.0397 17.833 33.9646 18.0623 32.8892 17.9855C32.309 17.9563 31.7378 17.8301 31.1993 17.612C30.5069 17.3455 29.9275 16.8485 29.5587 16.2048C29.311 15.7657 29.1875 15.2674 29.2015 14.7635C29.2432 12.9272 30.0849 11.5617 31.6587 10.6442C32.3644 10.2475 33.1458 10.0041 33.9519 9.92985C34.5245 9.86166 35.1036 9.86802 35.6746 9.94878C36.1895 10.0245 36.6842 10.1671 37.0994 10.4927C37.3319 10.6676 37.5151 10.8998 37.6312 11.1665C37.7473 11.4332 37.7924 11.7254 37.762 12.0148C37.709 12.8263 37.2572 13.3778 36.5908 13.7816C36.0911 14.0739 35.5432 14.2744 34.9729 14.3735C34.1528 14.5324 33.314 14.5706 32.4828 14.4871C32.0702 14.4467 31.6587 14.3735 31.2473 14.3155L31.1855 14.3092ZM31.4442 13.191C31.8291 13.2326 32.1938 13.2819 32.5611 13.3109C33.212 13.3712 33.8683 13.3376 34.5097 13.2112C34.8561 13.1529 35.1851 13.018 35.4726 12.8162C35.6397 12.7025 35.7689 12.5413 35.8434 12.3534C35.9178 12.1655 35.9342 11.9596 35.8904 11.7623C35.8235 11.414 35.5749 11.2361 35.2594 11.1414C34.8521 11.0345 34.4261 11.0199 34.0125 11.0985C33.5632 11.1634 33.133 11.3239 32.751 11.569C32.3689 11.8141 32.0438 12.1383 31.7975 12.5196C31.6548 12.7293 31.5363 12.9546 31.4442 13.191Z\" fill=\"#053484\"/>\n<path d=\"M47.3864 1.40971L49.1066 2.19345L49.3085 2.28557C49.672 1.52834 50.033 0.771113 50.4053 0C50.5113 0.786258 50.6135 1.5498 50.7182 2.32217L50.8722 2.27169L52.8599 1.57756C52.8798 1.57092 52.9 1.56544 52.9205 1.56116L52.9294 1.57125L52.0712 2.67681L51.4401 3.48705C51.425 3.50598 51.4111 3.52491 51.3947 3.54763L53.0884 4.86142L50.8243 5.03558C50.7839 5.83573 50.7435 6.63082 50.6981 7.44989L49.436 5.66661L47.6136 7.35145L47.5997 7.34388L48.2837 4.96996L46.1042 4.66959L48.2282 3.46307L47.943 2.78661C47.7613 2.35499 47.5791 1.92337 47.3965 1.49174C47.3881 1.46947 47.3809 1.44671 47.3751 1.42359L47.3864 1.40971Z\" fill=\"#053484\"/>\n<path d=\"M42.0328 15.2014C41.8397 15.3276 41.6542 15.4538 41.4548 15.5662C40.4167 16.1999 39.2779 16.6515 38.0876 16.9014C37.5264 17.0196 36.9549 17.0826 36.3813 17.0894C36.4167 17.0655 36.4331 17.0528 36.452 17.0428C38.0268 16.1515 39.5249 15.1313 40.931 13.9924C40.9512 13.976 40.9702 13.9558 40.9891 13.9381C41.0686 13.8763 41.1494 13.8119 41.2264 13.7526C41.5797 13.4531 41.9323 13.1531 42.284 12.8527C42.5742 12.5928 42.8683 12.3366 43.1548 12.0715C44.6914 10.645 46.136 9.12246 47.4798 7.513C47.4957 7.49301 47.516 7.47701 47.5391 7.46631C47.5164 7.53572 47.4937 7.6064 47.471 7.67455C46.915 9.37034 46.0775 10.9604 44.9936 12.3782C44.5489 12.9543 44.0584 13.4937 43.5271 13.9911L43.4009 14.1173C43.2128 14.2776 43.0298 14.4429 42.8367 14.5944C42.5768 14.7988 42.3054 14.9982 42.0328 15.2014Z\" fill=\"#DE0E1E\"/>\n<path d=\"M42.0328 15.2015C42.3029 14.9983 42.5767 14.7989 42.8418 14.5894C43.0348 14.4379 43.2204 14.2726 43.4059 14.1123C44.5291 15.3264 45.6544 16.5413 46.7819 17.7571H46.7226C45.9792 17.7571 45.2371 17.7571 44.4938 17.7571C44.4556 17.7578 44.4185 17.7448 44.389 17.7205C43.56 16.9227 42.7735 16.0818 42.0328 15.2015Z\" fill=\"#053484\"/>\n<path d=\"M42.284 12.8528C41.9323 13.1531 41.5797 13.4531 41.2264 13.7526C41.1494 13.817 41.0686 13.8788 40.9891 13.9381C40.6496 13.4977 40.3038 13.0547 39.9694 12.6142C39.351 11.7847 38.7683 10.9303 38.2214 10.051C38.2075 10.0296 38.1949 10.0069 38.1772 9.97656C38.2088 9.97656 38.2315 9.97656 38.2542 9.97656C38.7885 9.97656 39.3223 9.97656 39.8558 9.97656C39.8741 9.97708 39.8921 9.98125 39.9088 9.98884C39.9255 9.99642 39.9405 10.0073 39.9529 10.0207C40.6824 11.0013 41.4788 11.9302 42.284 12.8528Z\" fill=\"#053484\"/>\n</svg>\n\n",
    65: "<svg viewBox=\"0 0 33 32\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n<rect x=\"0.18515\" width=\"32\" height=\"32\" rx=\"5\" fill=\"#0EA44A\"/>\n<path fill-rule=\"evenodd\" clip-rule=\"evenodd\" d=\"M0.18515 26C0.18515 29.3137 2.4699 32 5.28828 32H27.082C29.9004 32 32.1851 29.3137 32.1851 26V24H0.18515V26Z\" fill=\"#A19060\"/>\n<path d=\"M28.2047 21.8734H21.7544L19.5226 13.5209C19.5226 13.5209 20.9107 13.5209 21.1216 13.5209C21.4414 13.548 22.6661 13.0734 22.6593 11.8666C22.6525 10.7751 21.6523 10.8022 21.3053 10.7819C20.8086 10.7819 19.3185 10.7819 19.3185 10.7819L15.0047 21.8666H8.61554L4.3017 10.1514H9.57493L11.657 16.3683L14.1269 6.66663H23.5779C26.1363 6.66663 28.2047 8.83612 28.2047 11.5209C28.2047 13.3378 27.2522 14.9243 25.8369 15.7582L28.2047 21.8734Z\" fill=\"white\"/>\n<path d=\"M3.85947 30.1423V26.4881H5.19308C5.60133 26.4881 5.91433 26.5627 6.13886 26.7118C6.3566 26.861 6.46546 27.0712 6.46546 27.3423C6.46546 27.539 6.39742 27.7152 6.26134 27.8576C6.12525 28.0068 5.95515 28.1084 5.75103 28.1627V28.1762C6.00958 28.2101 6.22051 28.3051 6.37701 28.461C6.5335 28.6169 6.60835 28.8135 6.60835 29.044C6.60835 29.3762 6.48588 29.6474 6.24773 29.844C6.00958 30.0406 5.67618 30.1356 5.26113 30.1356H3.85947V30.1423ZM4.68957 27.0983V27.9661H5.0502C5.2203 27.9661 5.35638 27.9254 5.45164 27.844C5.5469 27.7627 5.60133 27.6474 5.60133 27.5051C5.60133 27.2339 5.40401 27.1051 4.99576 27.1051H4.68957V27.0983ZM4.68957 28.5762V29.539H5.13865C5.32917 29.539 5.47886 29.4915 5.58772 29.4034C5.69659 29.3152 5.75103 29.1932 5.75103 29.044C5.75103 28.8949 5.69659 28.7796 5.59453 28.6983C5.48566 28.6169 5.34277 28.5762 5.14545 28.5762H4.68957ZM9.48651 29.0712H7.77867C7.80588 29.4508 8.04403 29.6406 8.49991 29.6406C8.78568 29.6406 9.03744 29.5729 9.25517 29.4373V30.0135C9.01022 30.1423 8.69723 30.2034 8.30939 30.2034C7.88753 30.2034 7.56093 30.0881 7.32279 29.8508C7.09145 29.6203 6.97578 29.2949 6.97578 28.8745C6.97578 28.4406 7.10505 28.1017 7.35681 27.844C7.60856 27.5932 7.92156 27.4644 8.28898 27.4644C8.67001 27.4644 8.9694 27.5796 9.17352 27.8034C9.38445 28.0271 9.48651 28.3322 9.48651 28.7254V29.0712ZM8.73805 28.5762C8.73805 28.2034 8.58836 28.0203 8.28218 28.0203C8.1529 28.0203 8.03723 28.0745 7.94877 28.183C7.85351 28.2915 7.79908 28.4203 7.77867 28.583H8.73805V28.5762ZM12.5008 30.1423H11.6911V28.6915C11.6911 28.2847 11.5482 28.0881 11.2556 28.0881C11.1127 28.0881 11.0038 28.1423 10.9086 28.2508C10.8201 28.3593 10.7725 28.4949 10.7725 28.6576V30.1423H9.96281V27.5322H10.7725V27.9457H10.7861C10.9766 27.6271 11.2624 27.4712 11.6298 27.4712C12.2082 27.4712 12.5008 27.8305 12.5008 28.5491V30.1423ZM15.4878 29.0712H13.7799C13.8072 29.4508 14.0453 29.6406 14.5012 29.6406C14.787 29.6406 15.0387 29.5729 15.2564 29.4373V30.0135C15.0115 30.1423 14.6985 30.2034 14.3107 30.2034C13.8888 30.2034 13.5622 30.0881 13.3241 29.8508C13.0927 29.6203 12.9771 29.2949 12.9771 28.8745C12.9771 28.4406 13.1063 28.1017 13.3581 27.844C13.6098 27.5932 13.9228 27.4644 14.2903 27.4644C14.6713 27.4644 14.9707 27.5796 15.1748 27.8034C15.3857 28.0271 15.4878 28.3322 15.4878 28.7254V29.0712ZM14.7393 28.5762C14.7393 28.2034 14.5896 28.0203 14.2835 28.0203C14.1542 28.0203 14.0385 28.0745 13.95 28.183C13.8548 28.2915 13.8004 28.4203 13.7799 28.583H14.7393V28.5762ZM17.6787 26.8949C17.5767 26.8542 17.4746 26.8339 17.3793 26.8339C17.1208 26.8339 16.9915 26.9762 16.9915 27.2542V27.5322H17.5903V28.1288H16.9915V30.1423H16.1886V28.1288H15.7463V27.5322H16.1886V27.2068C16.1886 26.9084 16.2839 26.6712 16.4812 26.4881C16.6717 26.3051 16.9371 26.2169 17.2705 26.2169C17.4338 26.2169 17.5699 26.2305 17.6787 26.2644V26.8949ZM18.7878 30.1423H17.9781V27.5322H18.7878V30.1423ZM19.2029 26.2983L18.4 27.1254H17.8148L18.4884 26.2983H19.2029ZM21.4482 30.0474C21.2645 30.1491 20.9992 30.2034 20.659 30.2034C20.2575 30.2034 19.9309 30.0813 19.6792 29.8373C19.4274 29.5932 19.3049 29.2813 19.3049 28.9017C19.3049 28.461 19.441 28.1084 19.7064 27.8576C19.9717 27.6 20.3324 27.4712 20.7746 27.4712C21.0808 27.4712 21.3054 27.5118 21.4482 27.5932V28.2779C21.2781 28.1491 21.0944 28.0881 20.8835 28.0881C20.6522 28.0881 20.4684 28.1559 20.3324 28.2915C20.1963 28.4271 20.1282 28.6101 20.1282 28.8474C20.1282 29.0779 20.1895 29.261 20.3256 29.3898C20.4548 29.5186 20.6317 29.5864 20.8563 29.5864C21.0604 29.5864 21.2509 29.5254 21.4482 29.3966V30.0474ZM22.3872 27.1254C22.2511 27.1254 22.1355 27.0847 22.0538 27.0034C21.9654 26.922 21.9245 26.8203 21.9245 26.7051C21.9245 26.583 21.9654 26.4881 22.0538 26.4067C22.1423 26.3322 22.2511 26.2915 22.3872 26.2915C22.5233 26.2915 22.639 26.3322 22.7274 26.4067C22.8159 26.4813 22.8567 26.583 22.8567 26.7051C22.8567 26.8271 22.8159 26.9288 22.7274 27.0034C22.639 27.0847 22.5233 27.1254 22.3872 27.1254ZM22.7887 30.1423H21.979V27.5322H22.7887V30.1423ZM24.7142 30.2034C24.2788 30.2034 23.9318 30.0813 23.6868 29.8373C23.4351 29.5932 23.3126 29.261 23.3126 28.8474C23.3126 28.4135 23.4419 28.0813 23.7004 27.8373C23.959 27.5932 24.3128 27.4712 24.7483 27.4712C25.1837 27.4712 25.5239 27.5932 25.7689 27.8373C26.0138 28.0813 26.1431 28.4 26.1431 28.8C26.1431 29.2339 26.0138 29.5729 25.7621 29.8237C25.5035 30.0813 25.1565 30.2034 24.7142 30.2034ZM24.7347 28.0881C24.5441 28.0881 24.3944 28.1559 24.2924 28.2847C24.1903 28.4135 24.1359 28.6034 24.1359 28.8406C24.1359 29.3423 24.34 29.5932 24.7415 29.5932C25.1293 29.5932 25.3198 29.3356 25.3198 28.8203C25.3198 28.3322 25.1293 28.0881 24.7347 28.0881ZM26.4969 30.0745V29.4237C26.633 29.5051 26.7623 29.5593 26.8916 29.6C27.0209 29.6407 27.1501 29.661 27.2658 29.661C27.4087 29.661 27.5244 29.6407 27.606 29.6C27.6877 29.5593 27.7285 29.4983 27.7285 29.4237C27.7285 29.3695 27.7081 29.3288 27.6741 29.2949C27.64 29.261 27.5856 29.2271 27.5312 29.2068C27.4699 29.1796 27.4087 29.1593 27.3407 29.139C27.2726 29.1186 27.2046 29.0983 27.1365 29.0712C27.0345 29.0305 26.9392 28.9898 26.8644 28.9423C26.7827 28.8949 26.7215 28.8474 26.667 28.7864C26.6126 28.7254 26.5718 28.6576 26.5446 28.583C26.5173 28.5017 26.5037 28.4135 26.5037 28.3051C26.5037 28.1559 26.5378 28.0339 26.599 27.9254C26.6602 27.8169 26.7487 27.7356 26.8576 27.6678C26.9664 27.6 27.0889 27.5525 27.225 27.5186C27.3611 27.4847 27.504 27.4712 27.6536 27.4712C27.7693 27.4712 27.885 27.4779 28.0075 27.4983C28.1299 27.5186 28.2456 27.539 28.3613 27.5729V28.1966C28.2592 28.1356 28.1503 28.0949 28.0347 28.061C27.919 28.0339 27.8033 28.0135 27.6877 28.0135C27.6332 28.0135 27.5856 28.0203 27.538 28.0271C27.4903 28.0339 27.4495 28.0474 27.4155 28.0678C27.3815 28.0881 27.3543 28.1084 27.3338 28.1356C27.3134 28.1627 27.3066 28.1966 27.3066 28.2305C27.3066 28.2779 27.3202 28.3186 27.3543 28.3525C27.3815 28.3864 27.4223 28.4135 27.4767 28.4406C27.5244 28.4678 27.5788 28.4881 27.64 28.5084C27.7013 28.5288 27.7625 28.5491 27.8169 28.5695C27.9258 28.6101 28.0211 28.6508 28.1095 28.6915C28.198 28.739 28.2728 28.7864 28.3341 28.8474C28.3953 28.9084 28.4429 28.9762 28.4769 29.0576C28.511 29.139 28.5246 29.2339 28.5246 29.3423C28.5246 29.4983 28.4906 29.6271 28.4225 29.7356C28.3545 29.844 28.266 29.9322 28.1503 30C28.0415 30.0678 27.9122 30.122 27.7625 30.1491C27.6196 30.183 27.4631 30.1966 27.3066 30.1966C27.0072 30.2034 26.7419 30.1627 26.4969 30.0745Z\" fill=\"white\"/>\n</svg>\n\n",
    57: "<svg viewBox=\"0 0 62 18\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n<path d=\"M12.0183 12.5654C11.9593 12.6574 11.8658 12.7119 11.783 12.7774C10.8176 13.5391 9.72828 14.0228 8.51503 14.2285C7.97791 14.3185 7.43839 14.3518 6.89728 14.3149C5.37587 14.211 4.01143 13.6909 2.82886 12.7239C1.50253 11.6393 0.645886 10.255 0.326894 8.57263C-0.0937657 6.35275 0.42403 4.35218 1.85163 2.5932C1.87828 2.55975 1.91533 2.53363 1.94744 2.50405C2.48682 2.21744 3.08536 2.16414 3.67258 2.12563C4.67539 2.06008 5.67128 2.13403 6.64398 2.4313C7.7366 2.76442 8.70344 3.31073 9.58286 4.03706C10.1293 4.48952 10.6068 5.01919 11.0005 5.60936C11.5734 6.46467 12.0173 7.38887 12.2297 8.41221C12.4876 9.65393 12.4926 10.8887 12.1918 12.1227C12.1535 12.2782 12.118 12.4341 12.0183 12.5654Z\" fill=\"#ED1C24\"/>\n<path d=\"M38.7825 9.45608C38.7986 9.45901 38.8162 9.46781 38.8301 9.46368C39.3252 9.31937 39.8028 9.13296 40.2485 8.8702C40.8805 8.49711 41.3798 7.99077 41.7646 7.36891C41.8019 7.30855 41.8461 7.25085 41.8729 7.18609C41.9247 7.06031 42.014 7.03033 42.1441 7.03126C42.8451 7.03699 43.5462 7.03393 44.2472 7.03433C44.2905 7.03433 44.3337 7.03832 44.3746 7.04032C44.4027 7.11654 44.3537 7.16517 44.3264 7.21754C43.6099 8.59491 42.5222 9.56761 41.0973 10.1715C40.9995 10.2129 40.9002 10.2514 40.8015 10.2902C40.711 10.326 40.6204 10.3611 40.535 10.3944C40.5145 10.4405 40.5375 10.4676 40.5606 10.4929C41.5792 11.6095 42.4604 12.8329 43.3358 14.0609C43.3869 14.1324 43.4348 14.2058 43.48 14.2721C43.4667 14.329 43.4284 14.3254 43.3944 14.3254C42.587 14.3254 41.7794 14.322 40.9719 14.33C40.8393 14.3313 40.7833 14.2634 40.7213 14.1737C40.2165 13.4442 39.6953 12.7268 39.1319 12.0411C38.9292 11.7944 38.7196 11.5534 38.512 11.3107C38.4784 11.2708 38.4515 11.2227 38.3958 11.208C38.3449 11.2276 38.3447 11.2746 38.3351 11.3169C38.1231 12.2496 37.911 13.1823 37.6988 14.115C37.6928 14.1417 37.691 14.1683 37.6844 14.1935C37.655 14.3105 37.6414 14.3232 37.5245 14.3252C37.3913 14.3274 37.258 14.3252 37.1248 14.3252H35.5392C35.4849 14.2538 35.5125 14.1937 35.5258 14.1369C35.9568 12.2547 36.3883 10.3725 36.8205 8.49044C37.0781 7.36806 37.3344 6.24546 37.5896 5.12264C37.6029 5.06228 37.6211 5.00272 37.6337 4.94196C37.6736 4.74862 37.8012 4.65787 37.9878 4.63909C38.1291 4.62496 38.2707 4.6163 38.4124 4.60644C38.8549 4.57593 39.2974 4.54488 39.7402 4.51637C39.8765 4.50771 39.8906 4.52783 39.8581 4.6692C39.6611 5.52376 39.4636 6.37813 39.2657 7.23233C39.102 7.93987 38.9381 8.64745 38.774 9.35508C38.7664 9.38866 38.7536 9.4249 38.7825 9.45608Z\" fill=\"#201C50\"/>\n<path d=\"M18.8497 14.3255C19.476 11.5807 20.0941 8.8699 20.7115 6.16407C20.6259 6.10091 20.5441 6.12409 20.4679 6.12409C19.6069 6.12236 18.7458 6.12409 17.8848 6.12209C17.7971 6.12209 17.7074 6.13755 17.6232 6.10624C17.5966 6.0632 17.6055 6.01883 17.6156 5.97712C17.7269 5.52222 17.8146 5.06132 17.9379 4.61534C18.2044 4.58643 26.0818 4.58976 26.283 4.61721C26.315 4.66797 26.298 4.72114 26.2872 4.77191C26.2205 5.08397 26.1547 5.39603 26.0836 5.7069C26.0136 6.01336 25.882 6.11996 25.559 6.12169C24.9021 6.12556 24.2452 6.12289 23.5884 6.12289H23.0245C22.9312 6.36527 22.8959 6.61017 22.8413 6.84869C22.2852 9.27546 21.7316 11.7029 21.1804 14.1309C21.1725 14.1654 21.165 14.2 21.1553 14.2341C21.1395 14.2893 21.1104 14.3287 21.0446 14.3253C21.0093 14.3233 20.9736 14.3253 20.938 14.3253H18.8497V14.3255Z\" fill=\"#201C50\"/>\n<path d=\"M51.4941 8.76315C51.4844 8.41429 51.3574 8.07889 51.1335 7.81111C50.9736 7.61604 50.7772 7.4668 50.5559 7.34808C50.2561 7.18711 49.9349 7.09104 49.6016 7.03002C49.0306 6.92569 48.4541 6.91289 47.8773 6.94274C47.316 6.97179 46.7687 7.07865 46.2482 7.29904C45.2107 7.73876 44.49 8.47401 44.1405 9.55557C44.0941 9.69881 44.0462 9.84178 44.0042 9.98636C43.7989 10.6926 43.7068 11.4081 43.8176 12.1418C43.9681 13.1354 44.4955 13.8157 45.4664 14.1291C45.8838 14.264 46.3131 14.3233 46.7501 14.3245C47.6645 14.327 48.5788 14.3255 49.493 14.3253C49.5464 14.3271 49.5998 14.3251 49.6529 14.3193C49.7862 14.2998 49.8817 14.2269 49.9311 14.1007C49.9492 14.0507 49.964 13.9996 49.9755 13.9476C50.0504 13.6467 50.1248 13.3456 50.1988 13.0445C50.2095 13.0017 50.2192 12.9583 50.1903 12.9077C50.1438 12.9045 50.0914 12.8981 50.0391 12.8977C49.8348 12.8965 49.6307 12.8977 49.4261 12.8977C48.7421 12.8977 48.0586 12.8977 47.3756 12.8977C47.1539 12.8977 46.9329 12.8927 46.7144 12.8404C46.2137 12.7204 45.9549 12.4273 45.9077 11.915C45.9044 11.8795 45.9029 11.844 45.9032 11.8084C45.9064 11.465 45.8931 11.5031 46.2033 11.5027C47.0021 11.5018 47.801 11.5018 48.6 11.5027C48.9827 11.5027 49.362 11.4731 49.7377 11.3976C50.549 11.2343 51.0897 10.7722 51.3293 9.97023C51.4471 9.57529 51.5086 9.17489 51.4941 8.76315ZM49.2474 9.59661C49.1398 9.84978 48.9535 10.0111 48.6821 10.0708C48.5695 10.0956 48.4568 10.1155 48.3407 10.1153C47.6505 10.1143 46.9602 10.1137 46.2699 10.1135C46.2529 10.1135 46.2358 10.1064 46.1848 10.0952C46.2567 9.6711 46.39 9.28242 46.6441 8.9425C46.9448 8.5405 47.3616 8.34942 47.8517 8.31491C48.0894 8.29826 48.3294 8.30812 48.5681 8.31225C48.7281 8.31529 48.8854 8.35336 49.029 8.42378C49.2464 8.52931 49.3666 8.7004 49.3663 8.94903C49.3664 9.17249 49.3359 9.39075 49.2474 9.59661Z\" fill=\"#201C50\"/>\n<path d=\"M54.8644 7.03232C55.2663 7.03472 55.6556 7.03326 56.045 7.03352C56.4343 7.03379 56.8214 7.03352 57.2309 7.03352C57.1509 7.40515 57.0783 7.75119 57.0004 8.09577C56.9541 8.30057 56.8167 8.41449 56.6123 8.445C56.5246 8.45658 56.4361 8.46184 56.3476 8.46073C55.842 8.46206 55.3364 8.46139 54.8308 8.46139H54.5822C54.5029 8.52442 54.5082 8.60264 54.4935 8.66726C54.2641 9.66847 54.0404 10.6709 53.8119 11.6722C53.7815 11.8109 53.7703 11.9531 53.7787 12.0948C53.8004 12.5355 54.086 12.838 54.5273 12.8854C54.6327 12.8969 54.7398 12.8954 54.8463 12.8957C55.1927 12.8969 55.5381 12.8957 55.884 12.8966C55.9356 12.8966 55.9906 12.8866 56.0516 12.9329C55.9983 13.1851 55.9434 13.4437 55.887 13.7018C55.847 13.8835 55.8043 14.0644 55.7629 14.2456C55.752 14.2939 55.7245 14.3224 55.6724 14.3225C55.6281 14.3225 55.5837 14.3244 55.5392 14.3244C54.9803 14.3244 54.4215 14.3244 53.8627 14.3244C53.5341 14.3256 53.2074 14.2745 52.8949 14.1729C52.0796 13.9048 51.6188 13.2839 51.5899 12.4263C51.5776 12.0596 51.6309 11.7022 51.7127 11.347C52.1221 9.56956 52.5311 7.79214 52.9399 6.01472C52.9559 5.9457 52.9699 5.87588 52.991 5.80832C53.0404 5.64843 53.1461 5.55422 53.3161 5.5389C53.4227 5.52944 53.5281 5.51931 53.6342 5.51225C54.1384 5.47574 54.6425 5.43972 55.1466 5.40418C55.1973 5.40059 55.2266 5.4355 55.2186 5.48786C55.2117 5.53157 55.2007 5.57447 55.1905 5.61751C55.0997 5.99633 55.0079 6.37489 54.9182 6.75397C54.8984 6.83938 54.8849 6.92573 54.8644 7.03232Z\" fill=\"#201C50\"/>\n<path d=\"M34.6321 12.8972C34.6683 13.0001 34.6275 13.065 34.6123 13.1327C34.5323 13.487 34.4516 13.8411 34.3677 14.1945C34.3379 14.3196 34.3306 14.3247 34.2087 14.3247C33.4188 14.3247 32.6287 14.3322 31.8392 14.3156C31.3775 14.3059 30.9206 14.2325 30.4846 14.0678C30.3515 14.0193 30.2215 13.9625 30.0955 13.8976C29.4058 13.532 29.0377 12.9496 28.9541 12.1812C28.892 11.6097 28.9764 11.0486 29.0898 10.4912C29.1533 10.1783 29.251 9.87453 29.3553 9.57286C29.7629 8.39363 30.5777 7.64758 31.7696 7.3018C32.3615 7.13005 32.9688 7.05263 33.5818 7.04104C34.3803 7.02598 35.1793 7.03518 35.9779 7.03464C36.0127 7.03464 36.0475 7.04224 36.1 7.04797C36.031 7.36483 35.9801 7.67863 35.8236 7.96164C35.6872 8.20961 35.4745 8.35765 35.1994 8.41641C35.0518 8.44803 34.9013 8.46362 34.7503 8.46291C34.3506 8.46118 33.9517 8.46371 33.5522 8.46571C33.3037 8.46887 33.0565 8.50289 32.8164 8.56698C32.2819 8.70458 31.9052 9.02579 31.6863 9.53062C31.4742 10.0211 31.3331 10.5324 31.2486 11.0595C31.2149 11.2698 31.1863 11.4809 31.1989 11.6948C31.2041 11.783 31.2122 11.8714 31.2256 11.9588C31.293 12.4137 31.5607 12.6874 31.9984 12.805C32.2039 12.8614 32.4159 12.8908 32.6291 12.8923C33.2058 12.8936 33.7827 12.8951 34.3595 12.8968L34.6321 12.8972Z\" fill=\"#201C50\"/>\n<path d=\"M24.8618 14.3168C24.9223 14.0446 24.9783 13.7866 25.0373 13.5292C25.4746 11.622 25.9124 9.71489 26.3505 7.80769C26.3762 7.69563 26.3983 7.58224 26.4323 7.47244C26.5204 7.18743 26.6996 7.05112 26.9967 7.03513C27.041 7.03273 27.0855 7.03406 27.13 7.03406H28.6608C28.696 7.09349 28.6808 7.13546 28.6711 7.1777C28.1432 9.473 27.6154 11.7683 27.0877 14.0636C27.0837 14.0808 27.0799 14.0981 27.0756 14.1153C27.0247 14.3234 27.0247 14.3245 26.8207 14.3254C26.5809 14.3265 26.3417 14.3254 26.1022 14.3254C25.7741 14.3254 25.4459 14.3254 25.1175 14.3254C25.038 14.3249 24.959 14.3201 24.8618 14.3168Z\" fill=\"#201C50\"/>\n<path d=\"M60.6921 4.56194C60.3407 4.48106 59.9875 4.47773 59.6355 4.53462C58.8626 4.65987 58.2978 5.06628 57.9767 5.79167C57.887 5.99429 57.8235 6.20752 57.7877 6.42619C57.746 6.68096 57.7356 6.94052 57.7979 7.19262C57.9656 7.87218 58.4108 8.26779 59.0865 8.41849C59.422 8.49298 59.7579 8.46939 60.0909 8.41196C60.8568 8.28005 61.407 7.86885 61.6952 7.13626C61.8191 6.82113 61.8929 6.49348 61.8928 6.15224C61.8928 6.12559 61.8928 6.09894 61.8928 6.07229C61.8982 5.32304 61.4528 4.73676 60.6921 4.56194ZM61.0834 7.30948C60.9002 7.63074 60.6245 7.84247 60.2681 7.94827C59.8866 8.06086 59.5013 8.08058 59.1135 7.98931C58.6031 7.86938 58.2889 7.49869 58.2493 6.97663C58.226 6.66677 58.2635 6.35536 58.3598 6.0599C58.5535 5.45589 58.9907 4.9738 59.8528 4.90518C59.9145 4.90025 59.9768 4.90518 60.0393 4.90518C60.27 4.88987 60.5012 4.92582 60.7164 5.01045C61.1338 5.1774 61.367 5.48813 61.4052 5.93518C61.4467 6.42606 61.3258 6.88443 61.0834 7.30948Z\" fill=\"#201C50\"/>\n<path d=\"M26.7368 6.08964C26.823 5.71788 26.9045 5.33773 27.0011 4.96144C27.0486 4.77716 27.1759 4.65497 27.3705 4.62046C27.4397 4.60638 27.5101 4.59835 27.5807 4.59648C28.0772 4.59434 28.5737 4.59528 29.07 4.59541C29.0878 4.59541 29.1056 4.59541 29.1233 4.59541C29.2129 4.60021 29.2375 4.62579 29.2229 4.70734C29.2105 4.77689 29.1918 4.84538 29.1764 4.9144C29.124 5.14758 29.0727 5.38076 29.0193 5.61381C29.0053 5.67399 28.9879 5.73333 28.9673 5.79156C28.9021 5.97678 28.7637 6.07605 28.5764 6.11136C28.5151 6.12109 28.453 6.12524 28.391 6.12375C27.8857 6.12464 27.3803 6.12464 26.8751 6.12375C26.8318 6.12441 26.7871 6.12881 26.7368 6.08964Z\" fill=\"#201C50\"/>\n<path d=\"M2.23431 2.18794C2.32759 2.05629 2.44911 1.95422 2.57996 1.86242C3.26631 1.64922 3.97331 1.60165 4.68285 1.64522C5.31924 1.6844 5.95109 1.77487 6.56909 1.94783C7.8368 2.30253 8.96691 2.91075 9.95942 3.7725C11.0543 4.72415 11.8421 5.88766 12.3515 7.23598C12.6338 7.98389 12.7742 8.76658 12.8505 9.5678C12.911 10.2023 12.8481 10.8215 12.7821 11.4455C12.7645 11.6122 12.7459 11.781 12.6603 11.9319L12.6613 11.9308C12.6392 11.9458 12.621 11.9657 12.608 11.9889L12.6109 11.9857C12.5863 11.9982 12.5669 12.019 12.5561 12.0444L12.5601 12.0401C12.5467 12.0458 12.5346 12.0544 12.5248 12.0653C12.5151 12.0762 12.5078 12.0891 12.5036 12.1031C12.4816 12.1521 12.449 12.1904 12.397 12.2097C12.2922 12.1104 12.3457 11.9939 12.3674 11.8854C12.4949 11.2606 12.5507 10.6233 12.5336 9.98592C12.5034 8.92994 12.2764 7.923 11.869 6.94604C11.4605 5.96098 10.8526 5.07112 10.0835 4.33241C8.74341 3.03992 7.15844 2.23244 5.28459 2.04057C4.3087 1.94076 3.34093 1.96581 2.38422 2.20153C2.33398 2.21445 2.28188 2.22565 2.23431 2.18794Z\" fill=\"#EF4531\"/>\n<path d=\"M2.23431 2.18796C2.57422 2.05591 2.93479 2.02899 3.29002 1.96863C3.77611 1.88615 4.26272 1.93732 4.74881 1.92146C5.04115 1.91187 5.32723 1.96983 5.61491 2.01234C5.87687 2.05111 6.13937 2.08576 6.39613 2.14985C6.78255 2.24632 7.15297 2.3853 7.51874 2.54346C7.9907 2.74759 8.44533 2.97824 8.87292 3.26566C9.18858 3.47778 9.49558 3.69631 9.77633 3.95561C9.93823 4.10511 10.1126 4.24195 10.2671 4.40078C10.4643 4.60372 10.6291 4.83503 10.8193 5.0429C11.0604 5.30646 11.2299 5.61866 11.4362 5.905C11.5943 6.12446 11.7075 6.38069 11.8142 6.63186C11.9513 6.95472 12.1063 7.27145 12.2045 7.61003C12.3291 8.03297 12.4306 8.46239 12.5084 8.89639C12.5448 9.10492 12.5299 9.31998 12.6001 9.52371C12.6193 9.57954 12.6054 9.64697 12.6056 9.70906C12.6056 9.96636 12.6014 10.2238 12.6069 10.481C12.6138 10.8093 12.5585 11.1301 12.5114 11.4537C12.4819 11.6547 12.4501 11.8534 12.401 12.0513C12.3886 12.1014 12.3985 12.1569 12.3981 12.2101C12.3436 12.2953 12.2697 12.3664 12.1825 12.4176C12.0751 12.1844 12.2127 11.9701 12.2547 11.7569C12.4162 10.9347 12.4291 10.1135 12.3467 9.28294C12.2447 8.25694 11.9549 7.28917 11.4571 6.39242C10.4828 4.63663 9.07652 3.37465 7.18535 2.64286C6.00132 2.18463 4.78385 2.07763 3.54053 2.14319C3.16744 2.16291 2.79341 2.24605 2.42365 2.32667C2.32425 2.34839 2.20966 2.44073 2.10226 2.33173C2.12891 2.26791 2.17808 2.22473 2.23431 2.18796Z\" fill=\"#EE342A\"/>\n<path d=\"M14.4207 8.04852C14.4261 8.26851 14.3807 8.47984 14.3141 8.68811C14.2163 8.59856 14.2462 8.47291 14.2267 8.36312C13.9027 6.55576 13.111 4.97865 11.9206 3.58556C11.0592 2.57742 10.0235 1.79846 8.85295 1.20045C7.94168 0.735285 6.98324 0.386313 5.95257 0.281048C5.89048 0.274652 5.82799 0.269455 5.78522 0.214425C5.99215 0.147801 6.20215 0.0983669 6.42174 0.106628C6.91581 0.0341421 7.36685 0.215757 7.81083 0.37592C8.62843 0.670794 9.40393 1.05428 10.1272 1.54596C11.0293 2.15889 11.808 2.89908 12.4971 3.73826C13.2649 4.67325 13.8084 5.7331 14.2056 6.86889C14.3163 7.18659 14.3952 7.51453 14.4409 7.84785C14.4386 7.91594 14.4576 7.98496 14.4207 8.04852Z\" fill=\"#F9AE94\"/>\n<path d=\"M12.6603 11.9312C12.6451 11.6996 12.7119 11.4768 12.7385 11.2497C12.7477 11.1717 12.7652 11.094 12.7652 11.0142C12.7666 10.8465 12.7856 10.681 12.8052 10.5144C12.8334 10.2716 12.851 10.02 12.7842 9.77537C12.7726 9.73276 12.7666 9.68882 12.7664 9.64466C12.7612 8.9222 12.5858 8.23225 12.3818 7.54523C12.268 7.16254 12.0985 6.80291 11.9325 6.44314C11.8151 6.18891 11.6714 5.94573 11.5173 5.70922C11.3149 5.39849 11.1084 5.08923 10.8699 4.80741C10.6419 4.53838 10.4247 4.2559 10.1547 4.02432C9.93382 3.83484 9.72422 3.62658 9.48211 3.46881C9.16592 3.26255 8.8917 2.99086 8.52807 2.85508C8.4232 2.81591 8.34153 2.71837 8.23866 2.66973C7.84745 2.48506 7.45357 2.3093 7.03944 2.17672C6.72791 2.07692 6.41758 1.97872 6.09792 1.9109C5.92603 1.87439 5.75148 1.84934 5.57946 1.81349C5.37066 1.77005 5.15387 1.78804 4.94907 1.751C4.63021 1.6933 4.31362 1.72022 3.99622 1.70849C3.91627 1.70556 3.83739 1.70503 3.75998 1.73434C3.7187 1.75033 3.67485 1.75864 3.63059 1.75886C3.33745 1.75486 3.05177 1.80776 2.76582 1.86293C2.70613 1.87439 2.64217 1.86293 2.58008 1.86293C2.62225 1.79599 2.6828 1.74261 2.7545 1.70916C2.89867 1.58591 3.08108 1.57352 3.25444 1.55193C4.88631 1.349 6.44436 1.61229 7.94072 2.28718C8.87278 2.70758 9.70903 3.27321 10.4258 3.99194C11.8464 5.41648 12.7099 7.12843 12.9463 9.13885C13.0343 9.88863 13.021 10.6389 12.9449 11.3897C12.9316 11.5197 12.8465 11.6162 12.8275 11.7392C12.793 11.8189 12.7346 11.886 12.6603 11.9312Z\" fill=\"#F05038\"/>\n<path d=\"M5.78455 0.215352C6.18043 0.186571 6.55472 0.300497 6.93047 0.394435C7.19563 0.461059 7.45973 0.535943 7.71783 0.625618C7.93209 0.69997 8.13955 0.795374 8.34408 0.893844C8.40724 0.924224 8.47054 0.953538 8.53503 0.981653C8.72157 1.06253 8.91198 1.13089 9.08134 1.24815C9.18927 1.32236 9.31212 1.37513 9.42871 1.43669C9.7485 1.60591 10.0399 1.82191 10.3348 2.02937C10.6154 2.22711 10.8886 2.4403 11.1388 2.67468C11.4028 2.92172 11.6762 3.1625 11.8915 3.45951C11.9998 3.60887 12.1388 3.73426 12.2557 3.87963C12.5206 4.21024 12.7614 4.55949 12.9761 4.92468C12.999 4.96166 13.0246 4.99681 13.0529 5.02982C13.1195 5.1119 13.1795 5.19664 13.2108 5.3027C13.2367 5.38762 13.2773 5.46735 13.3307 5.53828C13.4017 5.63302 13.4442 5.73696 13.4785 5.84742C13.5279 6.00731 13.6264 6.14309 13.689 6.29872C13.8466 6.6906 14.0172 7.07542 14.0962 7.49448C14.1467 7.7627 14.2075 8.02973 14.2801 8.29289C14.3167 8.42614 14.2966 8.55699 14.3122 8.6881C14.3142 8.70421 14.3123 8.72056 14.3067 8.7358C14.2614 8.78444 14.2975 8.85466 14.2617 8.90582C14.2565 8.97911 14.2668 9.05666 14.2057 9.11502C14.1054 9.01189 14.1018 8.87584 14.0837 8.74633C13.9606 7.8669 13.7278 7.01599 13.3579 6.21038C12.9644 5.34961 12.487 4.53454 11.8718 3.80768C11.5455 3.38542 11.1551 3.02472 10.7586 2.67228C10.0372 2.03177 9.21565 1.54249 8.33902 1.15048C7.47119 0.762329 6.56818 0.482378 5.6152 0.390971C5.53711 0.383376 5.45304 0.39297 5.3988 0.316086C5.44544 0.266785 5.507 0.268384 5.56749 0.266918C5.60094 0.242268 5.64571 0.249863 5.67982 0.226944L5.78455 0.215352Z\" fill=\"#F8A084\"/>\n<path d=\"M13.2451 11.1841C13.1961 11.2929 13.1336 11.3919 13.0405 11.4688C12.9557 11.4012 12.9807 11.313 12.9902 11.2248C13.1152 10.0621 13.0248 8.91816 12.7059 7.79089C12.2947 6.33744 11.553 5.08021 10.4807 4.01921C10.4117 3.95059 10.3413 3.8829 10.2841 3.80362C9.91106 3.32993 9.40725 3.02013 8.90864 2.7034C8.42722 2.40347 7.92342 2.1503 7.38363 1.97055C7.35588 1.96325 7.32874 1.95376 7.30249 1.94217C6.2593 1.56908 5.18387 1.39932 4.07659 1.40505C3.87139 1.40612 3.67538 1.47687 3.47018 1.46061C3.36638 1.45235 3.25472 1.47727 3.17184 1.386C3.17706 1.37252 3.18594 1.36076 3.19747 1.35205C3.20901 1.34334 3.22274 1.33802 3.23714 1.33669C3.26005 1.30072 3.31482 1.31471 3.33494 1.27434L3.33147 1.2766C3.75347 1.15548 4.18692 1.13123 4.61957 1.16414C5.28087 1.21451 5.94031 1.28406 6.58456 1.45955C7.21841 1.63184 7.83094 1.85542 8.41789 2.15136C9.35275 2.62292 10.1634 3.25624 10.8818 4.01348C11.4579 4.62109 11.9227 5.30371 12.3075 6.04843C12.5607 6.53704 12.7888 7.03871 12.9405 7.55904C13.0802 8.0378 13.205 8.52868 13.2681 9.03142C13.3143 9.40091 13.3246 9.7724 13.3423 10.1408C13.3569 10.4428 13.3423 10.7578 13.2799 11.0621C13.2685 11.103 13.2758 11.1496 13.2451 11.1841Z\" fill=\"#F26447\"/>\n<path d=\"M13.245 11.0775C13.245 10.9533 13.2528 10.8285 13.2433 10.7044C13.2289 10.5165 13.3128 10.3313 13.2857 10.1538C13.2596 9.97047 13.2463 9.78553 13.2457 9.60033C13.2449 9.54703 13.2512 9.49373 13.2444 9.44043C13.2169 9.23124 13.1777 9.02324 13.1577 8.81417C13.1336 8.55648 13.0537 8.3141 12.9855 8.06799C12.9529 7.9506 12.9072 7.83201 12.9246 7.70383C12.9332 7.63974 12.9092 7.58284 12.8682 7.53181C12.806 7.45413 12.7711 7.36272 12.7499 7.26691C12.7139 7.10355 12.673 6.94273 12.5741 6.80348C12.4942 6.4721 12.2562 6.212 12.1621 5.88701C11.8934 5.50406 11.6868 5.08287 11.3914 4.71364C11.0469 4.28313 10.6655 3.89138 10.2748 3.50643C10.154 3.38984 10.0259 3.28115 9.89108 3.18104C9.63071 2.98397 9.37661 2.77398 9.09653 2.60928C8.92504 2.50841 8.76914 2.3781 8.56847 2.31534C8.40404 2.26404 8.25014 2.16357 8.09784 2.07869C7.92689 1.98342 7.73102 1.95051 7.57005 1.83659C7.52328 1.80341 7.45013 1.80914 7.39244 1.78915C7.20003 1.72253 7.01135 1.64498 6.81655 1.58728C6.62174 1.52959 6.42427 1.48468 6.22573 1.44564C5.93259 1.38781 5.63665 1.33904 5.34151 1.28908C5.28954 1.28015 5.23491 1.28348 5.18161 1.28228C5.02291 1.27882 4.86182 1.3 4.70872 1.23604C4.41757 1.23951 4.12576 1.19607 3.83542 1.26536C3.67059 1.30467 3.49977 1.28041 3.33148 1.27735C3.41996 1.17768 3.53495 1.11879 3.65514 1.06802C4.69086 0.909457 5.7042 1.07615 6.69809 1.33371C7.37885 1.51013 8.05281 1.73519 8.65681 2.12147C8.86401 2.25378 9.11345 2.31734 9.29227 2.49935C9.58621 2.79703 9.94837 3.00929 10.266 3.27871C11.0674 3.95827 11.7096 4.76188 12.2234 5.67315C12.7224 6.55818 13.0875 7.4925 13.2829 8.49278C13.4266 9.22884 13.4358 9.97102 13.4161 10.7156C13.4134 10.8199 13.4011 10.9273 13.3503 11.0239C13.3323 11.0433 13.3094 11.0587 13.3029 11.0866L13.3073 11.0847C13.2842 11.1031 13.2635 11.1007 13.245 11.0775Z\" fill=\"#F36D50\"/>\n<path d=\"M2.10228 2.3317C2.19449 2.35182 2.27403 2.29879 2.36091 2.28546C2.64752 2.24136 2.93227 2.18473 3.21782 2.13383C3.8069 2.02883 4.40118 2.09266 4.99293 2.08546C5.1928 2.08306 5.39267 2.14489 5.59334 2.16541C5.99135 2.20538 6.36617 2.33597 6.74765 2.4435C7.05412 2.52997 7.3482 2.65016 7.64254 2.76888C8.19551 2.99207 8.67879 3.33292 9.16648 3.6687C9.71212 4.04419 10.1277 4.55545 10.6023 5.00489C10.6463 5.04647 10.6732 5.10549 10.7112 5.154C10.7874 5.25113 10.8499 5.35746 10.936 5.44874C11.0071 5.52429 11.0546 5.62262 11.1092 5.71243C11.1319 5.74948 11.1397 5.79744 11.1674 5.82916C11.3598 6.05061 11.483 6.31484 11.6265 6.56628C11.7012 6.69726 11.7352 6.84863 11.8049 6.97934C11.9688 7.28661 12.0181 7.63092 12.1473 7.94991C12.2483 8.19975 12.284 8.47743 12.3353 8.74526C12.3799 8.97804 12.4069 9.21415 12.4386 9.4492C12.4449 9.51086 12.447 9.57286 12.4451 9.63481C12.4451 9.96273 12.441 10.2907 12.4467 10.6184C12.4517 10.8939 12.4025 11.1614 12.3535 11.43C12.294 11.7586 12.2387 12.088 12.1816 12.4171C12.1432 12.4819 12.0861 12.5336 12.0178 12.5654C12.008 12.4824 12.0506 12.4107 12.0679 12.3337C12.1369 12.0243 12.216 11.7168 12.2707 11.405C12.3107 11.1803 12.3263 10.9504 12.336 10.722C12.3468 10.4655 12.3351 10.208 12.3392 9.95101C12.3464 9.50796 12.2808 9.07491 12.1952 8.64106C12.125 8.28556 12.051 7.93205 11.9253 7.59294C11.8276 7.3292 11.719 7.06946 11.5994 6.81371C11.5248 6.65502 11.4187 6.51191 11.3677 6.33962C11.344 6.25968 11.2563 6.20105 11.2211 6.1223C11.0951 5.83595 10.9132 5.58731 10.7193 5.34587C10.4874 5.05699 10.259 4.76438 9.99407 4.50402C9.72918 4.24366 9.44496 4.00754 9.14742 3.78689C8.92783 3.62379 8.70509 3.46505 8.47919 3.31066C8.38592 3.24671 8.28292 3.19501 8.18085 3.14491C7.856 2.98501 7.543 2.79846 7.18643 2.71065C7.11981 2.69426 7.06451 2.63777 6.99842 2.61805C6.56804 2.4896 6.13632 2.37088 5.69261 2.28493C5.15709 2.18073 4.62091 2.18859 4.08246 2.18673C3.98492 2.18673 3.88738 2.18953 3.78931 2.18673C3.54041 2.17847 3.2991 2.2347 3.05646 2.27361C2.82194 2.31105 2.58903 2.35888 2.35545 2.40299C2.21727 2.42964 2.09388 2.51545 1.94638 2.50452C1.9609 2.45269 1.99648 2.41924 2.04245 2.39473C2.07336 2.38473 2.09908 2.36941 2.10348 2.33303L2.10228 2.3317Z\" fill=\"#EE2927\"/>\n<path d=\"M14.4158 7.83081C14.3882 7.8085 14.37 7.77656 14.3649 7.7414C14.3256 7.48823 14.2124 7.25319 14.1825 6.99722C14.1754 6.94438 14.1587 6.89328 14.1334 6.84638C14.025 6.64172 13.9776 6.4116 13.8779 6.2068C13.7314 5.90606 13.6406 5.58054 13.4494 5.29899C13.2677 5.0309 13.1407 4.7275 12.9484 4.46474C12.7245 4.15894 12.498 3.85513 12.2582 3.56066C11.9373 3.16731 11.563 2.82874 11.2067 2.4723C11.0145 2.27976 10.7925 2.11547 10.5746 1.95024C10.3362 1.76903 10.0923 1.59421 9.84176 1.43058C9.65921 1.31066 9.45654 1.22258 9.27279 1.10492C9.04001 0.955688 8.77978 0.86628 8.53607 0.744492C8.29863 0.626169 8.03387 0.579533 7.80615 0.439225C7.733 0.394187 7.64026 0.379264 7.55525 0.355279C7.32579 0.290521 7.09568 0.228695 6.86609 0.165137C6.7217 0.122679 6.57149 0.103385 6.42105 0.107974C6.46929 0.0608043 6.53111 0.0610709 6.59201 0.0601382C6.74857 0.057873 6.90527 0.0564072 7.06183 0.054675C7.11087 0.0204306 7.1651 0.0328225 7.2184 0.0370864C8.94554 0.536761 10.4479 1.40953 11.7347 2.67417C12.7032 3.62648 13.4647 4.71124 14.0078 5.94777C14.2521 6.50367 14.5123 7.06704 14.443 7.70569C14.4384 7.74846 14.4501 7.79443 14.4158 7.83081Z\" fill=\"#FAB79F\"/>\n<path d=\"M12.8274 11.7386C12.8505 11.5557 12.8664 11.3714 12.8999 11.1903C12.9155 11.1125 12.924 11.0334 12.9252 10.9541C12.9252 10.466 12.9233 9.97802 12.9265 9.49007C12.9276 9.31179 12.8832 9.13923 12.8584 8.96588C12.811 8.64343 12.7464 8.32372 12.6651 8.0081C12.5626 7.6041 12.4242 7.21222 12.275 6.82594C12.1284 6.44739 11.9165 6.09735 11.7153 5.74411C11.5661 5.48215 11.3845 5.24257 11.2119 4.99713C11.1007 4.8387 10.9686 4.6944 10.8398 4.54916C10.6875 4.37714 10.5555 4.18739 10.3809 4.03483C10.1677 3.84895 9.95208 3.66733 9.73635 3.48532C9.48525 3.2757 9.22034 3.08321 8.9434 2.90916C8.63786 2.71449 8.31328 2.55592 7.99135 2.39056C7.61826 2.19895 7.22599 2.06811 6.83118 1.94179C6.50383 1.83476 6.16869 1.75324 5.82876 1.69795C5.68219 1.67503 5.52909 1.67236 5.38705 1.618C5.37063 1.61125 5.35321 1.60724 5.33548 1.60614C4.87592 1.59508 4.41728 1.49954 3.95825 1.55284C3.61674 1.59282 3.27323 1.60961 2.93318 1.65944C2.87242 1.66823 2.81393 1.69155 2.75436 1.70821C2.82485 1.61387 2.91932 1.54964 3.02179 1.49501C3.62966 1.35577 4.24633 1.37589 4.86192 1.40174C5.73029 1.43798 6.56415 1.65091 7.38561 1.91967C7.74538 2.08063 8.10901 2.2332 8.46211 2.40948C8.55858 2.45759 8.64519 2.50982 8.72021 2.5843C8.77777 2.64067 8.8416 2.68757 8.91862 2.71382C8.95903 2.72457 8.99642 2.7445 9.02788 2.77205C9.03534 2.77804 9.04267 2.78471 9.05013 2.7907C9.07185 2.80831 9.09519 2.82383 9.11982 2.83707C9.13598 2.8453 9.15137 2.85498 9.16579 2.86599C9.18018 2.87665 9.1939 2.88837 9.20749 2.90023C9.21496 2.90543 9.22188 2.91129 9.22935 2.91635C9.2532 2.93141 9.27865 2.943 9.30383 2.95633C9.32155 2.96622 9.33832 2.97773 9.35393 2.99071C9.37085 3.00403 9.38658 3.01735 9.40243 3.03201C9.41096 3.03934 9.41882 3.04667 9.42735 3.05373C9.52382 3.15313 9.63948 3.22695 9.75514 3.29984C9.77571 3.31145 9.79524 3.32483 9.8135 3.33981C9.83202 3.355 9.84961 3.37112 9.8668 3.38738C9.87586 3.39551 9.88452 3.40377 9.89345 3.41176C10 3.5113 10.0974 3.62229 10.224 3.70011C10.2433 3.71862 10.2606 3.73917 10.2755 3.7614C11.0522 4.51212 11.6992 5.35796 12.1744 6.33106C12.7132 7.43474 13.0005 8.59878 13.064 9.82625C13.0899 10.3245 13.043 10.8136 13.0034 11.3053C12.995 11.4108 12.981 11.5168 12.9276 11.6118L12.9293 11.6091C12.9037 11.6236 12.8846 11.6475 12.876 11.6757C12.8745 11.6897 12.8692 11.7029 12.8606 11.714C12.852 11.7252 12.8405 11.7337 12.8274 11.7386Z\" fill=\"#F15A3F\"/>\n<path d=\"M14.1034 9.44325C14.1034 9.50148 14.0997 9.55838 14.0501 9.59982C13.8749 9.35131 13.9302 9.0535 13.8877 8.77995C13.7318 7.7834 13.4192 6.84681 12.9861 5.9326C12.4879 4.87996 11.803 3.98148 10.973 3.18773C10.0691 2.32269 9.04095 1.63953 7.85506 1.21101C7.3775 0.973835 6.87223 0.827663 6.34551 0.75038C6.31718 0.745179 6.28948 0.73696 6.2629 0.725863C5.90463 0.641942 5.54055 0.585196 5.17374 0.556107C5.07074 0.548245 4.95975 0.572763 4.87753 0.481888C4.97175 0.417615 5.08194 0.380716 5.19586 0.375291C5.5884 0.305337 5.96656 0.407937 6.34178 0.48975C8.37152 0.931995 10.1152 1.8919 11.5517 3.39826C11.5997 3.45041 11.6449 3.50508 11.6871 3.56202C12.3721 4.36068 12.9407 5.25222 13.376 6.21016C13.6946 6.90983 13.9071 7.64442 14.043 8.40073C14.1049 8.74531 14.2076 9.08855 14.1034 9.44325Z\" fill=\"#F69679\"/>\n<path d=\"M14.4159 7.83085C14.4159 7.82193 14.4159 7.813 14.4159 7.80421C14.4445 7.45403 14.39 7.11865 14.26 6.79153C14.2019 6.64496 14.1715 6.48706 14.0909 6.35075C14.0103 6.21444 14.0152 6.04295 13.9159 5.91104C13.8192 5.78232 13.7932 5.61696 13.7168 5.47812C13.5427 5.16153 13.3704 4.844 13.1799 4.5362C12.998 4.24239 12.7862 3.97164 12.5812 3.69595C12.4498 3.51926 12.2991 3.35577 12.1468 3.19601C11.9325 2.97135 11.7071 2.75629 11.4895 2.53577C11.1653 2.20745 10.8043 1.92537 10.4308 1.65554C10.1952 1.4838 9.9506 1.32479 9.69799 1.17919C9.39153 1.0045 9.10038 0.796504 8.75901 0.688042C8.64774 0.652731 8.56646 0.566121 8.4544 0.528812C8.11183 0.414753 7.77311 0.288968 7.43187 0.170779C7.35605 0.144129 7.27904 0.124942 7.22321 0.0620498C7.331 0.0127485 7.43986 0.0211429 7.54926 0.0560535L7.65133 0.0569863C8.83376 0.36785 9.85975 0.980251 10.8338 1.69365C11.0692 1.86607 11.288 2.05928 11.5116 2.24636C12.1894 2.80973 12.7172 3.50487 13.2349 4.20895C13.6285 4.83412 13.9728 5.48901 14.2646 6.16767C14.3634 6.39619 14.3995 6.6379 14.4692 6.87201C14.4692 7.19793 14.4701 7.52385 14.4692 7.84978C14.4692 7.9192 14.4766 7.99235 14.4208 8.04965L14.4159 7.83085Z\" fill=\"#FBC0AA\"/>\n<path d=\"M7.86519 1.17512C7.95366 1.17512 8.04414 1.16686 8.11609 1.23628C8.12897 1.2486 8.14426 1.25813 8.16099 1.26427C8.49598 1.38246 8.80564 1.54595 9.11144 1.72916C9.36075 1.8784 9.61605 2.01924 9.85576 2.1838C10.1397 2.37874 10.4055 2.59686 10.667 2.82218C10.8887 3.01339 11.1 3.2134 11.308 3.4182C11.5415 3.64778 11.7385 3.90948 11.9517 4.15705C12.1718 4.41301 12.3627 4.68817 12.5428 4.97132C12.6851 5.19491 12.8515 5.41303 12.9415 5.65767C13.0634 5.98985 13.2853 6.27567 13.3647 6.62384C13.6665 7.22345 13.768 7.88222 13.9296 8.5234C13.9204 8.7366 14.0051 8.93967 13.9944 9.15473C13.9869 9.30423 14.0651 9.4468 14.0509 9.59977C14.0489 9.70157 14.0047 9.78725 13.9486 9.86826C13.837 9.82722 13.8182 9.73008 13.8172 9.63188C13.8094 8.93154 13.6514 8.25584 13.4841 7.58175C13.4605 7.51753 13.4497 7.44957 13.4256 7.38548C13.4154 7.36123 13.4072 7.33618 13.3989 7.31113C12.8565 5.53215 11.8337 4.0779 10.4237 2.87801C9.85363 2.393 9.22084 2.00392 8.57299 1.64269C8.26799 1.47266 7.92088 1.37033 7.58977 1.24508C7.50542 1.21323 7.36498 1.21323 7.40482 1.05267C7.57777 1.02056 7.72061 1.10104 7.86519 1.17512Z\" fill=\"#F68F71\"/>\n<path d=\"M3.39022 17.6261C3.2739 17.6321 3.1637 17.6092 3.05111 17.5768C2.71932 17.4817 2.39087 17.3784 2.07015 17.25C1.85029 17.162 1.67041 17.0211 1.52077 16.843C1.38686 16.6842 1.38753 16.5464 1.51984 16.3872C1.62054 16.2632 1.74481 16.1603 1.88547 16.0846C2.34424 15.8421 2.83312 15.6963 3.33972 15.5998C3.55625 15.5587 3.77317 15.5172 3.9869 15.4641C4.12508 15.4296 4.27311 15.4687 4.40463 15.3993C4.63581 15.408 4.86113 15.3508 5.08911 15.3284C5.38026 15.2999 5.6738 15.3087 5.96095 15.2702C6.18013 15.243 6.40085 15.23 6.62172 15.2314C7.18948 15.2286 7.75738 15.2306 8.32527 15.2314C8.43187 15.2314 8.53847 15.2241 8.64067 15.2649C8.67395 15.2775 8.70964 15.2826 8.74513 15.2797C9.07438 15.2518 9.39711 15.3266 9.72383 15.3412C9.93382 15.3507 10.142 15.4 10.3514 15.4278C10.5 15.4477 10.6483 15.4678 10.7966 15.4902C11.4285 15.5876 12.0447 15.7434 12.6302 15.9983C12.835 16.0871 13.0419 16.1981 13.1765 16.4027C13.2722 16.5492 13.2633 16.6846 13.1898 16.8272C13.1445 16.9155 13.0699 16.9779 12.9889 17.0352C12.7256 17.2227 12.4274 17.3354 12.1252 17.4368C11.9413 17.4985 11.7488 17.5339 11.5638 17.5927C11.4676 17.6233 11.3726 17.6252 11.2754 17.6268C11.2685 17.6181 11.2642 17.6078 11.2627 17.5968C11.2613 17.5859 11.2628 17.5747 11.2671 17.5646C11.2832 17.5493 11.3022 17.5374 11.3231 17.5297C11.3745 17.5153 11.4278 17.5067 11.4782 17.4878C11.4977 17.4808 11.5178 17.4755 11.5382 17.4717C11.5881 17.4655 11.6373 17.4541 11.6848 17.4379C11.7033 17.4308 11.7222 17.4249 11.7414 17.42C11.7793 17.4104 11.8165 17.3985 11.8528 17.3842C11.871 17.3768 11.8897 17.3706 11.9087 17.3658C11.9467 17.3553 11.9841 17.3426 12.0206 17.3275C12.0396 17.3198 12.059 17.3132 12.0788 17.3078C12.1188 17.2958 12.1588 17.2812 12.1987 17.2668C12.2609 17.2464 12.3218 17.2223 12.381 17.1945C12.4 17.1842 12.4195 17.1752 12.4391 17.1666C12.4676 17.1532 12.4966 17.1399 12.5245 17.125C12.5424 17.1135 12.5608 17.1031 12.5792 17.0926C12.6159 17.0697 12.6509 17.0442 12.6858 17.0179C12.7038 17.0032 12.7227 16.9903 12.7419 16.9779C12.9986 16.7655 13.0159 16.707 12.9004 16.4412C12.8863 16.4252 12.8728 16.408 12.8597 16.3913C12.8465 16.3747 12.833 16.3606 12.8197 16.3451C12.8131 16.338 12.8064 16.3302 12.8004 16.3231C12.787 16.3098 12.7746 16.2957 12.7622 16.2818C12.756 16.2754 12.7499 16.2685 12.7436 16.2621C12.7303 16.2502 12.7187 16.2374 12.7064 16.2249C12.7064 16.2256 12.6874 16.2076 12.687 16.2084C12.6662 16.1939 12.6442 16.1812 12.6211 16.1707C12.6052 16.1642 12.5898 16.1564 12.575 16.1475C12.5589 16.1404 12.5435 16.1324 12.5276 16.1246C12.5117 16.1167 12.4944 16.1092 12.4782 16.1006C12.4515 16.0881 12.4249 16.0763 12.3982 16.0655C12.3774 16.0593 12.3582 16.0522 12.3372 16.0449C12.3025 16.0352 12.2686 16.0257 12.2342 16.015C11.6055 15.778 10.9561 15.6314 10.2888 15.5599C10.2616 15.5571 10.2346 15.5521 10.2082 15.5451C10.0919 15.5002 9.96834 15.5184 9.84841 15.5032C9.82111 15.5004 9.7941 15.4952 9.76767 15.4878C9.63442 15.4417 9.49331 15.4706 9.35713 15.4503C9.32835 15.4474 9.29986 15.442 9.27199 15.4342C9.0528 15.3821 8.82974 15.424 8.60909 15.406C8.56191 15.4042 8.51509 15.3971 8.46958 15.3845C7.70946 15.3399 6.94736 15.3406 6.18733 15.3867C6.08007 15.4133 5.97041 15.4078 5.86154 15.4101C5.71631 15.4145 5.56933 15.3921 5.42649 15.4378C5.35707 15.4535 5.28607 15.4611 5.2149 15.4605C5.10657 15.4625 4.99704 15.4522 4.89164 15.4885C4.83926 15.5013 4.78566 15.5086 4.73175 15.5103C4.64034 15.5122 4.5484 15.5103 4.46006 15.5411C4.42158 15.5511 4.3823 15.5578 4.34267 15.5611C4.25046 15.566 4.15772 15.5671 4.06965 15.601C3.68763 15.675 3.30708 15.7552 2.93105 15.8542C2.87389 15.8686 2.81446 15.8733 2.75783 15.8886C2.73758 15.8954 2.71653 15.9009 2.69574 15.9062C2.65541 15.9153 2.61571 15.927 2.57688 15.9412C2.55836 15.9506 2.53931 15.9587 2.52025 15.9671C2.49134 15.9817 2.46243 15.9959 2.43284 16.01C2.41209 16.0204 2.39073 16.0296 2.36889 16.0374C2.1505 16.1163 1.95582 16.2288 1.79979 16.4055C1.67281 16.5494 1.67201 16.6839 1.80179 16.8241C1.94636 16.9804 2.0992 17.1239 2.30893 17.1881C2.33022 17.1953 2.351 17.2039 2.37115 17.2139C2.3998 17.2272 2.42778 17.2426 2.45576 17.2572C2.47375 17.2652 2.49134 17.2746 2.50906 17.2838C2.54416 17.2993 2.58054 17.3116 2.61779 17.3207C2.63634 17.3259 2.65451 17.3324 2.67216 17.3402C2.70884 17.3536 2.7462 17.365 2.78408 17.3744C2.8038 17.3795 2.82272 17.3862 2.84178 17.3929C2.88145 17.4041 2.92183 17.4125 2.96263 17.4181C2.98348 17.4216 3.00402 17.4267 3.02406 17.4335C3.06403 17.4468 3.10321 17.4609 3.14305 17.4734C3.16281 17.4794 3.18225 17.4864 3.20128 17.4943C3.24911 17.5141 3.30068 17.5197 3.35038 17.5329C3.37023 17.5402 3.38804 17.5522 3.40235 17.5678C3.40551 17.5777 3.40606 17.5883 3.40393 17.5985C3.40181 17.6088 3.39709 17.6183 3.39022 17.6261Z\" fill=\"#E1DAE3\"/>\n<path d=\"M7.38577 1.06867C7.42974 1.13063 7.49756 1.15195 7.56499 1.17367C7.8003 1.24953 8.03034 1.34087 8.2536 1.44709C8.30179 1.4683 8.35215 1.4842 8.40377 1.49453C8.53569 1.52451 8.65055 1.5878 8.75714 1.66775C8.79925 1.69959 8.83709 1.74037 8.88453 1.76102C9.07829 1.84434 9.26204 1.94925 9.4323 2.07375C9.59513 2.19447 9.76822 2.30147 9.93624 2.41553C10.1043 2.52959 10.2576 2.6615 10.417 2.78609C10.7746 3.0659 11.068 3.40901 11.3953 3.71881C11.6724 3.98077 11.8952 4.28724 12.1167 4.59531C12.1782 4.68085 12.2233 4.78052 12.3103 4.84594C12.3801 4.89818 12.3744 4.99252 12.4225 5.05168C12.6026 5.27366 12.706 5.54002 12.8514 5.78187C12.9824 5.99999 13.0666 6.24583 13.1788 6.47595C13.295 6.71433 13.3491 6.97376 13.4418 7.22C13.4569 7.25997 13.4532 7.30687 13.4581 7.35071C13.4377 7.36682 13.412 7.37458 13.3861 7.37243C13.2809 7.32793 13.2693 7.22266 13.2377 7.13405C12.8619 6.07648 12.342 5.09845 11.6146 4.23967C10.8906 3.38476 10.0805 2.62739 9.08626 2.08787C9.06314 2.07781 9.04086 2.06591 9.01964 2.0523C8.73436 1.81552 8.40391 1.66761 8.052 1.56235C8.02919 1.55548 8.00692 1.54693 7.98538 1.53677C7.97499 1.53144 7.96459 1.52557 7.95407 1.52024C7.88744 1.47014 7.81029 1.44696 7.72981 1.43084C7.70618 1.42376 7.68326 1.41453 7.66132 1.40325C7.43423 1.28812 7.1899 1.21076 6.93793 1.1742C6.91052 1.16885 6.88374 1.16072 6.85798 1.14995C6.28728 0.954346 5.69634 0.866003 5.09819 0.824297C4.8866 0.809507 4.67807 0.792851 4.4762 0.724362C4.46975 0.720622 4.46412 0.715618 4.45965 0.709652C4.45518 0.703686 4.45196 0.69688 4.45018 0.68964C4.4484 0.6824 4.4481 0.674875 4.4493 0.667516C4.45049 0.660157 4.45316 0.653116 4.45714 0.646813C4.46185 0.642278 4.46763 0.639009 4.47395 0.637308C4.48026 0.635608 4.4869 0.635531 4.49325 0.637086C4.52137 0.633754 4.53962 0.612835 4.56174 0.598977C4.57588 0.589231 4.59304 0.58488 4.61011 0.586718C4.64929 0.560069 4.69432 0.564333 4.73816 0.563267C5.24943 0.534486 5.7487 0.622695 6.24638 0.721164C6.30647 0.733023 6.3651 0.749546 6.42639 0.750212C6.45359 0.750904 6.48073 0.753128 6.50767 0.756874C6.55884 0.766601 6.60614 0.790586 6.65731 0.800979C6.69511 0.804241 6.73235 0.812209 6.76817 0.824697C6.95711 0.921034 7.16791 0.95701 7.36192 1.04016C7.36938 1.04948 7.37751 1.05921 7.38577 1.06867Z\" fill=\"#F5896B\"/>\n<path d=\"M9.09024 2.02698C9.1077 2.02964 9.12808 2.02698 9.14221 2.03564C9.5583 2.28076 9.95558 2.5565 10.3308 2.86057C10.7592 3.20701 11.1245 3.61608 11.5119 4.00276C11.6851 4.17598 11.8183 4.38744 11.9669 4.58451C12.1155 4.78158 12.2754 4.96986 12.3629 5.20504C12.5873 5.44915 12.7059 5.75575 12.857 6.0429C12.9185 6.15989 12.9834 6.27634 12.9946 6.41239C13.1412 6.58734 13.1601 6.81946 13.2622 7.0144C13.319 7.12273 13.3167 7.25584 13.4048 7.35084C13.6619 8.05705 13.7732 8.79297 13.8277 9.53795C13.8449 9.77207 13.8761 10.0118 13.7837 10.2411C13.7852 10.2483 13.7849 10.2557 13.7827 10.2627C13.7805 10.2697 13.7765 10.276 13.7712 10.2811C13.7537 10.3021 13.7344 10.3222 13.7303 10.3513C13.7286 10.3938 13.7162 10.4312 13.6785 10.4555C13.5516 10.332 13.5985 10.1721 13.6004 10.0283C13.6146 9.22749 13.4819 8.44839 13.2736 7.67983C13.0298 6.77642 12.6254 5.94483 12.138 5.15014C12.0682 5.03622 11.9816 4.93602 11.8981 4.83288C11.7502 4.57185 11.5588 4.3448 11.3465 4.13427C10.7773 3.40888 10.0495 2.86377 9.3033 2.33957C9.26 2.30906 9.21309 2.28348 9.17645 2.2443C9.13495 2.19909 9.1003 2.14805 9.07358 2.0928C9.0702 2.08134 9.06997 2.06919 9.0729 2.05761C9.07583 2.04603 9.08182 2.03545 9.09024 2.02698Z\" fill=\"#F58264\"/>\n<path d=\"M9.46347 0.37561C9.61431 0.381873 9.74609 0.44823 9.88266 0.502861C10.0667 0.57628 10.2507 0.648233 10.4222 0.748701C11.7873 1.56284 12.8606 2.67358 13.7243 3.99672C13.9004 4.33303 14.0574 4.67707 14.17 5.04097C14.1884 5.10067 14.2062 5.1585 14.2037 5.22125C14.0625 5.22352 14.0461 5.0964 14.0012 5.01166C13.4631 3.99512 12.769 3.09291 11.9476 2.29503C11.2752 1.64212 10.5364 1.06649 9.69892 0.629445C9.59645 0.575347 9.466 0.529777 9.46347 0.37561Z\" fill=\"#FDDDCF\"/>\n<path d=\"M9.25002 2.55946C9.14809 2.41422 8.98073 2.36732 8.83456 2.29204C8.70891 2.22728 8.57393 2.18211 8.47066 2.07818C8.44055 2.04793 8.39871 2.01915 8.35793 2.01155C8.12968 1.96585 7.94087 1.8298 7.73168 1.74133C7.52661 1.65445 7.30995 1.61088 7.10155 1.53839C6.86171 1.45511 6.62346 1.37117 6.3719 1.3228C6.07795 1.26617 5.78348 1.2162 5.48834 1.1677C5.25849 1.12946 5.02877 1.14678 4.80292 1.11574C4.60944 1.08909 4.41837 1.06324 4.2233 1.0691C4.13509 1.07176 4.04741 1.06617 3.96147 1.10095C3.85607 1.14358 3.75254 1.12413 3.655 1.06817C3.67459 1.02899 3.70923 1.01487 3.75014 1.0118C3.77572 1.00394 3.79491 0.985954 3.81543 0.969964C3.81943 0.964465 3.82491 0.960209 3.83123 0.957687C3.83754 0.955164 3.84445 0.954478 3.85114 0.955706C4.18905 0.844979 4.53922 0.878823 4.88033 0.902408C5.71104 0.960617 6.53097 1.12431 7.32034 1.38956C8.74288 1.86391 9.94264 2.68391 11.0023 3.72683C11.1223 3.84542 11.2093 3.9924 11.3287 4.11112C11.346 4.13006 11.3645 4.14787 11.3841 4.16442C11.4026 4.18055 11.4199 4.19791 11.4361 4.21638C11.4518 4.23372 11.4662 4.2523 11.479 4.27195C11.5066 4.31998 11.5396 4.36469 11.5774 4.40519C11.5924 4.42092 11.6066 4.43731 11.6211 4.45343C11.6357 4.46955 11.6501 4.48594 11.6636 4.503C11.6772 4.52007 11.6898 4.53786 11.7014 4.55629C11.7363 4.61426 11.7845 4.66209 11.8234 4.71726C11.8289 4.72805 11.8338 4.73871 11.8393 4.74964C11.8461 4.77324 11.8489 4.79784 11.8475 4.82239C11.841 4.8613 11.8241 4.89301 11.7865 4.9102C11.4947 4.76443 11.3826 4.45489 11.1821 4.22758C10.8187 3.81544 10.4235 3.44302 10.0026 3.09498C9.76588 2.89739 9.51428 2.71835 9.25002 2.55946Z\" fill=\"#F37658\"/>\n<path d=\"M11.3808 4.20978C11.2631 4.14196 11.1697 4.04349 11.0932 3.93743C10.9517 3.74116 10.7912 3.5694 10.5888 3.43615C10.5524 3.41066 10.5196 3.38046 10.4912 3.34635C10.2735 3.09744 9.99408 2.92342 9.73665 2.72289C9.55503 2.58164 9.36875 2.44773 9.15796 2.35126C9.11783 2.33267 9.08119 2.30734 9.04963 2.27638C8.97301 2.20136 8.89573 2.13473 8.785 2.10875C8.72757 2.09543 8.6784 2.04906 8.6251 2.01694C8.52018 1.95089 8.40795 1.89723 8.29065 1.85705C8.20884 1.8304 8.11743 1.81708 8.05667 1.74086C8.04202 1.72234 8.01177 1.71421 7.98699 1.70568C7.5013 1.54565 7.03068 1.33925 6.5286 1.22866C6.24505 1.16603 5.96217 1.10181 5.67356 1.06063C5.52472 1.03932 5.37362 1.03678 5.22838 1.01053C4.77041 0.927521 4.30898 0.983885 3.85101 0.955104C3.85851 0.941914 3.86923 0.930834 3.88216 0.92289C3.89508 0.914947 3.90981 0.910398 3.92497 0.909666C3.95161 0.876088 4.00251 0.888747 4.02956 0.855701C4.38253 0.719257 4.74723 0.789744 5.1042 0.813196C5.52674 0.84208 5.94609 0.906578 6.35778 1.006C6.38443 1.0116 6.41108 1.0164 6.43879 1.01933C6.51328 1.03265 6.58177 1.07263 6.65918 1.07582C6.68283 1.08075 6.70608 1.08743 6.72874 1.09581C6.82801 1.13032 6.92128 1.18682 7.03214 1.18136C7.0554 1.18574 7.07826 1.19202 7.1005 1.20014C7.2444 1.25171 7.38818 1.30354 7.53768 1.33725C7.5612 1.34054 7.58407 1.34741 7.6055 1.35764C7.73875 1.45718 7.89784 1.49795 8.05014 1.55471C8.07361 1.5611 8.09604 1.57079 8.11677 1.58349C8.3774 1.69289 8.61484 1.84905 8.87521 1.95845C8.89643 1.96789 8.91703 1.97866 8.9369 1.9907C8.96502 2.00882 8.99193 2.02947 9.02005 2.04773C9.03822 2.05958 9.05456 2.07404 9.06855 2.09063C9.10506 2.1306 9.15369 2.15472 9.1966 2.1863C9.43817 2.35952 9.68068 2.53274 9.92093 2.70796C10.098 2.83734 10.2602 2.98605 10.4326 3.11996C10.6427 3.28332 10.8223 3.47519 11.0142 3.65574C11.1559 3.78899 11.283 3.9337 11.3806 4.10279C11.4104 4.13876 11.4149 4.17421 11.3808 4.20978Z\" fill=\"#F47B5D\"/>\n<path d=\"M9.25 2.55945C9.33301 2.56318 9.40123 2.60449 9.46719 2.64846C9.72303 2.81901 9.9602 3.01342 10.1987 3.20703C10.4372 3.40063 10.6531 3.62182 10.8737 3.83608C11.1393 4.09378 11.3645 4.38586 11.5863 4.68007C11.6508 4.76561 11.7128 4.84809 11.8067 4.90192C11.8175 4.90872 11.8283 4.91525 11.8392 4.92231C11.9201 5.03797 12.0073 5.14883 12.0933 5.26155C12.8367 6.4176 13.2866 7.68105 13.4571 9.04109C13.5317 9.6359 13.6022 10.2351 13.4661 10.833C13.4506 10.9077 13.4101 10.975 13.3512 11.0235C13.3512 10.6514 13.3455 10.279 13.3532 9.90693C13.3609 9.54343 13.303 9.18833 13.2599 8.82936C13.2067 8.39182 13.1092 7.96082 12.9688 7.543C12.8417 7.16098 12.7491 6.75951 12.5131 6.4208C12.4446 6.32246 12.4731 6.19068 12.3913 6.10314C12.3095 6.0156 12.2688 5.9134 12.2211 5.8076C12.1489 5.6477 12.0479 5.50033 11.9606 5.3471C11.7895 5.04689 11.5662 4.7828 11.3621 4.50671C11.0777 4.1223 10.7442 3.77572 10.3834 3.46299C10.0443 3.16905 9.69278 2.88723 9.31529 2.64086C9.28784 2.62274 9.27159 2.5869 9.25 2.55945Z\" fill=\"#F37052\"/>\n<path d=\"M9.46346 0.375714C9.58158 0.479897 9.71343 0.567369 9.85534 0.635678C10.0035 0.707365 10.1567 0.783582 10.2827 0.899373C10.3426 0.951781 10.4078 0.997945 10.4771 1.03715C10.7735 1.21423 11.0447 1.42237 11.3056 1.65008C11.5917 1.89952 11.8977 2.12711 12.1569 2.40599C12.5116 2.78748 12.8631 3.17189 13.1724 3.59189C13.4233 3.93393 13.6661 4.28184 13.8751 4.65173C13.9573 4.7971 14.0332 4.9462 14.1131 5.09291C14.1382 5.13888 14.1531 5.19231 14.2037 5.22096C14.261 5.35674 14.297 5.50057 14.3103 5.64735C14.1867 5.6724 14.1683 5.57046 14.1316 5.49558C13.6794 4.57338 13.116 3.72606 12.4281 2.96243C12.1808 2.64597 11.8927 2.37002 11.5851 2.11338C11.4591 2.02104 11.3668 1.88939 11.2294 1.81011C11.2087 1.79711 11.189 1.78264 11.1704 1.76681C10.7168 1.37953 10.2245 1.04017 9.70118 0.754134C9.67892 0.744274 9.6576 0.732549 9.63642 0.72069C9.3591 0.550699 9.06837 0.403639 8.76712 0.280976C8.74621 0.268137 8.72742 0.252135 8.71142 0.233541C8.70516 0.223264 8.70235 0.211253 8.7034 0.199265C8.70446 0.187277 8.70932 0.175942 8.71728 0.166917C8.81335 0.148796 8.89397 0.209823 8.98458 0.219017C9.01402 0.250463 9.06319 0.238204 9.09344 0.268051L9.19777 0.272848C9.22682 0.303628 9.27612 0.290703 9.30437 0.322283C9.32209 0.322283 9.33968 0.323349 9.35767 0.325214C9.38685 0.355994 9.43495 0.346 9.46426 0.375315L9.46346 0.375714Z\" fill=\"#FDD6C6\"/>\n<path d=\"M12.928 11.6139C12.9317 11.5523 12.9216 11.4856 12.9423 11.4302C12.9777 11.3353 12.9785 11.24 12.9788 11.1427C12.9788 11.0361 12.9788 10.9325 13.0142 10.8283C13.0363 10.7638 13.0309 10.6886 13.0313 10.6181C13.0329 10.3437 13.0321 10.069 13.0313 9.79442C13.0313 9.69728 13.0369 9.60001 12.9966 9.50674C12.9833 9.47529 12.9816 9.43772 12.9796 9.40267C12.9456 8.80173 12.821 8.21918 12.6465 7.64382C12.4696 7.06034 12.2308 6.49749 11.934 5.96491C11.7123 5.56296 11.4577 5.18 11.173 4.81992C10.9079 4.48774 10.6307 4.16915 10.326 3.87387C10.2821 3.83137 10.2476 3.77914 10.2087 3.73143C10.2443 3.69746 10.2797 3.70239 10.3153 3.73143C10.4247 3.89546 10.5747 4.02284 10.7169 4.15462C10.8936 4.31865 11.0352 4.51133 11.1877 4.69427C11.4017 4.95314 11.5958 5.22779 11.7685 5.51587C11.9882 5.87924 12.1989 6.2458 12.3656 6.63927C12.4588 6.8578 12.5172 7.09231 12.6491 7.29498C12.6772 7.33802 12.6879 7.39398 12.6999 7.44555C12.8052 7.90045 12.9092 8.35567 13.0121 8.81119C13.024 8.87177 13.0304 8.93332 13.0311 8.99507C13.0342 9.07502 13.0311 9.15497 13.0634 9.23052C13.0956 9.30607 13.0828 9.38788 13.0851 9.4673C13.0907 9.66117 13.0822 9.85371 13.1277 10.0479C13.1613 10.1959 13.1561 10.3501 13.1124 10.4954C13.0959 10.5549 13.0872 10.6163 13.0864 10.6781C13.0807 10.9074 13.1018 11.1383 13.0355 11.3637C13.0262 11.3956 13.0382 11.434 13.0405 11.4695C13.0234 11.5305 12.983 11.5824 12.928 11.6139Z\" fill=\"#F15B40\"/>\n<path d=\"M11.647 3.57095C11.43 3.32645 11.2182 3.07714 10.9449 2.89033C10.9088 2.86568 10.8791 2.83103 10.8484 2.79906C10.6274 2.56854 10.3683 2.38199 10.112 2.19545C9.79058 1.96107 9.45573 1.74308 9.10196 1.56186C8.939 1.47845 8.7847 1.37012 8.60135 1.32428C8.54313 1.30963 8.48823 1.27325 8.43786 1.23794C8.3596 1.18009 8.26995 1.13953 8.17483 1.11895C8.05558 1.0947 7.94352 1.0358 7.83452 0.987036C7.59121 0.87804 7.34151 0.804355 7.08474 0.737732C6.88967 0.687231 6.69979 0.611014 6.50032 0.572373C6.24129 0.522139 5.98066 0.4791 5.7215 0.429799C5.54828 0.396887 5.37426 0.364375 5.19611 0.375035C5.2518 0.314274 5.32722 0.321736 5.39891 0.316406C5.76307 0.316406 6.11524 0.389025 6.47034 0.466442C6.82544 0.543858 7.17215 0.64286 7.51766 0.750657C7.71846 0.813283 7.90328 0.920013 8.10021 0.987969C8.36031 1.07778 8.60282 1.2001 8.84573 1.32268C9.19217 1.49764 9.53621 1.68045 9.85401 1.9043C10.1422 2.10724 10.4291 2.31137 10.7025 2.53709C11.1009 2.86608 11.4384 3.25396 11.8131 3.60493C11.8655 3.65397 11.9151 3.70513 11.9133 3.78455C11.7626 3.79028 11.7287 3.6509 11.647 3.57095Z\" fill=\"#F79D80\"/>\n<path d=\"M13.7239 3.9968C13.5993 3.92071 13.5343 3.7884 13.4485 3.68034C13.3285 3.5291 13.223 3.36507 13.0956 3.2177C12.9343 3.03116 12.7854 2.83289 12.6159 2.65381C12.3664 2.38971 12.1009 2.14067 11.8475 1.88018C11.6864 1.71455 11.4956 1.58623 11.3209 1.43766C11.0514 1.20848 10.7613 1.00688 10.4664 0.813271C10.446 0.799946 10.4362 0.770765 10.4215 0.748779C10.5576 0.766235 10.6687 0.844317 10.7837 0.90721C11.1717 1.11947 11.5243 1.38516 11.8763 1.65073C11.9534 1.70882 12.0159 1.7861 12.0862 1.85366C12.1564 1.92122 12.2203 1.99277 12.3079 2.04167C12.3857 2.08547 12.4494 2.15056 12.4915 2.22928C12.5348 2.30923 12.6008 2.36812 12.6634 2.43008C12.9789 2.74295 13.222 3.11097 13.4629 3.47993C13.5063 3.54656 13.5499 3.61318 13.587 3.68314C13.6421 3.78387 13.7123 3.87794 13.7239 3.9968Z\" fill=\"#FEE9E0\"/>\n<path d=\"M13.4661 10.833C13.4634 10.4967 13.4613 10.1604 13.4578 9.8242C13.4563 9.69216 13.4719 9.55878 13.4165 9.43139C13.4032 9.40061 13.4074 9.36171 13.4054 9.3264C13.3746 8.78835 13.2692 8.26375 13.1221 7.74623C13.0209 7.38966 12.914 7.03496 12.7669 6.69358C12.697 6.53142 12.6226 6.37085 12.5425 6.21389C12.467 6.06505 12.3693 5.92741 12.332 5.76005C12.3229 5.72008 12.292 5.6809 12.2611 5.65106C12.138 5.53113 12.0738 5.37923 12.0198 5.22107C11.9888 5.18243 11.9911 5.14659 12.0287 5.11354C12.1329 5.10181 12.1533 5.18509 12.1967 5.25198C12.6764 5.99084 13.0378 6.78152 13.2562 7.63616C13.278 7.72144 13.3416 7.79206 13.3516 7.8832C13.567 8.72228 13.6555 9.58889 13.6142 10.4542C13.6116 10.5251 13.5961 10.5948 13.5683 10.6601C13.5574 10.7286 13.5209 10.7905 13.4661 10.833Z\" fill=\"#F37758\"/>\n<path d=\"M11.647 3.57092L11.9135 3.78412C12.2333 4.12856 12.4988 4.51364 12.7475 4.90978C12.8831 5.12591 13.0201 5.34164 13.1127 5.58375C13.1756 5.74777 13.2762 5.89714 13.3572 6.05451C13.441 6.21747 13.549 6.37057 13.5672 6.56084C13.5694 6.58723 13.5762 6.61304 13.5873 6.63706C13.8254 7.12554 13.9371 7.65133 14.0513 8.17819C14.1189 8.48852 14.1639 8.80138 14.2069 9.11518C14.2033 9.2321 14.1674 9.34574 14.1034 9.44363C14.0997 9.40849 14.098 9.37317 14.0983 9.33783C14.1221 8.973 14.0389 8.62057 13.966 8.26826C13.9074 7.98471 13.8164 7.70756 13.762 7.42335C13.7087 7.1422 13.6085 6.88277 13.4729 6.63359C13.4438 6.5803 13.4124 6.5198 13.4104 6.46157C13.4069 6.35711 13.3756 6.27356 13.2989 6.20347C13.2655 6.17296 13.2553 6.12952 13.2456 6.08515C13.2016 5.89566 13.1125 5.71961 12.9857 5.57202C12.9577 5.53857 12.9284 5.50153 12.9154 5.46116C12.8394 5.22398 12.6799 5.03091 12.5731 4.80945C12.4906 4.63849 12.3465 4.49712 12.2309 4.34309C12.1886 4.28686 12.144 4.23223 12.106 4.1732C12.0153 4.03208 11.9075 3.90274 11.785 3.78812C11.7216 3.72775 11.6453 3.67299 11.647 3.57092Z\" fill=\"#F79A7D\"/>\n<path d=\"M11.4872 2.29309C11.2024 2.07057 10.924 1.83899 10.6309 1.62779C10.2876 1.38036 9.94651 1.12705 9.55756 0.950636C9.51759 0.932648 9.48414 0.901602 9.44723 0.877217C9.25456 0.750233 9.05429 0.641104 8.8343 0.563555C8.66108 0.502128 8.49692 0.412453 8.32636 0.341166C8.13982 0.263484 7.95181 0.191397 7.76326 0.119711C7.72182 0.103988 7.67745 0.0973255 7.65134 0.0561523C7.77192 0.0569518 7.89265 0.0593499 8.01323 0.0578842C8.09107 0.0558039 8.16818 0.0733062 8.23749 0.108784C9.3958 0.492268 10.39 1.1525 11.3146 1.93066C11.3732 2.05099 11.5679 2.10695 11.4872 2.29309Z\" fill=\"#FBC7B3\"/>\n<path d=\"M11.2746 17.5727V17.6268C11.152 17.7057 11.0081 17.7057 10.872 17.729C10.543 17.7855 10.2123 17.8325 9.882 17.8816C9.82934 17.8879 9.77634 17.891 9.72331 17.8909C9.59979 17.8942 9.47693 17.8894 9.35608 17.9309C9.29998 17.9505 9.23349 17.941 9.17167 17.9433C8.95167 17.9514 8.72995 17.9261 8.51289 17.9907C8.45573 18.0078 8.38977 17.996 8.32782 17.9962C7.66398 17.9962 7.00019 17.9962 6.33645 17.9962C6.22985 17.9962 6.12418 18.0024 6.02172 17.9623C5.98843 17.95 5.95287 17.9452 5.91752 17.9482C5.58907 17.9748 5.26727 17.8988 4.94109 17.887C4.74855 17.88 4.55667 17.8449 4.36546 17.816C4.07872 17.7726 3.7925 17.7227 3.50656 17.6776C3.46152 17.6705 3.42008 17.6625 3.38983 17.6256C3.38983 17.6077 3.38983 17.5899 3.38983 17.5723C3.51682 17.4594 3.6498 17.5635 3.77971 17.5611C3.80548 17.5651 3.83094 17.5709 3.85593 17.5783C3.92695 17.6049 4.0017 17.6148 4.07658 17.6239C4.10123 17.6273 4.12563 17.6324 4.1496 17.6391C4.23288 17.6684 4.31976 17.6657 4.4061 17.6673C4.45707 17.6686 4.50774 17.6755 4.5572 17.6878C4.63102 17.7122 4.70737 17.7179 4.78466 17.719C4.83798 17.7209 4.891 17.728 4.94295 17.7402C5.04848 17.7764 5.15801 17.7668 5.26674 17.7668C5.35309 17.7668 5.43996 17.7686 5.52417 17.7879C5.66808 17.8361 5.81732 17.8135 5.96389 17.8176C6.105 17.8211 6.2469 17.8093 6.38668 17.8387C7.01507 17.892 7.64333 17.8866 8.27145 17.8397C8.41056 17.8092 8.55194 17.8209 8.69238 17.8175C8.83815 17.8132 8.98552 17.836 9.12903 17.7908C9.19803 17.775 9.26864 17.7673 9.33942 17.7679C9.4327 17.7667 9.52597 17.7723 9.61924 17.765C9.65735 17.7593 9.69508 17.7512 9.73223 17.741C9.76932 17.7315 9.80718 17.7253 9.84536 17.7225C9.91971 17.7174 9.99433 17.7207 10.0687 17.7166C10.1166 17.7135 10.164 17.7049 10.2099 17.6909C10.2448 17.6812 10.2805 17.6749 10.3165 17.672C10.387 17.668 10.4571 17.6616 10.5248 17.6389C10.5588 17.6292 10.5937 17.6227 10.629 17.6197C10.6981 17.6156 10.7674 17.6115 10.8339 17.5891C10.8561 17.5822 10.8788 17.5769 10.9017 17.5732C10.9708 17.5651 11.04 17.5576 11.1069 17.5363C11.1303 17.5303 11.1543 17.5272 11.1784 17.527C11.1968 17.5271 11.2149 17.5312 11.2316 17.5391C11.2482 17.547 11.2629 17.5585 11.2746 17.5727Z\" fill=\"#D6D6DF\"/>\n<path d=\"M12.4461 2.93201C12.5945 3.03181 12.6952 3.17452 12.8084 3.30976C13.0796 3.63408 13.3183 3.98079 13.5524 4.33096C13.6645 4.49872 13.7581 4.67873 13.8601 4.85329C13.922 4.95988 13.9881 5.06382 14.0442 5.17308C14.1043 5.2902 14.1775 5.40226 14.2081 5.53285C14.2214 5.58828 14.2595 5.62359 14.3098 5.64717C14.3121 5.66385 14.3128 5.68072 14.3119 5.69754C14.3661 5.7607 14.3037 5.85184 14.364 5.91353C14.4326 6.03039 14.4173 6.1595 14.4173 6.28662C14.2677 6.2713 14.2862 6.1198 14.2161 6.03972C14.0611 5.5587 13.8193 5.12031 13.5499 4.69699C13.5363 4.67602 13.5241 4.65421 13.5134 4.6317C13.2347 4.16947 12.9376 3.71989 12.5925 3.3039C12.5658 3.25699 12.5447 3.20729 12.5126 3.16346C12.4992 3.148 12.4874 3.13188 12.4751 3.11589C12.4618 3.10068 12.4495 3.08471 12.4381 3.06805C12.4271 3.05107 12.4192 3.03225 12.4149 3.01249C12.4134 2.99233 12.4167 2.97212 12.4245 2.95346C12.4314 2.94586 12.4387 2.93894 12.4461 2.93201Z\" fill=\"#FCD1BF\"/>\n<path d=\"M7.38564 1.92064C7.28598 1.93077 7.19377 1.90239 7.10103 1.87001C6.61681 1.70065 6.11181 1.61444 5.6136 1.50132C5.3567 1.51064 5.10886 1.4263 4.84956 1.43789C4.52218 1.45255 4.19372 1.43949 3.8658 1.44216C3.68086 1.44349 3.49631 1.42883 3.3127 1.48519C3.22289 1.51251 3.11922 1.49386 3.02182 1.49599C3.05726 1.43976 3.11056 1.40751 3.17172 1.38633C3.39997 1.38166 3.62609 1.39392 3.85541 1.34635C4.03329 1.30891 4.2249 1.33436 4.41025 1.33623C4.5956 1.33809 4.78094 1.31544 4.96069 1.38206C4.99227 1.39379 5.03064 1.38673 5.06595 1.38872C5.85291 1.4335 6.60975 1.61711 7.34793 1.8856C7.36286 1.8904 7.37325 1.90839 7.38564 1.92064Z\" fill=\"#F16246\"/>\n<path d=\"M13.7837 10.2411C13.7817 10.0556 13.7803 9.87012 13.7775 9.68451C13.7753 9.54407 13.7713 9.40629 13.7399 9.26532C13.704 9.10449 13.6999 8.93527 13.6777 8.76977C13.6286 8.40308 13.5595 8.04171 13.4529 7.68848C13.4177 7.57951 13.4014 7.4653 13.4048 7.35083H13.4581C13.505 7.3944 13.4614 7.46809 13.5114 7.51073C13.5629 7.54444 13.5549 7.60147 13.5701 7.6509C13.6859 8.02866 13.7612 8.4164 13.8186 8.80522C13.8555 9.05492 13.9104 9.30676 13.8853 9.56392C13.8747 9.67052 13.8853 9.77565 13.9479 9.86852C13.924 10.0041 13.8677 10.132 13.7837 10.2411Z\" fill=\"#F5876A\"/>\n<path d=\"M13.5683 10.6603C13.5671 10.3773 13.5683 10.0941 13.5639 9.81099C13.5605 9.6002 13.5923 9.38607 13.5151 9.18074C13.541 8.87653 13.4253 8.59085 13.3984 8.29305C13.3843 8.13688 13.308 7.98978 13.2983 7.83002C13.2625 7.759 13.2429 7.68797 13.2983 7.61682C13.4269 7.72342 13.4294 7.88691 13.4485 8.02682C13.4829 8.27906 13.5452 8.5249 13.5895 8.77447C13.6028 8.85268 13.6177 8.92917 13.618 9.00845C13.618 9.10505 13.6213 9.19966 13.6505 9.29506C13.673 9.36861 13.6694 9.45136 13.6705 9.53011C13.6746 9.83817 13.6759 10.1465 13.6783 10.4547C13.665 10.5334 13.6263 10.6056 13.5683 10.6603Z\" fill=\"#F47E5F\"/>\n<path d=\"M11.2742 1.97384C10.9215 1.66618 10.5429 1.39395 10.1514 1.13785C9.84949 0.940248 9.53396 0.765962 9.22483 0.580749C9.11957 0.51759 9.00284 0.471221 8.88759 0.427116C8.69131 0.352098 8.51037 0.240571 8.30423 0.187272C8.27758 0.180343 8.25973 0.135839 8.23761 0.108657C8.34527 0.120116 8.46173 0.0756117 8.55807 0.159024C8.59684 0.217253 8.67546 0.166353 8.71703 0.216853C9.03922 0.371286 9.35728 0.534113 9.67641 0.69654C10.2159 1.01445 10.7322 1.37027 11.2213 1.76131C11.2864 1.82434 11.4043 1.85072 11.3741 1.9805C11.3388 2.00622 11.3056 2.00369 11.2742 1.97384Z\" fill=\"#FCCFBD\"/>\n<path d=\"M14.2569 6.01962C14.3125 6.07984 14.3743 6.13527 14.3728 6.22908C14.3728 6.24787 14.4016 6.26692 14.4172 6.28584C14.4654 6.37192 14.4705 6.46599 14.469 6.5614C14.4681 6.66466 14.469 6.76793 14.469 6.87119C14.3979 6.79977 14.3721 6.70024 14.3483 6.61256C14.2932 6.4192 14.2219 6.23083 14.1351 6.04946C14.0061 5.77111 13.8819 5.48983 13.7384 5.21894C13.6614 5.07357 13.6308 4.89835 13.4879 4.79095C13.4404 4.62679 13.3206 4.50394 13.2414 4.3579C13.2169 4.31259 13.2073 4.2593 13.1909 4.20959C13.4041 4.27369 13.4174 4.51286 13.564 4.63598C13.8214 5.08409 14.067 5.5382 14.2569 6.01962Z\" fill=\"#FBC8B5\"/>\n<path d=\"M6.48022 1.06864C6.37482 1.06864 6.27315 1.04812 6.16935 1.03146C5.87701 0.984293 5.5896 0.894485 5.28873 0.908343C4.87247 0.811739 4.44928 0.873299 4.02982 0.855044C4.08658 0.792685 4.16 0.763104 4.24061 0.747514C4.28059 0.716601 4.33029 0.723263 4.37492 0.710205C4.99279 0.781092 5.61718 0.799747 6.22705 0.937524C6.32006 0.959243 6.44091 0.938057 6.48022 1.06864Z\" fill=\"#F48264\"/>\n<path d=\"M6.53337 0.802637C6.32963 0.826755 6.13549 0.758799 5.93762 0.733749C5.67113 0.699904 5.4077 0.634081 5.13561 0.642475C5.06552 0.644607 4.99557 0.643808 4.92948 0.613694C4.86339 0.58358 4.7921 0.591308 4.72241 0.589709C4.70496 0.57825 4.6991 0.566924 4.70496 0.555598C4.71082 0.544272 4.71655 0.538543 4.72241 0.538543C4.72697 0.534 4.7327 0.53082 4.73896 0.52936C4.74522 0.527901 4.75177 0.52822 4.75786 0.530281C5.29084 0.466723 5.80358 0.602368 6.32044 0.696173C6.36961 0.775055 6.52164 0.648871 6.53337 0.802637Z\" fill=\"#F68F71\"/>\n<path d=\"M6.32044 0.696139C6.10885 0.701602 5.90525 0.640841 5.69712 0.617656C5.61983 0.608995 5.54282 0.589542 5.46354 0.589542C5.42836 0.589542 5.38972 0.597536 5.35867 0.585811C5.16293 0.512125 4.95813 0.548768 4.758 0.530247C4.78838 0.490273 4.83141 0.481612 4.87792 0.481345C4.92202 0.482011 4.96626 0.485343 5.01023 0.482678C5.28539 0.466155 5.55255 0.516522 5.81944 0.573418C5.87913 0.586743 5.94176 0.586743 6.00318 0.589408C6.11911 0.595538 6.22797 0.620721 6.32044 0.696139Z\" fill=\"#F69072\"/>\n<path d=\"M7.54967 0.055214L7.22361 0.0612099L7.06158 0.0544146C7.22454 -0.0179383 7.38711 -0.0186046 7.54967 0.055214Z\" fill=\"#FBC7B3\"/>\n<path d=\"M14.3635 5.91301C14.2849 5.85572 14.3165 5.77204 14.3113 5.69702C14.3843 5.75632 14.359 5.83853 14.3635 5.91301Z\" fill=\"#FDD6C6\"/>\n<path d=\"M8.71728 0.217009C8.65812 0.214743 8.59363 0.227269 8.55832 0.15918L8.71675 0.167574C8.71715 0.184097 8.71728 0.200619 8.71728 0.217009Z\" fill=\"#FCD1BF\"/>\n<path d=\"M14.2629 8.9055C14.2573 8.8434 14.2452 8.77944 14.3081 8.73547C14.3134 8.79757 14.3133 8.85779 14.2629 8.9055Z\" fill=\"#F9AE94\"/>\n<path d=\"M4.72244 0.53845V0.589617L4.60931 0.586819C4.6373 0.547911 4.67647 0.536318 4.72244 0.53845Z\" fill=\"#F69072\"/>\n<path d=\"M4.45633 0.647012C4.45633 0.663401 4.45633 0.67979 4.45633 0.69618C4.43341 0.725894 4.40183 0.72123 4.37065 0.717899L4.34866 0.695114C4.36095 0.678501 4.37731 0.665343 4.39617 0.656915C4.41504 0.648488 4.43576 0.645076 4.45633 0.647012Z\" fill=\"#F68F71\"/>\n<path d=\"M4.34933 0.749311L4.2406 0.748245C4.26645 0.70987 4.30416 0.695613 4.34853 0.694946L4.35719 0.70414C4.36852 0.716399 4.37052 0.727192 4.36492 0.736386C4.35932 0.74558 4.35413 0.749311 4.34933 0.749311Z\" fill=\"#F68F71\"/>\n<path d=\"M9.46387 0.375882C9.42029 0.375882 9.38085 0.367354 9.35727 0.325781C9.40097 0.324582 9.44002 0.334043 9.46387 0.375882Z\" fill=\"#FDDDCF\"/>\n<path d=\"M5.67979 0.226956C5.65128 0.265331 5.6113 0.27106 5.5676 0.26693C5.58061 0.250345 5.59805 0.237787 5.61791 0.230712C5.63777 0.223637 5.65922 0.222335 5.67979 0.226956Z\" fill=\"#F9AE94\"/>\n<path d=\"M9.30411 0.322961C9.26094 0.322961 9.22149 0.314567 9.19751 0.273527C9.24148 0.271661 9.27999 0.281655 9.30411 0.322961Z\" fill=\"#FDDDCF\"/>\n<path d=\"M9.0929 0.268698C9.0488 0.269764 9.00882 0.261503 8.98404 0.219664C9.02854 0.217932 9.06745 0.228191 9.0929 0.268698Z\" fill=\"#FDDDCF\"/>\n<path d=\"M13.245 11.0775L13.3079 11.0848C13.303 11.1281 13.2873 11.1648 13.2452 11.1841L13.245 11.0775Z\" fill=\"#F37052\"/>\n<path d=\"M3.3348 1.27466C3.31868 1.32143 3.2815 1.33435 3.237 1.33702C3.24636 1.31892 3.26033 1.30363 3.27751 1.29267C3.29468 1.28172 3.31445 1.27551 3.3348 1.27466Z\" fill=\"#F36D50\"/>\n<path d=\"M4.02995 0.855753C4.0077 0.898259 3.96906 0.909052 3.92535 0.909718C3.93644 0.892254 3.95196 0.878051 3.97034 0.868568C3.98872 0.859085 4.0093 0.854662 4.02995 0.855753Z\" fill=\"#F48264\"/>\n<path d=\"M4.56092 0.599177L4.49243 0.637286C4.49926 0.625267 4.50926 0.615356 4.52134 0.608636C4.53342 0.601915 4.54711 0.598643 4.56092 0.599177Z\" fill=\"#F69072\"/>\n<path d=\"M3.81557 0.969605L3.75027 1.01145C3.75596 0.998914 3.76515 0.988295 3.77673 0.980871C3.78832 0.973447 3.80181 0.969534 3.81557 0.969605Z\" fill=\"#F47B5D\"/>\n<path d=\"M2.10479 2.33252C2.10298 2.34814 2.09598 2.36271 2.08492 2.3739C2.07386 2.38508 2.05937 2.39223 2.04376 2.39421C2.04702 2.37919 2.05449 2.36541 2.0653 2.35449C2.07611 2.34356 2.08981 2.33594 2.10479 2.33252Z\" fill=\"#EE342A\"/>\n<path d=\"M13.7303 10.3501C13.7303 10.3358 13.7341 10.3218 13.7413 10.3095C13.7485 10.2971 13.7589 10.2869 13.7713 10.2799C13.7712 10.2942 13.7673 10.3081 13.7601 10.3204C13.7529 10.3327 13.7426 10.343 13.7303 10.3501Z\" fill=\"#F5876A\"/>\n<path d=\"M13.3035 11.0867C13.3192 11.0658 13.3351 11.045 13.3509 11.024C13.3509 11.0382 13.3463 11.052 13.3377 11.0633C13.3292 11.0746 13.3171 11.0828 13.3035 11.0867Z\" fill=\"#F37052\"/>\n<path d=\"M12.877 11.6784C12.879 11.6635 12.885 11.6495 12.8944 11.6377C12.9038 11.626 12.9162 11.617 12.9303 11.6118C12.9281 11.6267 12.922 11.6406 12.9127 11.6524C12.9033 11.6641 12.891 11.6731 12.877 11.6784Z\" fill=\"#F15B40\"/>\n<path d=\"M12.6086 11.9883C12.6264 11.9688 12.6441 11.9495 12.6619 11.9302C12.6605 11.9443 12.6545 11.9576 12.6449 11.9681C12.6353 11.9786 12.6226 11.9856 12.6086 11.9883Z\" fill=\"#F05038\"/>\n<path d=\"M12.5568 12.0437C12.5593 12.0297 12.5658 12.0167 12.5755 12.0063C12.5852 11.9958 12.5977 11.9884 12.6116 11.985C12.6098 11.9993 12.6035 12.0127 12.5937 12.0232C12.5839 12.0338 12.5709 12.041 12.5568 12.0437Z\" fill=\"#F05038\"/>\n<path d=\"M12.5043 12.1025C12.5063 12.0875 12.5128 12.0735 12.5229 12.0622C12.5329 12.051 12.5461 12.0431 12.5608 12.0394C12.5583 12.0542 12.5517 12.068 12.5417 12.0792C12.5317 12.0903 12.5187 12.0984 12.5043 12.1025Z\" fill=\"#F05038\"/>\n<path d=\"M60.3122 6.59431C60.3542 6.56686 60.3812 6.54527 60.4116 6.52995C60.7314 6.36792 60.8175 6.07918 60.8271 5.75339C60.832 5.58537 60.7421 5.46691 60.5946 5.39576C60.5314 5.36329 60.4629 5.34231 60.3924 5.3338C60.0648 5.30555 59.7362 5.31328 59.4081 5.32633C59.2593 5.33233 59.1639 5.42174 59.1167 5.56045C59.0981 5.61961 59.0826 5.6797 59.0702 5.74046C58.9745 6.16392 58.8791 6.58747 58.7841 7.0111C58.752 7.15541 58.7018 7.29665 58.6947 7.45455C58.8352 7.49026 58.9682 7.4708 59.0995 7.47187C59.1578 7.47187 59.1968 7.44349 59.2103 7.3802C59.2437 7.2243 59.2818 7.06947 59.3169 6.91383C59.3903 6.59311 59.3515 6.64827 59.6854 6.64361C59.7594 6.64268 59.7938 6.68545 59.8209 6.74768C59.9026 6.93422 59.9915 7.11797 60.0713 7.30531C60.1231 7.42737 60.2068 7.47853 60.3395 7.4756C60.7895 7.46787 60.7618 7.52384 60.5676 7.12343C60.4836 6.94928 60.4002 6.77459 60.3122 6.59431ZM60.2953 5.86145C60.2929 5.92309 60.2831 5.98421 60.266 6.04347C60.2231 6.18084 60.131 6.26999 59.9844 6.28824C59.8187 6.30903 59.6529 6.29997 59.4761 6.2957C59.4817 6.08038 59.544 5.8981 59.5932 5.71355C59.5985 5.69316 59.6279 5.66518 59.6465 5.66465C59.822 5.65945 59.9991 5.6336 60.1719 5.68277C60.2605 5.70742 60.3006 5.76645 60.2953 5.86092V5.86145Z\" fill=\"white\"/>\n<path d=\"M8.71742 2.61258C8.58084 2.48773 8.40202 2.43856 8.24479 2.35075C8.01379 2.22436 7.77277 2.11718 7.5242 2.03029C7.46224 2.00804 7.4128 1.98139 7.38562 1.92063C7.44735 1.91753 7.50887 1.92995 7.56457 1.95674C7.68209 2.0155 7.79629 2.08333 7.93286 2.09412C7.96591 2.09665 8.00069 2.11664 8.02867 2.13689C8.17937 2.24682 8.35259 2.31011 8.51941 2.38833C8.66718 2.45801 8.7943 2.57154 8.93048 2.66588L8.90383 2.69066C8.81882 2.71824 8.76232 2.6792 8.71742 2.61258Z\" fill=\"#F16246\"/>\n<path d=\"M10.3153 3.73065H10.2087C10.0681 3.64324 9.97833 3.49653 9.83562 3.41085C9.8183 3.39273 9.80057 3.37488 9.78232 3.35755C9.63908 3.25269 9.49424 3.14996 9.35593 3.03776C9.33861 3.01946 9.32084 3.0017 9.30263 2.98446C9.27452 2.95195 9.22522 2.96168 9.19603 2.93117C9.17871 2.91304 9.16099 2.89519 9.14274 2.87787C9.11462 2.84536 9.06545 2.85508 9.03614 2.82457C9.01895 2.80645 9.0011 2.78859 8.98284 2.77127C8.95353 2.74156 8.89636 2.72583 8.92954 2.66467C8.94686 2.6672 8.96712 2.66467 8.98124 2.67307C9.26228 2.83572 9.52965 3.02092 9.78072 3.22684C9.92916 3.34929 10.0973 3.45083 10.218 3.60566C10.2504 3.64777 10.2829 3.68947 10.3153 3.73065Z\" fill=\"#F16246\"/>\n<path d=\"M9.3566 3.03845C9.52689 3.10747 9.67332 3.20794 9.78299 3.35824C9.60444 3.29975 9.4572 3.20035 9.3566 3.03845Z\" fill=\"#F15B40\"/>\n<path d=\"M9.83603 3.41113C9.87893 3.4138 9.92117 3.42113 9.95262 3.45271C10.0414 3.54211 10.1457 3.61753 10.2089 3.73053C10.1659 3.72799 10.1237 3.7208 10.0923 3.68908C10.0034 3.59968 9.89972 3.52426 9.83603 3.41113Z\" fill=\"#F15B40\"/>\n<path d=\"M8.93036 2.66597C8.94821 2.70141 8.96593 2.73699 8.98366 2.77257C8.86747 2.7651 8.74741 2.76391 8.71716 2.61267C8.78379 2.64851 8.85294 2.67423 8.93036 2.66597Z\" fill=\"#F15B40\"/>\n<path d=\"M9.19684 2.93201C9.24068 2.93307 9.28038 2.9424 9.30344 2.98531C9.26013 2.98424 9.22016 2.97491 9.19684 2.93201Z\" fill=\"#F15B40\"/>\n<path d=\"M9.03696 2.82556C9.08079 2.82663 9.1205 2.83595 9.14355 2.87886C9.10025 2.87779 9.06027 2.86847 9.03696 2.82556Z\" fill=\"#F15B40\"/>\n<path d=\"M9.78275 3.35803L9.83604 3.41133L9.78275 3.35803Z\" fill=\"#F15B40\"/>\n<path d=\"M9.30331 2.98535L9.35661 3.03865L9.30331 2.98535Z\" fill=\"#F15B40\"/>\n<path d=\"M9.14355 2.87878L9.19685 2.93208L9.14355 2.87878Z\" fill=\"#F15B40\"/>\n<path d=\"M8.98364 2.77234L9.03694 2.82564L8.98364 2.77234Z\" fill=\"#F15B40\"/>\n<path d=\"M6.53338 0.802593C6.50833 0.764218 6.47089 0.750227 6.42679 0.749294C6.38268 0.748361 6.34537 0.734504 6.32019 0.695995C6.45962 0.690425 6.59905 0.707066 6.73325 0.745297C7.07583 0.845898 7.42201 0.933974 7.75259 1.07228C7.80209 1.09043 7.84242 1.12741 7.86478 1.17515C7.70409 1.14397 7.55099 1.07788 7.3851 1.06855C7.17537 0.987405 6.95724 0.931708 6.74551 0.855358H6.63892C6.61133 0.821913 6.56137 0.832839 6.53232 0.80206L6.53338 0.802593Z\" fill=\"#F69072\"/>\n<path d=\"M13.5647 4.63575C13.4811 4.59645 13.4405 4.51903 13.3864 4.45014C13.3228 4.36953 13.2991 4.25467 13.1916 4.2103C13.1347 4.18501 13.087 4.14281 13.0549 4.08944C12.9054 3.85093 12.7299 3.63387 12.5451 3.42108C12.2919 3.12994 12.0454 2.83386 11.7797 2.55338C11.6884 2.45704 11.5519 2.41613 11.4872 2.29355C11.4882 2.22692 11.4514 2.18002 11.4082 2.13365C11.3609 2.08302 11.3187 2.02705 11.2742 1.97375H11.3808C11.3912 1.97589 11.4014 1.97815 11.4119 1.98002C11.431 1.98974 11.4489 2.00158 11.4652 2.01533C11.4736 2.02239 11.4815 2.02985 11.49 2.03691C11.5074 2.05144 11.5235 2.06703 11.5396 2.08315C11.5481 2.09128 11.5563 2.09941 11.5648 2.10767C11.8635 2.41334 12.2053 2.67783 12.4455 3.03853C12.4627 3.05665 12.4806 3.0745 12.4988 3.09183C12.5372 3.14313 12.5655 3.20162 12.6054 3.25172C12.7098 3.40509 12.8498 3.52768 12.9633 3.67518C13.1799 3.9566 13.3338 4.27719 13.5474 4.55914C13.5621 4.57793 13.5593 4.60977 13.5647 4.63575Z\" fill=\"#FBC9B6\"/>\n<path d=\"M13.5114 7.51048C13.4487 7.47224 13.4599 7.40935 13.4581 7.35059C13.5207 7.38909 13.5095 7.45199 13.5114 7.51048Z\" fill=\"#F5896B\"/>\n<path d=\"M10.315 17.732H10.2084C10.1766 17.7616 10.1368 17.7568 10.0983 17.7575C10.011 17.77 9.91837 17.7296 9.83562 17.7841L9.72902 17.7849C9.70907 17.8015 9.6838 17.8103 9.65787 17.8097C9.55767 17.8241 9.45227 17.7804 9.35593 17.8372L9.14274 17.838C9.00696 17.9076 8.8516 17.818 8.71635 17.8902L8.29076 17.8913C7.65213 17.9332 7.01144 17.9332 6.37281 17.8913L5.94642 17.8903C5.81104 17.8181 5.65568 17.9078 5.52003 17.8381L5.25421 17.837C5.15574 17.7691 5.03288 17.8503 4.93441 17.7847L4.77452 17.7839C4.71349 17.725 4.62262 17.7879 4.56132 17.7316L4.40143 17.7308C4.32148 17.6659 4.21488 17.7407 4.13494 17.6775H4.08164C4.02088 17.6181 3.92974 17.6817 3.86844 17.6242H3.81514C3.81061 17.6085 3.80622 17.5928 3.80182 17.5771C3.81061 17.5637 3.81941 17.5496 3.82847 17.5358C3.96278 17.453 4.10456 17.4958 4.24033 17.5214C5.61371 17.7833 7.00293 17.8012 8.3911 17.7515C9.10343 17.7264 9.81937 17.6647 10.5204 17.5102C11.084 17.4597 11.613 17.2864 12.1165 17.037C12.279 16.9571 12.4748 16.8682 12.467 16.6431C12.4586 16.4013 12.2734 16.267 12.0806 16.1746C11.8177 16.0485 11.5468 15.9381 11.2596 15.8682C10.7508 15.745 10.2386 15.6443 9.7169 15.5934C9.55994 15.5434 9.39311 15.5858 9.23548 15.5422C9.00603 15.4796 8.76672 15.547 8.53674 15.489C7.99136 15.429 7.44411 15.4776 6.8978 15.4623C6.7479 15.4583 6.59786 15.4631 6.44783 15.461C6.36202 15.4571 6.27461 15.4587 6.20559 15.3943C6.19093 15.3564 6.20212 15.329 6.23917 15.312C6.95123 15.3024 7.66344 15.3104 8.37551 15.3079C8.41961 15.3079 8.46358 15.3068 8.50209 15.3336H8.60869C8.83521 15.4107 9.07505 15.3119 9.30157 15.3869H9.35487C9.49025 15.4598 9.64575 15.3694 9.78126 15.4402C9.79885 15.4402 9.81657 15.4402 9.83456 15.4402C9.95115 15.512 10.0905 15.4243 10.2076 15.4935H10.2609C10.9672 15.6179 11.6792 15.7264 12.3347 16.0437C12.4692 16.1088 12.6052 16.1712 12.7136 16.2823C12.9336 16.5075 12.9401 16.6991 12.7287 16.9271C12.6335 17.0318 12.5193 17.1174 12.3921 17.1794L12.3267 17.213C12.2975 17.2313 12.2655 17.2446 12.2319 17.2522C12.2121 17.2601 12.192 17.2687 12.173 17.2789C12.1446 17.2933 12.1152 17.306 12.0852 17.3168C12.0652 17.3245 12.0443 17.3296 12.023 17.3319C11.983 17.3469 11.9418 17.3609 11.9012 17.3752C11.8479 17.3868 11.7993 17.4097 11.7478 17.4257C11.6953 17.4373 11.647 17.4601 11.5974 17.4801C11.5769 17.4859 11.5556 17.4889 11.5342 17.489C11.4783 17.4862 11.4322 17.5168 11.3821 17.5339C11.3613 17.5394 11.34 17.5421 11.3185 17.5421C11.2672 17.5484 11.2107 17.5252 11.1664 17.5688H11.1131C11.0518 17.6257 10.9605 17.562 10.8999 17.6221H10.8466C10.7853 17.679 10.6941 17.6154 10.6334 17.6754H10.5268C10.4668 17.7359 10.3758 17.6726 10.315 17.732Z\" fill=\"#C6C6D3\"/>\n<path d=\"M3.8169 17.5728C3.8169 17.5903 3.8169 17.6079 3.8169 17.626C3.74042 17.626 3.66393 17.6296 3.59171 17.5955C3.52776 17.5653 3.45847 17.5749 3.39064 17.573C3.33015 17.5135 3.23901 17.5765 3.17745 17.5197C3.13508 17.4691 3.06099 17.5143 3.01755 17.4664H2.96426C2.92175 17.4163 2.84793 17.4606 2.80436 17.4131C2.76185 17.3633 2.6883 17.4069 2.64446 17.3598C2.60196 17.31 2.52827 17.3537 2.48457 17.3065C2.45632 17.2743 2.40729 17.2839 2.37797 17.2532C2.2242 17.1881 2.07257 17.12 1.94625 17.0063C1.63099 16.7233 1.6611 16.3861 2.02753 16.1669C2.15532 16.0906 2.29336 16.032 2.43114 15.9747C2.46032 15.9445 2.50949 15.9539 2.53773 15.9214C2.58131 15.8747 2.65499 15.9182 2.69763 15.8681C2.74107 15.821 2.81515 15.8655 2.85753 15.8148C3.25726 15.6865 3.6638 15.5902 4.08233 15.5483C4.13256 15.5101 4.18666 15.5208 4.24102 15.535C4.23236 15.7294 4.05994 15.6745 3.96294 15.6949C3.46993 15.8004 2.97905 15.9054 2.52308 16.13C2.30642 16.2366 2.06151 16.3482 2.06311 16.623C2.06471 16.8819 2.30002 16.9978 2.50482 17.1037C2.82874 17.2713 3.18371 17.3498 3.53269 17.4447C3.63435 17.4741 3.74375 17.4817 3.8169 17.5728Z\" fill=\"#CECFDA\"/>\n<path d=\"M12.2863 17.1998C12.447 17.0932 12.6042 16.9825 12.732 16.8346C12.8558 16.6914 12.8553 16.5306 12.725 16.3876C12.623 16.278 12.5023 16.1875 12.3685 16.1202C11.9193 15.8849 11.4415 15.7429 10.9454 15.6539C10.7386 15.6167 10.5314 15.5808 10.325 15.5413C10.302 15.5369 10.2829 15.5121 10.262 15.4968C10.4504 15.4692 10.6324 15.5269 10.8119 15.5591C11.2017 15.6292 11.5894 15.7169 11.9662 15.8431C12.0915 15.8849 12.215 15.9315 12.3393 15.9763C12.3551 15.996 12.3762 16.0102 12.3926 16.0296H12.4459C12.4615 16.0496 12.483 16.0636 12.4992 16.0829H12.5525C12.5687 16.1024 12.5881 16.1182 12.6058 16.1362C12.6339 16.1686 12.6832 16.1589 12.7124 16.1895C12.7302 16.2073 12.748 16.225 12.7657 16.2428C12.783 16.2609 12.8008 16.2788 12.819 16.2961C12.8373 16.3134 12.8541 16.3321 12.8723 16.3494C13.061 16.6572 13.0322 16.7849 12.7124 17.0415C12.6611 17.08 12.6025 17.1073 12.5525 17.1481C12.5235 17.1786 12.4742 17.1689 12.4459 17.2014C12.3928 17.2338 12.3395 17.2419 12.2863 17.1998Z\" fill=\"#D4D1DB\"/>\n<path d=\"M2.43179 15.9752C2.34451 16.0685 2.22179 16.1025 2.11333 16.1591C2.02626 16.2029 1.94915 16.2642 1.88681 16.3391C1.78235 16.4666 1.77875 16.6163 1.8022 16.7675C1.80833 16.8075 1.84417 16.8437 1.87162 16.8774C1.96849 16.9962 2.1012 17.069 2.22752 17.1498C2.27896 17.1827 2.34398 17.1956 2.37862 17.2531C2.20833 17.2545 2.07589 17.1662 1.95317 17.0644C1.87189 16.997 1.7998 16.9178 1.72745 16.8405C1.59513 16.6986 1.59727 16.5381 1.71985 16.3933C1.87202 16.2137 2.0603 16.0869 2.27722 16.0024C2.32493 15.9837 2.38009 15.9837 2.43179 15.9752Z\" fill=\"#D6D6DF\"/>\n<path d=\"M8.50435 15.3365H6.21451C6.19586 15.3548 6.17774 15.3544 6.15988 15.3353C6.22957 15.2561 6.32351 15.2846 6.40799 15.2842C6.93618 15.2818 7.46436 15.2829 7.99255 15.2829C8.11567 15.2829 8.23893 15.2829 8.36218 15.2829C8.41614 15.284 8.46798 15.2892 8.50435 15.3365Z\" fill=\"#D4D1DB\"/>\n<path d=\"M12.7124 17.0401C12.7379 17.0059 12.7572 16.9638 12.7897 16.9387C12.9427 16.8208 12.9437 16.6629 12.9128 16.4962C12.9036 16.446 12.8862 16.3973 12.8722 16.348C12.9719 16.4013 13.0302 16.475 13.0342 16.5964C13.0386 16.7267 13.0182 16.8378 12.91 16.9243C12.849 16.9731 12.8022 17.0417 12.7124 17.0401Z\" fill=\"#D6D6DF\"/>\n<path d=\"M9.3033 15.3897H8.77818C8.71688 15.3897 8.65426 15.3936 8.61069 15.3364C8.78577 15.3364 8.96086 15.3364 9.13594 15.3364C9.1971 15.3371 9.26013 15.3335 9.3033 15.3897Z\" fill=\"#D4D1DB\"/>\n<path d=\"M5.41412 15.3891C5.44983 15.3424 5.501 15.337 5.5543 15.3372C5.64997 15.3372 5.74564 15.3372 5.84118 15.3372C5.84553 15.3429 5.84866 15.3495 5.85039 15.3565C5.85211 15.3636 5.85239 15.3709 5.8512 15.378C5.85002 15.3851 5.8474 15.3919 5.8435 15.398C5.8396 15.4041 5.8345 15.4093 5.82852 15.4134C5.74857 15.4636 5.66036 15.4585 5.57202 15.4568C5.51193 15.4516 5.45476 15.4402 5.41412 15.3891Z\" fill=\"#D4D1DB\"/>\n<path d=\"M9.78288 15.4426C9.68721 15.4426 9.59167 15.4426 9.49613 15.4426C9.44283 15.4426 9.3918 15.4376 9.35635 15.3901C9.45202 15.3901 9.54761 15.3901 9.6431 15.3901C9.6964 15.3901 9.74757 15.3952 9.78288 15.4426Z\" fill=\"#D4D1DB\"/>\n<path d=\"M5.84091 15.3894C5.84091 15.3719 5.84091 15.3543 5.84091 15.3369L6.15964 15.3359L6.21427 15.3371C6.21374 15.3545 6.21334 15.3718 6.21307 15.3891C6.08924 15.4853 5.96519 15.4854 5.84091 15.3894Z\" fill=\"#CECFDA\"/>\n<path d=\"M5.41411 15.389L5.57521 15.3902C5.49526 15.5846 5.35309 15.5046 5.22131 15.471C5.21459 15.4671 5.20873 15.4618 5.20409 15.4556C5.19945 15.4494 5.19613 15.4422 5.19432 15.4347C5.19251 15.4271 5.19226 15.4193 5.19358 15.4116C5.1949 15.4039 5.19776 15.3966 5.20199 15.3901L5.41411 15.389Z\" fill=\"#CECFDA\"/>\n<path d=\"M10.2089 15.4961C10.1223 15.4961 10.0356 15.4961 9.9489 15.4952C9.92727 15.4962 9.90572 15.492 9.88606 15.4829C9.8664 15.4738 9.8492 15.4602 9.83591 15.4431C9.92252 15.4431 10.0091 15.4431 10.0959 15.444C10.1175 15.4431 10.139 15.4473 10.1587 15.4563C10.1784 15.4654 10.1956 15.4791 10.2089 15.4961Z\" fill=\"#D4D1DB\"/>\n<path d=\"M4.72255 15.4432H4.88178C4.93921 15.4076 4.99611 15.4068 5.0522 15.4465C4.98198 15.6074 4.8618 15.5665 4.74094 15.5242C4.73422 15.5203 4.72837 15.515 4.72377 15.5087C4.71917 15.5024 4.7159 15.4953 4.71418 15.4877C4.71246 15.4801 4.71231 15.4722 4.71375 15.4646C4.71519 15.4569 4.71819 15.4496 4.72255 15.4432Z\" fill=\"#CECFDA\"/>\n<path d=\"M12.2863 17.1998H12.4462C12.3777 17.2855 12.2841 17.309 12.1797 17.3064L12.1593 17.2798L12.1795 17.2531C12.2084 17.2221 12.2583 17.2334 12.286 17.1998H12.2863Z\" fill=\"#D6D6DF\"/>\n<path d=\"M5.0425 15.4434L4.88181 15.4425C4.89512 15.4255 4.91232 15.4119 4.93195 15.4029C4.95159 15.3939 4.97309 15.3898 4.99467 15.3908C5.06369 15.3908 5.1328 15.3908 5.202 15.3908C5.202 15.4082 5.202 15.4257 5.202 15.4433C5.14897 15.4891 5.0958 15.4875 5.0425 15.4434Z\" fill=\"#D4D1DB\"/>\n<path d=\"M4.72255 15.4432C4.72255 15.4607 4.72255 15.4783 4.72255 15.4965C4.6935 15.5315 4.65446 15.5463 4.61062 15.552C4.55146 15.5547 4.4963 15.5454 4.45566 15.4963C4.53094 15.4096 4.63234 15.4549 4.72255 15.4432Z\" fill=\"#D4D1DB\"/>\n<path d=\"M4.24355 15.5499H4.08286C4.15814 15.4634 4.25954 15.509 4.34935 15.4966C4.35752 15.5058 4.3619 15.5178 4.36161 15.5302C4.36131 15.5426 4.35636 15.5543 4.34775 15.5632C4.31017 15.5817 4.27473 15.5824 4.24355 15.5499Z\" fill=\"#D4D1DB\"/>\n<path d=\"M4.34949 15.5491C4.34949 15.5316 4.34949 15.514 4.34949 15.4958H4.45542L4.61625 15.4966C4.55748 15.6667 4.45542 15.6179 4.34949 15.5491Z\" fill=\"#CECFDA\"/>\n<path d=\"M12.5525 17.1465C12.5824 17.0759 12.6357 17.0404 12.7124 17.0399C12.6826 17.1108 12.6294 17.1465 12.5525 17.1465Z\" fill=\"#D6D6DF\"/>\n<path d=\"M3.1777 17.5188C3.25126 17.5261 3.33467 17.4943 3.3909 17.5721C3.31735 17.5652 3.2338 17.597 3.1777 17.5188Z\" fill=\"#D6D6DF\"/>\n<path d=\"M2.69829 15.8689C2.65991 15.9314 2.59715 15.9203 2.53839 15.9222C2.57677 15.8596 2.63966 15.8706 2.69829 15.8689Z\" fill=\"#D6D6DF\"/>\n<path d=\"M11.3275 17.5195C11.3452 17.5195 11.3628 17.5195 11.3808 17.5195C11.4166 17.489 11.4523 17.4898 11.4874 17.5195C11.4486 17.5815 11.3857 17.5707 11.3275 17.5728C11.3101 17.5611 11.3044 17.5492 11.3103 17.5375C11.3161 17.5258 11.3216 17.5195 11.3275 17.5195Z\" fill=\"#D6D6DF\"/>\n<path d=\"M11.3275 17.5195C11.3275 17.5371 11.3275 17.5547 11.3275 17.5728H11.2742H11.1676C11.2055 17.5102 11.2688 17.5209 11.3275 17.5195Z\" fill=\"#D4D1DB\"/>\n<path d=\"M2.85805 15.8157C2.81967 15.8782 2.75691 15.8672 2.69815 15.869C2.73666 15.8065 2.79942 15.8174 2.85805 15.8157Z\" fill=\"#D6D6DF\"/>\n<path d=\"M2.48535 17.3063C2.54385 17.308 2.60674 17.2971 2.64525 17.3596C2.58635 17.3578 2.52359 17.369 2.48535 17.3063Z\" fill=\"#D6D6DF\"/>\n<path d=\"M11.9131 17.3588C11.9516 17.2967 12.0144 17.3074 12.073 17.3055C12.0863 17.3173 12.0912 17.3291 12.0863 17.341C12.0814 17.3528 12.0772 17.3588 12.073 17.3588H12.0197C11.9956 17.3835 11.9656 17.3847 11.9341 17.3804L11.9131 17.3588Z\" fill=\"#D4D1DB\"/>\n<path d=\"M2.64511 17.3595C2.70361 17.3612 2.7665 17.3502 2.80501 17.4128C2.74625 17.4111 2.68335 17.422 2.64511 17.3595Z\" fill=\"#D6D6DF\"/>\n<path d=\"M11.5405 17.4662H11.5938C11.6297 17.4359 11.6654 17.4366 11.7004 17.4662C11.6618 17.5284 11.5989 17.5175 11.5405 17.5195C11.5232 17.5077 11.5175 17.4959 11.5233 17.4841C11.5292 17.4724 11.5347 17.4662 11.5405 17.4662Z\" fill=\"#D6D6DF\"/>\n<path d=\"M11.5405 17.4662C11.5405 17.4839 11.5405 17.5015 11.5405 17.5195H11.4879H11.3813C11.4187 17.457 11.4819 17.4678 11.5405 17.4662Z\" fill=\"#D4D1DB\"/>\n<path d=\"M3.01767 17.4663C3.07643 17.4679 3.13919 17.4567 3.17757 17.5196C3.11894 17.5176 3.05631 17.5285 3.01767 17.4663Z\" fill=\"#D6D6DF\"/>\n<path d=\"M11.7532 17.4122C11.7918 17.3502 11.8546 17.3609 11.9131 17.3589C11.9304 17.3707 11.9361 17.3825 11.9303 17.3942C11.9244 17.4059 11.9185 17.4118 11.9127 17.4118H11.8594C11.8354 17.4364 11.8054 17.4376 11.774 17.4334C11.7677 17.4274 11.7605 17.4199 11.7532 17.4122Z\" fill=\"#D4D1DB\"/>\n<path d=\"M2.80487 17.4128C2.8635 17.4144 2.92626 17.4036 2.96477 17.4661C2.90614 17.4643 2.84325 17.4753 2.80487 17.4128Z\" fill=\"#D6D6DF\"/>\n<path d=\"M11.7006 17.4661H11.594C11.6326 17.4043 11.6952 17.415 11.7539 17.4128C11.7713 17.4247 11.777 17.4364 11.771 17.4482C11.7651 17.4599 11.7593 17.4655 11.7535 17.4655L11.7006 17.4661Z\" fill=\"#D4D1DB\"/>\n<path d=\"M11.7533 17.4655V17.4122H11.8599C11.837 17.4557 11.7973 17.4655 11.7533 17.4655Z\" fill=\"#D6D6DF\"/>\n<path d=\"M11.9132 17.4122V17.3589H12.0198C11.9969 17.4025 11.9572 17.4122 11.9132 17.4122Z\" fill=\"#D6D6DF\"/>\n<path d=\"M12.7123 16.1884C12.6684 16.1872 12.6287 16.1779 12.6057 16.1351C12.6497 16.1361 12.6894 16.1454 12.7123 16.1884Z\" fill=\"#D6D6DF\"/>\n<path d=\"M12.073 17.3589V17.3056C12.1084 17.277 12.144 17.2729 12.1796 17.3056C12.1566 17.3493 12.1169 17.3589 12.073 17.3589Z\" fill=\"#D6D6DF\"/>\n<path d=\"M2.53851 15.9221C2.51546 15.965 2.47575 15.9744 2.43192 15.9754C2.45483 15.9324 2.49467 15.9232 2.53851 15.9221Z\" fill=\"#D6D6DF\"/>\n<path d=\"M2.37875 17.2532C2.42259 17.254 2.4623 17.2633 2.48535 17.3065C2.44138 17.3055 2.40167 17.2959 2.37875 17.2532Z\" fill=\"#D6D6DF\"/>\n<path d=\"M12.4461 17.1998C12.469 17.1569 12.5087 17.1476 12.5527 17.1465C12.5296 17.1895 12.4899 17.199 12.4461 17.1998Z\" fill=\"#D6D6DF\"/>\n<path d=\"M12.8722 16.3481L12.8189 16.2948C12.8366 16.3125 12.8545 16.3302 12.8722 16.3481Z\" fill=\"#D6D6DF\"/>\n<path d=\"M12.8189 16.2948L12.7656 16.2415L12.8189 16.2948Z\" fill=\"#D6D6DF\"/>\n<path d=\"M12.7656 16.2417L12.7123 16.1884L12.7656 16.2417Z\" fill=\"#D6D6DF\"/>\n<path d=\"M12.6058 16.1351L12.5525 16.0818L12.6058 16.1351Z\" fill=\"#D6D6DF\"/>\n<path d=\"M12.4995 16.0817L12.4462 16.0284L12.4995 16.0817Z\" fill=\"#D6D6DF\"/>\n<path d=\"M12.3929 16.0285L12.3396 15.9752L12.3929 16.0285Z\" fill=\"#D6D6DF\"/>\n<path d=\"M4.34933 0.749332C4.34974 0.733973 4.35239 0.718755 4.3572 0.704161C4.39024 0.70163 4.42382 0.698832 4.4562 0.696167C4.57958 0.698166 4.70364 0.685907 4.82316 0.736141C4.86167 0.75253 4.91044 0.748 4.95441 0.748133C5.55841 0.751331 6.14217 0.88591 6.72659 1.01902C6.79614 1.03488 6.8625 1.05993 6.907 1.12136C6.83598 1.16559 6.76483 1.15733 6.69381 1.12136C6.63318 1.06193 6.54204 1.12455 6.48061 1.06806C6.41865 0.995039 6.32618 0.980648 6.24383 0.969189C5.98494 0.932946 5.7283 0.882312 5.46967 0.84487C5.25981 0.81449 5.05288 0.805562 4.84341 0.800899C4.79145 0.799699 4.73588 0.797967 4.68845 0.779579C4.57665 0.737207 4.46326 0.754262 4.34933 0.749332Z\" fill=\"#F58264\"/>\n<path d=\"M8.02495 1.49463C8.20989 1.53953 8.3995 1.57018 8.5522 1.70156C8.58951 1.73381 8.64548 1.7462 8.69571 1.76126C8.84428 1.80603 8.95901 1.89237 9.03709 2.02695L9.01564 2.0488C8.98419 2.05333 8.95474 2.04987 8.93036 2.02682C8.65214 1.87292 8.37379 1.71955 8.07758 1.60043C8.05533 1.57977 8.02428 1.57018 8.00549 1.54526C8.00268 1.53586 8.00306 1.52579 8.00658 1.51663C8.0101 1.50746 8.01656 1.49973 8.02495 1.49463Z\" fill=\"#F58264\"/>\n<path d=\"M7.5987 1.3882H7.54541C7.39284 1.31331 7.22761 1.27627 7.06572 1.2283C7.04187 1.18127 6.92688 1.2251 6.95912 1.1217C7.21016 1.12863 7.43308 1.23336 7.65946 1.32517C7.67972 1.3333 7.68998 1.36634 7.7049 1.3878C7.66986 1.42257 7.63455 1.41778 7.5987 1.3882Z\" fill=\"#F58264\"/>\n<path d=\"M6.74646 0.855835C6.97924 0.86796 7.1951 0.930453 7.38604 1.06903C7.15313 1.05637 6.93714 0.993878 6.74646 0.855835Z\" fill=\"#F68F71\"/>\n<path d=\"M7.59869 1.38818H7.75859C7.82695 1.42896 7.91142 1.43775 7.97178 1.49478C7.99177 1.51018 8.00968 1.52809 8.02508 1.54808L8.07838 1.60138C7.8977 1.57673 7.72928 1.52489 7.59869 1.38818Z\" fill=\"#F48163\"/>\n<path d=\"M6.95964 1.12195L7.06624 1.22855C6.93099 1.23148 6.80174 1.21309 6.69315 1.12195H6.95964Z\" fill=\"#F48264\"/>\n<path d=\"M7.97177 1.4945C7.88716 1.4861 7.81187 1.45799 7.75858 1.3879C7.84985 1.38257 7.9314 1.39763 7.97177 1.4945Z\" fill=\"#F58264\"/>\n<path d=\"M6.53339 0.802612C6.57736 0.803545 6.61707 0.812872 6.63998 0.855911C6.59615 0.854845 6.55644 0.845518 6.53339 0.802612Z\" fill=\"#F68F71\"/>\n<path d=\"M8.02495 1.54781L7.97165 1.49451H8.02495V1.54781Z\" fill=\"#F48264\"/>\n<path d=\"M9.09026 2.02698V2.08028C9.07254 2.10066 9.05468 2.10173 9.03696 2.08028C9.0195 2.06842 9.01364 2.05656 9.0195 2.0447C9.02537 2.03284 9.0311 2.02698 9.03696 2.02698H9.09026Z\" fill=\"#F48264\"/>\n<path d=\"M13.2983 7.61693V7.83012C13.2661 7.80632 13.2399 7.77525 13.222 7.73943C13.204 7.70361 13.1948 7.66405 13.1951 7.62399C13.1951 7.51353 13.1551 7.41493 13.1175 7.31752C13.0153 7.05489 12.9176 6.7904 12.8156 6.5279C12.7323 6.31364 12.6218 6.11591 12.5234 5.91097C12.4511 5.7604 12.3828 5.6081 12.2657 5.48139C12.2078 5.41863 12.1785 5.32869 12.1401 5.24914C12.1126 5.19197 12.0818 5.14014 12.0202 5.11469C12.0113 5.10923 12.0025 5.10377 11.9936 5.09857C11.9664 5.06717 11.9446 5.03158 11.9288 4.99317C11.9144 4.96559 11.901 4.93774 11.8888 4.90883C11.8825 4.88892 11.8799 4.86799 11.8812 4.84713C11.8843 4.83714 11.8876 4.82715 11.891 4.81729C11.8983 4.80982 11.9058 4.80249 11.9134 4.79517C12.0007 4.8397 12.0723 4.90985 12.1187 4.99624C12.2928 5.32869 12.5076 5.63702 12.677 5.9736C12.7759 6.17 12.8802 6.36561 12.9556 6.57001C13.0827 6.91419 13.2637 7.24224 13.2983 7.61693Z\" fill=\"#F47C5E\"/>\n<path d=\"M11.3808 4.20987V4.10327C11.4155 4.12992 11.4562 4.15031 11.4842 4.18229C11.6049 4.32006 11.7251 4.45851 11.8385 4.60215C11.8841 4.65653 11.9104 4.72445 11.9135 4.79535L11.8831 4.81641L11.8486 4.80308C11.8362 4.78177 11.8223 4.76137 11.807 4.74206C11.7601 4.66624 11.6964 4.60308 11.6471 4.52886C11.6299 4.51065 11.6121 4.49288 11.5938 4.47556C11.5469 4.39975 11.4832 4.33659 11.4339 4.26237C11.4171 4.24399 11.3994 4.22646 11.3808 4.20987Z\" fill=\"#F47C5E\"/>\n<path d=\"M9.03696 2.08032H9.09026C9.11458 2.08949 9.13667 2.10374 9.15505 2.12212C9.17343 2.1405 9.18768 2.16259 9.19685 2.18692C9.12001 2.18656 9.06672 2.15103 9.03696 2.08032Z\" fill=\"#F48163\"/>\n<path d=\"M11.4339 4.26306C11.5195 4.30996 11.5897 4.36819 11.5938 4.47626C11.5083 4.42922 11.4381 4.37086 11.4339 4.26306Z\" fill=\"#F47B5D\"/>\n<path d=\"M11.647 4.52917C11.7325 4.57594 11.8027 4.63431 11.8069 4.74237C11.7213 4.6952 11.6511 4.63697 11.647 4.52917Z\" fill=\"#F47B5D\"/>\n<path d=\"M11.9134 4.84879V4.90209C11.921 4.91395 11.9284 4.92594 11.936 4.93793L11.9066 4.96844C11.8583 4.96844 11.8306 4.93846 11.8068 4.90182C11.8068 4.86638 11.8068 4.8308 11.8068 4.79522C11.81 4.79131 11.8141 4.78816 11.8187 4.786C11.8233 4.78384 11.8283 4.78271 11.8334 4.78271C11.8385 4.78271 11.8435 4.78384 11.8481 4.786C11.8527 4.78816 11.8568 4.79131 11.8601 4.79522C11.8793 4.81158 11.8971 4.82949 11.9134 4.84879Z\" fill=\"#F37758\"/>\n<path d=\"M11.8601 4.79549H11.8068V4.74219L11.8601 4.79549Z\" fill=\"#F47B5D\"/>\n<path d=\"M11.5938 4.47595L11.6471 4.52925L11.5938 4.47595Z\" fill=\"#F47B5D\"/>\n<path d=\"M11.3808 4.20984L11.4341 4.26314L11.3808 4.20984Z\" fill=\"#F47B5D\"/>\n<path d=\"M8.07812 1.6012C8.11304 1.60373 8.15288 1.59613 8.18206 1.61039C8.41808 1.72507 8.65264 1.84291 8.88573 1.96389C8.90612 1.97429 8.91585 2.0056 8.9305 2.02719C8.80305 2.0026 8.6819 1.95247 8.57434 1.87981C8.47413 1.81253 8.35821 1.76909 8.25028 1.71286C8.18965 1.68128 8.1193 1.66342 8.07812 1.6012Z\" fill=\"#F48163\"/>\n<path d=\"M7.0661 1.22849C7.24452 1.22609 7.40801 1.26846 7.54579 1.38839C7.37377 1.3708 7.21214 1.32296 7.0661 1.22849Z\" fill=\"#F48264\"/>\n<path d=\"M6.48022 1.06865C6.55378 1.07624 6.63732 1.044 6.69342 1.12195C6.61973 1.11448 6.53619 1.1466 6.48022 1.06865Z\" fill=\"#F48264\"/>\n<path d=\"M9.03696 2.02698V2.08028C8.99312 2.07921 8.95341 2.06988 8.93036 2.02698H9.03696Z\" fill=\"#F48163\"/>\n<path d=\"M11.8068 4.90198L11.9134 4.95528C11.9573 5.00298 11.976 5.06747 12.02 5.11517C12.02 5.15062 12.02 5.18619 12.02 5.22177C11.8922 5.15261 11.8283 5.04135 11.8068 4.90198Z\" fill=\"#F37658\"/>\n<path d=\"M11.221 1.76094C11.1087 1.76454 11.0556 1.66887 10.9805 1.6133C10.5933 1.32722 10.201 1.049 9.78541 0.805296C9.73837 0.777714 9.69827 0.746934 9.67615 0.696167C9.86802 0.722816 10.0077 0.856063 10.1605 0.952533C10.4715 1.14814 10.7658 1.37039 11.0646 1.58519C11.1281 1.63089 11.1869 1.68632 11.221 1.76094Z\" fill=\"#FCD1BF\"/>\n<path d=\"M11.5938 2.0802C11.6201 2.08071 11.646 2.0864 11.6701 2.09694C11.6942 2.10748 11.7159 2.12267 11.7341 2.14163C11.9507 2.35873 12.1675 2.57543 12.3846 2.79174C12.4036 2.80994 12.4188 2.8317 12.4293 2.85577C12.4399 2.87985 12.4455 2.90577 12.446 2.93205C12.3233 2.95376 12.2823 2.84357 12.2207 2.78054C12.0059 2.56015 11.7641 2.36535 11.5811 2.11431C11.585 2.10339 11.5894 2.09179 11.5938 2.0802Z\" fill=\"#FCD1BF\"/>\n<path d=\"M9.67615 0.696074C9.57475 0.705001 9.48867 0.664361 9.40899 0.609064C9.25895 0.505116 9.09476 0.423266 8.92144 0.366022C8.84042 0.339373 8.75501 0.307926 8.71744 0.216919C9.06454 0.321517 9.38647 0.476483 9.67615 0.696074Z\" fill=\"#FCD1BF\"/>\n<path d=\"M11.3806 1.97381L11.2207 1.76062C11.2636 1.76315 11.3059 1.77048 11.3373 1.80206C11.4262 1.89147 11.5304 1.96689 11.5937 2.07988C11.5582 2.11292 11.5227 2.10933 11.4871 2.07988C11.4693 2.06158 11.4516 2.04381 11.4338 2.02658C11.417 2.00789 11.3992 1.9901 11.3805 1.97328L11.3806 1.97381Z\" fill=\"#FCD1BF\"/>\n<path d=\"M6.37347 17.8918H8.29142C8.25492 17.9387 8.20335 17.9441 8.14952 17.9441H6.51525C6.46195 17.9451 6.40985 17.9393 6.37347 17.8918Z\" fill=\"#CECFDA\"/>\n<path d=\"M5.52124 17.8386C5.61678 17.8386 5.71232 17.8386 5.80785 17.8386C5.86115 17.8386 5.91232 17.8438 5.94776 17.8909H5.66102C5.60772 17.8919 5.55668 17.8865 5.52124 17.8386Z\" fill=\"#CECFDA\"/>\n<path d=\"M8.71704 17.8918C8.75262 17.8448 8.80365 17.8395 8.85695 17.8396C8.95262 17.8396 9.04816 17.8396 9.1437 17.8396C9.10825 17.8869 9.05722 17.8921 9.00392 17.892L8.71704 17.8918Z\" fill=\"#CECFDA\"/>\n<path d=\"M9.35635 17.8386C9.36959 17.8215 9.38675 17.8079 9.40637 17.7989C9.426 17.7899 9.44751 17.7857 9.46908 17.7868C9.53824 17.7868 9.60726 17.7868 9.67641 17.7868C9.68166 17.7907 9.68558 17.7962 9.68765 17.8024C9.68972 17.8087 9.68984 17.8154 9.688 17.8217C9.68387 17.8332 9.67988 17.8389 9.67588 17.8389L9.35635 17.8386Z\" fill=\"#CECFDA\"/>\n<path d=\"M4.93536 17.7853H5.1427C5.16425 17.7843 5.18574 17.7884 5.20536 17.7974C5.22498 17.8064 5.24215 17.82 5.25542 17.837H5.04796C5.02641 17.8382 5.0049 17.8341 4.98529 17.825C4.96567 17.816 4.94854 17.8024 4.93536 17.7853Z\" fill=\"#CECFDA\"/>\n<path d=\"M9.83591 17.7853C9.91106 17.6984 10.0125 17.7445 10.1024 17.732C10.1197 17.7437 10.1255 17.7555 10.1196 17.7671C10.1137 17.7787 10.1079 17.7842 10.1019 17.7842L9.83591 17.7853Z\" fill=\"#CECFDA\"/>\n<path d=\"M4.13641 17.6787C4.22649 17.6907 4.32789 17.645 4.40291 17.732C4.31297 17.7201 4.21156 17.7662 4.13641 17.6787Z\" fill=\"#CECFDA\"/>\n<path d=\"M4.56241 17.7326C4.63623 17.7394 4.71937 17.7081 4.7756 17.7848C4.70218 17.7783 4.61904 17.8096 4.56241 17.7326Z\" fill=\"#CECFDA\"/>\n<path d=\"M10.3151 17.732C10.3716 17.6552 10.4547 17.6864 10.5283 17.6795C10.4727 17.7567 10.3887 17.7249 10.3151 17.732Z\" fill=\"#D4D1DB\"/>\n<path d=\"M10.6347 17.6786C10.6911 17.6018 10.7742 17.6329 10.8479 17.6253C10.7925 17.7036 10.7084 17.6716 10.6347 17.6786Z\" fill=\"#D4D1DB\"/>\n<path d=\"M3.87006 17.6253C3.94374 17.6324 4.02702 17.6009 4.08325 17.6786C4.01023 17.6717 3.92642 17.7033 3.87006 17.6253Z\" fill=\"#CECFDA\"/>\n<path d=\"M10.9011 17.6253C10.9574 17.5483 11.0406 17.5796 11.1143 17.572C11.0582 17.6503 10.9747 17.6183 10.9011 17.6253Z\" fill=\"#D4D1DB\"/>\n<path d=\"M10.102 17.7853C10.102 17.7679 10.102 17.7505 10.102 17.733H10.2086C10.1855 17.7751 10.146 17.7843 10.102 17.7853Z\" fill=\"#D4D1DB\"/>\n<path d=\"M9.67587 17.8386C9.67587 17.8213 9.67587 17.804 9.67587 17.7865C9.69359 17.7865 9.71118 17.7865 9.72917 17.7865L9.67587 17.8386Z\" fill=\"#D4D1DB\"/>\n<path d=\"M14.2569 6.01954C14.2068 5.99636 14.1687 5.96118 14.1548 5.90655C14.1117 5.73519 14.0482 5.57343 13.9382 5.43259C13.922 5.41161 13.9104 5.38752 13.9041 5.36184C13.8566 5.17049 13.7486 5.00993 13.6386 4.8523C13.5909 4.78381 13.5567 4.71905 13.5644 4.63538C13.7243 4.83178 13.8709 5.03512 13.9482 5.28109C13.9711 5.35384 14.0237 5.41727 14.063 5.48482C14.16 5.65165 14.2452 5.82247 14.2569 6.01954Z\" fill=\"#FBC9B6\"/>\n<path d=\"M11.4872 2.08032H11.5938C11.7261 2.26793 11.904 2.41264 12.0639 2.57333C12.1866 2.69725 12.2959 2.83663 12.4461 2.93163C12.4461 2.96708 12.4461 3.00252 12.4461 3.03823C12.399 2.99999 12.3484 2.96548 12.3055 2.92311C12.0699 2.69001 11.8355 2.45577 11.6023 2.22036C11.56 2.17786 11.5253 2.12736 11.4872 2.08032Z\" fill=\"#FCCFBD\"/>\n<path d=\"M12.6058 3.25145C12.5348 3.22169 12.4992 3.16839 12.4992 3.09155C12.57 3.12153 12.6057 3.1747 12.6058 3.25145Z\" fill=\"#FCCFBD\"/>\n<path d=\"M12.4994 3.09175L12.4461 3.03845L12.4994 3.09175Z\" fill=\"#FCCFBD\"/>\n<path d=\"M60.3122 6.59431C60.3542 6.56686 60.3812 6.54527 60.4116 6.52995C60.7314 6.36792 60.8175 6.07918 60.8271 5.75339C60.832 5.58537 60.7421 5.46691 60.5946 5.39576C60.5314 5.36329 60.4629 5.34231 60.3924 5.3338C60.0648 5.30555 59.7362 5.31328 59.4081 5.32633C59.2593 5.33233 59.1639 5.42174 59.1167 5.56045C59.0981 5.61961 59.0826 5.6797 59.0702 5.74046C58.9745 6.16392 58.8791 6.58747 58.7841 7.0111C58.752 7.15541 58.7018 7.29665 58.6947 7.45455C58.8352 7.49026 58.9682 7.4708 59.0995 7.47187C59.1578 7.47187 59.1968 7.44349 59.2103 7.3802C59.2437 7.2243 59.2818 7.06947 59.3169 6.91383C59.3903 6.59311 59.3515 6.64827 59.6854 6.64361C59.7594 6.64268 59.7938 6.68545 59.8209 6.74768C59.9026 6.93422 59.9915 7.11797 60.0713 7.30531C60.1231 7.42737 60.2068 7.47853 60.3395 7.4756C60.7895 7.46787 60.7618 7.52384 60.5676 7.12343C60.4836 6.94928 60.4002 6.77459 60.3122 6.59431ZM60.2953 5.86145C60.2929 5.92309 60.2831 5.98421 60.266 6.04347C60.2231 6.18084 60.131 6.26999 59.9844 6.28824C59.8187 6.30903 59.6529 6.29997 59.4761 6.2957C59.4817 6.08038 59.544 5.8981 59.5932 5.71355C59.5985 5.69316 59.6279 5.66518 59.6465 5.66465C59.822 5.65945 59.9991 5.6336 60.1719 5.68277C60.2605 5.70742 60.3006 5.76645 60.2953 5.86092V5.86145Z\" fill=\"#211C50\"/>\n<path d=\"M11.4339 2.02698L11.4872 2.08028L11.4339 2.02698Z\" fill=\"#FCCFBD\"/>\n<path d=\"M11.3806 1.97388L11.4339 2.02718L11.3806 1.97388Z\" fill=\"#FCCFBD\"/>\n<path d=\"M4.34948 15.5491C4.43968 15.5378 4.54082 15.5827 4.61597 15.4966H4.72257C4.79159 15.4966 4.86074 15.4966 4.92976 15.4958C4.95133 15.4968 4.97283 15.4926 4.99246 15.4836C5.01209 15.4747 5.02929 15.4611 5.04262 15.4441L5.20252 15.4433L5.46235 15.4425C5.48399 15.4435 5.50555 15.4393 5.52528 15.4303C5.54501 15.4213 5.56234 15.4079 5.57588 15.3909L5.84157 15.39H6.21466L6.42865 15.3912C6.43285 15.3976 6.43571 15.4048 6.43704 15.4124C6.43838 15.42 6.43817 15.4277 6.43642 15.4352C6.43468 15.4426 6.43144 15.4497 6.4269 15.4559C6.42236 15.4621 6.41661 15.4673 6.41 15.4712C6.18348 15.5572 5.94057 15.5331 5.70712 15.557C5.31351 15.5969 4.92004 15.6369 4.52789 15.6878C4.5015 15.6977 4.47418 15.705 4.44634 15.7094C4.36733 15.7227 4.28645 15.7211 4.20863 15.7482C4.18331 15.7565 4.15744 15.763 4.13122 15.7676C3.73241 15.8117 3.35679 15.9433 2.98077 16.0726C2.77037 16.1259 2.58849 16.2341 2.42726 16.3746C2.24565 16.5329 2.24191 16.675 2.415 16.8467C2.7236 17.1531 3.13173 17.2483 3.52921 17.3693C3.64114 17.4034 3.81476 17.3735 3.81849 17.5715V17.5742C3.64953 17.5658 3.49137 17.5068 3.33067 17.4641C3.02421 17.383 2.72187 17.292 2.43472 17.1522C2.28629 17.0798 2.17063 16.9758 2.0659 16.8565C1.93052 16.7024 1.93265 16.5425 2.0619 16.3782C2.15513 16.2595 2.27476 16.1643 2.41127 16.1001C2.86764 15.8869 3.34786 15.7468 3.84301 15.6538C3.97812 15.6285 4.12282 15.6325 4.24341 15.5499L4.34948 15.5491Z\" fill=\"#C0BFCD\"/>\n<path d=\"M3.81716 17.5701C3.78758 17.5108 3.74107 17.4798 3.67458 17.4663C3.3897 17.409 3.11708 17.3144 2.84659 17.2076C2.64186 17.1263 2.45829 16.9995 2.30974 16.8369C2.17916 16.697 2.17369 16.5235 2.3112 16.3931C2.49642 16.2177 2.69335 16.0542 2.96411 16.0283C2.97052 16.0347 2.97525 16.0426 2.97785 16.0513C2.98046 16.06 2.98086 16.0691 2.97903 16.078C2.96962 16.0937 2.95666 16.1068 2.94119 16.1165C2.91854 16.1299 2.89482 16.1432 2.87137 16.1556C2.85635 16.1643 2.84072 16.1719 2.8246 16.1784C2.80955 16.1866 2.79409 16.1941 2.7789 16.2019C2.76449 16.211 2.74948 16.2191 2.73399 16.2262C2.71934 16.2349 2.70428 16.2428 2.68949 16.2511C2.6747 16.2594 2.66124 16.2707 2.64765 16.2811C2.63406 16.2915 2.62167 16.3051 2.60888 16.3173C2.60275 16.3241 2.59555 16.3307 2.58996 16.3371C2.5777 16.3514 2.56477 16.3649 2.55171 16.3788C2.54545 16.3864 2.53839 16.3933 2.53253 16.4009C2.52027 16.417 2.50774 16.4326 2.49575 16.4488C2.49042 16.4579 2.48456 16.4662 2.47936 16.4755C2.43939 16.5421 2.43606 16.6137 2.44565 16.6871C2.45151 16.7056 2.45711 16.7244 2.46417 16.7424C2.47403 16.7584 2.48389 16.7746 2.49482 16.79C2.50108 16.7969 2.50668 16.8043 2.51294 16.8113C2.52626 16.8246 2.53879 16.8379 2.55171 16.8513C2.55851 16.8576 2.56504 16.8646 2.57157 16.871C2.58556 16.8835 2.59822 16.8968 2.61154 16.9101C2.61874 16.9164 2.62487 16.9235 2.63259 16.9295C2.64792 16.9415 2.66284 16.954 2.67843 16.9658C2.68722 16.971 2.69535 16.9768 2.70415 16.9818C2.72347 16.9912 2.74186 17.001 2.76078 17.0105C2.82074 17.0391 2.8807 17.0666 2.93933 17.0971C2.96731 17.1111 2.99436 17.1269 3.02181 17.1416C3.03966 17.1495 3.05712 17.1588 3.07431 17.1682C3.09987 17.1807 3.12627 17.1913 3.15332 17.2001C3.18077 17.2068 3.20779 17.2151 3.2342 17.2251C3.26085 17.2349 3.2875 17.2447 3.31495 17.2529C3.34341 17.2595 3.37147 17.2678 3.39903 17.2775C3.42779 17.2868 3.45701 17.2945 3.48657 17.3008C3.5288 17.3067 3.57063 17.3152 3.61182 17.3261C3.64473 17.3344 3.67751 17.3428 3.71069 17.3503C3.81529 17.3744 3.91896 17.4014 4.02382 17.4233C4.06033 17.4309 4.09577 17.4423 4.13308 17.4465C4.28871 17.4562 4.43808 17.5016 4.59145 17.5233C4.62996 17.5311 4.667 17.5441 4.70591 17.55C4.79918 17.5604 4.89312 17.558 4.98573 17.579C5.04049 17.5924 5.09486 17.6057 5.15202 17.6046C5.50033 17.6157 5.8449 17.6713 6.19401 17.6755C6.24091 17.6823 6.28448 17.7034 6.33232 17.7063C7.00175 17.7159 7.67105 17.7092 8.34008 17.709C8.4043 17.7118 8.46426 17.6894 8.52569 17.6755C9.14928 17.6558 9.76635 17.5758 10.3806 17.4696C10.4424 17.4589 10.5033 17.4611 10.5604 17.492C10.591 17.5124 10.5981 17.5392 10.5815 17.572C10.3662 17.6169 10.1468 17.6425 9.93211 17.6856C9.70559 17.7312 9.47267 17.7014 9.25108 17.7734C9.20231 17.7893 9.14568 17.7829 9.09265 17.7845C8.88106 17.7908 8.66826 17.7672 8.45946 17.8322C8.39457 17.8525 8.31849 17.8378 8.24747 17.8379C7.66198 17.8379 7.0765 17.8379 6.49101 17.8379C6.34098 17.8379 6.18961 17.8522 6.04411 17.795C6.01266 17.7826 5.97402 17.787 5.93857 17.7864C5.72684 17.7824 5.51645 17.789 5.30525 17.7397C5.16188 17.7063 5.00838 17.7091 4.85968 17.6926C4.55321 17.6585 4.25274 17.5828 3.94561 17.5535C3.9021 17.5501 3.85837 17.5558 3.81716 17.5701Z\" fill=\"#B1B4C5\"/>\n<path d=\"M10.5817 17.5721C10.5817 17.5544 10.5817 17.5368 10.5817 17.5188C10.597 17.4993 10.6169 17.4839 10.6395 17.4738C10.6975 17.4528 10.7577 17.4386 10.8153 17.4161C11.1534 17.3115 11.5016 17.2355 11.8182 17.0683C11.881 17.0351 11.9455 17.0053 12.004 16.9649C12.3465 16.7289 12.3371 16.5012 11.9877 16.2705C11.7312 16.101 11.4401 16.0235 11.156 15.9254C11.1016 15.9053 11.0481 15.8831 10.9928 15.8655C10.9716 15.8593 10.9509 15.8521 10.9304 15.8435C10.8695 15.8191 10.8042 15.8187 10.7403 15.8103C10.7186 15.8069 10.6972 15.8019 10.6763 15.7952C10.6237 15.7787 10.5692 15.7686 10.5141 15.7653C10.48 15.7619 10.4462 15.7556 10.4131 15.7463C10.3466 15.727 10.2778 15.7165 10.2086 15.7149C10.1734 15.7121 10.1386 15.7059 10.1047 15.6964C10.0382 15.6748 9.9688 15.6637 9.89893 15.6636C9.85054 15.6638 9.80255 15.6548 9.75756 15.637C9.74699 15.6311 9.73771 15.6231 9.73029 15.6136C9.72288 15.604 9.71746 15.5931 9.71439 15.5814L9.72958 15.5481C10.0327 15.5269 10.3244 15.6027 10.6178 15.6572C10.9642 15.7214 11.3107 15.7875 11.641 15.9134C11.8142 15.9801 11.9865 16.0467 12.154 16.1252C12.31 16.1978 12.4192 16.332 12.5199 16.4647C12.6086 16.5815 12.5567 16.8147 12.4301 16.9186C12.2593 17.0595 12.0654 17.1697 11.8571 17.2446C11.5168 17.3664 11.1722 17.4764 10.8187 17.554C10.742 17.5721 10.6608 17.5672 10.5817 17.5721Z\" fill=\"#B9B7C7\"/>\n<path d=\"M6.42667 15.4427C6.42667 15.4252 6.42667 15.4078 6.42667 15.3903C7.05399 15.3903 7.68118 15.3891 8.30851 15.3913C8.39325 15.3913 8.48759 15.3629 8.55741 15.4426C8.54555 15.4536 8.53369 15.4648 8.52197 15.4761C8.28412 15.5541 8.03868 15.4996 7.79737 15.5178C7.48478 15.5169 7.17231 15.5178 6.85985 15.5178C6.71435 15.5017 6.55525 15.5586 6.42667 15.4427Z\" fill=\"#B9B7C7\"/>\n<path d=\"M8.55806 15.4425C8.73306 15.4425 8.90806 15.4428 9.08305 15.4433C9.14421 15.4433 9.20684 15.4396 9.25055 15.4957C9.24015 15.5059 9.22963 15.5162 9.21937 15.5266C9.1093 15.5825 8.99005 15.5608 8.87412 15.5675C8.77166 15.5631 8.66599 15.5784 8.57179 15.5209C8.56567 15.5168 8.56042 15.5116 8.55636 15.5054C8.5523 15.4993 8.54951 15.4924 8.54814 15.4852C8.54677 15.478 8.54687 15.4706 8.54841 15.4634C8.54995 15.4562 8.55292 15.4495 8.55713 15.4434L8.55806 15.4425Z\" fill=\"#B9B7C7\"/>\n<path d=\"M9.25056 15.4957C9.36369 15.4957 9.47708 15.4965 9.58967 15.4967C9.64297 15.4967 9.694 15.5021 9.72971 15.549L9.72891 15.55C9.65723 15.6166 9.56902 15.6203 9.47801 15.6196C9.40353 15.6184 9.32891 15.6167 9.26322 15.5737C9.25718 15.5695 9.25203 15.5643 9.24808 15.5581C9.24412 15.5519 9.24145 15.5451 9.2402 15.5379C9.23896 15.5306 9.23918 15.5233 9.24084 15.5161C9.24251 15.509 9.24558 15.5023 9.24989 15.4964L9.25056 15.4957Z\" fill=\"#B9B7C7\"/>\n<path d=\"M12.1796 17.3062H12.073C12.096 17.2635 12.1356 17.2541 12.1796 17.2529C12.1797 17.2708 12.1797 17.2886 12.1796 17.3062Z\" fill=\"#D4D1DB\"/>\n<path d=\"M12.2862 17.2C12.2632 17.2429 12.2235 17.2522 12.1796 17.2532C12.2026 17.2102 12.2423 17.2009 12.2862 17.2Z\" fill=\"#D4D1DB\"/>\n<path d=\"M12.02 5.11486C11.9489 5.0851 11.9134 5.0318 11.9134 4.95496C11.9167 4.95113 11.9208 4.94806 11.9254 4.94595C11.93 4.94384 11.935 4.94275 11.94 4.94275C11.9451 4.94275 11.9501 4.94384 11.9547 4.94595C11.9593 4.94806 11.9634 4.95113 11.9667 4.95496C11.9888 5.00693 12.023 5.05463 12.02 5.11486Z\" fill=\"#F37758\"/>\n<path d=\"M11.9667 4.95528H11.9134V4.90198C11.9311 4.9197 11.9489 4.93742 11.9667 4.95528Z\" fill=\"#F47B5D\"/>\n<path d=\"M11.9133 4.84871C11.8956 4.83085 11.8778 4.81313 11.86 4.79541H11.9133V4.84871Z\" fill=\"#F47B5D\"/>\n<path d=\"M9.25027 15.5492H9.46347C9.54342 15.6159 9.65001 15.5384 9.72996 15.6025H9.88986C9.95062 15.6624 10.0419 15.5987 10.1031 15.6558H10.2096C10.2703 15.7157 10.3616 15.6518 10.4228 15.7091H10.5294C10.5718 15.7602 10.6463 15.7141 10.6893 15.7624H10.7426C10.8033 15.8221 10.8944 15.7591 10.9558 15.8157C10.9982 15.8664 11.0724 15.8211 11.1157 15.869C11.4005 15.9258 11.6792 15.9983 11.9252 16.1622C11.9762 16.1963 12.0359 16.2169 12.0879 16.2497C12.1787 16.3044 12.2517 16.3842 12.2982 16.4794C12.3678 16.626 12.3547 16.7193 12.2473 16.8392C12.1399 16.9591 12.0129 17.0473 11.8676 17.1178C11.5285 17.2842 11.1674 17.4013 10.7951 17.4656C10.7518 17.5137 10.6775 17.4677 10.6352 17.5189H10.5819C10.5209 17.5237 10.459 17.5231 10.3993 17.5343C10.0571 17.5986 9.71237 17.642 9.36713 17.686C9.07879 17.7228 8.79271 17.7286 8.50463 17.7322C8.47624 17.7643 8.42561 17.7507 8.39803 17.7844H6.26715C6.25089 17.7654 6.23144 17.7497 6.21385 17.7323C6.083 17.7323 5.95216 17.7323 5.82131 17.7315C5.70845 17.7327 5.5958 17.7214 5.48539 17.698C5.36041 17.6696 5.22583 17.6829 5.09538 17.6781C5.06793 17.6443 5.01703 17.6579 4.98878 17.6257L4.66899 17.6248C4.65287 17.6056 4.63328 17.59 4.61569 17.5724C4.52242 17.5691 4.42742 17.5816 4.33721 17.5415C4.25593 17.5056 4.16825 17.5226 4.08324 17.5185C4.06712 17.4992 4.04753 17.4836 4.02994 17.4652C3.89989 17.4876 3.78503 17.4043 3.65685 17.4119C3.64073 17.3924 3.62114 17.3768 3.60355 17.3586H3.44366C3.42807 17.3387 3.40661 17.3247 3.39036 17.3053H3.28376C3.2683 17.2853 3.24685 17.2714 3.23046 17.252H3.12387C3.10828 17.2321 3.08696 17.2181 3.07057 17.1987H3.01727C3.00181 17.1787 2.98023 17.1647 2.96397 17.1454C2.86284 17.1409 2.78635 17.0748 2.69748 17.0388C2.68149 17.0193 2.6619 17.0034 2.64418 16.9855C2.62646 16.9676 2.60913 16.9495 2.59088 16.9322C2.57369 16.9139 2.55597 16.8961 2.53758 16.8789C2.52035 16.8607 2.50258 16.8429 2.48428 16.8256C2.46696 16.8074 2.44919 16.7896 2.43098 16.7723C2.37515 16.6376 2.3994 16.5143 2.48428 16.3992C2.50258 16.382 2.52035 16.3642 2.53758 16.3459C2.55597 16.3281 2.57373 16.3104 2.59088 16.2926C2.60913 16.2754 2.62699 16.2576 2.64418 16.2393C2.67336 16.2088 2.72253 16.2185 2.75077 16.186C2.76863 16.1683 2.78808 16.1523 2.80407 16.1327H2.85737C2.87389 16.1137 2.89535 16.0997 2.91067 16.0794H2.96397C3.30481 15.8796 3.68457 15.8039 4.06632 15.735C4.10789 15.7275 4.15386 15.7411 4.18904 15.7063C4.25073 15.6505 4.34174 15.7131 4.40223 15.653C4.41982 15.653 4.43741 15.653 4.45553 15.653C4.57039 15.6037 4.68978 15.6325 4.80744 15.6317C4.85474 15.7929 4.71563 15.7667 4.64208 15.7806C4.23314 15.8574 3.83007 15.9552 3.4358 16.089C3.24112 16.155 3.05844 16.2446 2.90747 16.384C2.73119 16.5469 2.73892 16.7305 2.92599 16.8816C3.0715 16.9995 3.24139 17.0757 3.41741 17.139C4.10496 17.386 4.8173 17.5045 5.54322 17.5533C5.61398 17.5581 5.68473 17.5597 5.75389 17.5779C6.00532 17.6365 6.26355 17.574 6.51526 17.6214C7.01826 17.6976 7.52646 17.677 8.02787 17.6448C8.59137 17.6086 9.1586 17.5907 9.71837 17.4982C10.3393 17.3952 10.964 17.3066 11.5324 17.0132C11.7023 16.9257 11.9176 16.8499 11.912 16.6135C11.9067 16.3847 11.6996 16.2981 11.5272 16.2137C10.9135 15.9129 10.2448 15.8251 9.57939 15.7189C9.34688 15.6818 9.09971 15.7229 8.88105 15.6041C8.86266 15.5742 8.86732 15.5484 8.89504 15.5267C9.01376 15.5304 9.13422 15.499 9.25027 15.5492Z\" fill=\"#AEADC0\"/>\n<path d=\"M4.82929 15.6561H4.45554C4.46886 15.6445 4.48085 15.624 4.49471 15.6228C4.67779 15.6081 4.85288 15.5378 5.03969 15.549C5.11891 15.5546 5.19845 15.5443 5.27367 15.5188C5.3223 15.5022 5.37707 15.4995 5.4293 15.4978C5.59559 15.4922 5.75949 15.4891 5.92618 15.4549C6.08701 15.4218 6.25929 15.4448 6.42665 15.443H6.85304C6.86129 15.4571 6.86366 15.4739 6.85965 15.4898C6.85564 15.5056 6.84556 15.5193 6.83159 15.5278C6.67822 15.6091 6.5118 15.6272 6.34231 15.6229C5.96109 15.6134 5.58533 15.6697 5.20851 15.7148C5.07873 15.7306 4.94295 15.759 4.82929 15.6561Z\" fill=\"#B1AEC1\"/>\n<path d=\"M4.18958 15.7087C4.16879 15.7243 4.1496 15.7503 4.12708 15.7541C3.81462 15.8074 3.50629 15.8731 3.21554 16.0061C3.13626 16.0423 3.04019 16.0293 2.96451 16.0818C2.96451 16.0639 2.96451 16.0461 2.96451 16.0285C3.10175 15.9288 3.26724 15.8991 3.42408 15.8543C3.67391 15.7828 3.92175 15.6896 4.18958 15.7087Z\" fill=\"#B1AEC1\"/>\n<path d=\"M4.40277 15.656C4.34667 15.734 4.26326 15.7019 4.18958 15.7093C4.24581 15.6318 4.32908 15.6631 4.40277 15.656Z\" fill=\"#B1AEC1\"/>\n<path d=\"M2.48522 16.4012C2.44911 16.5229 2.41953 16.6454 2.43192 16.7743C2.34371 16.6003 2.35437 16.525 2.48522 16.4012Z\" fill=\"#B1AEC1\"/>\n<path d=\"M2.75143 16.1884C2.72865 16.2313 2.68881 16.2406 2.64484 16.2417C2.66789 16.1987 2.7076 16.1894 2.75143 16.1884Z\" fill=\"#B1AEC1\"/>\n<path d=\"M4.98865 17.6262C5.03249 17.6262 5.07206 17.6361 5.09524 17.6786C5.05141 17.6779 5.01183 17.6686 4.98865 17.6262Z\" fill=\"#B1AEC1\"/>\n<path d=\"M8.39789 17.7853C8.42107 17.7428 8.46065 17.7337 8.50449 17.733C8.48117 17.775 8.44159 17.7843 8.39789 17.7853Z\" fill=\"#B1AEC1\"/>\n<path d=\"M2.96451 17.1467L3.01781 17.2L2.96451 17.1467Z\" fill=\"#B1AEC1\"/>\n<path d=\"M2.64499 16.9868L2.69829 17.0401L2.64499 16.9868Z\" fill=\"#B1AEC1\"/>\n<path d=\"M2.59167 16.9337L2.64497 16.987L2.59167 16.9337Z\" fill=\"#B1AEC1\"/>\n<path d=\"M3.07111 17.1998L3.1244 17.2531L3.07111 17.1998Z\" fill=\"#B1AEC1\"/>\n<path d=\"M2.53839 16.8804L2.59169 16.9337L2.53839 16.8804Z\" fill=\"#B1AEC1\"/>\n<path d=\"M2.48523 16.8273L2.53853 16.8806L2.48523 16.8273Z\" fill=\"#B1AEC1\"/>\n<path d=\"M3.23087 17.2532L3.28416 17.3065L3.23087 17.2532Z\" fill=\"#B1AEC1\"/>\n<path d=\"M2.43192 16.7739L2.48521 16.8272L2.43192 16.7739Z\" fill=\"#B1AEC1\"/>\n<path d=\"M3.39062 17.3064L3.44392 17.3597L3.39062 17.3064Z\" fill=\"#B1AEC1\"/>\n<path d=\"M2.53853 16.348L2.48523 16.4013L2.53853 16.348Z\" fill=\"#B1AEC1\"/>\n<path d=\"M3.6037 17.3599L3.657 17.4132L3.6037 17.3599Z\" fill=\"#B1AEC1\"/>\n<path d=\"M2.59169 16.2948L2.53839 16.3481L2.59169 16.2948Z\" fill=\"#B1AEC1\"/>\n<path d=\"M2.64497 16.2416L2.59167 16.2949L2.64497 16.2416Z\" fill=\"#B1AEC1\"/>\n<path d=\"M4.02982 17.4663L4.08311 17.5196L4.02982 17.4663Z\" fill=\"#B1AEC1\"/>\n<path d=\"M2.80489 16.1351L2.75159 16.1884L2.80489 16.1351Z\" fill=\"#B1AEC1\"/>\n<path d=\"M2.91133 16.082L2.85803 16.1353L2.91133 16.082Z\" fill=\"#B1AEC1\"/>\n<path d=\"M4.61569 17.5729L4.66899 17.6252L4.61569 17.5729Z\" fill=\"#B1AEC1\"/>\n<path d=\"M6.21371 17.7328L6.26701 17.7849L6.21371 17.7328Z\" fill=\"#B1AEC1\"/>\n<path d=\"M9.72984 15.6024C9.6399 15.5904 9.53823 15.637 9.46335 15.5491H9.72918C9.72931 15.5675 9.72957 15.5849 9.72984 15.6024Z\" fill=\"#B1AEC1\"/>\n<path d=\"M10.1027 15.6558C10.029 15.6486 9.94543 15.6807 9.88947 15.6025C9.96302 15.6101 10.0463 15.5786 10.1027 15.6558Z\" fill=\"#B1AEC1\"/>\n<path d=\"M10.4222 15.7089C10.3485 15.7018 10.2651 15.7338 10.209 15.6556C10.2825 15.6632 10.3661 15.6317 10.4222 15.7089Z\" fill=\"#B1AEC1\"/>\n<path d=\"M10.9547 15.8156C10.881 15.8081 10.7976 15.8402 10.7415 15.7623C10.8151 15.7699 10.8991 15.738 10.9547 15.8156Z\" fill=\"#B1AEC1\"/>\n<path d=\"M11.1147 15.8686C11.056 15.867 10.993 15.8783 10.9548 15.8153C11.0133 15.8173 11.076 15.8065 11.1147 15.8686Z\" fill=\"#B1AEC1\"/>\n<path d=\"M10.6886 15.7622C10.6299 15.7606 10.5669 15.7718 10.5287 15.7089C10.5872 15.711 10.6499 15.7002 10.6886 15.7622Z\" fill=\"#B1AEC1\"/>\n<path d=\"M10.6349 17.5188C10.6734 17.4565 10.7363 17.4675 10.7948 17.4655C10.7564 17.5285 10.6935 17.5174 10.6349 17.5188Z\" fill=\"#B1B4C5\"/>\n<path d=\"M6.85318 15.4965V15.4432H7.81176C7.82748 15.4792 7.81882 15.5075 7.78511 15.5284C7.47264 15.5822 7.15991 15.6255 6.85318 15.4965Z\" fill=\"#AEADC0\"/>\n<path d=\"M7.81174 15.4965V15.4432H8.55712C8.55712 15.4607 8.55792 15.4781 8.55818 15.4956C8.34499 15.6269 8.11674 15.5608 7.89195 15.5512C7.8607 15.5407 7.83294 15.5218 7.81174 15.4965Z\" fill=\"#B1AEC1\"/>\n<path d=\"M7.86479 15.4965H8.55767H8.87666C8.89412 15.5082 8.89998 15.5199 8.89412 15.5318C8.88825 15.5436 8.88266 15.5495 8.87679 15.5495C8.5678 15.6865 8.24934 15.6221 7.93301 15.5919C7.88771 15.5876 7.86106 15.5474 7.86479 15.4965Z\" fill=\"#AEADC0\"/>\n<path d=\"M8.87732 15.5493C8.87732 15.5317 8.87732 15.514 8.87732 15.496H9.25041V15.5493H8.87732Z\" fill=\"#B1AEC1\"/>\n<path d=\"M7.86477 15.4965C7.91687 15.5616 7.99069 15.5482 8.05958 15.5484C8.33207 15.5496 8.60456 15.5494 8.87705 15.5496C8.91356 15.5975 8.96579 15.6029 9.02002 15.6019C9.29491 15.5947 9.56074 15.6674 9.83096 15.6929C10.1578 15.7238 10.4705 15.8128 10.7903 15.8721C10.9023 15.893 11.0121 15.9311 11.1192 15.9708C11.359 16.0598 11.6017 16.1407 11.8121 16.2947C11.8943 16.3548 11.9586 16.422 11.9942 16.5153C12.0383 16.6312 12.0323 16.7381 11.936 16.8317C11.8617 16.9072 11.7771 16.9718 11.6848 17.0237C11.2768 17.2439 10.8386 17.3739 10.387 17.4612C10.068 17.5229 9.74622 17.5699 9.42522 17.6211C9.37326 17.6293 9.31863 17.6247 9.26613 17.6256C9.20417 17.6268 9.13754 17.6132 9.08105 17.6313C8.86439 17.7006 8.64267 17.6724 8.42268 17.6793C8.36938 17.681 8.31235 17.6704 8.26438 17.6869C8.08303 17.7491 7.89689 17.7299 7.71207 17.7311C7.38442 17.7334 7.0569 17.7322 6.72925 17.7311C6.65996 17.7311 6.58547 17.7445 6.53284 17.6792L6.56362 17.6484C6.70673 17.5804 6.85956 17.6084 7.008 17.6084C8.16724 17.61 9.31863 17.5431 10.4538 17.2886C10.7923 17.2125 11.12 17.1127 11.4202 16.9354C11.7311 16.7515 11.7377 16.5266 11.4375 16.329C11.1762 16.157 10.8853 16.0549 10.5809 15.9908C10.5552 15.9869 10.53 15.9808 10.5053 15.9727C10.4381 15.9464 10.3685 15.9268 10.2975 15.9141C10.2749 15.909 10.2527 15.9028 10.2308 15.8954C10.1655 15.8734 10.0964 15.8731 10.0294 15.861C10.0068 15.8568 9.98459 15.8512 9.96274 15.8442C9.86387 15.8105 9.75874 15.8297 9.65814 15.8096C9.63502 15.8053 9.61215 15.7998 9.58965 15.7929C9.48532 15.7595 9.37499 15.7779 9.26906 15.7567C9.24384 15.7525 9.21895 15.7465 9.19457 15.7388C9.048 15.711 8.9005 15.7328 8.75379 15.7212C8.70981 15.7184 8.6662 15.7113 8.62361 15.6999C8.31501 15.6498 8.00468 15.6881 7.69528 15.6775C7.45437 15.6765 7.2136 15.6775 6.97282 15.6775C6.66169 15.6909 6.34883 15.6446 6.03916 15.7054C5.9379 15.7384 5.83783 15.7773 5.7291 15.7792C5.1099 15.7828 4.51376 15.9232 3.92174 16.0866C3.66644 16.0979 3.44312 16.1967 3.24738 16.3539C3.03699 16.5229 3.03592 16.6696 3.2242 16.8602C3.43366 17.0721 3.72081 17.1134 3.98264 17.2107C4.08137 17.2472 4.1889 17.2568 4.28417 17.3051C4.33924 17.331 4.3985 17.3467 4.45913 17.3515C4.49515 17.3555 4.53079 17.3623 4.56572 17.3719C4.66912 17.4097 4.77892 17.3974 4.88551 17.4145C4.90925 17.4187 4.93271 17.4244 4.95574 17.4315C5.0594 17.4685 5.17013 17.4505 5.27619 17.4706C5.30067 17.4748 5.32491 17.4802 5.34881 17.4869C5.4746 17.5386 5.63516 17.4565 5.74003 17.588L5.73323 17.626C5.38679 17.6393 5.04888 17.5783 4.70803 17.5295C4.26229 17.4661 3.82379 17.3593 3.39875 17.2108C3.2065 17.1442 3.02474 17.0504 2.85897 16.9325C2.6591 16.7895 2.64324 16.5432 2.8142 16.3636C2.96477 16.2052 3.15651 16.1035 3.35371 16.0413C3.6306 15.954 3.90455 15.8492 4.19463 15.8045C4.36785 15.7779 4.54014 15.7392 4.71349 15.7097C4.75866 15.7019 4.8001 15.6942 4.82928 15.6564C4.99638 15.6529 5.16413 15.6697 5.32816 15.6121C5.38386 15.5925 5.45088 15.6047 5.51271 15.6029C5.57453 15.6012 5.64116 15.6146 5.69752 15.5964C5.90538 15.5298 6.11805 15.5554 6.32897 15.5498C6.45236 15.5464 6.57548 15.5554 6.6954 15.5085C6.74231 15.4901 6.80027 15.4998 6.85317 15.4967H7.81174C7.82946 15.4967 7.84772 15.4967 7.86477 15.4965Z\" fill=\"#9A97AF\"/>\n<path d=\"M6.53311 17.6793L5.90232 17.6786C5.84102 17.6786 5.77826 17.6826 5.73456 17.6261C5.97147 17.4983 6.21944 17.5483 6.46568 17.5838C6.51152 17.5904 6.53724 17.6287 6.5335 17.6793H6.53311Z\" fill=\"#9A97AF\"/>\n<path d=\"M5.73445 15.709C5.82972 15.7238 5.90953 15.6613 6.00094 15.6557C6.22479 15.5996 6.45251 15.6455 6.6777 15.6291C6.7719 15.6223 6.87024 15.6557 6.96005 15.6024H7.70503C7.92848 15.6589 8.15607 15.6157 8.38112 15.6303C8.47559 15.6365 8.57366 15.6056 8.66427 15.6554H8.77087C8.92477 15.7277 9.09652 15.6388 9.25056 15.7087C9.36715 15.7804 9.50639 15.6929 9.62365 15.762C9.73997 15.8341 9.87948 15.7458 9.99674 15.8153C10.0767 15.8802 10.1833 15.8059 10.2632 15.8686C10.324 15.9275 10.415 15.8652 10.4764 15.9219C10.7906 16.0108 11.1115 16.0833 11.3865 16.2729C11.6906 16.4826 11.6864 16.7774 11.3749 16.9735C10.9219 17.2585 10.4033 17.3388 9.892 17.4364C9.35515 17.539 8.81098 17.5705 8.2664 17.6096C7.80576 17.6431 7.34553 17.6693 6.8885 17.6427C6.3623 17.612 5.83252 17.6048 5.31019 17.5184C5.19347 17.4468 5.05409 17.5346 4.9371 17.4651C4.883 17.4156 4.80905 17.4527 4.75055 17.4224C4.44089 17.3691 4.13655 17.2978 3.84541 17.1766C3.6578 17.0948 3.48325 16.9963 3.33441 16.8505C3.19197 16.7109 3.19384 16.5677 3.30909 16.4269C3.44401 16.2616 3.62575 16.1408 3.83049 16.0805C4.45155 15.8901 5.08714 15.7708 5.73445 15.709Z\" fill=\"#8783A0\"/>\n<path d=\"M5.30844 17.5188C5.51964 17.5236 5.73083 17.5055 5.9403 17.5653C6.0305 17.5919 6.1339 17.5703 6.23117 17.5726C6.38947 17.5761 6.54977 17.5554 6.70367 17.6159C6.73498 17.6283 6.77362 17.6243 6.8088 17.6243C7.15404 17.6243 7.50168 17.6528 7.84359 17.6163C8.14339 17.5845 8.44133 17.5774 8.74087 17.571C8.95886 17.4845 9.19977 17.5577 9.4183 17.4737C9.81564 17.4471 10.1995 17.3486 10.5829 17.251C10.848 17.1834 11.1064 17.0932 11.3324 16.9312C11.361 16.9105 11.3891 16.8893 11.4178 16.8688C11.589 16.7454 11.5841 16.4785 11.4233 16.3661C11.2937 16.2753 11.1729 16.1723 11.0141 16.1281C10.8612 16.0853 10.7121 16.0293 10.5624 15.9762C10.5309 15.965 10.504 15.9406 10.4751 15.9229C10.6011 15.9109 10.7198 15.9402 10.8388 15.9792C11.1085 16.0677 11.3644 16.1807 11.5967 16.3478C11.6927 16.4168 11.7347 16.5054 11.7509 16.6127C11.7618 16.6852 11.7474 16.7538 11.6913 16.8082C11.6218 16.8756 11.5589 16.9485 11.4704 16.9965C11.1413 17.1747 10.7962 17.3029 10.4256 17.363C10.2174 17.397 10.0115 17.4458 9.80405 17.4848C9.57939 17.527 9.35687 17.5858 9.12449 17.5735C9.09784 17.5721 9.06946 17.5683 9.04454 17.5759C8.8023 17.6506 8.55339 17.6206 8.30675 17.6267C8.28898 17.6252 8.2711 17.6258 8.25346 17.6284C7.90475 17.7196 7.54925 17.6684 7.19681 17.6784C6.97549 17.6849 6.7539 17.6793 6.53231 17.6792C6.48874 17.6227 6.42571 17.6259 6.36469 17.6259H5.73336C5.67607 17.5526 5.59412 17.5787 5.52017 17.5726C5.44622 17.5665 5.3652 17.5934 5.30844 17.5188Z\" fill=\"#9696AE\"/>\n<path d=\"M5.73445 15.709C5.71326 15.7242 5.69141 15.7535 5.67102 15.7524C5.47488 15.7431 5.28701 15.8026 5.0938 15.8181C4.96223 15.8299 4.83182 15.8522 4.70379 15.8847C4.41238 15.9564 4.1219 16.0321 3.83968 16.1359C3.65314 16.2044 3.49817 16.318 3.36 16.4585C3.3067 16.5118 3.27925 16.5729 3.28484 16.649C3.28818 16.6939 3.29337 16.7359 3.33375 16.766C3.46779 16.8657 3.57625 16.9999 3.74161 17.0576C3.78998 17.0743 3.84142 17.0975 3.8698 17.147C3.59398 17.1666 3.22169 16.9579 3.11336 16.7266C3.05206 16.5956 3.08671 16.4934 3.18464 16.3944C3.37599 16.2004 3.61716 16.105 3.86993 16.0289C4.21224 15.9131 4.56641 15.8412 4.92085 15.7812C5.18827 15.7356 5.4589 15.6815 5.73445 15.709Z\" fill=\"#8B88A4\"/>\n<path d=\"M3.8702 16.0287C3.76187 16.082 3.65607 16.1423 3.54481 16.1886C3.39371 16.2521 3.28791 16.3678 3.17905 16.4817C3.12349 16.5398 3.11616 16.604 3.1556 16.6737C3.17718 16.7116 3.19424 16.7537 3.22222 16.7861C3.39371 16.985 3.60731 17.1104 3.87007 17.1458C4.12324 17.2524 4.39133 17.3085 4.66035 17.358C4.70539 17.3662 4.74683 17.3731 4.77574 17.4113C4.74342 17.4302 4.70662 17.4402 4.66915 17.4402C4.63167 17.4402 4.59488 17.4302 4.56255 17.4113H4.45595C4.41371 17.3602 4.3391 17.4065 4.29606 17.358C4.04609 17.3067 3.80677 17.2192 3.56427 17.1424C3.37372 17.0819 3.22049 16.9682 3.09151 16.8186C2.98811 16.6986 2.98158 16.5244 3.08884 16.4119C3.30124 16.1908 3.55427 16.0441 3.8702 16.0287Z\" fill=\"#9291AA\"/>\n<path d=\"M6.9599 15.6029C6.91606 15.6593 6.8533 15.6553 6.79161 15.6553H6.00079C6.04423 15.598 6.10739 15.602 6.16882 15.602L6.9599 15.6029Z\" fill=\"#9696AE\"/>\n<path d=\"M8.66414 15.656H7.87332C7.81189 15.656 7.74887 15.66 7.7049 15.6037H8.49611C8.55767 15.6029 8.62057 15.5987 8.66414 15.656Z\" fill=\"#9696AE\"/>\n<path d=\"M9.25002 15.7093C9.13676 15.7093 9.02359 15.7093 8.91051 15.7093C8.85721 15.7093 8.80591 15.7038 8.7702 15.6569H9.11011C9.16368 15.6561 9.21471 15.6616 9.25002 15.7093Z\" fill=\"#9696AE\"/>\n<path d=\"M9.99568 15.816C9.90907 15.816 9.82246 15.8152 9.73585 15.8146C9.71424 15.8155 9.6927 15.8113 9.67306 15.8023C9.65342 15.7932 9.63625 15.7795 9.62299 15.7625C9.7096 15.7625 9.79621 15.7625 9.88295 15.7633C9.90462 15.7622 9.92621 15.7665 9.94585 15.7757C9.9655 15.7849 9.9826 15.7987 9.99568 15.816Z\" fill=\"#9696AE\"/>\n<path d=\"M4.56253 17.4128H4.77572C4.83422 17.4146 4.89711 17.4036 4.93562 17.4661C4.84888 17.4661 4.7624 17.4661 4.67539 17.4661C4.65368 17.467 4.63208 17.4626 4.61243 17.4533C4.59278 17.444 4.57566 17.4302 4.56253 17.4128Z\" fill=\"#9696AE\"/>\n<path d=\"M4.93561 17.4655C5.02222 17.4655 5.10883 17.4655 5.19544 17.4667C5.21708 17.4657 5.23864 17.4699 5.25831 17.479C5.27799 17.4881 5.29522 17.5017 5.30856 17.5188C5.22182 17.5188 5.13534 17.5188 5.04833 17.5188C5.02662 17.5197 5.005 17.5154 4.98535 17.5061C4.9657 17.4968 4.94863 17.4829 4.93561 17.4655Z\" fill=\"#9696AE\"/>\n<path d=\"M9.62282 15.7624C9.53621 15.7624 9.4496 15.7624 9.36299 15.7612C9.34138 15.7622 9.31985 15.758 9.30019 15.7489C9.28053 15.7399 9.26332 15.7263 9.25 15.7092C9.33661 15.7092 9.42322 15.7092 9.50996 15.7092C9.53167 15.7083 9.55327 15.7127 9.57293 15.7219C9.59258 15.7312 9.6097 15.7451 9.62282 15.7624Z\" fill=\"#9696AE\"/>\n<path d=\"M10.262 15.8691C10.1721 15.857 10.0705 15.9027 9.99551 15.8158C10.0855 15.828 10.1873 15.7811 10.262 15.8691Z\" fill=\"#9696AE\"/>\n<path d=\"M10.4751 15.9222C10.4014 15.9152 10.3181 15.9465 10.2619 15.8689C10.3356 15.8764 10.4194 15.8441 10.4751 15.9222Z\" fill=\"#9696AE\"/>\n<path d=\"M4.2963 17.3595C4.35479 17.3614 4.41768 17.3503 4.45619 17.4128C4.39756 17.4109 4.33467 17.4221 4.2963 17.3595Z\" fill=\"#9696AE\"/>\n<path d=\"M8.45105 15.7624H8.50435C8.65798 15.8352 8.82974 15.7461 8.98404 15.8157C9.00176 15.8157 9.01935 15.8157 9.03734 15.8157C9.17232 15.8893 9.32808 15.7979 9.46373 15.869C9.46758 15.8837 9.46679 15.8993 9.46147 15.9136C9.45616 15.9279 9.44657 15.9402 9.43401 15.9489C9.32089 16.0129 9.1963 15.9879 9.07585 15.9953C8.30182 15.8754 7.52139 15.8646 6.7423 15.8937C6.0257 15.9204 5.31203 15.9963 4.61995 16.2041C4.46618 16.2503 4.31601 16.3052 4.1881 16.4047C3.99142 16.5577 3.99222 16.7023 4.20995 16.8478C4.51109 17.0489 4.86459 17.1085 5.21143 17.1809C6.21078 17.3896 7.22279 17.3347 8.23226 17.3399C8.34152 17.3399 8.44172 17.3067 8.54472 17.2828C8.57293 17.2742 8.60224 17.2697 8.63173 17.2695C8.6889 17.2712 8.74486 17.287 8.80229 17.2875C8.91382 17.2974 9.03081 17.2728 9.13407 17.3376C9.13969 17.3418 9.14441 17.3472 9.14796 17.3532C9.15151 17.3593 9.15383 17.366 9.15477 17.373C9.15571 17.38 9.15526 17.3871 9.15345 17.3939C9.15163 17.4007 9.14849 17.407 9.1442 17.4126C8.97218 17.4855 8.78337 17.3901 8.61121 17.4659C8.58457 17.4659 8.55658 17.4609 8.53127 17.4678C8.27104 17.5399 8.00494 17.5173 7.74058 17.5187C7.39503 17.5205 7.04948 17.5205 6.70392 17.5187C6.55415 17.5187 6.40292 17.5333 6.25768 17.4756C6.22378 17.4646 6.18774 17.4619 6.15255 17.4675C5.90258 17.4983 5.6626 17.4142 5.41516 17.4053C5.24194 17.3992 5.07032 17.3404 4.89737 17.3088C4.59263 17.2533 4.29922 17.1598 4.00688 17.0594C3.82447 16.9966 3.68203 16.8862 3.55384 16.7489C3.49855 16.6899 3.49242 16.6279 3.52719 16.5546C3.58002 16.4416 3.66736 16.3483 3.77663 16.2882C3.9781 16.1732 4.19476 16.096 4.41621 16.0359C4.63767 15.9758 4.86046 15.9231 5.08551 15.8827C5.27552 15.8484 5.46993 15.839 5.66194 15.8145C5.86287 15.7889 6.06168 15.744 6.26661 15.7621C6.7928 15.7033 7.32072 15.7476 7.84785 15.739C8.04878 15.7361 8.25212 15.7079 8.45105 15.7624Z\" fill=\"#777393\"/>\n<path d=\"M9.14355 17.4121V17.3588C9.32317 17.2256 9.54409 17.2354 9.74743 17.1877C10.0406 17.1189 10.3337 17.051 10.5978 16.8999C10.9371 16.7055 10.936 16.5256 10.6049 16.327C10.405 16.207 10.1753 16.1671 9.96142 16.0857C9.90725 16.0593 9.84891 16.0425 9.789 16.036C9.75374 16.0318 9.71892 16.0246 9.68494 16.0144C9.61964 15.9897 9.54862 15.9819 9.4864 15.9477C9.47854 15.9391 9.47081 15.9303 9.46295 15.9211C9.46295 15.9034 9.46295 15.8857 9.46295 15.8678C9.87534 15.8731 10.2624 15.9899 10.6426 16.1364C10.8258 16.207 10.9973 16.2938 11.1301 16.4429C11.1549 16.468 11.1772 16.4955 11.1968 16.5248C11.2254 16.5729 11.2342 16.6336 11.2058 16.6777C11.122 16.8081 11.0638 16.9543 10.8811 17.004C10.6779 17.0593 10.4889 17.165 10.2879 17.2305C10.1289 17.2831 9.96517 17.3199 9.79899 17.3404C9.58127 17.3684 9.36674 17.4394 9.14355 17.4121Z\" fill=\"#7C7998\"/>\n<path d=\"M8.45107 15.7623H6.26703C6.30327 15.715 6.35497 15.709 6.40894 15.709H8.30917C8.36313 15.7097 8.41483 15.715 8.45107 15.7623Z\" fill=\"#7C7998\"/>\n<path d=\"M8.61084 17.4655C8.64642 17.4182 8.69745 17.4122 8.75101 17.4122C8.88186 17.4122 9.01267 17.4122 9.14343 17.4122C9.10798 17.4595 9.05682 17.4655 9.00325 17.4655C8.87249 17.4655 8.74169 17.4655 8.61084 17.4655Z\" fill=\"#7C7998\"/>\n<path d=\"M8.98392 15.8155C8.87066 15.8155 8.7574 15.8155 8.64427 15.8155C8.59097 15.8155 8.53967 15.81 8.50436 15.7622C8.61753 15.7622 8.73071 15.7622 8.84388 15.7622C8.89731 15.7627 8.94834 15.7682 8.98392 15.8155Z\" fill=\"#7C7998\"/>\n<path d=\"M9.46295 15.8691C9.36741 15.8691 9.27187 15.8691 9.17633 15.8691C9.12303 15.8691 9.072 15.8638 9.03696 15.8158C9.13249 15.8158 9.22803 15.8158 9.3237 15.8158C9.377 15.8161 9.42803 15.8213 9.46295 15.8691Z\" fill=\"#7C7998\"/>\n<path d=\"M8.61243 17.3078C8.51009 17.3866 8.3919 17.4126 8.26599 17.4126C7.64466 17.4126 7.0232 17.41 6.402 17.4149C6.29181 17.4157 6.1956 17.3568 6.08914 17.3625C5.89273 17.373 5.70272 17.3359 5.51005 17.3066C5.09046 17.2421 4.67872 17.1509 4.28271 16.9926C4.13281 16.9328 4.03914 16.8177 3.9496 16.6995C3.89737 16.631 3.92295 16.5489 3.97971 16.4799C4.0967 16.3384 4.24621 16.2462 4.41823 16.1921C4.60371 16.1337 4.78958 16.0744 4.97893 16.0322C5.18479 15.9859 5.39439 15.9561 5.60319 15.9236C5.81198 15.8911 6.02132 15.849 6.23531 15.868C6.8697 15.7581 7.50928 15.8404 8.14593 15.8174C8.20696 15.8153 8.26852 15.8307 8.32995 15.8372L9.09092 15.9223C9.29931 15.9806 9.52304 15.9408 9.7285 16.0242C9.81564 16.0595 9.90359 16.0822 9.82737 16.2026C9.70065 16.2375 9.58473 16.1825 9.46494 16.1592C8.98209 16.0637 8.49261 16.0055 8.00083 15.9851C7.67664 15.9718 7.35058 15.9185 7.02733 15.9506C6.76403 15.9764 6.5022 15.9995 6.23837 15.9989C6.19454 16.0006 6.1527 16.0149 6.11019 16.0238C6.00146 16.0478 5.88993 16.0408 5.77987 16.0504C5.7399 16.0558 5.70246 16.0692 5.66342 16.0771C5.39093 16.0996 5.13269 16.1914 4.86673 16.2443C4.83329 16.2514 4.79918 16.2576 4.76613 16.2658C4.74641 16.2731 4.72616 16.2791 4.70631 16.2866C4.67859 16.2985 4.65061 16.31 4.62263 16.3216C4.59573 16.3316 4.56833 16.3402 4.54055 16.3474C4.52376 16.3548 4.5067 16.362 4.49031 16.3706C4.48285 16.3764 4.47512 16.3813 4.46766 16.387C4.45434 16.4003 4.43941 16.4137 4.42555 16.427C4.41889 16.4346 4.41223 16.4414 4.40517 16.4488C4.39184 16.4651 4.37852 16.4804 4.36653 16.4967C4.36106 16.5056 4.35493 16.5139 4.34947 16.5233C4.3123 16.582 4.3095 16.6407 4.34681 16.6999C4.3592 16.7165 4.37092 16.7337 4.38332 16.7501C4.39571 16.7665 4.40997 16.7804 4.42449 16.7952C4.43195 16.8019 4.43888 16.8093 4.44634 16.8159C4.47606 16.8425 4.50854 16.8658 4.54321 16.8855C4.56133 16.8942 4.57892 16.9038 4.59651 16.9121C4.62449 16.9233 4.65301 16.9331 4.68179 16.9421C4.7013 16.948 4.72032 16.9554 4.73868 16.9642C4.7668 16.9768 4.79451 16.9898 4.8229 17.0018C4.84275 17.0085 4.86207 17.0159 4.88179 17.0227C4.9227 17.0343 4.9648 17.0405 5.00638 17.0494C5.02774 17.0539 5.04879 17.0598 5.0694 17.067C5.12163 17.085 5.176 17.0926 5.23023 17.1034C5.25328 17.1079 5.27553 17.114 5.29792 17.1204C5.37027 17.1411 5.44449 17.1361 5.51898 17.1425C5.56202 17.1458 5.60452 17.1542 5.64556 17.1676C6.33776 17.262 7.03628 17.3021 7.73473 17.2875C7.91262 17.2836 8.08624 17.2579 8.26172 17.2397C8.38071 17.2274 8.51116 17.2053 8.61243 17.3078Z\" fill=\"#666286\"/>\n<path d=\"M9.83695 16.1871C9.83016 16.1421 9.81617 16.1024 9.76713 16.0862C9.59337 16.0285 9.4134 15.9914 9.23095 15.9758C9.17765 15.9715 9.12528 15.9713 9.09024 15.9225H9.46333C9.52382 15.9824 9.61523 15.9185 9.67652 15.9758H9.78312C9.82536 16.0267 9.89984 15.9806 9.94302 16.0291C10.1829 16.0832 10.4191 16.1481 10.6382 16.2675C10.746 16.3275 10.8407 16.4085 10.9168 16.5057C10.9424 16.5367 10.9563 16.5757 10.956 16.6159C10.9558 16.6561 10.9414 16.6949 10.9154 16.7256C10.8375 16.8211 10.7489 16.903 10.6356 16.9629C10.3923 17.0923 10.1321 17.1706 9.86693 17.2335C9.66267 17.282 9.45547 17.3178 9.24907 17.3573C9.21496 17.3638 9.17871 17.3595 9.14354 17.3602H8.77045C8.81935 17.1714 8.9935 17.2761 9.09863 17.2195C9.1232 17.2117 9.14826 17.2055 9.17365 17.201C9.57779 17.1546 9.97113 17.0713 10.3386 16.8851C10.4575 16.8248 10.55 16.7545 10.5541 16.6138C10.5581 16.4765 10.456 16.4158 10.3517 16.363C10.2104 16.2916 10.0704 16.2152 9.90477 16.2179C9.87949 16.215 9.85575 16.2043 9.83695 16.1871Z\" fill=\"#6F6C8E\"/>\n<path d=\"M8.61243 17.3077C8.42815 17.3121 8.24268 17.2866 8.06119 17.3501C8.0055 17.3696 7.93861 17.359 7.87691 17.3592C7.54993 17.3592 7.22294 17.3604 6.89595 17.3592C6.75538 17.3592 6.61294 17.3749 6.47742 17.3165C6.45234 17.3074 6.42538 17.3045 6.39894 17.3083C6.15004 17.3349 5.91006 17.2521 5.66369 17.2498C5.62598 17.2498 5.598 17.2277 5.57428 17.2001C5.6509 17.1168 5.75456 17.1335 5.85157 17.1244C6.29728 17.1858 6.74858 17.191 7.19602 17.2105C7.60602 17.2278 8.02215 17.1916 8.43522 17.1524C8.6632 17.1308 8.88825 17.0858 9.11744 17.0704C9.21138 17.0767 9.30878 17.0662 9.39339 17.1223C9.44456 17.1878 9.40379 17.211 9.34502 17.2231C9.2784 17.2365 9.20511 17.2045 9.14369 17.2532C8.98766 17.3065 8.81977 17.2566 8.664 17.3079H8.61323L8.61243 17.3077Z\" fill=\"#5B5B80\"/>\n<path d=\"M8.66321 17.3077C8.7305 17.2685 8.80754 17.2494 8.88533 17.2524C8.97127 17.2557 9.05748 17.2524 9.14343 17.2524C9.09533 17.319 9.02351 17.3025 8.95688 17.3057C8.89026 17.3089 8.81857 17.2924 8.77034 17.359C8.72717 17.3588 8.68719 17.3497 8.66321 17.3077Z\" fill=\"#666286\"/>\n<path d=\"M9.67627 15.9753C9.60258 15.9679 9.51917 15.9999 9.46307 15.922C9.53676 15.9296 9.6199 15.8976 9.67627 15.9753Z\" fill=\"#777393\"/>\n<path d=\"M9.94249 16.0285C9.88386 16.0269 9.8211 16.0378 9.78259 15.9752C9.84122 15.9771 9.90411 15.966 9.94249 16.0285Z\" fill=\"#777393\"/>\n<path d=\"M5.84104 17.1998H5.46795C5.40732 17.1401 5.31605 17.2031 5.25476 17.1465C5.19413 17.087 5.10312 17.1495 5.04156 17.0932C4.98107 17.0335 4.88993 17.0962 4.82837 17.0399C4.80025 17.0074 4.75108 17.0171 4.72177 16.9866C4.67926 16.9365 4.60544 16.98 4.56187 16.9333C4.51204 16.8925 4.45314 16.8653 4.40198 16.8267C4.38479 16.8084 4.36693 16.7906 4.34868 16.7734C4.28294 16.6668 4.28294 16.5602 4.34868 16.4536C4.36644 16.4358 4.38421 16.4181 4.40198 16.4003C4.41974 16.3831 4.43751 16.3653 4.45528 16.347C4.47286 16.3291 4.49232 16.3133 4.50857 16.2937H4.61517C4.63156 16.2746 4.65288 16.2605 4.66847 16.2404H4.72177C4.73803 16.2213 4.75921 16.2072 4.77507 16.1871C4.95335 16.1808 5.11844 16.1123 5.28847 16.0704C5.4167 16.0392 5.54839 16.0245 5.68034 16.0267C5.69807 16.0091 5.71765 15.9933 5.73364 15.9742L6.10673 15.9734C6.12446 15.9559 6.14404 15.9402 6.16003 15.9211C6.30207 15.9211 6.44411 15.9211 6.58642 15.9201C6.68369 15.9201 6.78043 15.9235 6.87543 15.8884C6.92367 15.8705 6.97976 15.869 7.0324 15.8685C7.22774 15.8662 7.42294 15.8674 7.61868 15.8676C7.64533 15.8676 7.67385 15.8626 7.69863 15.8701C7.94127 15.9451 8.19271 15.8975 8.43748 15.925C8.72569 15.9574 9.01657 15.9806 9.29959 16.0517C9.4788 16.0967 9.66615 16.1094 9.83764 16.185H9.88987C10.0554 16.1934 10.2014 16.2597 10.3285 16.3572C10.5501 16.5271 10.5341 16.7884 10.2856 16.913C10.0127 17.0496 9.73783 17.2023 9.41071 17.1446H9.14422C9.14875 17.0159 9.26148 17.0312 9.33743 17.0062C9.50572 16.9505 9.68027 16.912 9.8363 16.8245C9.92251 16.7763 10.0063 16.7165 10.0014 16.6024C9.99647 16.4884 9.90613 16.4357 9.81485 16.3998C9.484 16.2702 9.14502 16.1579 8.79152 16.1218C7.66932 16.0069 6.54751 15.9752 5.43371 16.2109C5.26918 16.2479 5.10784 16.2979 4.95122 16.3604C4.82703 16.4084 4.6814 16.458 4.681 16.6169C4.681 16.7635 4.82024 16.8086 4.93296 16.8595C5.16082 16.9622 5.40372 17.0143 5.6461 17.069C5.72325 17.0888 5.83438 17.0686 5.84104 17.1998Z\" fill=\"#5C597F\"/>\n<path d=\"M4.34947 16.4546V16.7744C4.2061 16.6409 4.2061 16.5877 4.34947 16.4546Z\" fill=\"#5B5B80\"/>\n<path d=\"M5.04196 17.0935C5.11551 17.1008 5.19906 17.0687 5.25516 17.1468C5.18147 17.1393 5.09806 17.171 5.04196 17.0935Z\" fill=\"#5B5B80\"/>\n<path d=\"M4.82889 17.0402C4.90257 17.0476 4.98612 17.0154 5.04208 17.0935C4.9684 17.086 4.88485 17.1179 4.82889 17.0402Z\" fill=\"#5B5B80\"/>\n<path d=\"M5.255 17.1466C5.32856 17.1541 5.4121 17.1218 5.4682 17.1999C5.39451 17.1923 5.3111 17.2243 5.255 17.1466Z\" fill=\"#5B5B80\"/>\n<path d=\"M4.40277 16.8273C4.47961 16.8273 4.53291 16.8628 4.56267 16.9339C4.48578 16.9336 4.43262 16.8979 4.40277 16.8273Z\" fill=\"#5B5B80\"/>\n<path d=\"M4.56265 16.9337C4.62115 16.9354 4.68417 16.9243 4.72255 16.987C4.66379 16.9858 4.60089 16.9962 4.56265 16.9337Z\" fill=\"#5B5B80\"/>\n<path d=\"M4.72229 16.9869C4.76626 16.9879 4.80597 16.9972 4.82889 17.0402C4.78505 17.039 4.74534 17.0297 4.72229 16.9869Z\" fill=\"#5B5B80\"/>\n<path d=\"M4.34949 16.7739L4.40279 16.8272L4.34949 16.7739Z\" fill=\"#5B5B80\"/>\n<path d=\"M4.40279 16.4014L4.34949 16.4547L4.40279 16.4014Z\" fill=\"#5B5B80\"/>\n<path d=\"M4.45607 16.3481L4.40277 16.4014L4.45607 16.3481Z\" fill=\"#5B5B80\"/>\n<path d=\"M4.50923 16.2952L4.45593 16.3485L4.50923 16.2952Z\" fill=\"#5B5B80\"/>\n<path d=\"M4.66899 16.2418L4.61569 16.2951L4.66899 16.2418Z\" fill=\"#5B5B80\"/>\n<path d=\"M4.77559 16.1888L4.72229 16.2421L4.77559 16.1888Z\" fill=\"#5B5B80\"/>\n<path d=\"M5.7343 15.976L5.681 16.0285L5.7343 15.976Z\" fill=\"#5B5B80\"/>\n<path d=\"M6.16042 15.9229L6.10712 15.9751L6.16042 15.9229Z\" fill=\"#5B5B80\"/>\n<path d=\"M9.41005 17.1467C9.73464 17.1334 10.0247 17.0081 10.3008 16.8536C10.4607 16.7636 10.4658 16.5883 10.3378 16.4501C10.2762 16.3835 10.1961 16.3482 10.1215 16.3019C10.0468 16.2557 9.9473 16.2641 9.8892 16.1875C9.91838 16.1483 9.95663 16.1326 10.0041 16.1459C10.1818 16.197 10.3515 16.2726 10.5084 16.3704C10.6698 16.4697 10.6873 16.6855 10.5548 16.826C10.5248 16.8576 10.4932 16.8946 10.4547 16.9102C10.1789 17.0213 9.91225 17.1587 9.61192 17.2001C9.45615 17.2217 9.30385 17.2714 9.14355 17.2534C9.17527 17.2039 9.22537 17.2001 9.2768 17.2001C9.32823 17.2001 9.3782 17.1959 9.41005 17.1467Z\" fill=\"#666286\"/>\n<path d=\"M5.84103 17.1998C5.83045 17.1857 5.81703 17.1739 5.80163 17.1652C5.78623 17.1566 5.7692 17.1513 5.75162 17.1496C5.43076 17.1272 5.13122 17.0233 4.83448 16.9085C4.75193 16.8751 4.67921 16.8213 4.62315 16.7521C4.54201 16.6563 4.5452 16.5656 4.63035 16.4682C4.70217 16.3855 4.79331 16.3365 4.89458 16.2969C5.22556 16.1679 5.57413 16.1116 5.91871 16.0354C5.96974 16.0242 6.02464 16.0296 6.07781 16.0288C6.19266 16.0272 6.30606 16.0288 6.41892 15.9903C6.48314 15.9681 6.55909 15.9762 6.62971 15.9761C7.09963 15.975 7.56963 15.975 8.03973 15.9761C8.12807 15.9761 8.21588 15.9733 8.30236 16.0042C8.35268 16.0211 8.40559 16.029 8.45866 16.0275C8.92675 16.0203 9.36153 16.171 9.79912 16.3073C9.84935 16.323 9.89532 16.3524 9.94355 16.3749C10.0936 16.4452 10.1098 16.4829 10.0999 16.6722C10.0998 16.6899 10.0956 16.7074 10.0877 16.7233C10.0797 16.7391 10.0681 16.7529 10.0539 16.7636C9.95461 16.8352 9.8724 16.9271 9.74235 16.9577C9.56274 17.0001 9.39591 17.0925 9.20657 17.1015C9.18498 17.1025 9.1646 17.1308 9.14368 17.1464C9.04707 17.1482 8.95074 17.1414 8.8564 17.178C8.80869 17.1963 8.75286 17.1945 8.7005 17.1989C8.66545 17.2019 8.62801 17.1927 8.59497 17.2014C8.30023 17.2786 7.99962 17.2456 7.70115 17.2547C7.64844 17.2561 7.59621 17.2651 7.54605 17.2814C7.43332 17.3184 7.31247 17.3273 7.20627 17.2973C6.99654 17.2379 6.78628 17.2603 6.57588 17.2536C6.43557 17.2492 6.297 17.2547 6.15709 17.2137C6.05849 17.1857 5.94683 17.2029 5.84103 17.1998Z\" fill=\"#4E4A74\"/>\n<path d=\"M7.35552 17.1468C7.1871 17.1468 7.01868 17.1478 6.85039 17.1468C6.68292 17.1474 6.51569 17.134 6.35045 17.1068C6.18749 17.0783 6.01653 17.0801 5.8545 17.0376C5.66689 16.9887 5.48141 16.9298 5.29766 16.8679C5.22038 16.8412 5.16615 16.7763 5.12364 16.709C5.05476 16.5998 5.097 16.4485 5.21785 16.3975C5.35576 16.3391 5.49767 16.2801 5.64291 16.2509C5.97029 16.1856 6.30128 16.1374 6.6312 16.0857C6.69196 16.0761 6.75512 16.082 6.81708 16.082C7.12727 16.082 7.43747 16.0808 7.74754 16.082C7.8973 16.082 8.04921 16.0656 8.19351 16.1261C8.21027 16.1321 8.22817 16.1343 8.24588 16.1323C8.52396 16.1116 8.78699 16.2015 9.05468 16.2493C9.19952 16.2752 9.34076 16.3418 9.47321 16.41C9.65523 16.5033 9.66802 16.6537 9.52251 16.794C9.47805 16.837 9.42396 16.8687 9.36475 16.8865C9.15449 16.9531 8.94835 17.0331 8.72397 17.0419C8.62656 17.0456 8.53329 17.0787 8.43975 17.0987C8.13235 17.1642 7.82349 17.1402 7.51502 17.1465C7.46132 17.1478 7.40869 17.1469 7.35552 17.1468Z\" fill=\"#3E3A67\"/>\n<path d=\"M7.37858 17.0379C6.86278 17.0546 6.40335 16.9837 5.94671 16.8823C5.79694 16.849 5.67795 16.7865 5.64597 16.6265C5.62732 16.5332 5.80107 16.3768 5.96217 16.3565C6.24079 16.3213 6.50968 16.2155 6.79629 16.2394C6.99323 16.1713 7.1975 16.1893 7.40003 16.1889C7.54087 16.1889 7.68145 16.1799 7.81936 16.2303C7.87479 16.2506 7.94181 16.2395 8.00364 16.2414C8.28541 16.248 8.56431 16.2996 8.82977 16.3943C8.8804 16.4127 8.93117 16.4273 8.96794 16.4678C9.01338 16.518 9.10119 16.5601 9.06601 16.6382C9.03243 16.7137 8.99286 16.7994 8.89279 16.8247C8.72237 16.8688 8.55328 16.918 8.38352 16.9645C8.35807 16.9714 8.33196 16.983 8.30651 16.9822C7.98099 16.9732 7.66119 17.0888 7.37858 17.0379Z\" fill=\"#312D5D\"/>\n<path d=\"M7.33539 16.8804C7.17616 16.8804 7.0168 16.8828 6.85744 16.8804C6.67089 16.8769 6.49341 16.8271 6.31419 16.7814C6.22505 16.7588 6.21386 16.6914 6.19627 16.6243C6.17641 16.548 6.23424 16.511 6.28421 16.4777C6.32765 16.4485 6.37815 16.4171 6.42798 16.4125C6.60307 16.3964 6.77056 16.3326 6.95124 16.3459C7.11018 16.3584 7.26986 16.3584 7.4288 16.3459C7.70488 16.3238 7.97298 16.3877 8.24493 16.406C8.36365 16.414 8.4516 16.4983 8.53194 16.5803C8.57378 16.6229 8.54714 16.7011 8.47865 16.7297C8.28264 16.8113 8.08131 16.8762 7.86651 16.88C7.68956 16.8829 7.51248 16.8804 7.33539 16.8804Z\" fill=\"#292557\"/>\n<path d=\"M7.3322 16.8166C7.14672 16.7245 6.93046 16.8221 6.73886 16.7267C6.68702 16.7008 6.64665 16.6784 6.64558 16.6154C6.64478 16.5545 6.67876 16.5197 6.72926 16.4924C6.78602 16.4619 6.84599 16.4544 6.90874 16.4546C7.1743 16.4546 7.44 16.4566 7.70556 16.4536C7.7883 16.4527 7.86079 16.4833 7.93647 16.5069C7.9959 16.5255 8.02269 16.5648 8.01935 16.625C8.01549 16.6956 7.97605 16.7481 7.91662 16.7637C7.89954 16.768 7.8821 16.7708 7.86452 16.7721C7.6893 16.7859 7.51009 16.7446 7.3322 16.8166Z\" fill=\"#231F52\"/>\n</svg>\n\n",
    91: "<svg viewBox=\"0 0 41 40\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n<g clip-path=\"url(#clip0)\">\n<path fill-rule=\"evenodd\" clip-rule=\"evenodd\" d=\"M28.2418 14.5282C27.1285 14.501 26.2323 13.6049 26.2052 12.4915C26.0694 5.56687 20.421 0 13.4693 0C6.43599 0 0.733337 5.70265 0.733337 12.7359V37.9633C0.733337 39.0767 1.62947 40 2.77 40H27.9974C35.0307 40 40.7333 34.2974 40.7333 27.2641C40.7333 20.3123 35.1665 14.664 28.2418 14.5282Z\" fill=\"#15130E\"/>\n<path fill-rule=\"evenodd\" clip-rule=\"evenodd\" d=\"M24.0599 27.1011C23.9784 27.8343 23.7883 27.9973 23.0551 27.9973H17.624V28.4318C17.624 29.8438 18.4387 30.4141 20.421 30.4141C21.2357 30.4141 22.0504 30.3055 22.9465 30.1154C23.5711 29.9525 23.7612 30.1154 23.7612 30.7943V31.0387C23.7612 31.6904 23.6525 31.8262 22.9465 31.9891C22.159 32.2064 21.3172 32.315 20.421 32.315C17.1352 32.315 15.6145 31.093 15.6145 28.133V26.4223C15.6145 23.5981 17.0537 22.186 19.9594 22.186C22.6749 22.186 24.087 23.5709 24.087 26.2322C24.087 26.558 24.087 26.8296 24.0599 27.1011ZM9.17866 22.2132C9.04289 22.2132 9.31444 22.2132 9.17866 22.2132C8.364 22.2132 7.27778 22.3489 6.70752 22.5933V19.3347C6.70752 18.6286 6.54458 18.4657 5.83854 18.4657H5.59414C4.8881 18.4657 4.72517 18.6286 4.72517 19.3347V28.1602C4.72517 30.9572 6.38165 32.3421 9.17866 32.3421C12.1658 32.3421 13.6593 30.9844 13.6593 28.1602V26.4766C13.6322 23.6252 11.8942 22.2132 9.17866 22.2132ZM11.6227 28.1059C11.6227 29.7352 11.1067 30.4413 9.17866 30.4413C7.25063 30.4413 6.70752 29.7352 6.70752 28.1059V26.4223C6.70752 24.7929 7.25062 24.0869 9.15151 24.0869H9.17866C11.0795 24.0869 11.6227 24.7929 11.6227 26.4223V28.1059ZM28.106 31.446C28.106 32.1521 27.9431 32.315 27.237 32.315H26.9926C26.2866 32.315 26.1237 32.1521 26.1237 31.446V25.9878C26.1237 23.4623 27.5358 22.2132 30.3871 22.2132C33.347 22.2132 34.6233 23.4895 34.6233 25.9878V31.446C34.6233 32.1521 34.4604 32.315 33.7544 32.315H33.51C32.8039 32.315 32.641 32.1521 32.641 31.446V25.9878C32.641 24.6571 32.1522 24.0869 30.4142 24.0869C28.6763 24.0869 28.1603 24.6843 28.1603 25.9878V31.446H28.106ZM17.624 26.3679H22.1047V26.0149C22.1047 24.7386 21.3715 24.0869 19.8508 24.0869C18.3844 24.0869 17.624 24.7386 17.624 26.0149V26.3679Z\" fill=\"white\"/>\n</g>\n<defs>\n<clipPath id=\"clip0\">\n<rect width=\"40\" height=\"40\" fill=\"white\" transform=\"translate(0.733337)\"/>\n</clipPath>\n</defs>\n</svg>\n",
    103: "<svg viewBox=\"0 0 35 18\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n<path d=\"M0.892853 10.305H3.47495L4.90946 3.15974H2.32735L0.892853 10.305ZM2.86529 2.51343H5.91361L6.41568 0H3.36737L2.86529 2.51343ZM4.47911 12.3158H7.06121L8.63916 4.59598H10.5757L10.8626 3.15974H8.96192L9.03365 2.83658C9.14123 2.22618 9.35641 1.54396 10.3247 1.54396C10.8985 1.54396 11.4364 1.57987 11.9744 1.83121L12.2613 0.323155C11.6516 0.107718 11.0061 0 10.3964 0C8.3164 0 6.88189 1.22081 6.34396 3.15974H5.44739L5.16049 4.59598H6.05706L4.47911 12.3158Z\" fill=\"#EA1D2C\"/>\n<path d=\"M12.8211 10.4169C15.8713 10.4169 17.9886 7.62213 17.9886 5.33549C17.9886 3.62959 16.4455 2.90367 14.9383 2.90367C11.601 2.90367 9.77085 5.91622 9.77085 7.98509C9.77085 9.69099 11.3498 10.4169 12.8211 10.4169ZM21.0029 10.4169C24.0532 10.4169 26.1704 7.62213 26.1704 5.33549C26.1704 3.62959 24.5914 2.90367 23.0843 2.90367C19.7469 2.90367 17.9168 5.91622 17.9168 7.98509C17.9168 9.69099 19.5316 10.4169 21.0029 10.4169ZM30.3689 10.2717H32.9168L34.9981 0H32.4144L31.8043 3.04885L30.7278 2.93996C28.2158 2.93996 25.9192 6.20659 25.9192 8.52953C25.9192 9.47322 26.5292 10.4169 27.5699 10.4169C29.0412 10.4169 30.0819 9.69099 30.5125 8.96508H30.656L30.3689 10.2717ZM22.4024 15.6798C20.3969 17.3604 17.8211 18.181 15.2254 17.9664C11.8163 17.7487 9.37612 15.0991 8.9455 12.3043H9.08904C9.87851 14.0465 11.7804 15.6798 14.113 15.9339C16.4814 16.2242 19.3163 15.1354 20.8594 13.6472L19.1369 12.3043H24.3402L23.1919 17.8939L22.4383 15.7161L22.4024 15.6798Z\" fill=\"#EA1D2C\"/>\n</svg>\n\n"
  }
};
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (iconsAdquirentes);

/***/ }),
/* 131 */
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
var illustrations = {
  receiptsNotFound: "<svg width=\"283\" height=\"250\" viewBox=\"0 0 283 250\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n<path d=\"M20.081 43.8374C8.114 144.264 124.317 241.69 214.226 169.553C254.817 136.988 283.937 32.8538 215.253 17.6019C175.863 8.86153 133.523 43.8229 95.9763 30.0641C77.9275 23.4579 68.6845 -2.53733 47.7077 0.201313C28.0128 2.81613 22.0767 27.0997 20.081 43.8374Z\" fill=\"#40B7B9\"/>\n<path opacity=\"0.9\" d=\"M20.081 43.8374C8.114 144.264 124.317 241.69 214.226 169.553C254.817 136.988 283.937 32.8538 215.253 17.6019C175.863 8.86153 133.523 43.8229 95.9763 30.0641C77.9275 23.4579 68.6845 -2.53733 47.7077 0.201313C28.0128 2.81613 22.0767 27.0997 20.081 43.8374Z\" fill=\"#F2F5F7\"/>\n<path d=\"M141.222 250C219.217 250 282.444 246.309 282.444 241.755C282.444 237.201 219.217 233.51 141.222 233.51C63.2272 233.51 0 237.201 0 241.755C0 246.309 63.2272 250 141.222 250Z\" fill=\"#F2F5F7\"/>\n<path d=\"M264.898 44.7914H193.446C189.677 44.7914 186.621 47.8469 186.621 51.6161V71.0488C186.621 74.818 189.677 77.8736 193.446 77.8736H264.898C268.667 77.8736 271.723 74.818 271.723 71.0488V51.6161C271.723 47.8469 268.667 44.7914 264.898 44.7914Z\" fill=\"#40B7B9\"/>\n<path d=\"M250.724 50.3707H194.909C194.25 50.3707 193.715 50.9055 193.715 51.5652V52.8763C193.715 53.536 194.25 54.0708 194.909 54.0708H250.724C251.383 54.0708 251.918 53.536 251.918 52.8763V51.5652C251.918 50.9055 251.383 50.3707 250.724 50.3707Z\" fill=\"#40B7B9\"/>\n<path d=\"M233.046 59.286H194.909C194.25 59.286 193.715 59.8208 193.715 60.4805V61.7916C193.715 62.4513 194.25 62.9861 194.909 62.9861H233.046C233.706 62.9861 234.241 62.4513 234.241 61.7916V60.4805C234.241 59.8208 233.706 59.286 233.046 59.286Z\" fill=\"#40B7B9\"/>\n<path d=\"M222.82 68.201H194.909C194.25 68.201 193.715 68.7359 193.715 69.3956V70.7066C193.715 71.3663 194.25 71.9011 194.909 71.9011H222.82C223.48 71.9011 224.015 71.3663 224.015 70.7066V69.3956C224.015 68.7359 223.48 68.201 222.82 68.201Z\" fill=\"#40B7B9\"/>\n<path d=\"M257.41 68.201H229.499C228.839 68.201 228.305 68.7359 228.305 69.3956V70.7066C228.305 71.3663 228.839 71.9011 229.499 71.9011H257.41C258.07 71.9011 258.605 71.3663 258.605 70.7066V69.3956C258.605 68.7359 258.07 68.201 257.41 68.201Z\" fill=\"#40B7B9\"/>\n<g opacity=\"0.5\">\n<path opacity=\"0.5\" d=\"M250.724 50.3707H194.909C194.25 50.3707 193.715 50.9055 193.715 51.5652V52.8763C193.715 53.536 194.25 54.0708 194.909 54.0708H250.724C251.383 54.0708 251.918 53.536 251.918 52.8763V51.5652C251.918 50.9055 251.383 50.3707 250.724 50.3707Z\" fill=\"white\"/>\n<path opacity=\"0.5\" d=\"M233.046 59.2861H194.909C194.25 59.2861 193.715 59.8209 193.715 60.4806V61.7917C193.715 62.4514 194.25 62.9862 194.909 62.9862H233.046C233.706 62.9862 234.241 62.4514 234.241 61.7917V60.4806C234.241 59.8209 233.706 59.2861 233.046 59.2861Z\" fill=\"white\"/>\n<path opacity=\"0.5\" d=\"M222.82 68.2012H194.909C194.25 68.2012 193.715 68.736 193.715 69.3957V70.7067C193.715 71.3664 194.25 71.9012 194.909 71.9012H222.82C223.48 71.9012 224.015 71.3664 224.015 70.7067V69.3957C224.015 68.736 223.48 68.2012 222.82 68.2012Z\" fill=\"white\"/>\n<path opacity=\"0.5\" d=\"M257.41 68.2012H229.499C228.839 68.2012 228.305 68.736 228.305 69.3957V70.7067C228.305 71.3664 228.839 71.9012 229.499 71.9012H257.41C258.07 71.9012 258.605 71.3664 258.605 70.7067V69.3957C258.605 68.736 258.07 68.2012 257.41 68.2012Z\" fill=\"white\"/>\n</g>\n<path d=\"M207.663 37.0781H126.56C121.033 37.0781 116.553 41.5587 116.553 47.0858V75.5793C116.553 81.1064 121.033 85.587 126.56 85.587H207.663C213.191 85.587 217.671 81.1064 217.671 75.5793V47.0858C217.671 41.5587 213.191 37.0781 207.663 37.0781Z\" fill=\"#40B7B9\"/>\n<path d=\"M210.533 45.2577H128.708C127.739 45.2577 126.953 46.0436 126.953 47.013V48.9286C126.953 49.8981 127.739 50.684 128.708 50.684H210.533C211.502 50.684 212.288 49.8981 212.288 48.9286V47.013C212.288 46.0436 211.502 45.2577 210.533 45.2577Z\" fill=\"#40B7B9\"/>\n<path d=\"M184.61 58.3319H128.708C127.739 58.3319 126.953 59.1178 126.953 60.0873V62.0028C126.953 62.9723 127.739 63.7582 128.708 63.7582H184.61C185.58 63.7582 186.366 62.9723 186.366 62.0028V60.0873C186.366 59.1178 185.58 58.3319 184.61 58.3319Z\" fill=\"#40B7B9\"/>\n<path d=\"M169.621 71.4058H128.708C127.739 71.4058 126.953 72.1917 126.953 73.1611V75.0767C126.953 76.0462 127.739 76.8321 128.708 76.8321H169.621C170.59 76.8321 171.376 76.0462 171.376 75.0767V73.1611C171.376 72.1917 170.59 71.4058 169.621 71.4058Z\" fill=\"#40B7B9\"/>\n<path d=\"M213.511 71.4058H179.423C178.454 71.4058 177.668 72.1917 177.668 73.1611V75.0767C177.668 76.0462 178.454 76.8321 179.423 76.8321H213.511C214.48 76.8321 215.266 76.0462 215.266 75.0767V73.1611C215.266 72.1917 214.48 71.4058 213.511 71.4058Z\" fill=\"#40B7B9\"/>\n<g opacity=\"0.5\">\n<path opacity=\"0.5\" d=\"M210.533 45.2577H128.708C127.739 45.2577 126.953 46.0436 126.953 47.013V48.9286C126.953 49.8981 127.739 50.684 128.708 50.684H210.533C211.502 50.684 212.288 49.8981 212.288 48.9286V47.013C212.288 46.0436 211.502 45.2577 210.533 45.2577Z\" fill=\"white\"/>\n<path opacity=\"0.5\" d=\"M184.61 58.3318H128.708C127.739 58.3318 126.953 59.1177 126.953 60.0871V62.0027C126.953 62.9722 127.739 63.7581 128.708 63.7581H184.61C185.58 63.7581 186.366 62.9722 186.366 62.0027V60.0871C186.366 59.1177 185.58 58.3318 184.61 58.3318Z\" fill=\"white\"/>\n<path opacity=\"0.5\" d=\"M169.621 71.4056H128.708C127.739 71.4056 126.953 72.1915 126.953 73.161V75.0766C126.953 76.046 127.739 76.8319 128.708 76.8319H169.621C170.59 76.8319 171.376 76.046 171.376 75.0766V73.161C171.376 72.1915 170.59 71.4056 169.621 71.4056Z\" fill=\"white\"/>\n<path opacity=\"0.5\" d=\"M213.513 71.4056H179.425C178.456 71.4056 177.67 72.1915 177.67 73.161V75.0766C177.67 76.046 178.456 76.8319 179.425 76.8319H213.513C214.482 76.8319 215.268 76.046 215.268 75.0766V73.161C215.268 72.1915 214.482 71.4056 213.513 71.4056Z\" fill=\"white\"/>\n</g>\n<path d=\"M157.238 94.3783H118.176C115.594 94.3783 113.5 96.4719 113.5 99.0544V157.571C113.5 160.153 115.594 162.247 118.176 162.247H157.238C159.821 162.247 161.914 160.153 161.914 157.571V99.0544C161.914 96.4719 159.821 94.3783 157.238 94.3783Z\" fill=\"#003A60\"/>\n<path d=\"M155.447 101.458H119.961C119.486 101.458 119.102 101.843 119.102 102.318V103.607C119.102 104.081 119.486 104.466 119.961 104.466H155.447C155.921 104.466 156.306 104.081 156.306 103.607V102.318C156.306 101.843 155.921 101.458 155.447 101.458Z\" fill=\"#FAFAFA\"/>\n<path d=\"M144.15 108.698H119.961C119.486 108.698 119.102 109.083 119.102 109.557V110.847C119.102 111.321 119.486 111.706 119.961 111.706H144.15C144.625 111.706 145.009 111.321 145.009 110.847V109.557C145.009 109.083 144.625 108.698 144.15 108.698Z\" fill=\"#FAFAFA\"/>\n<path d=\"M155.447 115.945H119.961C119.486 115.945 119.102 116.33 119.102 116.804V118.094C119.102 118.568 119.486 118.953 119.961 118.953H155.447C155.921 118.953 156.306 118.568 156.306 118.094V116.804C156.306 116.33 155.921 115.945 155.447 115.945Z\" fill=\"#FAFAFA\"/>\n<path d=\"M133.152 123.185H119.961C119.486 123.185 119.102 123.57 119.102 124.045V125.334C119.102 125.809 119.486 126.193 119.961 126.193H133.152C133.626 126.193 134.011 125.809 134.011 125.334V124.045C134.011 123.57 133.626 123.185 133.152 123.185Z\" fill=\"#FAFAFA\"/>\n<path d=\"M151.609 123.185H138.418C137.943 123.185 137.559 123.57 137.559 124.045V125.334C137.559 125.809 137.943 126.193 138.418 126.193H151.609C152.083 126.193 152.468 125.809 152.468 125.334V124.045C152.468 123.57 152.083 123.185 151.609 123.185Z\" fill=\"#FAFAFA\"/>\n<path d=\"M155.447 130.432H119.961C119.486 130.432 119.102 130.817 119.102 131.292V132.581C119.102 133.055 119.486 133.44 119.961 133.44H155.447C155.921 133.44 156.306 133.055 156.306 132.581V131.292C156.306 130.817 155.921 130.432 155.447 130.432Z\" fill=\"#FAFAFA\"/>\n<path d=\"M155.447 137.672H119.961C119.486 137.672 119.102 138.057 119.102 138.531V139.821C119.102 140.295 119.486 140.68 119.961 140.68H155.447C155.921 140.68 156.306 140.295 156.306 139.821V138.531C156.306 138.057 155.921 137.672 155.447 137.672Z\" fill=\"#FAFAFA\"/>\n<path d=\"M149.154 144.919H119.961C119.486 144.919 119.102 145.304 119.102 145.779V147.068C119.102 147.543 119.486 147.928 119.961 147.928H149.154C149.628 147.928 150.013 147.543 150.013 147.068V145.779C150.013 145.304 149.628 144.919 149.154 144.919Z\" fill=\"#FAFAFA\"/>\n<path d=\"M133.581 152.159H119.961C119.486 152.159 119.102 152.544 119.102 153.019V154.308C119.102 154.783 119.486 155.167 119.961 155.167H133.581C134.056 155.167 134.441 154.783 134.441 154.308V153.019C134.441 152.544 134.056 152.159 133.581 152.159Z\" fill=\"#FAFAFA\"/>\n<path d=\"M167.806 93.9633H113.623L137.579 113.024L174.31 126.863V100.453C174.306 98.7304 173.619 97.0798 172.4 95.8632C171.181 94.6465 169.528 93.9633 167.806 93.9633Z\" fill=\"#003A60\"/>\n<path d=\"M165.439 103.781H125.795C125.199 103.781 124.717 104.264 124.717 104.859V106.87C124.717 107.465 125.199 107.948 125.795 107.948H165.439C166.035 107.948 166.517 107.465 166.517 106.87V104.859C166.517 104.264 166.035 103.781 165.439 103.781Z\" fill=\"#FAFAFA\"/>\n<path d=\"M261.51 145.56V107.452C261.51 104.532 259.142 102.164 256.222 102.164H190.05C187.13 102.164 184.762 104.532 184.762 107.452V145.56C184.762 148.481 187.13 150.848 190.05 150.848H256.222C259.142 150.848 261.51 148.481 261.51 145.56Z\" fill=\"#40B7B9\"/>\n<path d=\"M273.594 133.484V95.376C273.594 92.4556 271.226 90.0881 268.306 90.0881H202.134C199.214 90.0881 196.846 92.4556 196.846 95.376V133.484C196.846 136.404 199.214 138.772 202.134 138.772H268.306C271.226 138.772 273.594 136.404 273.594 133.484Z\" fill=\"#40B7B9\"/>\n<path opacity=\"0.5\" d=\"M273.594 133.484V95.376C273.594 92.4556 271.226 90.0881 268.306 90.0881H202.134C199.214 90.0881 196.846 92.4556 196.846 95.376V133.484C196.846 136.404 199.214 138.772 202.134 138.772H268.306C271.226 138.772 273.594 136.404 273.594 133.484Z\" fill=\"white\"/>\n<path d=\"M266.879 120.425V96.9642C266.879 95.6649 265.826 94.6116 264.526 94.6116H242.901C241.602 94.6116 240.549 95.6649 240.549 96.9642V120.425C240.549 121.724 241.602 122.777 242.901 122.777H264.526C265.826 122.777 266.879 121.724 266.879 120.425Z\" fill=\"#40B7B9\"/>\n<path opacity=\"0.7\" d=\"M266.879 120.425V96.9642C266.879 95.6649 265.826 94.6116 264.526 94.6116H242.901C241.602 94.6116 240.549 95.6649 240.549 96.9642V120.425C240.549 121.724 241.602 122.777 242.901 122.777H264.526C265.826 122.777 266.879 121.724 266.879 120.425Z\" fill=\"white\"/>\n<path d=\"M236.426 131.773V113.797C236.426 112.799 235.617 111.99 234.619 111.99H218.049C217.052 111.99 216.243 112.799 216.243 113.797V131.773C216.243 132.77 217.052 133.579 218.049 133.579H234.619C235.617 133.579 236.426 132.77 236.426 131.773Z\" fill=\"#40B7B9\"/>\n<path opacity=\"0.3\" d=\"M236.426 131.773V113.797C236.426 112.799 235.617 111.99 234.619 111.99H218.049C217.052 111.99 216.243 112.799 216.243 113.797V131.773C216.243 132.77 217.052 133.579 218.049 133.579H234.619C235.617 133.579 236.426 132.77 236.426 131.773Z\" fill=\"white\"/>\n<path d=\"M54.0799 80.0731C53.439 81.5298 52.7325 83.1031 52.1133 84.6399C51.4942 86.1767 50.8533 87.7573 50.2924 89.3306C49.1417 92.3976 48.219 95.5453 47.5319 98.7483L47.3207 99.9136L47.2479 100.351C47.2479 100.474 47.2479 100.635 47.2042 100.78C47.1765 101.49 47.1911 102.2 47.2479 102.907C47.3863 104.444 47.6339 106.09 47.9763 107.736C48.5881 111.036 49.3674 114.437 50.1613 117.788L46.4248 119.244C44.6831 116.069 43.1997 112.759 41.9891 109.346C41.3513 107.57 40.8354 105.752 40.445 103.905C40.2262 102.883 40.0898 101.846 40.0371 100.802C40.0371 100.511 40.0371 100.234 40.0371 99.9209C40.0371 99.6077 40.0371 99.2581 40.0881 99.0542L40.2338 97.5975C40.4514 95.7214 40.7847 93.8605 41.2316 92.0255C41.6395 90.2046 42.1639 88.4347 42.6883 86.6866C43.2128 84.9385 43.8683 83.2196 44.5602 81.5298C44.9026 80.6849 45.2886 79.8473 45.6236 79.0097C45.9587 78.1721 46.352 77.3709 46.8182 76.475L54.0799 80.0731Z\" fill=\"#7F3E3B\"/>\n<path d=\"M49.9658 116.804L52.8064 119.579L46.6081 122.493C46.6081 122.493 45.1077 119.864 46.1492 117.489L49.9658 116.804Z\" fill=\"#E4897B\"/>\n<path d=\"M55.1006 123.709L49.8637 125.851L46.6152 122.464L52.8063 119.58L55.1006 123.709Z\" fill=\"#E4897B\"/>\n<path opacity=\"0.4\" d=\"M161.186 120.723C150.881 119.566 141.149 115.379 133.223 108.692C125.296 102.006 119.53 93.1186 116.654 83.1552C113.777 73.1918 113.919 62.5991 117.062 52.7164C120.204 42.8336 126.207 34.1045 134.309 27.6325C142.412 21.1605 152.252 17.2362 162.585 16.3558C172.918 15.4753 183.28 17.6782 192.361 22.686C201.443 27.6937 208.835 35.2815 213.605 44.4901C218.374 53.6987 220.306 64.1146 219.157 74.4211C218.393 81.2687 216.287 87.8987 212.96 93.9322C209.633 99.9657 205.15 105.284 199.766 109.584C194.382 113.884 188.204 117.081 181.584 118.993C174.965 120.904 168.033 121.492 161.186 120.723Z\" fill=\"#FAFAFA\"/>\n<path opacity=\"0.4\" d=\"M199.337 27.2889L119.582 91.0132C119.247 90.2849 118.919 89.5565 118.613 88.8281C116.614 84.0722 115.335 79.0446 114.818 73.9113L183.707 18.869C189.363 20.7556 194.65 23.604 199.337 27.2889Z\" fill=\"#FAFAFA\"/>\n<path opacity=\"0.4\" d=\"M217.743 55.2069L142.758 115.115C135.635 111.401 129.461 106.098 124.717 99.6152L206.592 34.1937C211.87 40.2515 215.685 47.4408 217.743 55.2069Z\" fill=\"#FAFAFA\"/>\n<path d=\"M108.001 48.5643L107.309 48.3312C108.507 44.795 110.013 41.3708 111.81 38.0978L112.444 38.4474C110.671 41.6838 109.184 45.069 108.001 48.5643ZM116.843 31.5644L116.253 31.1346C122.239 23.041 130.073 16.4956 139.102 12.0443L139.429 12.6998C130.503 17.1052 122.759 23.5806 116.843 31.5862V31.5644ZM196.664 13.6976C194.284 12.421 191.821 11.3041 189.293 10.3545L189.555 9.6698C192.108 10.6418 194.595 11.7805 196.999 13.0785L196.664 13.6976Z\" fill=\"#40B7B9\"/>\n<path opacity=\"0.3\" d=\"M108.001 48.5643L107.309 48.3312C108.507 44.795 110.013 41.3708 111.81 38.0978L112.444 38.4474C110.671 41.6838 109.184 45.069 108.001 48.5643ZM116.843 31.5644L116.253 31.1346C122.239 23.041 130.073 16.4956 139.102 12.0443L139.429 12.6998C130.503 17.1052 122.759 23.5806 116.843 31.5862V31.5644ZM196.664 13.6976C194.284 12.421 191.821 11.3041 189.293 10.3545L189.555 9.6698C192.108 10.6418 194.595 11.7805 196.999 13.0785L196.664 13.6976Z\" fill=\"black\"/>\n<path d=\"M221.246 41.8196C214.502 27.8316 202.633 16.9754 188.101 11.5016C173.569 6.02775 157.488 6.35606 143.191 12.4185C128.894 18.4809 117.478 29.8124 111.311 44.064C105.143 58.3156 104.696 74.3941 110.062 88.9664C105.197 90.6708 100.389 92.499 95.6113 94.3854C88.721 97.1192 81.8938 99.9744 75.1298 102.951C68.3706 105.945 61.6405 108.996 54.976 112.187C51.6328 113.753 48.3334 115.406 45.0048 117.008C43.2732 117.752 41.7043 118.829 40.3869 120.177C39.6741 120.923 39.0463 121.746 38.5151 122.631C37.8669 123.678 37.3761 124.814 37.0583 126.004C36.5103 128.147 36.7473 130.416 37.7265 132.4C38.7057 134.383 40.3625 135.951 42.3972 136.82C43.5271 137.294 44.7193 137.603 45.9371 137.737C46.9656 137.854 48.004 137.854 49.0326 137.737C50.9018 137.511 52.7082 136.919 54.3496 135.997C57.6491 134.329 60.9704 132.719 64.2481 131.007C70.8033 127.664 77.3586 124.175 83.8337 120.636C90.3089 117.096 96.7913 113.388 103.113 109.586C107.484 106.942 111.897 104.24 116.224 101.414C124.532 114.529 137.567 123.946 152.629 127.712C167.69 131.478 183.623 129.306 197.126 121.644C210.63 113.983 220.668 101.42 225.161 86.5596C229.654 71.6987 228.258 55.6789 221.261 41.8196H221.246ZM188.135 111.4C179.671 115.578 170.157 117.152 160.798 115.924C151.439 114.696 142.654 110.72 135.554 104.499C128.455 98.2777 123.359 90.0913 120.912 80.9746C118.464 71.8578 118.775 62.2201 121.805 53.28C124.835 44.34 130.448 36.4991 137.934 30.7489C145.42 24.9986 154.443 21.5972 163.862 20.9747C173.281 20.3522 182.673 22.5366 190.85 27.2517C199.028 31.9668 205.624 39.0008 209.804 47.4644C212.58 53.0851 214.221 59.1976 214.635 65.4529C215.048 71.7081 214.225 77.9835 212.213 83.9206C210.201 89.8578 207.039 95.3404 202.908 100.055C198.776 104.77 193.756 108.625 188.135 111.4Z\" fill=\"#008488\"/>\n<path d=\"M74.2129 54.0634C74.2129 54.4931 74.4387 54.8428 74.7227 54.8428C75.0068 54.8428 75.2326 54.4931 75.2326 54.0634C75.2326 53.6337 75.0068 53.2841 74.7227 53.2841C74.4387 53.2841 74.2129 53.6628 74.2129 54.0634Z\" fill=\"#263238\"/>\n<path d=\"M74.416 54.8425C74.9316 56.1617 75.6251 57.4041 76.4773 58.5353C76.1826 58.7461 75.8455 58.8899 75.4894 58.9566C75.1333 59.0232 74.767 59.0112 74.416 58.9214V54.8425Z\" fill=\"#630F0F\"/>\n<path d=\"M72.7041 51.6669C72.6635 51.6669 72.6234 51.6577 72.5869 51.6401C72.5503 51.6224 72.5182 51.5967 72.4929 51.5649C72.455 51.5093 72.4398 51.4413 72.4507 51.3748C72.4615 51.3084 72.4975 51.2487 72.5512 51.208C72.872 50.9647 73.2468 50.8026 73.6437 50.7354C74.0407 50.6682 74.448 50.6979 74.831 50.822C74.8654 50.8314 74.8974 50.8478 74.925 50.8704C74.9527 50.8929 74.9753 50.921 74.9914 50.9528C75.0075 50.9846 75.0167 51.0194 75.0186 51.055C75.0204 51.0906 75.0147 51.1262 75.0019 51.1595C74.9891 51.1927 74.9695 51.223 74.9443 51.2482C74.9191 51.2734 74.8888 51.293 74.8556 51.3058C74.8223 51.3187 74.7867 51.3243 74.7511 51.3225C74.7155 51.3208 74.6807 51.3115 74.6489 51.2954C74.3447 51.2021 74.0225 51.1832 73.7094 51.2402C73.3964 51.2973 73.1016 51.4286 72.8498 51.6232C72.8067 51.6518 72.756 51.667 72.7041 51.6669Z\" fill=\"#263238\"/>\n<path d=\"M59.5001 57.3046C60.2285 61.2159 61.0297 68.3902 58.291 71.005C58.291 71.005 59.3617 74.9746 66.638 74.9746C74.65 74.9746 70.4546 71.005 70.4546 71.005C66.0845 69.9562 66.2083 66.7223 66.9658 63.6777L59.5001 57.3046Z\" fill=\"#7F3E3B\"/>\n<path d=\"M55.0197 73.0664C55.8864 71.719 54.4297 68.4486 54.4297 68.4486C54.4297 68.4486 67.3071 65.2074 72.5732 70.1821C73.6657 71.2091 72.4566 72.7241 72.4566 72.7241L55.0197 73.0664Z\" fill=\"#40B7B9\"/>\n<path opacity=\"0.1\" d=\"M55.0197 73.0664C55.8864 71.719 54.4297 68.4486 54.4297 68.4486C54.4297 68.4486 67.3071 65.2074 72.5732 70.1821C73.6657 71.2091 72.4566 72.7241 72.4566 72.7241L55.0197 73.0664Z\" fill=\"black\"/>\n<path d=\"M33.7156 221.674C33.0382 221.674 31.9529 220.545 31.6325 220.122C31.6187 220.102 31.6113 220.078 31.6113 220.053C31.6113 220.029 31.6187 220.004 31.6325 219.984C31.6442 219.964 31.6612 219.947 31.6818 219.935C31.7023 219.924 31.7255 219.918 31.749 219.918C31.8291 219.918 33.6136 220.079 34.1016 220.712C34.1547 220.779 34.1926 220.857 34.2127 220.94C34.2328 221.023 34.2347 221.109 34.2181 221.193C34.2118 221.302 34.172 221.405 34.1041 221.49C34.0363 221.575 33.9438 221.637 33.8394 221.667L33.7156 221.674ZM32.0258 220.217C32.5575 220.829 33.4097 221.521 33.7739 221.433C33.7739 221.433 33.9195 221.397 33.9632 221.164C33.9728 221.115 33.9712 221.065 33.9586 221.017C33.946 220.969 33.9227 220.925 33.8904 220.887C33.3508 220.479 32.7016 220.24 32.0258 220.203V220.217Z\" fill=\"#40B7B9\"/>\n<path d=\"M32.1066 220.203C31.9758 220.216 31.844 220.216 31.7133 220.203C31.6902 220.201 31.6682 220.192 31.6501 220.178C31.6319 220.164 31.6184 220.144 31.6113 220.122C31.601 220.102 31.5957 220.08 31.5957 220.057C31.5957 220.034 31.601 220.012 31.6113 219.991C31.6623 219.948 32.733 218.833 33.5414 218.833C33.6382 218.831 33.7343 218.849 33.8234 218.887C33.9126 218.925 33.9927 218.981 34.0586 219.052C34.1311 219.112 34.1807 219.196 34.1993 219.289C34.2178 219.381 34.2041 219.478 34.1605 219.562C33.9493 219.969 32.8349 220.203 32.1066 220.203ZM32.0119 219.948C32.7402 219.948 33.7964 219.722 33.9712 219.401C33.9712 219.401 34.0222 219.307 33.9056 219.19C33.8632 219.144 33.8113 219.108 33.7534 219.084C33.6955 219.06 33.6331 219.049 33.5706 219.052C32.9735 219.189 32.4308 219.501 32.0119 219.948Z\" fill=\"#40B7B9\"/>\n<path d=\"M81.7796 238.208C81.2275 238.204 80.6768 238.153 80.1335 238.055C80.1065 238.05 80.0822 238.035 80.0649 238.014C80.0475 237.993 80.0383 237.966 80.0388 237.938C80.0347 237.913 80.0381 237.887 80.0484 237.864C80.0588 237.841 80.0757 237.821 80.0971 237.807C80.1772 237.763 82.0418 236.693 82.9377 236.94C83.0207 236.959 83.0991 236.995 83.168 237.045C83.2369 237.095 83.2948 237.159 83.3383 237.232C83.3953 237.313 83.426 237.409 83.426 237.509C83.426 237.608 83.3953 237.704 83.3383 237.785C83.1271 238.113 82.4642 238.208 81.7796 238.208ZM80.5486 237.865C81.5392 238.011 82.894 238.004 83.1416 237.654C83.178 237.611 83.2072 237.53 83.1416 237.377C83.086 237.287 82.9971 237.221 82.894 237.195C82.3259 237.05 81.1969 237.53 80.5486 237.865Z\" fill=\"#40B7B9\"/>\n<path d=\"M80.1638 238.062C80.14 238.069 80.1147 238.069 80.0909 238.062C80.0707 238.049 80.055 238.03 80.0459 238.008C80.0368 237.986 80.0347 237.961 80.04 237.938C80.0893 237.18 80.3803 236.458 80.8703 235.877C80.9694 235.791 81.0857 235.728 81.2114 235.692C81.3371 235.655 81.4692 235.646 81.5986 235.666C81.9483 235.666 82.0502 235.877 82.0721 236.015C82.1668 236.62 80.8921 237.778 80.2439 238.069L80.1638 238.062ZM81.4675 235.877C81.3073 235.876 81.152 235.933 81.0305 236.037C80.6187 236.497 80.3636 237.076 80.3022 237.69C80.9577 237.29 81.8317 236.387 81.7589 236.023C81.7589 236.023 81.7589 235.899 81.5112 235.877H81.4675Z\" fill=\"#40B7B9\"/>\n<path d=\"M74.2773 237.931H79.6308L80.1625 225.542H74.8091L74.2773 237.931Z\" fill=\"#7F3E3B\"/>\n<path d=\"M26.6074 216.663L31.0796 219.591L40.9561 211.251L36.4767 208.316L26.6074 216.663Z\" fill=\"#7F3E3B\"/>\n<path d=\"M31.8146 219.314L27.1676 215.505C27.0855 215.437 26.9826 215.4 26.8763 215.4C26.77 215.4 26.6671 215.437 26.585 215.505L22.7538 218.513C22.6612 218.586 22.5865 218.68 22.5351 218.787C22.4837 218.893 22.457 219.01 22.457 219.128C22.457 219.247 22.4837 219.363 22.5351 219.47C22.5865 219.576 22.6612 219.67 22.7538 219.744C24.3999 221.047 25.2666 221.601 27.3133 223.276C28.5734 224.303 31.6835 227.45 33.4388 228.87C35.1942 230.29 36.8039 228.761 36.2212 228.025C33.6064 224.711 32.5794 221.878 32.2807 220.122C32.2291 219.805 32.0634 219.518 31.8146 219.314Z\" fill=\"#003A60\"/>\n<path d=\"M79.5942 237.312H73.7673C73.661 237.312 73.558 237.349 73.4748 237.415C73.3915 237.481 73.3329 237.573 73.3084 237.676L72.2523 242.432C72.2258 242.548 72.2258 242.667 72.2524 242.783C72.279 242.898 72.3315 243.006 72.4059 243.098C72.4803 243.189 72.5747 243.263 72.6818 243.313C72.789 243.363 72.9061 243.388 73.0244 243.387C75.1293 243.35 78.1739 243.226 80.8251 243.226C83.9207 243.226 86.601 243.394 90.2283 243.394C92.4134 243.394 93.0397 241.172 92.1147 240.976C87.9339 240.058 84.5106 239.963 80.8979 237.727C80.5103 237.47 80.0589 237.327 79.5942 237.312Z\" fill=\"#003A60\"/>\n<path d=\"M47.7446 72.6001C43.1049 74.7852 40.4609 89.4252 40.4609 89.4252L51.8015 93.9484C53.4615 89.8951 54.8033 85.7186 55.8148 81.457C57.3735 74.7123 52.4935 70.3422 47.7446 72.6001Z\" fill=\"#003A60\"/>\n<path d=\"M53.7602 80.8526C50.956 83.6932 49.6741 89.2579 49.1133 92.8778L51.8301 93.9631C53.4429 90.0249 54.7576 85.971 55.7632 81.8359C55.5229 80.2917 54.9256 79.6726 53.7602 80.8526Z\" fill=\"#203048\"/>\n<path d=\"M78.685 72.4981C78.685 72.4981 84.3808 78.9368 79.0054 118.749H50.3881C50.1915 114.379 52.952 92.9286 48.7129 72.2286C51.8755 71.6154 55.0751 71.2115 58.2908 71.0195C62.3418 70.779 66.4035 70.779 70.4545 71.0195C73.232 71.299 75.9838 71.7934 78.685 72.4981Z\" fill=\"#003A60\"/>\n<path d=\"M81.2996 87.954L76.4779 79.6434C75.5471 83.521 75.167 87.5103 75.3489 91.4939C75.48 94.3491 78.0948 104.925 80.4474 106.469C81.0717 100.318 81.3562 94.1367 81.2996 87.954Z\" fill=\"#203048\"/>\n<path d=\"M81.9693 78.1866C82.6977 81.7265 83.4261 85.3537 84.2054 88.9081C84.9848 92.4625 85.7932 96.0315 86.7328 99.4766C86.9732 100.329 87.199 101.203 87.4612 102.019L87.6578 102.645L87.7525 102.958V102.922C87.7015 102.856 87.6433 102.849 87.687 102.922C87.9863 103.249 88.369 103.488 88.7941 103.614C89.4826 103.87 90.1917 104.067 90.9136 104.204C94.3572 104.749 97.8439 104.976 101.329 104.881L102.021 108.843C101.045 109.157 100.135 109.382 99.1732 109.608C98.2118 109.834 97.2649 110.023 96.2962 110.169C94.292 110.503 92.2598 110.639 90.229 110.577C89.1001 110.546 87.9774 110.4 86.8785 110.14C85.4812 109.834 84.1683 109.225 83.0327 108.355C82.2911 107.757 81.679 107.013 81.2337 106.17C81.1172 105.952 81.0152 105.704 80.9205 105.493L80.7894 105.151L80.5199 104.422C80.1484 103.497 79.8425 102.587 79.5075 101.676C78.2765 98.0345 77.2495 94.3563 76.3464 90.6853C75.4432 87.0144 74.6639 83.3507 74.0156 79.5851L81.9693 78.1866Z\" fill=\"#7F3E3B\"/>\n<path d=\"M71.54 76.4022C70.0323 81.2895 76.1433 95.864 76.1433 95.864L88.3142 92.8049C88.3142 92.8049 87.8481 85.2299 85.073 79.221C80.8922 70.1602 73.3464 70.5389 71.54 76.4022Z\" fill=\"#003A60\"/>\n<path d=\"M101.228 104.881L107.288 104.728L104.374 111.036C104.374 111.036 101.905 111.364 99.8802 108.035L97.7461 105.486L100.201 104.998C100.539 104.927 100.882 104.887 101.228 104.881Z\" fill=\"#7F3E3B\"/>\n<path d=\"M111.112 105.901L107.645 111.13L104.375 111.036L107.288 104.728L111.112 105.901Z\" fill=\"#7F3E3B\"/>\n<path d=\"M80.1634 225.542L79.8867 231.929H74.5332L74.81 225.542H80.1634Z\" fill=\"#5F2B29\"/>\n<path d=\"M36.476 208.316L40.9554 211.251L35.8569 215.549L31.3848 212.621L36.476 208.316Z\" fill=\"#5F2B29\"/>\n<path d=\"M59.8351 53.1383C60.1555 58.4335 60.0754 61.5582 62.7485 64.275C66.7691 68.3757 73.317 65.9502 74.5844 60.6332C75.7279 55.8697 75.0141 48.0034 69.8282 45.8911C68.6839 45.4293 67.4411 45.2657 66.2162 45.4158C64.9914 45.5658 63.8248 46.0246 62.8259 46.749C61.827 47.4735 61.0285 48.4398 60.5053 49.5574C59.9822 50.675 59.7515 51.9072 59.8351 53.1383Z\" fill=\"#7F3E3B\"/>\n<path d=\"M53.6006 52.2059C54.9189 57.0349 58.0217 62.5996 62.035 62.9565C67.017 63.3935 69.2676 58.244 69.9232 52.927C72.9094 50.8803 71.3435 48.6296 74.337 48.3456C78.1828 47.9814 76.9518 40.9454 71.8897 39.8165C71.8897 39.8165 73.5868 42.9848 70.0251 41.3824C66.6379 39.7727 62.8748 39.1203 59.1434 39.496C59.1434 39.496 63.6884 41.7685 59.2454 42.7809C54.8024 43.7933 53.4768 46.5319 55.5235 48.1853C55.5235 48.1926 52.7338 49.0302 53.6006 52.2059Z\" fill=\"#263238\"/>\n<path d=\"M66.8844 54.0197C66.9823 55.3359 67.5123 56.5829 68.3921 57.5668C69.5575 58.856 70.7739 58.0548 70.9778 56.4888C71.1672 55.0831 70.7812 52.7159 69.3536 52.0021C67.926 51.2883 66.7897 52.4318 66.8844 54.0197Z\" fill=\"#7F3E3B\"/>\n<path d=\"M68.8509 118.749C68.8509 118.749 74.066 156.515 69.958 171.65C63.4465 195.613 38.5511 215.84 38.5511 215.84L30.1094 210.304C30.1094 210.304 51.312 193.224 53.9049 173.158C56.2357 155.145 50.387 133.36 50.387 118.742L68.8509 118.749Z\" fill=\"#40B7B9\"/>\n<path opacity=\"0.1\" d=\"M68.8509 118.749C68.8509 118.749 74.066 156.515 69.958 171.65C63.4465 195.613 38.5511 215.84 38.5511 215.84L30.1094 210.304C30.1094 210.304 51.312 193.224 53.9049 173.158C56.2357 155.145 50.387 133.36 50.387 118.742L68.8509 118.749Z\" fill=\"black\"/>\n<path d=\"M71.0082 140.338C69.6199 138.747 68.0915 137.285 66.4414 135.968C67.33 148.226 68.0584 166.384 67.2499 179.283C68.3369 176.81 69.2425 174.262 69.9594 171.657C71.9624 164.264 71.7512 151.496 71.0082 140.338Z\" fill=\"#40B7B9\"/>\n<path opacity=\"0.3\" d=\"M71.0082 140.338C69.6199 138.747 68.0915 137.285 66.4414 135.968C67.33 148.226 68.0584 166.384 67.2499 179.283C68.3369 176.81 69.2425 174.262 69.9594 171.657C71.9624 164.264 71.7512 151.496 71.0082 140.338Z\" fill=\"black\"/>\n<path d=\"M41.9543 213.953C41.9907 213.953 38.6839 216.138 38.6839 216.138L29.4629 210.093L32.3763 207.682L41.9543 213.953Z\" fill=\"#40B7B9\"/>\n<path opacity=\"0.3\" d=\"M41.9543 213.953C41.9907 213.953 38.6839 216.138 38.6839 216.138L29.4629 210.093L32.3763 207.682L41.9543 213.953Z\" fill=\"black\"/>\n<path d=\"M79.005 118.749C79.005 118.749 87.0607 152.909 87.6288 169.232C88.2697 187.528 81.882 230.691 81.882 230.691H72.8139C72.8139 230.691 71.6995 187.193 71.2989 170.528C70.8546 152.356 60.1914 118.749 60.1914 118.749H79.005Z\" fill=\"#40B7B9\"/>\n<path opacity=\"0.1\" d=\"M79.005 118.749C79.005 118.749 87.0607 152.909 87.6288 169.232C88.2697 187.528 81.882 230.691 81.882 230.691H72.8139C72.8139 230.691 71.6995 187.193 71.2989 170.528C70.8546 152.356 60.1914 118.749 60.1914 118.749H79.005Z\" fill=\"black\"/>\n<path d=\"M83.623 227.086C83.6667 227.086 83.1131 230.844 83.1131 230.844H72.0857L71.7871 227.486L83.623 227.086Z\" fill=\"#40B7B9\"/>\n<path opacity=\"0.3\" d=\"M83.623 227.086C83.6667 227.086 83.1131 230.844 83.1131 230.844H72.0857L71.7871 227.486L83.623 227.086Z\" fill=\"black\"/>\n<path d=\"M218.428 85.9221C219.047 86.5048 219.535 87.0001 220.045 87.5537C220.555 88.1072 221.035 88.6462 221.502 89.207C222.448 90.3214 223.337 91.4941 224.197 92.674C225.913 95.041 227.44 97.5397 228.763 100.147L229.033 100.679C229.164 100.936 229.274 101.204 229.361 101.48C229.537 102.013 229.644 102.566 229.681 103.126C229.729 104.114 229.593 105.101 229.281 106.039C228.748 107.598 227.958 109.055 226.942 110.351C225.112 112.702 222.954 114.777 220.533 116.513L218.719 114.43C219.571 113.432 220.46 112.362 221.254 111.291C222.062 110.254 222.792 109.158 223.439 108.013C224.043 107.015 224.49 105.929 224.765 104.794C224.859 104.388 224.876 103.968 224.816 103.556C224.79 103.417 224.746 103.282 224.685 103.155C224.657 103.099 224.626 103.046 224.59 102.995L224.357 102.602C222.952 100.311 221.428 98.0963 219.79 95.9662C218.981 94.8955 218.115 93.8685 217.241 92.8561C216.811 92.3463 216.367 91.851 215.922 91.3557C215.478 90.8604 214.997 90.3651 214.611 89.9791L218.428 85.9221Z\" fill=\"#FFB573\"/>\n<path d=\"M219.419 113.818L213.979 112.93L216.826 117.693C216.826 117.693 220.33 117.569 221.328 115.508L219.419 113.818Z\" fill=\"#FFB573\"/>\n<path d=\"M209.957 115.129L212.55 118.997L216.825 117.693L213.978 112.93L209.957 115.129Z\" fill=\"#E4897B\"/>\n<path d=\"M219.156 238.143C218.786 238.174 218.417 238.074 218.115 237.858C218.023 237.772 217.956 237.664 217.919 237.544C217.882 237.424 217.877 237.296 217.903 237.174C217.909 237.096 217.935 237.02 217.98 236.956C218.025 236.892 218.087 236.841 218.158 236.81C218.792 236.526 220.453 237.589 220.642 237.713C220.664 237.726 220.68 237.746 220.69 237.77C220.699 237.793 220.7 237.819 220.693 237.844C220.69 237.869 220.68 237.892 220.663 237.911C220.646 237.929 220.623 237.941 220.598 237.946C220.127 238.066 219.643 238.132 219.156 238.143ZM218.428 237.014C218.375 237.005 218.321 237.005 218.268 237.014C218.236 237.029 218.208 237.052 218.189 237.082C218.17 237.111 218.159 237.146 218.158 237.181C218.139 237.262 218.141 237.347 218.164 237.428C218.187 237.508 218.23 237.581 218.29 237.64C218.566 237.888 219.28 237.924 220.234 237.735C219.688 237.374 219.073 237.128 218.428 237.014Z\" fill=\"#40B7B9\"/>\n<path d=\"M220.614 237.939H220.548C220.031 237.64 219.033 236.482 219.157 235.848C219.181 235.748 219.236 235.659 219.315 235.593C219.394 235.527 219.492 235.489 219.594 235.484C219.692 235.47 219.793 235.478 219.887 235.508C219.982 235.539 220.068 235.59 220.14 235.659C220.738 236.183 220.745 237.756 220.745 237.844C220.743 237.866 220.737 237.887 220.725 237.906C220.714 237.926 220.698 237.941 220.679 237.953L220.614 237.939ZM219.681 235.753H219.623C219.463 235.753 219.427 235.841 219.412 235.906C219.339 236.278 219.958 237.167 220.475 237.582C220.488 236.971 220.313 236.371 219.973 235.863C219.929 235.822 219.877 235.791 219.821 235.772C219.764 235.754 219.704 235.747 219.645 235.753H219.681Z\" fill=\"#40B7B9\"/>\n<path d=\"M194.335 238.142C193.87 238.187 193.404 238.068 193.016 237.807C192.929 237.73 192.862 237.633 192.82 237.524C192.778 237.414 192.763 237.297 192.776 237.181C192.781 237.11 192.803 237.042 192.841 236.982C192.88 236.922 192.932 236.873 192.995 236.839C193.672 236.46 195.842 237.567 196.09 237.705C196.113 237.72 196.131 237.741 196.143 237.765C196.154 237.79 196.159 237.817 196.156 237.844C196.151 237.869 196.139 237.893 196.121 237.911C196.103 237.929 196.079 237.942 196.054 237.946C195.488 238.066 194.913 238.132 194.335 238.142ZM193.366 237.013C193.283 237.008 193.2 237.026 193.126 237.064C193.1 237.077 193.077 237.096 193.062 237.121C193.046 237.145 193.038 237.174 193.038 237.203C193.027 237.279 193.035 237.356 193.06 237.428C193.085 237.501 193.128 237.566 193.184 237.618C193.519 237.917 194.415 237.968 195.624 237.764C194.919 237.388 194.156 237.135 193.366 237.013Z\" fill=\"#40B7B9\"/>\n<path d=\"M196.032 237.938H195.974C195.326 237.647 194.037 236.482 194.139 235.848C194.139 235.702 194.27 235.52 194.627 235.484C194.757 235.47 194.889 235.483 195.014 235.521C195.139 235.56 195.255 235.624 195.355 235.71C196.04 236.278 196.171 237.749 196.171 237.815C196.173 237.837 196.17 237.859 196.161 237.88C196.152 237.901 196.138 237.918 196.12 237.931C196.092 237.943 196.061 237.946 196.032 237.938ZM194.728 235.753H194.648C194.415 235.753 194.401 235.87 194.393 235.899C194.335 236.271 195.209 237.196 195.85 237.596C195.787 236.974 195.533 236.386 195.122 235.914C195.011 235.819 194.873 235.763 194.728 235.753Z\" fill=\"#40B7B9\"/>\n<path d=\"M204.641 69.1772C204.429 72.4694 203.861 79.1558 206.389 81.0058C206.389 81.0058 205.93 84.3781 199.965 85.1648C193.409 86.017 196.403 82.3169 196.403 82.3169C199.877 80.9913 199.433 78.3473 198.486 75.9292L204.641 69.1772Z\" fill=\"#FFB573\"/>\n<path d=\"M191.071 63.3574C191.035 63.3575 190.999 63.3497 190.966 63.3346C190.934 63.3195 190.905 63.2975 190.881 63.27C190.673 63.0229 190.41 62.8283 190.112 62.7018C189.815 62.5752 189.492 62.5204 189.17 62.5416C189.136 62.5479 189.101 62.5471 189.067 62.5393C189.033 62.5316 189.001 62.517 188.973 62.4966C188.945 62.4761 188.922 62.4502 188.904 62.4204C188.887 62.3906 188.875 62.3575 188.871 62.3231C188.863 62.2546 188.882 62.1856 188.924 62.1311C188.966 62.0766 189.028 62.0409 189.097 62.0318C189.508 61.997 189.922 62.0623 190.302 62.2222C190.683 62.382 191.019 62.6315 191.282 62.9495C191.313 62.9875 191.334 63.0336 191.34 63.0826C191.347 63.1315 191.339 63.1813 191.319 63.2262C191.298 63.2711 191.265 63.3093 191.224 63.3364C191.183 63.3634 191.135 63.3783 191.085 63.3793L191.071 63.3574Z\" fill=\"#263238\"/>\n<path d=\"M189.935 66.5842C189.677 67.6289 189.277 68.6336 188.748 69.5705C188.991 69.7014 189.26 69.777 189.536 69.7921C189.812 69.8073 190.087 69.7614 190.343 69.6579L189.935 66.5842Z\" fill=\"#ED893E\"/>\n<path d=\"M190.227 65.783C190.285 66.22 190.103 66.5988 189.819 66.6425C189.535 66.6862 189.251 66.3511 189.2 65.9141C189.149 65.4771 189.324 65.0983 189.608 65.0619C189.892 65.0255 190.176 65.3168 190.227 65.783Z\" fill=\"#263238\"/>\n<path d=\"M189.74 65.0693L188.654 64.9017C188.654 64.9017 189.295 65.652 189.74 65.0693Z\" fill=\"#263238\"/>\n<path d=\"M202.034 237.822H196.571L196.207 225.185H201.67L202.034 237.822Z\" fill=\"#FFB573\"/>\n<path d=\"M226.833 237.822H221.371L219.615 225.185H225.078L226.833 237.822Z\" fill=\"#FFB573\"/>\n<path d=\"M221.037 237.21H227.17C227.274 237.209 227.376 237.246 227.455 237.315C227.534 237.383 227.585 237.478 227.6 237.582L228.328 242.44C228.341 242.562 228.329 242.686 228.291 242.803C228.253 242.921 228.19 243.028 228.108 243.12C228.025 243.211 227.924 243.284 227.812 243.334C227.699 243.384 227.577 243.409 227.454 243.408C225.32 243.372 224.285 243.248 221.591 243.248C219.93 243.248 217.504 243.416 215.217 243.416C212.93 243.416 212.807 241.151 213.761 240.947C218.036 240.029 218.714 238.762 220.148 237.545C220.399 237.337 220.712 237.219 221.037 237.21Z\" fill=\"#003A60\"/>\n<path d=\"M196.389 237.21H202.515C202.62 237.209 202.722 237.246 202.803 237.314C202.883 237.382 202.936 237.477 202.952 237.582L203.68 242.44C203.694 242.562 203.681 242.686 203.643 242.803C203.605 242.921 203.543 243.028 203.46 243.12C203.378 243.211 203.277 243.284 203.164 243.334C203.051 243.384 202.929 243.409 202.806 243.408C200.672 243.372 199.638 243.248 196.943 243.248C195.282 243.248 191.844 243.416 189.557 243.416C187.27 243.416 187.146 241.151 188.101 240.947C192.376 240.029 194.059 238.762 195.501 237.545C195.751 237.337 196.064 237.219 196.389 237.21Z\" fill=\"#003A60\"/>\n<path d=\"M196.207 225.185L196.396 231.704H201.859L201.67 225.185H196.207Z\" fill=\"#EA9244\"/>\n<path d=\"M225.078 225.185H219.615L220.526 231.704H225.981L225.078 225.185Z\" fill=\"#EA9244\"/>\n<path d=\"M204.714 62.3598C205.086 67.7642 205.355 70.044 203.01 73.1541C199.477 77.8229 192.762 77.1018 190.781 71.9159C188.996 67.2471 188.69 59.1987 193.658 56.3726C194.75 55.7463 195.985 55.4096 197.245 55.3945C198.504 55.3793 199.746 55.6861 200.854 56.2858C201.961 56.8856 202.897 57.7584 203.573 58.8214C204.249 59.8844 204.641 61.1023 204.714 62.3598Z\" fill=\"#FFB573\"/>\n<path d=\"M207.861 67.3781C210.891 69.0679 213.141 64.9017 213.141 64.9017C213.141 64.9017 207.708 65.4917 208.196 62.2578C208.837 57.9677 205.763 52.7526 198.057 53.4227C197.627 53.4591 197.219 53.5101 196.819 53.5757C196.012 53.1933 195.1 53.0946 194.23 53.2955C193.36 53.4965 192.584 53.9853 192.026 54.6828C189.841 54.8649 186.891 57.4724 188.894 60.9176C189.035 60.5217 189.253 60.1578 189.535 59.8469C189.703 61.8644 191.465 65.0692 193.665 65.2805C194.138 68.0409 192.303 71.2384 192.937 74.1228C193.876 78.2817 200.89 79.2213 200.89 79.2213C200.649 78.7019 200.558 78.1247 200.631 77.5564C200.703 76.988 200.934 76.4516 201.298 76.0092C206.062 78.1943 209.201 76.0602 209.201 76.0602C205.952 74.8511 206.936 72.6952 206.936 72.6952C208.057 73.1932 209.328 73.2369 210.482 72.8172C211.635 72.3975 212.58 71.547 213.12 70.4445C212.041 70.4958 210.97 70.2335 210.037 69.6893C209.103 69.1452 208.348 68.3425 207.861 67.3781Z\" fill=\"#263238\"/>\n<path d=\"M195.565 66.1107C195.578 66.6293 195.488 67.1454 195.301 67.6292C195.113 68.113 194.832 68.5549 194.473 68.9294C193.511 69.9273 192.331 69.228 192.011 67.9534C191.727 66.8026 191.887 64.9016 193.14 64.3772C193.415 64.2688 193.714 64.2311 194.008 64.2675C194.302 64.3038 194.582 64.4131 194.823 64.5854C195.064 64.7576 195.258 64.9874 195.388 65.2538C195.517 65.5202 195.578 65.8147 195.565 66.1107Z\" fill=\"#FFB573\"/>\n<path d=\"M200.104 116.462C200.104 116.462 201.487 152.414 204.78 173.522C207.431 190.58 219.208 230.436 219.208 230.436H226.652C226.652 230.436 220.512 191.942 219.165 175.081C215.756 132.406 224.606 123.243 216.251 114.357L200.104 116.462Z\" fill=\"#003A60\"/>\n<path d=\"M206.324 127.832C206.324 127.832 202.959 127.249 200.992 133.659C201.721 145.801 202.966 161.912 204.78 173.522C205.18 176.108 205.792 179.225 206.542 182.641C205.122 162.131 206.324 127.832 206.324 127.832Z\" fill=\"#161F33\"/>\n<path d=\"M194.299 117.22C194.299 117.22 188.166 156.996 188.523 173.639C188.894 190.952 195.238 230.451 195.238 230.451H202.617C202.617 230.451 201.451 191.979 202.099 174.979C202.828 156.442 210.396 115.13 210.396 115.13L194.299 117.22Z\" fill=\"#003A60\"/>\n<path d=\"M227.729 230.786H217.831L217.059 227.465L227.656 227.537L227.729 230.786Z\" fill=\"#40B7B9\"/>\n<path opacity=\"0.2\" d=\"M227.729 230.786H217.831L217.059 227.465L227.656 227.537L227.729 230.786Z\" fill=\"black\"/>\n<path d=\"M215.88 81.013C218.727 81.2897 223.054 89.3818 223.054 89.3818L215.865 94.8955C215.865 94.8955 209.914 89.6732 210.621 86.7379C211.356 83.686 213.148 80.758 215.88 81.013Z\" fill=\"#40B7B9\"/>\n<path opacity=\"0.1\" d=\"M215.88 81.013C218.727 81.2897 223.054 89.3818 223.054 89.3818L215.865 94.8955C215.865 94.8955 209.914 89.6732 210.621 86.7379C211.356 83.686 213.148 80.758 215.88 81.013Z\" fill=\"black\"/>\n<path d=\"M213.73 84.4947C213.004 84.2991 212.253 84.2156 211.501 84.2471C211.119 85.0434 210.824 85.8785 210.62 86.7381C209.892 89.6515 215.864 94.8957 215.864 94.8957L216.396 94.4878L213.73 84.4947Z\" fill=\"#40B7B9\"/>\n<path opacity=\"0.3\" d=\"M213.73 84.4947C213.004 84.2991 212.253 84.2156 211.501 84.2471C211.119 85.0434 210.824 85.8785 210.62 86.7381C209.892 89.6515 215.864 94.8957 215.864 94.8957L216.396 94.4878L213.73 84.4947Z\" fill=\"black\"/>\n<path d=\"M191.858 92.2661C189.782 97.5176 187.597 102.857 185.856 108.123C185.74 108.458 185.645 108.778 185.543 109.106L185.295 109.914C185.228 110.152 185.228 110.405 185.295 110.643C185.707 111.553 186.359 112.334 187.182 112.901C189.36 114.463 191.732 115.734 194.24 116.681L193.584 119.361C190.5 118.954 187.517 117.982 184.786 116.491C183.105 115.594 181.736 114.207 180.86 112.515C180.357 111.433 180.182 110.228 180.357 109.048C180.374 108.903 180.398 108.76 180.43 108.618L180.503 108.312L180.627 107.758C180.714 107.387 180.801 107.03 180.896 106.666C181.625 103.752 182.557 100.985 183.54 98.2387C184.523 95.4928 185.55 92.7833 186.709 90.0811L191.858 92.2661Z\" fill=\"#FFB573\"/>\n<path d=\"M187.437 84.8953C187.437 84.8953 184.975 86.1408 194.298 117.22L216.28 114.35C214.736 105.45 214.007 99.936 215.879 81.0132C212.727 80.7874 209.563 80.7874 206.41 81.0132C203.055 81.2083 199.717 81.6465 196.425 82.3242C192.207 83.2638 187.437 84.8953 187.437 84.8953Z\" fill=\"#40B7B9\"/>\n<path opacity=\"0.1\" d=\"M187.437 84.8953C187.437 84.8953 184.975 86.1408 194.298 117.22L216.28 114.35C214.736 105.45 214.007 99.936 215.879 81.0132C212.727 80.7874 209.563 80.7874 206.41 81.0132C203.055 81.2083 199.717 81.6465 196.425 82.3242C192.207 83.2638 187.437 84.8953 187.437 84.8953Z\" fill=\"black\"/>\n<path d=\"M216.441 113.017L217.701 114.845C217.796 114.991 217.636 115.166 217.388 115.202L194.335 118.218C194.139 118.218 193.957 118.167 193.927 118.043L193.476 116.098C193.439 115.967 193.6 115.829 193.818 115.8L216.077 112.886C216.144 112.875 216.212 112.882 216.276 112.905C216.34 112.928 216.396 112.966 216.441 113.017Z\" fill=\"#40B7B9\"/>\n<path opacity=\"0.2\" d=\"M216.441 113.017L217.701 114.845C217.796 114.991 217.636 115.166 217.388 115.202L194.335 118.218C194.139 118.218 193.957 118.167 193.927 118.043L193.476 116.098C193.439 115.967 193.6 115.829 193.818 115.8L216.077 112.886C216.144 112.875 216.212 112.882 216.276 112.905C216.34 112.928 216.396 112.966 216.441 113.017Z\" fill=\"black\"/>\n<path d=\"M213.775 115.894L214.372 115.814C214.489 115.814 214.569 115.727 214.555 115.654L213.943 113.134C213.92 113.091 213.882 113.057 213.837 113.038C213.792 113.02 213.742 113.018 213.695 113.032L213.098 113.105C212.974 113.105 212.894 113.192 212.916 113.272L213.528 115.785C213.542 115.865 213.659 115.909 213.775 115.894Z\" fill=\"#263238\"/>\n<path d=\"M199.324 117.759L199.921 117.679C200.038 117.679 200.125 117.591 200.103 117.519L199.491 114.998C199.467 114.956 199.43 114.922 199.386 114.903C199.341 114.883 199.291 114.878 199.244 114.889L198.646 114.969C198.53 114.969 198.442 115.057 198.464 115.13L199.076 117.65C199.091 117.759 199.207 117.803 199.324 117.759Z\" fill=\"#263238\"/>\n<path d=\"M188.463 95.442C189.067 98.2535 189.92 101.815 191.165 106.324L191.435 94.8958L188.463 95.442Z\" fill=\"#40B7B9\"/>\n<path opacity=\"0.3\" d=\"M188.463 95.442C189.067 98.2535 189.92 101.815 191.165 106.324L191.435 94.8958L188.463 95.442Z\" fill=\"black\"/>\n<path d=\"M187.436 84.8953C184.705 85.9951 182.338 95.34 182.338 95.34L191.734 99.9141C191.734 99.9141 196.271 88.4861 194.239 86.2573C192.207 84.0285 190.583 83.6352 187.436 84.8953Z\" fill=\"#40B7B9\"/>\n<path opacity=\"0.1\" d=\"M187.436 84.8953C184.705 85.9951 182.338 95.34 182.338 95.34L191.734 99.9141C191.734 99.9141 196.271 88.4861 194.239 86.2573C192.207 84.0285 190.583 83.6352 187.436 84.8953Z\" fill=\"black\"/>\n<path d=\"M203.876 230.786H193.977L193.205 227.465L204.225 227.537L203.876 230.786Z\" fill=\"#40B7B9\"/>\n<path opacity=\"0.2\" d=\"M203.876 230.786H193.977L193.205 227.465L204.225 227.537L203.876 230.786Z\" fill=\"black\"/>\n<path d=\"M194.393 115.778L193.6 115.45C193.404 115.371 193.192 115.344 192.983 115.374C192.774 115.403 192.577 115.487 192.412 115.617C192.246 115.747 192.118 115.919 192.04 116.115C191.962 116.311 191.937 116.524 191.968 116.732L192.543 120.527C192.571 120.717 192.641 120.898 192.747 121.058C192.853 121.218 192.994 121.352 193.158 121.451C193.322 121.55 193.507 121.611 193.698 121.63C193.889 121.649 194.082 121.626 194.262 121.561C194.551 121.456 194.822 121.306 195.064 121.117C195.327 120.898 195.535 120.621 195.672 120.307C195.809 119.993 195.87 119.652 195.85 119.31L195.77 117.737C195.756 117.312 195.619 116.9 195.374 116.552C195.13 116.204 194.789 115.935 194.393 115.778Z\" fill=\"#FFB573\"/>\n</svg>\n",
  maquininha: "<svg width=\"343\" height=\"250\" viewBox=\"0 0 343 250\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n<path d=\"M182.89 250C271.149 250 342.697 210.828 342.697 162.508C342.697 114.188 271.149 75.0161 182.89 75.0161C94.6304 75.0161 23.082 114.188 23.082 162.508C23.082 210.828 94.6304 250 182.89 250Z\" fill=\"#F5F5F5\"/>\n<path d=\"M0 40.6478C2.8969 39.1179 6.82945 39.4152 11.1603 41.9239C13.2328 43.1495 15.1326 44.6467 16.8093 46.3757C22.929 52.5531 27.2744 61.8845 27.2744 69.8746C27.2744 80.1775 34.5166 92.6919 43.4029 97.847L59.5314 107.164L128.268 67.4456L112.161 58.1215C103.26 52.9809 96.0324 40.452 96.0324 30.1563C96.0324 19.8606 88.7901 7.34624 79.9039 2.19838C75.5585 -0.332044 71.5463 -0.60031 68.6422 0.994801L68.2511 1.21231L45.5755 14.3285L41.9544 16.3949L0 40.6478Z\" fill=\"#E6E6E6\"/>\n<path d=\"M203.755 96.0427C203.675 95.99 203.582 95.9619 203.487 95.9619C203.392 95.9619 203.298 95.99 203.219 96.0427L201.242 97.1955C201.03 97.3388 200.855 97.5292 200.729 97.7519C200.603 97.9746 200.531 98.2235 200.518 98.4789V121.731L283.804 169.041L287.084 144.179L203.755 96.0427Z\" fill=\"#263238\"/>\n<path d=\"M287.047 144.15C286.964 144.121 286.875 144.112 286.788 144.124C286.701 144.137 286.618 144.171 286.547 144.222L284.526 145.346C284.306 145.476 284.126 145.664 284.005 145.89L200.697 97.7394C200.824 97.5183 201.003 97.3317 201.219 97.1956L203.21 96.05C203.29 95.9973 203.383 95.9692 203.478 95.9692C203.574 95.9692 203.667 95.9973 203.746 96.05L287.047 144.15Z\" fill=\"#455A64\"/>\n<path d=\"M286.548 144.214L284.527 145.345C284.315 145.487 284.138 145.678 284.013 145.901C283.887 146.123 283.815 146.373 283.803 146.628V169.018L287.279 171.005V144.62C287.286 144.17 286.953 143.982 286.548 144.214Z\" fill=\"#37474F\"/>\n<path d=\"M283.81 169.039V170.569L278.603 172.89L195.273 124.717L200.481 121.73L283.81 169.039Z\" fill=\"black\"/>\n<path d=\"M280.34 175.906L286.546 172.281C286.759 172.139 286.936 171.949 287.062 171.726C287.187 171.503 287.259 171.254 287.271 170.998L283.794 169.011C283.783 169.267 283.712 169.517 283.586 169.74C283.46 169.963 283.283 170.153 283.07 170.295L281.079 171.447C280.673 171.679 280.354 171.491 280.354 171.02L280.34 175.906Z\" fill=\"#37474F\"/>\n<path d=\"M299.51 173.485C299.897 173.22 300.216 172.868 300.442 172.458C300.668 172.047 300.796 171.59 300.814 171.121V95.8827C300.789 95.399 300.649 94.9282 300.408 94.5086C300.166 94.0891 299.829 93.7326 299.424 93.4683L203.015 37.7409C202.612 37.4873 202.148 37.3485 201.672 37.3393C201.197 37.3302 200.728 37.4511 200.316 37.689C199.904 37.927 199.565 38.2729 199.334 38.6896C199.104 39.1063 198.992 39.578 199.01 40.0538V115.292C199.036 115.776 199.177 116.247 199.42 116.667C199.663 117.086 200.001 117.443 200.407 117.707L296.838 173.434C297.249 173.649 297.705 173.765 298.168 173.774C298.632 173.783 299.091 173.684 299.51 173.485Z\" fill=\"#008488\"/>\n<path d=\"M298.207 97.3895V172.628C298.207 173.512 297.584 173.875 296.816 173.433L200.408 117.705C200.001 117.441 199.663 117.085 199.42 116.666C199.177 116.246 199.037 115.775 199.01 115.291V40.0525C199.01 39.168 199.64 38.8054 200.408 39.2477L296.838 94.9751C297.24 95.2418 297.573 95.5993 297.81 96.0188C298.048 96.4382 298.184 96.9078 298.207 97.3895Z\" fill=\"#008488\"/>\n<path opacity=\"0.2\" d=\"M300.814 95.881V171.119C300.796 171.588 300.668 172.046 300.442 172.456C300.216 172.866 299.897 173.218 299.51 173.483C299.139 173.663 298.733 173.764 298.32 173.777C297.907 173.791 297.496 173.718 297.113 173.563C297.736 173.766 298.207 173.403 298.207 172.628V97.3819C298.188 96.8984 298.049 96.4273 297.801 96.0115L300.401 94.5034C300.655 94.9195 300.797 95.3939 300.814 95.881Z\" fill=\"black\"/>\n<path d=\"M290.372 117.003V128.872C290.372 129.764 289.749 130.119 288.981 129.677L273.49 120.693C273.086 120.43 272.749 120.074 272.507 119.656C272.266 119.238 272.126 118.768 272.1 118.286V106.439C272.1 105.554 272.722 105.192 273.49 105.634L288.981 114.588C289.387 114.853 289.724 115.209 289.966 115.629C290.207 116.048 290.346 116.519 290.372 117.003Z\" fill=\"#455A64\"/>\n<path d=\"M269.646 107.564L269.33 108.11L292.827 121.687L293.142 121.141L269.646 107.564Z\" fill=\"white\"/>\n<path d=\"M285.47 116.9H284.84V122.947H285.47V116.9Z\" fill=\"white\"/>\n<path d=\"M277.64 112.398H277.01V118.438H277.64V112.398Z\" fill=\"white\"/>\n<path d=\"M269.645 113.628L269.33 114.174L292.823 127.758L293.138 127.212L269.645 113.628Z\" fill=\"white\"/>\n<path d=\"M290.372 139.639V142.445C290.372 143.337 289.749 143.692 288.981 143.25L273.49 134.296C273.086 134.032 272.749 133.677 272.507 133.258C272.266 132.84 272.126 132.371 272.1 131.888V129.068C272.1 128.176 272.722 127.821 273.49 128.263L288.981 137.218C289.388 137.483 289.725 137.84 289.967 138.261C290.209 138.682 290.348 139.154 290.372 139.639Z\" fill=\"#FAFAFA\"/>\n<path d=\"M268.594 127.061V129.881C268.594 130.766 267.972 131.128 267.204 130.686L251.713 121.731C251.307 121.467 250.97 121.111 250.729 120.691C250.487 120.271 250.348 119.801 250.322 119.317V116.504C250.322 115.612 250.945 115.249 251.713 115.699L267.204 124.653C267.608 124.917 267.945 125.272 268.187 125.691C268.428 126.109 268.568 126.578 268.594 127.061Z\" fill=\"#FAFAFA\"/>\n<path d=\"M246.868 114.487V117.307C246.868 118.192 246.245 118.554 245.477 118.112L229.986 109.157C229.581 108.893 229.244 108.537 229.002 108.117C228.76 107.698 228.621 107.227 228.596 106.743V103.923C228.596 103.038 229.219 102.676 229.986 103.118L245.477 112.072C245.882 112.337 246.219 112.694 246.46 113.113C246.702 113.533 246.841 114.003 246.868 114.487Z\" fill=\"#FAFAFA\"/>\n<path d=\"M225.139 101.915V104.743C225.139 105.635 224.517 105.998 223.749 105.548L208.258 96.6009C207.854 96.3352 207.517 95.9785 207.276 95.5591C207.034 95.1398 206.894 94.6697 206.867 94.1864V91.366C206.867 90.4814 207.49 90.1189 208.258 90.5612L223.749 99.5155C224.152 99.7785 224.488 100.133 224.73 100.55C224.972 100.966 225.112 101.434 225.139 101.915Z\" fill=\"#FAFAFA\"/>\n<path opacity=\"0.15\" d=\"M215.509 105.316L219.065 107.368C219.307 107.528 219.508 107.743 219.653 107.994C219.797 108.246 219.881 108.528 219.897 108.818V109.906C219.897 110.435 219.521 110.631 219.065 110.384L215.509 108.369C215.266 108.209 215.064 107.995 214.92 107.743C214.775 107.491 214.692 107.209 214.676 106.919V105.831C214.676 105.266 215.052 105.048 215.509 105.316Z\" fill=\"black\"/>\n<path opacity=\"0.15\" d=\"M207.679 100.791L211.227 102.843C211.472 103.001 211.675 103.215 211.821 103.467C211.967 103.719 212.051 104.002 212.067 104.293V105.381C212.067 105.917 211.691 106.106 211.227 105.867L207.679 103.815C207.435 103.656 207.233 103.442 207.088 103.19C206.943 102.938 206.86 102.655 206.846 102.365V101.277C206.846 100.74 207.215 100.523 207.679 100.791Z\" fill=\"black\"/>\n<path opacity=\"0.15\" d=\"M252.51 134.244L208.332 108.693C207.564 108.251 206.941 108.606 206.941 109.498V110.803C206.967 111.287 207.106 111.758 207.348 112.177C207.589 112.597 207.927 112.953 208.332 113.218L252.51 138.768C253.277 139.211 253.9 138.855 253.9 137.964V136.644C253.873 136.163 253.732 135.695 253.491 135.278C253.249 134.861 252.913 134.507 252.51 134.244Z\" fill=\"black\"/>\n<path opacity=\"0.5\" d=\"M300.403 94.5051L297.803 96.0422C297.566 95.6197 297.227 95.2632 296.818 95.0054L200.401 39.249C199.677 38.8503 199.127 39.1113 199.025 39.8291C199.045 39.3727 199.184 38.9294 199.428 38.5437C199.673 38.1581 200.014 37.8437 200.419 37.632C200.823 37.4204 201.276 37.3191 201.732 37.3382C202.188 37.3573 202.631 37.4962 203.016 37.7409L299.425 93.4683C299.836 93.7223 300.173 94.0798 300.403 94.5051Z\" fill=\"#FAFAFA\"/>\n<path d=\"M280.123 148.195L271.882 152.683C271.744 152.997 271.67 153.334 271.664 153.677V180.061C271.66 180.14 271.671 180.219 271.697 180.294C271.723 180.369 271.764 180.438 271.817 180.496L188.531 132.375C188.455 132.323 188.395 132.252 188.357 132.169C188.319 132.086 188.304 131.994 188.313 131.903V105.512C188.327 105.256 188.399 105.007 188.525 104.785C188.65 104.562 188.826 104.371 189.038 104.228L196.244 100.052C196.319 99.9928 196.41 99.9577 196.506 99.9513C196.602 99.9448 196.697 99.9672 196.78 100.016L280.123 148.195Z\" fill=\"#263238\"/>\n<path opacity=\"0.5\" d=\"M280.132 148.188L203.965 104.148L200.489 102.14L196.817 100.016C196.734 99.9672 196.639 99.9448 196.543 99.9513C196.448 99.9577 196.356 99.9928 196.281 100.052L189.075 104.228C188.858 104.363 188.68 104.553 188.561 104.779L271.89 152.676L280.132 148.188Z\" fill=\"#37474F\"/>\n<path d=\"M271.881 152.683C271.741 153.001 271.665 153.344 271.656 153.691V180.076C271.656 180.547 271.989 180.736 272.38 180.504L280.347 175.907V148.674C280.358 148.582 280.343 148.489 280.305 148.404C280.267 148.32 280.206 148.248 280.13 148.195L271.881 152.683Z\" fill=\"#37474F\"/>\n<path d=\"M272.475 180.431L272.757 180.293L273.981 179.568C275.165 178.095 275.812 176.261 275.813 174.369V152.074C275.807 151.585 275.747 151.099 275.632 150.624L274.973 150.987C275.046 151.34 275.085 151.699 275.089 152.06V174.369C274.956 176.635 274.03 178.781 272.475 180.431Z\" fill=\"#263238\"/>\n<path d=\"M179.037 74.6389C176.227 72.3622 171.114 69.4113 167.971 67.5987C162.684 64.5317 142.92 53.0977 134.657 48.3196C133.51 47.7368 132.242 47.4331 130.956 47.4331C129.67 47.4331 128.402 47.7368 127.255 48.3196L59.902 87.2693C58.8261 87.9738 57.9307 88.9216 57.2879 90.0362C56.6451 91.1507 56.2728 92.4009 56.2012 93.686V134.47C56.2734 135.756 56.6459 137.007 57.2886 138.123C57.9313 139.238 58.8264 140.187 59.902 140.894L196.672 220.026C197.82 220.605 199.087 220.907 200.373 220.907C201.658 220.907 202.926 220.605 204.074 220.026L271.427 181.091C272.503 180.38 273.398 179.425 274.038 178.304C274.679 177.183 275.047 175.927 275.113 174.638V151.654C275.118 150.532 274.863 149.424 274.368 148.417C273.873 147.411 273.151 146.533 272.26 145.853C256.805 134.1 183.527 78.2714 179.037 74.6389Z\" fill=\"#455A64\"/>\n<path d=\"M275.112 174.638V152.328C275.111 151.878 275.058 151.431 274.953 150.994L200.184 194.141C200.295 194.605 200.356 195.079 200.365 195.555V217.851C200.365 220.026 198.989 220.975 197.207 220.25H197.258C197.424 220.323 197.591 220.388 197.765 220.446L198.098 220.548C198.279 220.598 198.46 220.642 198.648 220.678C198.837 220.714 198.894 220.722 199.018 220.743L199.575 220.816H199.995H200.524H200.995L201.473 220.78C201.647 220.78 201.82 220.722 201.994 220.685L202.4 220.613C202.588 220.562 202.776 220.497 202.957 220.439C203.138 220.381 203.175 220.381 203.276 220.337C203.513 220.245 203.743 220.136 203.964 220.011C204 219.999 204.034 219.982 204.065 219.96L271.418 181.025L272.389 180.474C273.987 178.933 274.958 176.854 275.112 174.638Z\" fill=\"#37474F\"/>\n<path d=\"M104.282 117.858C116.912 128.067 182.875 178.037 197.49 189.102C198.389 189.777 199.119 190.653 199.622 191.66C200.125 192.666 200.386 193.776 200.386 194.902V217.85C200.386 220.206 198.721 221.171 196.686 220.025L59.8649 140.922C58.7893 140.215 57.8942 139.266 57.2515 138.151C56.6087 137.035 56.2363 135.784 56.1641 134.498V93.685C56.1641 91.3286 57.8298 90.3643 59.8649 91.5461L93.1792 110.803C96.3441 112.623 101.457 115.574 104.282 117.858Z\" fill=\"#263238\"/>\n<path d=\"M103.875 104.64C107.018 106.452 112.131 109.403 114.963 111.695C117.697 113.95 120.29 116.371 122.727 118.945C123.259 119.464 123.941 119.8 124.676 119.907C125.411 120.014 126.161 119.885 126.819 119.54L175.689 91.2626C175.978 91.1214 176.227 90.9117 176.416 90.6519C176.605 90.3922 176.728 90.0901 176.773 89.7721C176.819 89.454 176.786 89.1296 176.678 88.8271C176.57 88.5245 176.39 88.253 176.153 88.0362C173.708 85.463 171.108 83.0416 168.368 80.7857C165.55 78.509 160.437 75.5653 157.294 73.7454C151.312 70.2797 144.598 66.4006 138.551 62.9132C137.844 62.5574 137.064 62.3721 136.273 62.3721C135.482 62.3721 134.702 62.5574 133.996 62.9132L85.1467 91.1756C83.8938 91.9007 83.8938 93.0825 85.1467 93.8075L103.875 104.64Z\" fill=\"#E0E0E0\"/>\n<path d=\"M133.995 65.2486C134.702 64.8928 135.482 64.7075 136.273 64.7075C137.064 64.7075 137.844 64.8928 138.551 65.2486C144.598 68.7361 151.312 72.6151 157.294 76.0809C160.437 77.9007 165.55 80.8517 168.367 83.1283C171.108 85.3841 173.707 87.8054 176.153 90.3788C176.241 90.471 176.32 90.5705 176.392 90.6761C176.195 90.9291 175.949 91.1389 175.667 91.2924L126.797 119.569C126.139 119.915 125.389 120.044 124.654 119.937C123.919 119.83 123.237 119.493 122.705 118.975C120.268 116.401 117.675 113.98 114.941 111.724C112.109 109.433 106.975 106.482 103.853 104.67L85.1464 93.8083C85.0595 93.7576 84.9943 93.6996 84.9219 93.6488C84.9925 93.5899 85.0675 93.5366 85.1464 93.4893L133.995 65.2486Z\" fill=\"white\"/>\n<path d=\"M134.8 102.53L120.178 102.305V96.4614L130.65 98.361L130.512 75.1377L139.616 74.9927L134.8 102.53Z\" fill=\"#008488\"/>\n<path d=\"M177.147 103.162L177.632 101.146L179.66 100.98L186.286 97.1513C189.429 95.3387 193.594 95.7012 195.622 97.9561C196.051 98.426 196.366 98.9894 196.541 99.602L197.113 99.5512L196.599 101.69C196.372 102.448 195.995 103.153 195.492 103.763C194.988 104.374 194.367 104.877 193.666 105.243L185.598 109.898C184.943 110.249 184.192 110.381 183.456 110.276C182.72 110.17 182.037 109.832 181.506 109.31C180.232 107.947 178.957 106.533 177.682 105.098C177.44 104.845 177.264 104.535 177.171 104.198C177.077 103.86 177.069 103.504 177.147 103.162Z\" fill=\"#008488\"/>\n<path opacity=\"0.1\" d=\"M177.147 103.162L177.632 101.146L179.66 100.98L186.286 97.1513C189.429 95.3387 193.594 95.7012 195.622 97.9561C196.051 98.426 196.366 98.9894 196.541 99.602L197.113 99.5512L196.599 101.69C196.372 102.448 195.995 103.153 195.492 103.763C194.988 104.374 194.367 104.877 193.666 105.243L185.598 109.898C184.943 110.249 184.192 110.381 183.456 110.276C182.72 110.17 182.037 109.832 181.506 109.31C180.232 107.947 178.957 106.533 177.682 105.098C177.44 104.845 177.264 104.535 177.171 104.198C177.077 103.86 177.069 103.504 177.147 103.162Z\" fill=\"black\"/>\n<path d=\"M186.032 107.887L194.1 103.225C197.25 101.405 198.09 98.1497 196.062 95.9311C194.035 93.7124 189.87 93.3136 186.727 95.1263L178.659 99.7883C178.369 99.9348 178.118 100.148 177.926 100.41C177.734 100.672 177.606 100.975 177.553 101.296C177.5 101.617 177.523 101.946 177.621 102.256C177.719 102.566 177.889 102.848 178.116 103.08C179.391 104.53 180.668 105.934 181.947 107.293C182.476 107.815 183.157 108.154 183.892 108.261C184.627 108.368 185.377 108.237 186.032 107.887Z\" fill=\"#008488\"/>\n<path d=\"M135.887 128.293L136.38 126.248L136.952 126.197C137.5 125.539 138.162 124.986 138.907 124.566L146.975 119.904C147.625 119.556 148.371 119.432 149.098 119.55C149.826 119.668 150.494 120.021 151.002 120.556C152.255 121.97 153.508 123.362 154.761 124.711L155.898 124.617L155.383 126.741C155.221 127.273 154.857 127.721 154.37 127.988L146.302 132.65C143.151 134.47 138.9 134.18 136.887 131.925C136.433 131.45 136.104 130.869 135.93 130.235C135.755 129.601 135.741 128.933 135.887 128.293Z\" fill=\"#008488\"/>\n<path opacity=\"0.1\" d=\"M135.887 128.293L136.38 126.248L136.952 126.197C137.5 125.539 138.162 124.986 138.907 124.566L146.975 119.904C147.625 119.556 148.371 119.432 149.098 119.55C149.826 119.668 150.494 120.021 151.002 120.556C152.255 121.97 153.508 123.362 154.761 124.711L155.898 124.617L155.383 126.741C155.221 127.273 154.857 127.721 154.37 127.988L146.302 132.65C143.151 134.47 138.9 134.18 136.887 131.925C136.433 131.45 136.104 130.869 135.93 130.235C135.755 129.601 135.741 128.933 135.887 128.293Z\" fill=\"black\"/>\n<path d=\"M146.757 130.619L154.825 125.957C155.112 125.815 155.36 125.604 155.548 125.345C155.736 125.085 155.858 124.783 155.904 124.466C155.949 124.148 155.917 123.825 155.81 123.522C155.703 123.22 155.524 122.948 155.289 122.731C154.014 121.36 152.747 119.954 151.472 118.518C150.966 117.982 150.297 117.627 149.57 117.508C148.843 117.389 148.096 117.512 147.445 117.858L139.378 122.52C136.234 124.34 135.286 127.661 137.321 129.901C139.356 132.142 143.614 132.432 146.757 130.619Z\" fill=\"#008488\"/>\n<path d=\"M156.079 115.532L156.557 113.538L158.106 113.437L167.76 107.854C168.573 107.421 169.506 107.267 170.415 107.415C171.324 107.563 172.159 108.005 172.794 108.673C173.759 109.775 174.737 110.856 175.727 111.914C175.822 112.021 175.909 112.135 175.988 112.255L176.951 112.197L176.451 114.278C176.363 114.629 176.203 114.958 175.981 115.244C175.759 115.53 175.48 115.766 175.162 115.938L164.813 121.913C163.996 122.353 163.059 122.521 162.141 122.39C161.222 122.26 160.369 121.838 159.707 121.188C158.729 120.129 157.744 119.049 156.767 117.947C156.462 117.632 156.239 117.247 156.119 116.826C155.999 116.405 155.985 115.96 156.079 115.532Z\" fill=\"#008488\"/>\n<path opacity=\"0.1\" d=\"M156.079 115.532L156.557 113.538L158.106 113.437L167.76 107.854C168.573 107.421 169.506 107.267 170.415 107.415C171.324 107.563 172.159 108.005 172.794 108.673C173.759 109.775 174.737 110.856 175.727 111.914C175.822 112.021 175.909 112.135 175.988 112.255L176.951 112.197L176.451 114.278C176.363 114.629 176.203 114.958 175.981 115.244C175.759 115.53 175.48 115.766 175.162 115.938L164.813 121.913C163.996 122.353 163.059 122.521 162.141 122.39C161.222 122.26 160.369 121.838 159.707 121.188C158.729 120.129 157.744 119.049 156.767 117.947C156.462 117.632 156.239 117.247 156.119 116.826C155.999 116.405 155.985 115.96 156.079 115.532Z\" fill=\"black\"/>\n<path d=\"M157.223 115.923C158.201 117.025 159.186 118.098 160.163 119.164C160.826 119.815 161.679 120.236 162.597 120.367C163.516 120.497 164.452 120.33 165.269 119.889L175.618 113.914C175.976 113.736 176.286 113.473 176.52 113.149C176.755 112.825 176.907 112.449 176.965 112.052C177.023 111.656 176.984 111.252 176.851 110.874C176.719 110.497 176.497 110.156 176.205 109.883C175.227 108.825 174.25 107.708 173.272 106.635C172.637 105.967 171.801 105.526 170.892 105.379C169.983 105.232 169.051 105.388 168.239 105.823L157.897 111.797C157.532 111.98 157.217 112.247 156.975 112.576C156.734 112.904 156.574 113.285 156.508 113.688C156.443 114.091 156.473 114.503 156.597 114.891C156.722 115.28 156.936 115.633 157.223 115.923Z\" fill=\"#008488\"/>\n<g opacity=\"0.75\">\n<path opacity=\"0.75\" d=\"M186.032 107.889L194.1 103.227C197.25 101.407 198.09 98.1517 196.062 95.933C194.035 93.7144 189.87 93.3156 186.727 95.1282L178.659 99.7903C178.369 99.9368 178.118 100.15 177.926 100.412C177.734 100.674 177.606 100.977 177.553 101.298C177.5 101.619 177.523 101.948 177.621 102.257C177.719 102.567 177.889 102.85 178.116 103.082C179.391 104.532 180.668 105.936 181.947 107.295C182.476 107.817 183.157 108.156 183.892 108.263C184.627 108.37 185.377 108.239 186.032 107.889Z\" fill=\"white\"/>\n<path opacity=\"0.75\" d=\"M146.757 130.619L154.825 125.957C155.112 125.814 155.36 125.604 155.548 125.344C155.736 125.084 155.858 124.783 155.904 124.465C155.949 124.148 155.917 123.824 155.81 123.522C155.703 123.22 155.524 122.948 155.289 122.73C154.014 121.36 152.747 119.953 151.472 118.518C150.966 117.982 150.297 117.627 149.57 117.508C148.843 117.388 148.096 117.511 147.445 117.858L139.378 122.52C136.234 124.34 135.286 127.66 137.321 129.901C139.356 132.141 143.614 132.431 146.757 130.619Z\" fill=\"white\"/>\n<path opacity=\"0.75\" d=\"M157.223 115.922C158.201 117.024 159.186 118.097 160.163 119.163C160.826 119.814 161.679 120.235 162.597 120.366C163.516 120.496 164.452 120.329 165.269 119.888L175.618 113.913C175.976 113.735 176.286 113.472 176.52 113.148C176.755 112.824 176.907 112.448 176.965 112.051C177.023 111.655 176.984 111.251 176.851 110.873C176.719 110.496 176.497 110.156 176.205 109.882C175.227 108.824 174.25 107.707 173.272 106.634C172.637 105.966 171.801 105.525 170.892 105.378C169.983 105.231 169.051 105.387 168.239 105.822L157.897 111.796C157.532 111.979 157.217 112.246 156.975 112.575C156.734 112.903 156.574 113.284 156.508 113.687C156.443 114.09 156.473 114.502 156.597 114.89C156.722 115.279 156.936 115.632 157.223 115.922Z\" fill=\"white\"/>\n</g>\n<path d=\"M172.917 138.298L170.787 138.349L164.827 133.796C164.301 133.432 163.686 133.218 163.048 133.178C162.411 133.137 161.774 133.27 161.206 133.564L152.095 138.82L149.234 138.893V141.227C149.247 141.461 149.314 141.689 149.43 141.893C149.545 142.097 149.706 142.271 149.901 142.402L157.317 148.072C157.843 148.434 158.458 148.647 159.095 148.687C159.733 148.728 160.369 148.596 160.938 148.304L172.084 141.865C172.319 141.753 172.521 141.58 172.666 141.363C172.811 141.146 172.895 140.894 172.909 140.633L172.917 138.298Z\" fill=\"#008488\"/>\n<path opacity=\"0.1\" d=\"M172.917 138.298L170.787 138.349L164.827 133.796C164.301 133.432 163.686 133.218 163.048 133.178C162.411 133.137 161.774 133.27 161.206 133.564L152.095 138.82L149.234 138.893V141.227C149.247 141.461 149.314 141.689 149.43 141.893C149.545 142.097 149.706 142.271 149.901 142.402L157.317 148.072C157.843 148.434 158.458 148.647 159.095 148.687C159.733 148.728 160.369 148.596 160.938 148.304L172.084 141.865C172.319 141.753 172.521 141.58 172.666 141.363C172.811 141.146 172.895 140.894 172.909 140.633L172.917 138.298Z\" fill=\"black\"/>\n<path d=\"M150.059 137.659L161.212 131.228C161.78 130.935 162.417 130.801 163.055 130.842C163.693 130.883 164.307 131.097 164.833 131.46L172.271 137.13C172.49 137.254 172.669 137.437 172.788 137.658C172.908 137.879 172.962 138.129 172.945 138.38C172.929 138.631 172.842 138.872 172.694 139.075C172.547 139.279 172.345 139.436 172.112 139.53L160.966 145.968C160.397 146.26 159.761 146.393 159.123 146.352C158.486 146.311 157.871 146.098 157.345 145.736L149.929 140.066C149.712 139.942 149.534 139.76 149.414 139.541C149.295 139.321 149.238 139.072 149.252 138.823C149.266 138.573 149.348 138.332 149.491 138.126C149.633 137.921 149.83 137.759 150.059 137.659Z\" fill=\"#008488\"/>\n<path opacity=\"0.75\" d=\"M150.059 137.659L161.212 131.228C161.78 130.935 162.417 130.801 163.055 130.842C163.693 130.883 164.307 131.097 164.833 131.46L172.271 137.13C172.49 137.254 172.669 137.437 172.788 137.658C172.908 137.879 172.962 138.129 172.945 138.38C172.929 138.631 172.842 138.872 172.694 139.075C172.547 139.279 172.345 139.436 172.112 139.53L160.966 145.968C160.397 146.26 159.761 146.393 159.123 146.352C158.486 146.311 157.871 146.098 157.345 145.736L149.929 140.066C149.712 139.942 149.534 139.76 149.414 139.541C149.295 139.321 149.238 139.072 149.252 138.823C149.266 138.573 149.348 138.332 149.491 138.126C149.633 137.921 149.83 137.759 150.059 137.659Z\" fill=\"white\"/>\n<path d=\"M216.449 171.527L214.32 171.585L208.36 167.024C207.833 166.662 207.218 166.449 206.581 166.409C205.943 166.368 205.307 166.5 204.738 166.792L195.62 172.056L192.76 172.121V174.456C192.771 174.69 192.837 174.919 192.953 175.123C193.068 175.327 193.231 175.501 193.426 175.631L200.842 181.3C201.368 181.664 201.983 181.878 202.621 181.918C203.258 181.959 203.895 181.826 204.463 181.532L215.58 175.072C215.816 174.959 216.016 174.784 216.16 174.565C216.304 174.347 216.386 174.094 216.398 173.832L216.449 171.527Z\" fill=\"#008488\"/>\n<path opacity=\"0.1\" d=\"M216.449 171.527L214.32 171.585L208.36 167.024C207.833 166.662 207.218 166.449 206.581 166.409C205.943 166.368 205.307 166.5 204.738 166.792L195.62 172.056L192.76 172.121V174.456C192.771 174.69 192.837 174.919 192.953 175.123C193.068 175.327 193.231 175.501 193.426 175.631L200.842 181.3C201.368 181.664 201.983 181.878 202.621 181.918C203.258 181.959 203.895 181.826 204.463 181.532L215.58 175.072C215.816 174.959 216.016 174.784 216.16 174.565C216.304 174.347 216.386 174.094 216.398 173.832L216.449 171.527Z\" fill=\"black\"/>\n<path d=\"M193.557 170.888L204.71 164.457C205.279 164.165 205.915 164.033 206.553 164.074C207.19 164.114 207.805 164.327 208.331 164.689L215.726 170.359C215.944 170.484 216.123 170.668 216.242 170.889C216.361 171.111 216.415 171.362 216.398 171.613C216.382 171.864 216.295 172.105 216.148 172.309C216.001 172.513 215.799 172.671 215.566 172.766L204.413 179.197C203.845 179.491 203.208 179.624 202.571 179.583C201.933 179.543 201.318 179.329 200.792 178.965L193.376 173.296C193.161 173.167 192.986 172.981 192.87 172.759C192.755 172.536 192.704 172.286 192.723 172.036C192.741 171.786 192.829 171.546 192.977 171.343C193.124 171.141 193.325 170.983 193.557 170.888Z\" fill=\"#008488\"/>\n<path opacity=\"0.75\" d=\"M193.557 170.888L204.71 164.457C205.279 164.165 205.915 164.033 206.553 164.074C207.19 164.114 207.805 164.327 208.331 164.689L215.726 170.359C215.944 170.484 216.123 170.668 216.242 170.889C216.361 171.111 216.415 171.362 216.398 171.613C216.382 171.864 216.295 172.105 216.148 172.309C216.001 172.513 215.799 172.671 215.566 172.766L204.413 179.197C203.845 179.491 203.208 179.624 202.571 179.583C201.933 179.543 201.318 179.329 200.792 178.965L193.376 173.296C193.161 173.167 192.986 172.981 192.87 172.759C192.755 172.536 192.704 172.286 192.723 172.036C192.741 171.786 192.829 171.546 192.977 171.343C193.124 171.141 193.325 170.983 193.557 170.888Z\" fill=\"white\"/>\n<path d=\"M187.415 149.376L185.286 149.426L179.325 144.873C178.8 144.51 178.185 144.296 177.548 144.254C176.91 144.212 176.273 144.343 175.704 144.634L166.586 149.898L163.689 149.97V152.305C163.703 152.539 163.771 152.766 163.886 152.97C164.002 153.173 164.162 153.348 164.356 153.479L171.823 159.12C172.348 159.483 172.963 159.697 173.6 159.74C174.238 159.782 174.875 159.65 175.444 159.36L186.589 152.921C186.825 152.809 187.026 152.636 187.172 152.419C187.317 152.202 187.401 151.949 187.415 151.689V149.376Z\" fill=\"#008488\"/>\n<path opacity=\"0.1\" d=\"M187.415 149.376L185.286 149.426L179.325 144.873C178.8 144.51 178.185 144.296 177.548 144.254C176.91 144.212 176.273 144.343 175.704 144.634L166.586 149.898L163.689 149.97V152.305C163.703 152.539 163.771 152.766 163.886 152.97C164.002 153.173 164.162 153.348 164.356 153.479L171.823 159.12C172.348 159.483 172.963 159.697 173.6 159.74C174.238 159.782 174.875 159.65 175.444 159.36L186.589 152.921C186.825 152.809 187.026 152.636 187.172 152.419C187.317 152.202 187.401 151.949 187.415 151.689V149.376Z\" fill=\"black\"/>\n<path d=\"M164.558 148.737L175.711 142.298C176.28 142.008 176.917 141.876 177.554 141.918C178.192 141.96 178.806 142.174 179.332 142.538L186.755 148.2C186.974 148.325 187.152 148.509 187.271 148.73C187.39 148.952 187.444 149.203 187.428 149.454C187.411 149.705 187.324 149.946 187.177 150.15C187.03 150.354 186.829 150.513 186.596 150.607L175.45 157.046C174.881 157.337 174.244 157.468 173.607 157.426C172.969 157.384 172.355 157.17 171.829 156.807L164.406 151.144C164.19 151.018 164.013 150.834 163.895 150.613C163.777 150.393 163.723 150.143 163.739 149.893C163.755 149.643 163.84 149.403 163.984 149.199C164.129 148.994 164.327 148.834 164.558 148.737Z\" fill=\"#008488\"/>\n<path opacity=\"0.75\" d=\"M164.558 148.737L175.711 142.298C176.28 142.008 176.917 141.876 177.554 141.918C178.192 141.96 178.806 142.174 179.332 142.538L186.755 148.2C186.974 148.325 187.152 148.509 187.271 148.73C187.39 148.952 187.444 149.203 187.428 149.454C187.411 149.705 187.324 149.946 187.177 150.15C187.03 150.354 186.829 150.513 186.596 150.607L175.45 157.046C174.881 157.337 174.244 157.468 173.607 157.426C172.969 157.384 172.355 157.17 171.829 156.807L164.406 151.144C164.19 151.018 164.013 150.834 163.895 150.613C163.777 150.393 163.723 150.143 163.739 149.893C163.755 149.643 163.84 149.403 163.984 149.199C164.129 148.994 164.327 148.834 164.558 148.737Z\" fill=\"white\"/>\n<path d=\"M201.914 160.447L199.785 160.505L193.824 155.945C193.298 155.583 192.683 155.37 192.046 155.329C191.408 155.288 190.772 155.421 190.203 155.713L181.085 160.976L178.225 161.049V163.384C178.237 163.617 178.303 163.844 178.419 164.047C178.535 164.249 178.696 164.422 178.891 164.551L186.307 170.221C186.833 170.584 187.448 170.798 188.085 170.839C188.723 170.88 189.36 170.746 189.928 170.453L201.074 164.022C201.309 163.908 201.51 163.733 201.654 163.515C201.798 163.296 201.88 163.043 201.892 162.782L201.914 160.447Z\" fill=\"#008488\"/>\n<path opacity=\"0.1\" d=\"M201.914 160.447L199.785 160.505L193.824 155.945C193.298 155.583 192.683 155.37 192.046 155.329C191.408 155.288 190.772 155.421 190.203 155.713L181.085 160.976L178.225 161.049V163.384C178.237 163.617 178.303 163.844 178.419 164.047C178.535 164.249 178.696 164.422 178.891 164.551L186.307 170.221C186.833 170.584 187.448 170.798 188.085 170.839C188.723 170.88 189.36 170.746 189.928 170.453L201.074 164.022C201.309 163.908 201.51 163.733 201.654 163.515C201.798 163.296 201.88 163.043 201.892 162.782L201.914 160.447Z\" fill=\"black\"/>\n<path d=\"M179.057 159.845L190.21 153.406C190.778 153.115 191.415 152.982 192.052 153.023C192.69 153.064 193.305 153.276 193.831 153.638L201.24 159.279C201.458 159.404 201.637 159.588 201.756 159.809C201.875 160.031 201.929 160.282 201.912 160.533C201.896 160.784 201.809 161.025 201.662 161.229C201.515 161.433 201.313 161.592 201.081 161.686L189.935 168.118C189.367 168.411 188.73 168.544 188.092 168.504C187.454 168.463 186.84 168.249 186.314 167.886L178.898 162.216C178.689 162.088 178.52 161.905 178.407 161.688C178.295 161.47 178.244 161.226 178.261 160.982C178.277 160.738 178.36 160.503 178.5 160.302C178.641 160.102 178.833 159.944 179.057 159.845Z\" fill=\"#008488\"/>\n<path opacity=\"0.75\" d=\"M179.057 159.845L190.21 153.406C190.778 153.115 191.415 152.982 192.052 153.023C192.69 153.064 193.305 153.276 193.831 153.638L201.24 159.279C201.458 159.404 201.637 159.588 201.756 159.809C201.875 160.031 201.929 160.282 201.912 160.533C201.896 160.784 201.809 161.025 201.662 161.229C201.515 161.433 201.313 161.592 201.081 161.686L189.935 168.118C189.367 168.411 188.73 168.544 188.092 168.504C187.454 168.463 186.84 168.249 186.314 167.886L178.898 162.216C178.689 162.088 178.52 161.905 178.407 161.688C178.295 161.47 178.244 161.226 178.261 160.982C178.277 160.738 178.36 160.503 178.5 160.302C178.641 160.102 178.833 159.944 179.057 159.845Z\" fill=\"white\"/>\n<path d=\"M195.294 125.384L193.165 125.442L187.205 120.882C186.678 120.52 186.063 120.307 185.426 120.266C184.789 120.225 184.152 120.358 183.584 120.65L174.444 125.913L171.547 125.986V128.321C171.561 128.553 171.628 128.78 171.744 128.982C171.859 129.185 172.02 129.358 172.213 129.488L179.702 135.194C180.228 135.558 180.842 135.771 181.48 135.812C182.118 135.853 182.755 135.72 183.323 135.426L194.476 128.995C194.711 128.881 194.912 128.706 195.056 128.488C195.2 128.27 195.282 128.016 195.294 127.755V125.384Z\" fill=\"#008488\"/>\n<path opacity=\"0.1\" d=\"M195.294 125.384L193.165 125.442L187.205 120.882C186.678 120.52 186.063 120.307 185.426 120.266C184.789 120.225 184.152 120.358 183.584 120.65L174.444 125.913L171.547 125.986V128.321C171.561 128.553 171.628 128.78 171.744 128.982C171.859 129.185 172.02 129.358 172.213 129.488L179.702 135.194C180.228 135.558 180.842 135.771 181.48 135.812C182.118 135.853 182.755 135.72 183.323 135.426L194.476 128.995C194.711 128.881 194.912 128.706 195.056 128.488C195.2 128.27 195.282 128.016 195.294 127.755V125.384Z\" fill=\"black\"/>\n<path d=\"M172.437 124.753L183.59 118.314C184.159 118.022 184.795 117.89 185.433 117.931C186.07 117.971 186.685 118.184 187.211 118.546L194.627 124.216C194.843 124.342 195.02 124.526 195.138 124.747C195.256 124.967 195.31 125.217 195.294 125.467C195.278 125.717 195.193 125.957 195.049 126.161C194.904 126.366 194.706 126.526 194.475 126.623L183.322 133.054C182.754 133.348 182.117 133.481 181.48 133.44C180.842 133.399 180.227 133.186 179.701 132.822L172.271 127.152C172.055 127.026 171.878 126.842 171.761 126.621C171.644 126.4 171.591 126.15 171.609 125.901C171.626 125.651 171.713 125.411 171.859 125.208C172.006 125.005 172.206 124.848 172.437 124.753Z\" fill=\"#008488\"/>\n<path opacity=\"0.75\" d=\"M172.437 124.753L183.59 118.314C184.159 118.022 184.795 117.89 185.433 117.931C186.07 117.971 186.685 118.184 187.211 118.546L194.627 124.216C194.843 124.342 195.02 124.526 195.138 124.747C195.256 124.967 195.31 125.217 195.294 125.467C195.278 125.717 195.193 125.957 195.049 126.161C194.904 126.366 194.706 126.526 194.475 126.623L183.322 133.054C182.754 133.348 182.117 133.481 181.48 133.44C180.842 133.399 180.227 133.186 179.701 132.822L172.271 127.152C172.055 127.026 171.878 126.842 171.761 126.621C171.644 126.4 171.591 126.15 171.609 125.901C171.626 125.651 171.713 125.411 171.859 125.208C172.006 125.005 172.206 124.848 172.437 124.753Z\" fill=\"white\"/>\n<path d=\"M238.793 158.62L236.663 158.671L230.703 154.11C230.176 153.75 229.561 153.538 228.924 153.497C228.287 153.456 227.651 153.588 227.082 153.878L217.971 159.12L215.074 159.193V161.527C215.087 161.762 215.154 161.989 215.269 162.193C215.385 162.397 215.546 162.571 215.74 162.702L223.157 168.365C223.682 168.728 224.297 168.942 224.934 168.984C225.572 169.026 226.209 168.895 226.778 168.604L237.924 162.166C238.159 162.052 238.359 161.877 238.503 161.659C238.648 161.44 238.73 161.187 238.742 160.926L238.793 158.62Z\" fill=\"#008488\"/>\n<path opacity=\"0.1\" d=\"M238.793 158.62L236.663 158.671L230.703 154.11C230.176 153.75 229.561 153.538 228.924 153.497C228.287 153.456 227.651 153.588 227.082 153.878L217.971 159.12L215.074 159.193V161.527C215.087 161.762 215.154 161.989 215.269 162.193C215.385 162.397 215.546 162.571 215.74 162.702L223.157 168.365C223.682 168.728 224.297 168.942 224.934 168.984C225.572 169.026 226.209 168.895 226.778 168.604L237.924 162.166C238.159 162.052 238.359 161.877 238.503 161.659C238.648 161.44 238.73 161.187 238.742 160.926L238.793 158.62Z\" fill=\"black\"/>\n<path d=\"M215.935 157.982L227.088 151.544C227.657 151.253 228.294 151.122 228.931 151.164C229.569 151.206 230.183 151.42 230.709 151.783L238.125 157.446C238.343 157.571 238.522 157.754 238.641 157.976C238.76 158.198 238.814 158.448 238.797 158.699C238.781 158.95 238.694 159.192 238.547 159.396C238.4 159.6 238.198 159.758 237.966 159.853L226.82 166.291C226.251 166.582 225.614 166.714 224.976 166.671C224.339 166.629 223.725 166.415 223.199 166.052L215.783 160.39C215.566 160.264 215.39 160.08 215.272 159.859C215.154 159.638 215.1 159.389 215.116 159.139C215.132 158.889 215.217 158.649 215.361 158.444C215.506 158.24 215.704 158.08 215.935 157.982Z\" fill=\"#008488\"/>\n<path opacity=\"0.75\" d=\"M215.935 157.982L227.088 151.544C227.657 151.253 228.294 151.122 228.931 151.164C229.569 151.206 230.183 151.42 230.709 151.783L238.125 157.446C238.343 157.571 238.522 157.754 238.641 157.976C238.76 158.198 238.814 158.448 238.797 158.699C238.781 158.95 238.694 159.192 238.547 159.396C238.4 159.6 238.198 159.758 237.966 159.853L226.82 166.291C226.251 166.582 225.614 166.714 224.976 166.671C224.339 166.629 223.725 166.415 223.199 166.052L215.783 160.39C215.566 160.264 215.39 160.08 215.272 159.859C215.154 159.638 215.1 159.389 215.116 159.139C215.132 158.889 215.217 158.649 215.361 158.444C215.506 158.24 215.704 158.08 215.935 157.982Z\" fill=\"white\"/>\n<path d=\"M209.795 136.464L207.666 136.522L201.705 131.962C201.179 131.598 200.565 131.385 199.927 131.344C199.289 131.303 198.652 131.436 198.084 131.73L188.966 136.986L186.105 137.059V139.393C186.118 139.627 186.185 139.855 186.301 140.059C186.416 140.263 186.578 140.437 186.772 140.568L194.188 146.238C194.714 146.6 195.329 146.813 195.966 146.853C196.604 146.894 197.241 146.762 197.809 146.47L208.962 140.039C209.196 139.928 209.396 139.756 209.541 139.542C209.686 139.328 209.771 139.079 209.788 138.821L209.795 136.464Z\" fill=\"#008488\"/>\n<path opacity=\"0.1\" d=\"M209.795 136.464L207.666 136.522L201.705 131.962C201.179 131.598 200.565 131.385 199.927 131.344C199.289 131.303 198.652 131.436 198.084 131.73L188.966 136.986L186.105 137.059V139.393C186.118 139.627 186.185 139.855 186.301 140.059C186.416 140.263 186.578 140.437 186.772 140.568L194.188 146.238C194.714 146.6 195.329 146.813 195.966 146.853C196.604 146.894 197.241 146.762 197.809 146.47L208.962 140.039C209.196 139.928 209.396 139.756 209.541 139.542C209.686 139.328 209.771 139.079 209.788 138.821L209.795 136.464Z\" fill=\"black\"/>\n<path d=\"M186.938 135.825L198.091 129.394C198.659 129.102 199.296 128.969 199.934 129.01C200.571 129.051 201.186 129.264 201.712 129.626L209.128 135.296C209.344 135.422 209.521 135.605 209.639 135.826C209.757 136.047 209.811 136.296 209.795 136.546C209.779 136.796 209.694 137.037 209.55 137.241C209.405 137.445 209.206 137.605 208.976 137.703L197.823 144.134C197.255 144.426 196.618 144.558 195.981 144.518C195.343 144.477 194.729 144.264 194.202 143.902L186.757 138.232C186.542 138.104 186.367 137.918 186.251 137.695C186.136 137.473 186.085 137.222 186.103 136.972C186.122 136.722 186.21 136.483 186.358 136.28C186.505 136.077 186.706 135.92 186.938 135.825Z\" fill=\"#008488\"/>\n<path opacity=\"0.75\" d=\"M186.938 135.825L198.091 129.394C198.659 129.102 199.296 128.969 199.934 129.01C200.571 129.051 201.186 129.264 201.712 129.626L209.128 135.296C209.344 135.422 209.521 135.605 209.639 135.826C209.757 136.047 209.811 136.296 209.795 136.546C209.779 136.796 209.694 137.037 209.55 137.241C209.405 137.445 209.206 137.605 208.976 137.703L197.823 144.134C197.255 144.426 196.618 144.558 195.981 144.518C195.343 144.477 194.729 144.264 194.202 143.902L186.757 138.232C186.542 138.104 186.367 137.918 186.251 137.695C186.136 137.473 186.085 137.222 186.103 136.972C186.122 136.722 186.21 136.483 186.358 136.28C186.505 136.077 186.706 135.92 186.938 135.825Z\" fill=\"white\"/>\n<path d=\"M224.293 147.522L222.164 147.573L216.203 143.019C215.677 142.656 215.063 142.442 214.425 142.401C213.787 142.36 213.15 142.494 212.582 142.787L203.464 148.044L200.604 148.116V150.451C200.616 150.685 200.683 150.913 200.799 151.117C200.914 151.321 201.076 151.495 201.27 151.626L208.686 157.295C209.213 157.656 209.828 157.868 210.465 157.909C211.102 157.949 211.738 157.818 212.307 157.527L223.46 151.147C223.696 151.035 223.897 150.861 224.042 150.644C224.188 150.428 224.272 150.175 224.286 149.914L224.293 147.522Z\" fill=\"#008488\"/>\n<path opacity=\"0.1\" d=\"M224.293 147.522L222.164 147.573L216.203 143.019C215.677 142.656 215.063 142.442 214.425 142.401C213.787 142.36 213.15 142.494 212.582 142.787L203.464 148.044L200.604 148.116V150.451C200.616 150.685 200.683 150.913 200.799 151.117C200.914 151.321 201.076 151.495 201.27 151.626L208.686 157.295C209.213 157.656 209.828 157.868 210.465 157.909C211.102 157.949 211.738 157.818 212.307 157.527L223.46 151.147C223.696 151.035 223.897 150.861 224.042 150.644C224.188 150.428 224.272 150.175 224.286 149.914L224.293 147.522Z\" fill=\"black\"/>\n<path d=\"M201.437 146.903L212.59 140.472C213.158 140.179 213.795 140.045 214.432 140.086C215.07 140.127 215.685 140.341 216.211 140.704L223.627 146.374C223.846 146.498 224.025 146.681 224.144 146.902C224.264 147.123 224.318 147.373 224.301 147.624C224.285 147.875 224.198 148.116 224.05 148.32C223.903 148.523 223.701 148.681 223.468 148.774L212.322 155.213C211.753 155.504 211.117 155.637 210.479 155.596C209.842 155.555 209.227 155.343 208.701 154.981L201.285 149.311C201.068 149.185 200.892 149.001 200.774 148.78C200.656 148.559 200.602 148.31 200.618 148.06C200.634 147.81 200.719 147.57 200.863 147.365C201.008 147.161 201.206 147.001 201.437 146.903Z\" fill=\"#008488\"/>\n<path opacity=\"0.75\" d=\"M201.437 146.903L212.59 140.472C213.158 140.179 213.795 140.045 214.432 140.086C215.07 140.127 215.685 140.341 216.211 140.704L223.627 146.374C223.846 146.498 224.025 146.681 224.144 146.902C224.264 147.123 224.318 147.373 224.301 147.624C224.285 147.875 224.198 148.116 224.05 148.32C223.903 148.523 223.701 148.681 223.468 148.774L212.322 155.213C211.753 155.504 211.117 155.637 210.479 155.596C209.842 155.555 209.227 155.343 208.701 154.981L201.285 149.311C201.068 149.185 200.892 149.001 200.774 148.78C200.656 148.559 200.602 148.31 200.618 148.06C200.634 147.81 200.719 147.57 200.863 147.365C201.008 147.161 201.206 147.001 201.437 146.903Z\" fill=\"white\"/>\n<path d=\"M217.666 112.471L215.537 112.522L209.576 107.969C209.05 107.605 208.436 107.392 207.798 107.351C207.16 107.31 206.523 107.443 205.955 107.737L196.837 112.994L193.977 113.066V115.401C193.989 115.635 194.056 115.863 194.172 116.066C194.287 116.27 194.449 116.444 194.643 116.575L202.059 122.245C202.586 122.607 203.2 122.82 203.838 122.861C204.475 122.902 205.112 122.769 205.68 122.477L216.826 116.039C217.062 115.927 217.263 115.753 217.408 115.536C217.553 115.319 217.638 115.067 217.652 114.806L217.666 112.471Z\" fill=\"#008488\"/>\n<path opacity=\"0.1\" d=\"M217.666 112.471L215.537 112.522L209.576 107.969C209.05 107.605 208.436 107.392 207.798 107.351C207.16 107.31 206.523 107.443 205.955 107.737L196.837 112.994L193.977 113.066V115.401C193.989 115.635 194.056 115.863 194.172 116.066C194.287 116.27 194.449 116.444 194.643 116.575L202.059 122.245C202.586 122.607 203.2 122.82 203.838 122.861C204.475 122.902 205.112 122.769 205.68 122.477L216.826 116.039C217.062 115.927 217.263 115.753 217.408 115.536C217.553 115.319 217.638 115.067 217.652 114.806L217.666 112.471Z\" fill=\"black\"/>\n<path d=\"M194.81 111.833L205.963 105.401C206.531 105.108 207.168 104.975 207.805 105.016C208.443 105.056 209.058 105.27 209.584 105.633L217 111.303C217.219 111.427 217.398 111.61 217.517 111.831C217.637 112.052 217.691 112.303 217.674 112.553C217.658 112.804 217.571 113.045 217.423 113.249C217.276 113.452 217.074 113.61 216.841 113.703L205.695 120.142C205.126 120.434 204.49 120.566 203.852 120.525C203.215 120.484 202.6 120.272 202.074 119.91L194.658 114.24C194.441 114.114 194.265 113.93 194.147 113.709C194.029 113.488 193.975 113.239 193.991 112.989C194.007 112.739 194.092 112.499 194.236 112.295C194.381 112.09 194.579 111.93 194.81 111.833Z\" fill=\"#008488\"/>\n<path opacity=\"0.75\" d=\"M194.81 111.833L205.963 105.401C206.531 105.108 207.168 104.975 207.805 105.016C208.443 105.056 209.058 105.27 209.584 105.633L217 111.303C217.219 111.427 217.398 111.61 217.517 111.831C217.637 112.052 217.691 112.303 217.674 112.553C217.658 112.804 217.571 113.045 217.423 113.249C217.276 113.452 217.074 113.61 216.841 113.703L205.695 120.142C205.126 120.434 204.49 120.566 203.852 120.525C203.215 120.484 202.6 120.272 202.074 119.91L194.658 114.24C194.441 114.114 194.265 113.93 194.147 113.709C194.029 113.488 193.975 113.239 193.991 112.989C194.007 112.739 194.092 112.499 194.236 112.295C194.381 112.09 194.579 111.93 194.81 111.833Z\" fill=\"white\"/>\n<path d=\"M261.163 145.699L259.034 145.757L253.074 141.196C252.548 140.833 251.933 140.619 251.295 140.578C250.657 140.538 250.02 140.671 249.453 140.964L240.349 146.221L237.488 146.294V148.628C237.499 148.863 237.565 149.091 237.681 149.295C237.797 149.499 237.959 149.673 238.155 149.803L245.571 155.494C246.097 155.858 246.711 156.072 247.349 156.112C247.987 156.153 248.624 156.02 249.192 155.726L260.345 149.295C260.58 149.182 260.781 149.007 260.925 148.788C261.069 148.57 261.151 148.317 261.163 148.055V145.699Z\" fill=\"#008488\"/>\n<path opacity=\"0.1\" d=\"M261.163 145.699L259.034 145.757L253.074 141.196C252.548 140.833 251.933 140.619 251.295 140.578C250.657 140.538 250.02 140.671 249.453 140.964L240.349 146.221L237.488 146.294V148.628C237.499 148.863 237.565 149.091 237.681 149.295C237.797 149.499 237.959 149.673 238.155 149.803L245.571 155.494C246.097 155.858 246.711 156.072 247.349 156.112C247.987 156.153 248.624 156.02 249.192 155.726L260.345 149.295C260.58 149.182 260.781 149.007 260.925 148.788C261.069 148.57 261.151 148.317 261.163 148.055V145.699Z\" fill=\"black\"/>\n<path d=\"M238.307 145.062L249.46 138.631C250.028 138.339 250.665 138.206 251.303 138.247C251.94 138.288 252.555 138.501 253.081 138.863L260.497 144.532C260.716 144.657 260.894 144.841 261.013 145.063C261.132 145.284 261.186 145.535 261.17 145.786C261.153 146.037 261.066 146.278 260.919 146.482C260.772 146.686 260.571 146.845 260.338 146.94L249.185 153.371C248.617 153.664 247.98 153.798 247.342 153.757C246.704 153.716 246.09 153.502 245.564 153.139L238.177 147.469C237.96 147.345 237.782 147.163 237.662 146.943C237.543 146.723 237.486 146.475 237.5 146.225C237.514 145.975 237.596 145.734 237.739 145.529C237.881 145.323 238.078 145.162 238.307 145.062Z\" fill=\"#008488\"/>\n<path opacity=\"0.75\" d=\"M238.307 145.062L249.46 138.631C250.028 138.339 250.665 138.206 251.303 138.247C251.94 138.288 252.555 138.501 253.081 138.863L260.497 144.532C260.716 144.657 260.894 144.841 261.013 145.063C261.132 145.284 261.186 145.535 261.17 145.786C261.153 146.037 261.066 146.278 260.919 146.482C260.772 146.686 260.571 146.845 260.338 146.94L249.185 153.371C248.617 153.664 247.98 153.798 247.342 153.757C246.704 153.716 246.09 153.502 245.564 153.139L238.177 147.469C237.96 147.345 237.782 147.163 237.662 146.943C237.543 146.723 237.486 146.475 237.5 146.225C237.514 145.975 237.596 145.734 237.739 145.529C237.881 145.323 238.078 145.162 238.307 145.062Z\" fill=\"white\"/>\n<path d=\"M246.663 134.622L244.534 134.68L238.574 130.12C238.047 129.758 237.433 129.545 236.795 129.504C236.158 129.463 235.521 129.596 234.953 129.888L225.864 135.152L222.967 135.224V137.559C222.979 137.792 223.046 138.019 223.161 138.222C223.277 138.425 223.439 138.597 223.633 138.726L231.049 144.396C231.574 144.761 232.189 144.976 232.827 145.016C233.466 145.057 234.103 144.923 234.67 144.628L245.823 138.197C246.059 138.083 246.259 137.908 246.403 137.69C246.547 137.472 246.63 137.218 246.642 136.957L246.663 134.622Z\" fill=\"#008488\"/>\n<path opacity=\"0.1\" d=\"M246.663 134.622L244.534 134.68L238.574 130.12C238.047 129.758 237.433 129.545 236.795 129.504C236.158 129.463 235.521 129.596 234.953 129.888L225.864 135.152L222.967 135.224V137.559C222.979 137.792 223.046 138.019 223.161 138.222C223.277 138.425 223.439 138.597 223.633 138.726L231.049 144.396C231.574 144.761 232.189 144.976 232.827 145.016C233.466 145.057 234.103 144.923 234.67 144.628L245.823 138.197C246.059 138.083 246.259 137.908 246.403 137.69C246.547 137.472 246.63 137.218 246.642 136.957L246.663 134.622Z\" fill=\"black\"/>\n<path d=\"M223.808 133.991L234.961 127.552C235.53 127.261 236.166 127.128 236.804 127.169C237.441 127.21 238.056 127.422 238.583 127.784L245.999 133.454C246.217 133.579 246.396 133.763 246.515 133.984C246.634 134.206 246.688 134.457 246.671 134.708C246.655 134.959 246.568 135.2 246.421 135.404C246.274 135.608 246.072 135.767 245.839 135.861L234.686 142.293C234.119 142.588 233.482 142.722 232.843 142.681C232.205 142.64 231.59 142.426 231.065 142.061L223.693 136.391C223.475 136.269 223.295 136.089 223.174 135.87C223.053 135.652 222.995 135.404 223.007 135.155C223.019 134.905 223.101 134.664 223.242 134.459C223.384 134.253 223.58 134.091 223.808 133.991Z\" fill=\"#008488\"/>\n<path opacity=\"0.75\" d=\"M223.808 133.991L234.961 127.552C235.53 127.261 236.166 127.128 236.804 127.169C237.441 127.21 238.056 127.422 238.583 127.784L245.999 133.454C246.217 133.579 246.396 133.763 246.515 133.984C246.634 134.206 246.688 134.457 246.671 134.708C246.655 134.959 246.568 135.2 246.421 135.404C246.274 135.608 246.072 135.767 245.839 135.861L234.686 142.293C234.119 142.588 233.482 142.722 232.843 142.681C232.205 142.64 231.59 142.426 231.065 142.061L223.693 136.391C223.475 136.269 223.295 136.089 223.174 135.87C223.053 135.652 222.995 135.404 223.007 135.155C223.019 134.905 223.101 134.664 223.242 134.459C223.384 134.253 223.58 134.091 223.808 133.991Z\" fill=\"white\"/>\n<path d=\"M232.166 123.551L230.036 123.602L224.076 119.048C223.55 118.685 222.936 118.471 222.298 118.429C221.661 118.387 221.024 118.518 220.455 118.809L211.38 124.073L208.52 124.145V126.495C208.532 126.729 208.598 126.957 208.714 127.161C208.83 127.365 208.991 127.539 209.186 127.669L216.602 133.332C217.128 133.695 217.742 133.909 218.38 133.951C219.017 133.993 219.654 133.862 220.223 133.571L231.369 127.133C231.603 127.02 231.803 126.846 231.947 126.629C232.091 126.412 232.174 126.16 232.187 125.9L232.166 123.551Z\" fill=\"#008488\"/>\n<path opacity=\"0.1\" d=\"M232.166 123.551L230.036 123.602L224.076 119.048C223.55 118.685 222.936 118.471 222.298 118.429C221.661 118.387 221.024 118.518 220.455 118.809L211.38 124.073L208.52 124.145V126.495C208.532 126.729 208.598 126.957 208.714 127.161C208.83 127.365 208.991 127.539 209.186 127.669L216.602 133.332C217.128 133.695 217.742 133.909 218.38 133.951C219.017 133.993 219.654 133.862 220.223 133.571L231.369 127.133C231.603 127.02 231.803 126.846 231.947 126.629C232.091 126.412 232.174 126.16 232.187 125.9L232.166 123.551Z\" fill=\"black\"/>\n<path d=\"M209.308 122.912L220.461 116.474C221.03 116.183 221.667 116.052 222.304 116.094C222.942 116.136 223.556 116.35 224.082 116.713L231.498 122.376C231.716 122.5 231.895 122.684 232.014 122.906C232.133 123.127 232.187 123.378 232.171 123.629C232.154 123.88 232.067 124.121 231.92 124.325C231.773 124.529 231.571 124.688 231.339 124.783L220.193 131.221C219.624 131.512 218.987 131.643 218.349 131.601C217.712 131.559 217.098 131.345 216.572 130.982L209.156 125.319C208.94 125.193 208.763 125.01 208.645 124.789C208.527 124.568 208.473 124.319 208.489 124.069C208.505 123.819 208.59 123.578 208.734 123.374C208.879 123.17 209.078 123.01 209.308 122.912Z\" fill=\"#008488\"/>\n<path opacity=\"0.75\" d=\"M209.308 122.912L220.461 116.474C221.03 116.183 221.667 116.052 222.304 116.094C222.942 116.136 223.556 116.35 224.082 116.713L231.498 122.376C231.716 122.5 231.895 122.684 232.014 122.906C232.133 123.127 232.187 123.378 232.171 123.629C232.154 123.88 232.067 124.121 231.92 124.325C231.773 124.529 231.571 124.688 231.339 124.783L220.193 131.221C219.624 131.512 218.987 131.643 218.349 131.601C217.712 131.559 217.098 131.345 216.572 130.982L209.156 125.319C208.94 125.193 208.763 125.01 208.645 124.789C208.527 124.568 208.473 124.319 208.489 124.069C208.505 123.819 208.59 123.578 208.734 123.374C208.879 123.17 209.078 123.01 209.308 122.912Z\" fill=\"white\"/>\n</svg>\n",
  establishRadial: "<svg width=\"51\" height=\"51\" viewBox=\"0 0 51 51\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n<mask id=\"mask0\" mask-type=\"alpha\" maskUnits=\"userSpaceOnUse\" x=\"0\" y=\"0\" width=\"51\" height=\"51\">\n<circle cx=\"25.5\" cy=\"25.5\" r=\"25.5\" fill=\"#C4C4C4\"/>\n</mask>\n<g mask=\"url(#mask0)\">\n<path d=\"M54.1611 0H-3V50.9191H54.1611V0Z\" fill=\"#40B9BB\"/>\n<path d=\"M38.5575 20.3925H11.425V37.2488H38.5575V20.3925Z\" fill=\"white\"/>\n<path d=\"M10.1406 20.8645H39.8422L36.4604 13H13.7058L10.1406 20.8645Z\" fill=\"#003A60\"/>\n<path d=\"M36.9583 22.28H21.9635V35.8593H36.9583V22.28Z\" fill=\"#003A60\"/>\n<path d=\"M20.2595 24.1937H13.2078V37.2488H20.2595V24.1937Z\" fill=\"#003A60\"/>\n<path d=\"M16.5358 24.7965H14.3613V26.5968H16.5358V24.7965Z\" fill=\"white\"/>\n<path d=\"M19.1062 24.7965H16.9318V26.5968H19.1062V24.7965Z\" fill=\"white\"/>\n<path d=\"M16.5358 27.0073H14.3613V28.8076H16.5358V27.0073Z\" fill=\"white\"/>\n<path d=\"M19.1062 27.0073H16.9318V28.8076H19.1062V27.0073Z\" fill=\"white\"/>\n<path d=\"M18.661 30.891L19.1274 30.7212L19.5516 30.891V31.9085L19.1274 32.1633L18.661 31.9085V30.891Z\" fill=\"#40B9BB\"/>\n<path d=\"M29.0157 25.1235L29.4822 24.9538L29.9063 25.1235V25.7742L29.4822 26.0286L29.0157 25.7742V25.1235Z\" fill=\"#40B9BB\"/>\n<path d=\"M29.5397 22.28H29.3823V25.2945H29.5397V22.28Z\" fill=\"#40B9BB\"/>\n<path d=\"M37.1152 32.4254H21.7009V32.7135H37.1152V32.4254Z\" fill=\"white\"/>\n<path d=\"M41.6117 15.3031H9V15.8397H41.6117V15.3031Z\" fill=\"#40B9BB\"/>\n<path d=\"M41.625 16.8508H9.01331V17.3874H41.625V16.8508Z\" fill=\"#40B9BB\"/>\n</g>\n</svg>",
  personRadial: "<svg width=\"51\" height=\"51\" viewBox=\"0 0 51 51\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n<path d=\"M51 25.5C51.0045 28.9519 50.3058 32.3686 48.9464 35.5415L48.8619 35.7362C46.5624 40.9674 42.5752 45.2764 37.5378 47.9742C32.5005 50.672 26.7039 51.6027 21.0752 50.6175C20.9221 50.5903 20.7692 50.5621 20.6165 50.533C19.0392 50.2272 17.4947 49.7717 16.0039 49.1727C15.7617 49.0754 15.5213 48.9746 15.2826 48.8702C15.1197 48.7993 14.9567 48.7261 14.7953 48.6507C10.3787 46.6037 6.63944 43.3369 4.01808 39.2351C1.39673 35.1334 0.00259274 30.3678 0 25.5C0 11.4169 11.4169 0 25.5 0C39.5831 0 51 11.4169 51 25.5Z\" fill=\"#40B9BB\"/>\n<path opacity=\"0.2\" d=\"M16.7269 18.2213C16.2456 20.9371 17.3082 23.3961 17.3082 23.3961C17.3082 23.3961 19.1513 21.4521 19.6326 18.7363C20.114 16.0205 19.0514 13.5615 19.0514 13.5615C19.0514 13.5615 17.2083 15.5055 16.7269 18.2213Z\" fill=\"black\"/>\n<path d=\"M25.4477 31.1469C30.9381 31.1469 35.3889 26.696 35.3889 21.2056C35.3889 15.7152 30.9381 11.2644 25.4477 11.2644C19.9573 11.2644 15.5065 15.7152 15.5065 21.2056C15.5065 26.696 19.9573 31.1469 25.4477 31.1469Z\" fill=\"#D0CDE1\"/>\n<path d=\"M21.5643 28.8169C21.5643 28.8169 22.807 34.7195 22.807 35.3408C22.807 35.9622 28.7096 38.7581 28.7096 38.7581L33.9909 37.8261L35.8549 32.2342C35.8549 32.2342 32.7482 27.5742 32.7482 25.7103L21.5643 28.8169Z\" fill=\"#D0CDE1\"/>\n<path d=\"M48.9464 35.5416L48.8619 35.7362C46.5625 40.9674 42.5752 45.2765 37.5379 47.9742C32.5005 50.672 26.704 51.6027 21.0752 50.6175C20.9221 50.5903 20.7692 50.5622 20.6165 50.533C19.0393 50.2272 17.4947 49.7717 16.0039 49.1727C15.7617 49.0754 15.5213 48.9746 15.2827 48.8702C15.1197 48.7993 14.9568 48.7261 14.7953 48.6507C13.3319 47.9727 11.9362 47.1573 10.627 46.2153L9.44861 42.797L10.111 42.2915L11.4735 41.2511L12.9273 40.1414L13.3053 39.8524L19.0096 35.4978L19.4306 35.1764L22.3955 32.9131L22.3963 32.9124C22.3963 32.9124 25.6026 38.1368 30.2628 36.5834C34.9229 35.0301 34.8211 30.5759 34.8211 30.5759L48.9464 35.5416Z\" fill=\"#003A60\"/>\n<path d=\"M16.8267 13.1963C16.8267 13.1963 19.983 6.35765 26.0326 7.9358C32.0821 9.51395 35.5015 11.8812 35.7645 14.2484C36.0275 16.6156 35.633 20.1665 35.633 20.1665C35.633 20.1665 34.9754 15.3005 30.767 16.3526C26.5586 17.4047 19.983 16.6156 19.983 16.6156L18.9309 26.0846C18.9309 26.0846 17.7473 24.3749 16.4321 25.427C15.117 26.4791 12.6183 15.3005 16.8267 13.1963Z\" fill=\"#003A60\"/>\n<path d=\"M16.0039 49.1727C15.7617 49.0754 15.5213 48.9746 15.2826 48.8702C15.1197 48.7993 14.9567 48.7261 14.7953 48.6507C12.375 47.5283 10.1453 46.0341 8.18713 44.2221C8.88046 43.2776 9.44855 42.797 9.44855 42.797H14.1087L14.8073 45.1463L16.0039 49.1727Z\" fill=\"#003A60\"/>\n<path d=\"M44.8641 35.03L48.8619 35.7362C47.792 38.1734 46.3472 40.4281 44.5797 42.4183L44.8641 35.03Z\" fill=\"#003A60\"/>\n</svg>\n",
  warningSignals: "<svg width=\"209\" height=\"140\" viewBox=\"0 0 209 140\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n<g opacity=\"0.4\">\n<path d=\"M208.086 132.068H0V132.172H208.086V132.068Z\" fill=\"#EBEBEB\"/>\n<path d=\"M137.844 139.896H134.228V140H137.844V139.896Z\" fill=\"#EBEBEB\"/>\n<path d=\"M72.0892 134.723H62.4424V134.827H72.0892V134.723Z\" fill=\"#EBEBEB\"/>\n<path d=\"M190.927 136.954H167.343V137.058H190.927V136.954Z\" fill=\"#EBEBEB\"/>\n<path d=\"M41.3627 136.954H17.7783V137.058H41.3627V136.954Z\" fill=\"#EBEBEB\"/>\n<path d=\"M168.432 7.15815C168.549 4.4572 166.913 2.37218 164.271 1.9352C163.459 0.740785 162.057 0 160.271 0C157.483 0 154.603 1.80202 153.051 4.30737C151.965 4.46524 150.923 4.8417 149.988 5.41397C149.052 5.98624 148.242 6.74243 147.607 7.63674C147.325 7.54553 147.03 7.50055 146.733 7.50357C145.829 7.55737 144.963 7.88584 144.251 8.44509C143.538 9.00433 143.013 9.7677 142.746 10.6332C142.623 11.0459 142.592 11.4806 142.655 11.9067H169.781C170.046 11.5161 170.248 11.0864 170.38 10.6332C170.855 8.89358 170.01 7.46611 168.432 7.15815Z\" fill=\"#F5F5F5\"/>\n<path d=\"M43.6984 14.5161C43.8001 13.4419 43.4807 12.3703 42.8076 11.5271C42.1344 10.6839 41.1601 10.1351 40.0901 9.99644C39.6979 9.45291 39.1761 9.01595 38.5722 8.72524C37.9682 8.43454 37.3012 8.29928 36.6318 8.33175C34.218 8.33175 31.7293 9.8924 30.3892 12.0773C29.4482 12.2186 28.5457 12.5496 27.7365 13.0504C26.9274 13.5512 26.2285 14.2113 25.6823 14.9905C25.4376 14.9118 25.1819 14.8725 24.9249 14.874C24.1424 14.9175 23.3918 15.1985 22.7731 15.6796C22.1545 16.1607 21.6972 16.8189 21.4623 17.5666C21.3552 17.9225 21.3282 18.2977 21.3832 18.6653H44.8511C45.0816 18.3289 45.2572 17.958 45.3714 17.5666C45.8083 16.0184 45.0759 14.7658 43.6984 14.5161Z\" fill=\"#F5F5F5\"/>\n<path d=\"M114.28 15.6728C113.319 15.6781 112.365 15.8311 111.45 16.1264C109.605 14.5827 107.281 13.728 104.875 13.7085C103.452 9.22216 99.394 6.21741 93.7757 6.21741C88.3946 6.21741 82.872 8.9683 78.9184 13.1425C78.6021 13.1134 78.2817 13.1009 77.9487 13.1009C71.4689 13.1009 64.7228 18.353 62.875 24.8327C62.6364 25.655 62.4871 26.5005 62.4297 27.3547H118.53C119.277 26.3352 119.84 25.193 120.194 23.9796C121.522 19.3934 118.871 15.6728 114.28 15.6728Z\" fill=\"#FAFAFA\"/>\n<path d=\"M41.068 95.2493H21.3623V132.064H41.068V95.2493Z\" fill=\"#E0E0E0\"/>\n<path d=\"M38.7792 87.2378H23.6514V95.7568H38.7792V87.2378Z\" fill=\"#E0E0E0\"/>\n<path d=\"M39.8401 86.676H22.5898V87.9995H39.8401V86.676Z\" fill=\"#E0E0E0\"/>\n<path d=\"M157.604 73.8787L182.328 82.2604V132.068H157.604V73.8787Z\" fill=\"#E0E0E0\"/>\n<path d=\"M162.336 65.4304L177.597 70.6076V101.35H162.336V65.4304Z\" fill=\"#E0E0E0\"/>\n<path d=\"M171.425 61.4518H107.938V132.122H171.425V61.4518Z\" fill=\"#F5F5F5\"/>\n<path d=\"M175.882 58.397H103.489V62.6502H175.882V58.397Z\" fill=\"#F5F5F5\"/>\n<path d=\"M172.986 81.324H106.378V85.5772H172.986V81.324Z\" fill=\"#F5F5F5\"/>\n<path d=\"M172.986 103.573H106.378V107.826H172.986V103.573Z\" fill=\"#F5F5F5\"/>\n<path d=\"M81.9521 35.3329L116.424 49.2705V132.068H81.9521V35.3329Z\" fill=\"#EBEBEB\"/>\n<path d=\"M88.5488 21.2913L109.828 29.8936V81.0036H88.5488V21.2913Z\" fill=\"#EBEBEB\"/>\n<path d=\"M94.6123 12.7766L96.1563 13.4009V31.6084H94.6123V12.7766Z\" fill=\"#EBEBEB\"/>\n<path d=\"M74.8066 61.1978L29.7852 71.4064V132.068H74.8066V61.1978Z\" fill=\"#F0F0F0\"/>\n<path d=\"M66.1881 36.2068L38.4004 42.5118V94.6539H66.1881V36.2068Z\" fill=\"#F0F0F0\"/>\n<path d=\"M58.2688 20.4131L56.9287 21.1872V58.4678H58.2688V20.4131Z\" fill=\"#F0F0F0\"/>\n<path d=\"M45.5959 25.5237L44.2559 26.2978V63.5825H45.5959V25.5237Z\" fill=\"#F0F0F0\"/>\n<path d=\"M94.0548 80.9618H53.5488V132.068H94.0548V80.9618Z\" fill=\"#F5F5F5\"/>\n<path d=\"M89.3515 69.8376H58.251V81.6652H89.3515V69.8376Z\" fill=\"#F5F5F5\"/>\n<path d=\"M91.5332 69.0594H56.0713V70.8989H91.5332V69.0594Z\" fill=\"#F5F5F5\"/>\n<path d=\"M154.125 53.6026H128.726V132.068H154.125V53.6026Z\" fill=\"#F0F0F0\"/>\n<path d=\"M151.174 36.5315H131.672V54.689H151.174V36.5315Z\" fill=\"#F0F0F0\"/>\n<path d=\"M152.544 35.3329H130.308V38.1546H152.544V35.3329Z\" fill=\"#F0F0F0\"/>\n<path d=\"M19.7016 131.656H86.751L86.751 62.8132L19.7016 62.8132L19.7016 131.656Z\" fill=\"#E0E0E0\"/>\n<path opacity=\"0.4\" d=\"M19.7016 131.656H86.751L86.751 62.8132L19.7016 62.8132L19.7016 131.656Z\" fill=\"white\"/>\n<path d=\"M87.3044 131.652H19.1481V128.959C19.1481 128.834 19.1728 128.709 19.2209 128.593C19.269 128.477 19.3395 128.371 19.4284 128.283C19.5173 128.194 19.6228 128.123 19.739 128.075C19.8551 128.027 19.9796 128.002 20.1053 128.002H86.3514C86.4771 128.002 86.6016 128.027 86.7177 128.075C86.8338 128.123 86.9394 128.194 87.0282 128.283C87.1171 128.371 87.1876 128.477 87.2357 128.593C87.2838 128.709 87.3086 128.834 87.3086 128.959V131.652H87.3044Z\" fill=\"#E0E0E0\"/>\n<path d=\"M19.1477 77.5623H87.3041V78.4321C87.3041 78.6859 87.2032 78.9294 87.0237 79.1089C86.8442 79.2884 86.6007 79.3892 86.3469 79.3892H20.1007C19.8469 79.3892 19.6034 79.2884 19.4239 79.1089C19.2444 78.9294 19.1436 78.6859 19.1436 78.4321V77.5623H19.1477Z\" fill=\"#D4D4D4\"/>\n<path d=\"M87.3044 63.4208L19.1481 63.4208V62.551C19.1481 62.2971 19.2489 62.0537 19.4284 61.8741C19.6079 61.6946 19.8514 61.5938 20.1053 61.5938L86.3514 61.5938C86.6053 61.5938 86.8487 61.6946 87.0282 61.8741C87.2077 62.0537 87.3086 62.2971 87.3086 62.551V63.4208H87.3044Z\" fill=\"#D4D4D4\"/>\n<path d=\"M64.0238 93.1272H42.4287V131.652H64.0238V93.1272Z\" fill=\"white\"/>\n<path opacity=\"0.4\" d=\"M62.7714 83.2388H43.6816V88.083H62.7714V83.2388Z\" fill=\"#E0E0E0\"/>\n<path d=\"M39.2898 87.7751H24.0205V117.386H39.2898V87.7751Z\" fill=\"white\"/>\n<path opacity=\"0.3\" d=\"M37.9294 89.136H25.3818V116.029H37.9294V89.136Z\" fill=\"#E0E0E0\"/>\n<path opacity=\"0.3\" d=\"M43.939 112.392H62.5127V95.8239H43.939V112.392Z\" fill=\"#E0E0E0\"/>\n<path d=\"M58.3015 110.344H62.4632C62.542 110.344 62.6202 110.359 62.6932 110.389C62.7661 110.419 62.8324 110.463 62.8882 110.519C62.9439 110.574 62.988 110.641 63.018 110.714C63.0479 110.787 63.063 110.865 63.0625 110.944C63.0625 111.102 62.9993 111.255 62.8869 111.367C62.7745 111.48 62.6221 111.543 62.4632 111.543H58.3015C58.1425 111.543 57.9901 111.48 57.8777 111.367C57.7653 111.255 57.7022 111.102 57.7022 110.944C57.7016 110.865 57.7167 110.787 57.7467 110.714C57.7766 110.641 57.8207 110.574 57.8765 110.519C57.9322 110.463 57.9985 110.419 58.0715 110.389C58.1444 110.359 58.2226 110.344 58.3015 110.344Z\" fill=\"white\"/>\n<path opacity=\"0.4\" d=\"M55.4008 95.4326L47.2188 129.351H45.7539L53.9358 95.4326H55.4008Z\" fill=\"white\"/>\n<path opacity=\"0.4\" d=\"M59.7078 95.4326L51.5259 129.351H48.6543L56.8362 95.4326H59.7078Z\" fill=\"white\"/>\n<path opacity=\"0.4\" d=\"M31.9112 89.136L26.7174 116.025H24.8945L30.0883 89.136H31.9112Z\" fill=\"white\"/>\n<path opacity=\"0.4\" d=\"M35.133 89.136L29.9391 116.025H27.7168L32.9148 89.136H35.133Z\" fill=\"white\"/>\n<path d=\"M67.1574 117.385H82.4268V87.7749H67.1574V117.385Z\" fill=\"white\"/>\n<path opacity=\"0.3\" d=\"M68.5225 89.1319V116.025H81.07V89.1319H68.5225Z\" fill=\"#E0E0E0\"/>\n<path opacity=\"0.4\" d=\"M78.1858 89.136L72.9879 116.025H71.165L76.363 89.136H78.1858Z\" fill=\"white\"/>\n<path opacity=\"0.4\" d=\"M81.4074 89.136L76.2136 116.025H73.9912L79.185 89.136H81.4074Z\" fill=\"white\"/>\n<path d=\"M156.092 76.7668H89.043V132.068H156.092V76.7668Z\" fill=\"#E0E0E0\"/>\n<path opacity=\"0.2\" d=\"M156.092 76.7668H89.043V132.068H156.092V76.7668Z\" fill=\"black\"/>\n<path d=\"M89.4464 122.978H155.693C155.946 122.978 156.19 123.079 156.369 123.259C156.549 123.438 156.65 123.682 156.65 123.935V132.067H88.4893V123.931C88.4893 123.806 88.514 123.681 88.5621 123.565C88.6102 123.449 88.6807 123.343 88.7696 123.254C88.8585 123.166 88.964 123.095 89.0802 123.047C89.1963 122.999 89.3207 122.974 89.4464 122.974V122.978Z\" fill=\"#A5A6A7\"/>\n<path d=\"M102.643 90.4878H94.249V92.5021H102.643V90.4878Z\" fill=\"#E0E0E0\"/>\n<path d=\"M153.879 90.4878H145.484V92.5021H153.879V90.4878Z\" fill=\"#E0E0E0\"/>\n<path d=\"M106.842 92.502H98.4482V94.5162H106.842V92.502Z\" fill=\"#E0E0E0\"/>\n<path d=\"M131.001 119.104H139.396V117.09H131.001V119.104Z\" fill=\"#E0E0E0\"/>\n<path d=\"M126.806 121.114H135.2V119.1H126.806V121.114Z\" fill=\"#E0E0E0\"/>\n<path d=\"M117.588 93.5383H95.9932V132.063H117.588V93.5383Z\" fill=\"white\"/>\n<path d=\"M151.265 93.5383H120.909V117.793H151.265V93.5383Z\" fill=\"white\"/>\n<path opacity=\"0.3\" d=\"M122.267 94.8992V116.436H149.905V94.8992H122.267Z\" fill=\"#E0E0E0\"/>\n<path opacity=\"0.3\" d=\"M116.078 96.2351H97.5039V129.375H116.078V96.2351Z\" fill=\"#E0E0E0\"/>\n<path d=\"M116.627 111.367H96.9463V114.239H116.627V111.367Z\" fill=\"white\"/>\n<path opacity=\"0.4\" d=\"M108.965 95.844L100.783 129.762H99.3184L107.5 95.844H108.965Z\" fill=\"white\"/>\n<path opacity=\"0.4\" d=\"M113.272 95.844L105.09 129.762H102.219L110.401 95.844H113.272Z\" fill=\"white\"/>\n<path opacity=\"0.4\" d=\"M136.611 94.9036L131.418 116.436H129.595L134.789 94.9036H136.611Z\" fill=\"white\"/>\n<path opacity=\"0.4\" d=\"M145.484 94.9036L140.29 116.436H134.56L139.753 94.9036H145.484Z\" fill=\"white\"/>\n<path d=\"M91.6928 79.4344H82.8408L93.2534 70.4243H99.7915L91.6928 79.4344Z\" fill=\"#E0E0E0\"/>\n<path d=\"M100.546 79.4344H91.6943L99.793 70.4243H106.331L100.546 79.4344Z\" fill=\"white\"/>\n<path d=\"M109.398 79.4344H100.546L106.331 70.4243H112.869L109.398 79.4344Z\" fill=\"#E0E0E0\"/>\n<path d=\"M118.25 79.4344H109.398L112.869 70.4243H119.407L118.25 79.4344Z\" fill=\"white\"/>\n<path d=\"M127.102 79.4344H118.25L119.407 70.4243H125.945L127.102 79.4344Z\" fill=\"#E0E0E0\"/>\n<path d=\"M135.958 79.4344H127.102L125.945 70.4243H132.483L135.958 79.4344Z\" fill=\"white\"/>\n<path d=\"M144.81 79.4344H135.958L132.483 70.4243H139.021L144.81 79.4344Z\" fill=\"#E0E0E0\"/>\n<path d=\"M162.513 79.4344H153.661L145.559 70.4243H152.101L162.513 79.4344Z\" fill=\"#E0E0E0\"/>\n<path d=\"M153.661 79.4344H144.809L139.021 70.4243H145.559L153.661 79.4344Z\" fill=\"white\"/>\n<path d=\"M87.266 87.6869C86.0923 87.6869 84.9666 87.2209 84.1363 86.3914C83.306 85.5619 82.839 84.4367 82.8379 83.263V79.4342H91.694V83.263C91.6929 84.4367 91.2259 85.5619 90.3956 86.3914C89.5653 87.2209 88.4396 87.6869 87.266 87.6869Z\" fill=\"#E0E0E0\"/>\n<path d=\"M96.1348 87.6869C94.9615 87.6869 93.8363 87.2208 93.0067 86.3912C92.177 85.5615 91.7109 84.4363 91.7109 83.263V79.4342H100.546V83.263C100.546 84.4341 100.082 85.5575 99.2549 86.3867C98.428 87.216 97.306 87.6836 96.1348 87.6869Z\" fill=\"white\"/>\n<path d=\"M104.97 87.6869C103.797 87.6869 102.671 87.2208 101.842 86.3912C101.012 85.5615 100.546 84.4363 100.546 83.263V79.4342H109.398V83.263C109.398 83.8443 109.283 84.4199 109.061 84.9569C108.838 85.4939 108.512 85.9818 108.101 86.3926C107.689 86.8035 107.201 87.1292 106.664 87.3513C106.127 87.5734 105.551 87.6874 104.97 87.6869Z\" fill=\"#E0E0E0\"/>\n<path d=\"M109.398 79.4342H118.25V83.263C118.25 84.4374 117.783 85.5637 116.953 86.3941C116.122 87.2245 114.996 87.691 113.822 87.691C112.647 87.691 111.521 87.2245 110.691 86.3941C109.86 85.5637 109.394 84.4374 109.394 83.263V79.4342H109.398Z\" fill=\"white\"/>\n<path d=\"M122.678 87.6869C122.097 87.6874 121.521 87.5734 120.984 87.3513C120.447 87.1292 119.958 86.8035 119.547 86.3926C119.136 85.9818 118.81 85.4939 118.587 84.9569C118.365 84.4199 118.25 83.8443 118.25 83.263V79.4342H127.102V83.263C127.102 84.4363 126.636 85.5615 125.806 86.3912C124.977 87.2208 123.851 87.6869 122.678 87.6869Z\" fill=\"#E0E0E0\"/>\n<path d=\"M127.102 79.4345H135.954V83.2632C135.953 83.8458 135.838 84.4225 135.614 84.9604C135.39 85.4982 135.062 85.9866 134.65 86.3976C134.237 86.8085 133.747 87.134 133.208 87.3552C132.669 87.5765 132.092 87.6893 131.509 87.6871C130.335 87.6871 129.208 87.2206 128.378 86.3902C127.548 85.5598 127.081 84.4335 127.081 83.2591V79.4303L127.102 79.4345Z\" fill=\"white\"/>\n<path d=\"M140.382 87.6869C139.209 87.6869 138.083 87.2208 137.254 86.3912C136.424 85.5615 135.958 84.4363 135.958 83.263V79.4342H144.827V83.263C144.827 83.8457 144.712 84.4227 144.488 84.9608C144.264 85.4988 143.937 85.9875 143.524 86.3985C143.111 86.8096 142.62 87.135 142.081 87.3561C141.542 87.5772 140.965 87.6896 140.382 87.6869Z\" fill=\"#E0E0E0\"/>\n<path d=\"M158.085 87.6869C156.912 87.6869 155.786 87.2208 154.957 86.3912C154.127 85.5615 153.661 84.4363 153.661 83.263V79.4342H162.513V83.263C162.513 83.8443 162.399 84.4199 162.176 84.9569C161.953 85.4939 161.627 85.9818 161.216 86.3926C160.805 86.8035 160.316 87.1292 159.779 87.3513C159.242 87.5734 158.666 87.6874 158.085 87.6869Z\" fill=\"#E0E0E0\"/>\n<path d=\"M144.827 79.4342H153.679V83.263C153.679 84.4374 153.213 85.5637 152.382 86.3941C151.552 87.2245 150.425 87.691 149.251 87.691C148.077 87.6899 146.952 87.2229 146.123 86.3926C145.293 85.5623 144.827 84.4367 144.827 83.263V79.4342Z\" fill=\"white\"/>\n<path d=\"M115.499 112.553C116.193 112.553 116.756 111.991 116.756 111.296C116.756 110.602 116.193 110.04 115.499 110.04C114.805 110.04 114.242 110.602 114.242 111.296C114.242 111.991 114.805 112.553 115.499 112.553Z\" fill=\"#E0E0E0\"/>\n<path d=\"M176.627 101.629H174.754V125.501H176.627V101.629Z\" fill=\"#CDCFCF\"/>\n<path d=\"M182.591 119H168.786C168.7 118.993 168.614 119.006 168.533 119.036C168.452 119.067 168.379 119.115 168.319 119.177C168.259 119.239 168.214 119.313 168.186 119.395C168.158 119.477 168.148 119.563 168.158 119.649L170.301 131.581C170.335 131.721 170.416 131.845 170.532 131.932C170.647 132.019 170.79 132.062 170.934 132.055H180.447C180.591 132.062 180.733 132.018 180.847 131.932C180.962 131.845 181.043 131.721 181.076 131.581L183.223 119.649C183.233 119.563 183.223 119.476 183.195 119.394C183.167 119.312 183.121 119.237 183.06 119.175C183 119.113 182.926 119.065 182.845 119.035C182.764 119.005 182.677 118.993 182.591 119Z\" fill=\"#E0E0E0\"/>\n<path opacity=\"0.5\" d=\"M182.591 119H168.786C168.7 118.993 168.614 119.006 168.533 119.036C168.452 119.067 168.379 119.115 168.319 119.177C168.259 119.239 168.214 119.313 168.186 119.395C168.158 119.477 168.148 119.563 168.158 119.649L170.301 131.581C170.335 131.721 170.416 131.845 170.532 131.932C170.647 132.019 170.79 132.062 170.934 132.055H180.447C180.591 132.062 180.733 132.018 180.847 131.932C180.962 131.845 181.043 131.721 181.076 131.581L183.223 119.649C183.233 119.563 183.223 119.476 183.195 119.394C183.167 119.312 183.121 119.237 183.06 119.175C183 119.113 182.926 119.065 182.845 119.035C182.764 119.005 182.677 118.993 182.591 119Z\" fill=\"white\"/>\n<path d=\"M184.734 98.9989C184.735 98.8749 184.704 98.7528 184.645 98.6437C184.587 98.5347 184.501 98.4421 184.397 98.3746C184.337 98.3154 184.266 98.2675 184.189 98.2331C184.128 98.2651 184.058 98.2717 183.992 98.2514C183.926 98.2311 183.872 98.1856 183.84 98.1249C183.808 98.0642 183.801 97.9932 183.821 97.9277C183.842 97.8621 183.887 97.8073 183.948 97.7753C183.924 97.618 183.852 97.4723 183.74 97.3591C183.799 97.2484 183.83 97.1248 183.83 96.9992C183.83 96.8735 183.799 96.7499 183.74 96.6392C183.669 96.505 183.558 96.396 183.423 96.327C183.185 95.8102 182.877 95.3285 182.508 94.8954C182.612 94.7669 182.671 94.6073 182.674 94.4418C182.676 94.2896 182.633 94.1404 182.549 94.0135C182.465 93.8865 182.345 93.7878 182.204 93.7301C182.253 93.6451 182.284 93.5514 182.296 93.4542C182.308 93.3571 182.301 93.2585 182.275 93.1641C182.249 93.0684 182.205 92.9787 182.145 92.9001C182.084 92.8215 182.009 92.7556 181.923 92.7061C181.838 92.6566 181.743 92.6246 181.645 92.6118C181.546 92.5989 181.447 92.6056 181.351 92.6314C181.262 92.6554 181.179 92.6964 181.105 92.7521L181.06 92.723C180.929 92.6658 180.785 92.6456 180.643 92.6647C180.56 92.5733 180.456 92.5034 180.34 92.4608H180.306C180.369 92.4072 180.422 92.344 180.464 92.2735C180.566 92.1019 180.596 91.8967 180.547 91.7032C180.498 91.5097 180.374 91.3436 180.202 91.2414C180.051 91.1506 179.872 91.1162 179.698 91.1444C179.523 91.1726 179.364 91.2615 179.249 91.3954L179.178 91.3746C179.052 91.3504 178.921 91.3605 178.8 91.4037C178.726 91.3167 178.633 91.2475 178.529 91.2014C178.424 91.1553 178.31 91.1334 178.196 91.1374C178.174 90.9815 178.103 90.8366 177.995 90.7229C177.886 90.6092 177.744 90.5325 177.589 90.5036C177.434 90.4746 177.274 90.4949 177.132 90.5616C176.989 90.6282 176.871 90.7379 176.794 90.8752C176.765 90.9245 176.744 90.9778 176.731 91.0333C176.659 90.9941 176.58 90.9674 176.498 90.9543C176.334 90.9284 176.166 90.9577 176.02 91.0375C175.938 90.8955 175.81 90.7854 175.658 90.7254C175.566 90.6881 175.468 90.6692 175.369 90.67C175.269 90.6707 175.171 90.691 175.08 90.7297C174.989 90.7683 174.906 90.8246 174.837 90.8953C174.767 90.966 174.713 91.0496 174.676 91.1415C174.663 91.1726 174.654 91.2046 174.646 91.2373C174.554 91.1424 174.437 91.074 174.309 91.0389C174.181 91.0038 174.046 91.0033 173.918 91.0375C173.892 91.1103 173.845 91.1743 173.784 91.2222C173.724 91.2701 173.65 91.3001 173.573 91.3087C173.497 91.3174 173.419 91.3043 173.349 91.2711C173.279 91.2379 173.219 91.1858 173.177 91.1207C172.645 91.2553 172.114 91.394 171.583 91.5369C171.476 91.6655 171.416 91.8271 171.413 91.9947C171.351 91.9864 171.288 91.9864 171.225 91.9947C171.072 92.025 170.932 92.1022 170.825 92.2155C170.718 92.3289 170.648 92.4727 170.626 92.6273C170.521 92.6143 170.415 92.6243 170.314 92.6564C170.136 92.7185 169.988 92.8446 169.898 93.0101C169.86 92.9839 169.818 92.9642 169.773 92.9519C169.68 92.9183 169.581 92.9035 169.482 92.9084C169.383 92.9132 169.286 92.9377 169.197 92.9802C169.107 93.0228 169.027 93.0827 168.961 93.1564C168.895 93.2301 168.844 93.3162 168.812 93.4097C168.766 93.5419 168.758 93.6841 168.788 93.8207C168.818 93.9572 168.886 94.0828 168.982 94.1837C168.982 94.1837 168.982 94.1838 168.982 94.2046C168.937 94.3209 168.921 94.4468 168.937 94.5708L168.882 94.6083C168.795 94.6877 168.727 94.7858 168.683 94.8954H168.624C168.427 94.8743 168.228 94.9318 168.073 95.0557C167.917 95.1795 167.816 95.3596 167.792 95.5571C167.784 95.6165 167.784 95.6767 167.792 95.7361C167.627 95.8408 167.509 96.0058 167.463 96.1961C167.417 96.3864 167.447 96.5871 167.547 96.7557C167.634 96.9076 167.775 97.0217 167.942 97.0761C167.905 97.1815 167.892 97.2939 167.904 97.4049L167.825 97.4549C167.681 98.0082 167.542 98.5632 167.409 99.1195C167.445 99.216 167.499 99.3049 167.567 99.3817C167.482 99.466 167.417 99.5684 167.376 99.6814C167.327 99.8293 167.325 99.9888 167.37 100.138C167.416 100.287 167.507 100.418 167.63 100.514C167.586 100.534 167.545 100.56 167.509 100.593C167.398 100.705 167.327 100.85 167.304 101.005C167.281 101.161 167.308 101.32 167.382 101.46C167.456 101.599 167.572 101.711 167.714 101.78C167.856 101.848 168.016 101.87 168.171 101.841C168.183 101.868 168.197 101.895 168.212 101.92C168.104 102.077 168.06 102.269 168.088 102.457C168.095 102.518 168.112 102.577 168.137 102.632C168.07 102.706 168.017 102.792 167.984 102.887C167.95 102.981 167.936 103.081 167.942 103.181C167.948 103.28 167.973 103.377 168.016 103.466C168.06 103.556 168.12 103.635 168.194 103.701C168.269 103.767 168.355 103.817 168.449 103.849C168.543 103.882 168.642 103.895 168.741 103.889H168.828C168.88 104.032 168.974 104.157 169.098 104.245C169.223 104.334 169.371 104.382 169.523 104.384C169.514 104.429 169.507 104.475 169.503 104.521C169.497 104.721 169.57 104.915 169.706 105.062C169.843 105.208 170.031 105.295 170.231 105.304H170.318C170.276 105.368 170.244 105.438 170.222 105.512C170.195 105.607 170.187 105.707 170.198 105.805C170.209 105.903 170.239 105.998 170.287 106.085C170.335 106.172 170.4 106.248 170.477 106.309C170.555 106.371 170.643 106.417 170.739 106.444C170.862 106.478 170.991 106.48 171.116 106.451C171.24 106.422 171.355 106.363 171.45 106.278C171.669 106.282 171.885 106.336 172.08 106.435C172.276 106.535 172.446 106.677 172.578 106.852C172.701 106.899 172.835 106.912 172.965 106.89C173.096 106.868 173.218 106.812 173.319 106.727C173.343 106.852 173.397 106.969 173.477 107.068C173.54 107.145 173.618 107.208 173.705 107.254C173.793 107.3 173.888 107.329 173.987 107.338C174.085 107.348 174.185 107.337 174.279 107.308C174.374 107.279 174.462 107.231 174.538 107.168C174.635 107.223 174.744 107.257 174.855 107.265C174.967 107.274 175.079 107.258 175.183 107.218C175.204 107.286 175.235 107.351 175.275 107.41C175.39 107.574 175.565 107.686 175.763 107.721C175.96 107.756 176.163 107.711 176.328 107.597C176.415 107.534 176.489 107.453 176.544 107.36C176.636 107.411 176.737 107.442 176.841 107.451C176.945 107.46 177.05 107.447 177.149 107.413C177.248 107.379 177.339 107.324 177.415 107.253C177.492 107.181 177.552 107.094 177.593 106.998C178.117 106.668 178.737 106.521 179.353 106.581C179.455 106.465 179.518 106.319 179.532 106.165C179.663 106.156 179.789 106.112 179.897 106.039C180.006 105.967 180.094 105.866 180.152 105.749C180.189 105.669 180.21 105.583 180.215 105.495C180.381 105.456 180.529 105.358 180.631 105.221C180.715 105.369 180.847 105.485 181.006 105.549C181.164 105.613 181.339 105.622 181.503 105.573C181.667 105.525 181.81 105.423 181.909 105.283C182.007 105.144 182.055 104.975 182.046 104.804C182.025 104.627 181.942 104.462 181.813 104.338C181.929 104.291 182.03 104.215 182.108 104.118C182.184 104.022 182.234 103.909 182.254 103.789L182.304 103.818C182.391 103.866 182.486 103.895 182.584 103.906C182.683 103.916 182.782 103.907 182.877 103.879C182.972 103.85 183.06 103.804 183.137 103.741C183.213 103.679 183.277 103.602 183.324 103.514C183.25 103.286 183.231 103.043 183.269 102.806C183.306 102.569 183.399 102.344 183.54 102.149C183.536 102.048 183.512 101.948 183.469 101.856C183.427 101.763 183.366 101.681 183.29 101.612C183.29 101.587 183.29 101.562 183.29 101.533C183.347 101.488 183.398 101.435 183.44 101.375C183.505 101.28 183.547 101.171 183.563 101.057C183.579 100.943 183.568 100.827 183.532 100.718C183.583 100.714 183.633 100.704 183.681 100.689C183.978 100.114 184.332 99.5719 184.739 99.0696L184.734 98.9989Z\" fill=\"#E0E0E0\"/>\n</g>\n<path opacity=\"0.1\" d=\"M118.913 44.2443L86.0679 83.7923C85.0356 85.0341 84.3407 86.5211 84.0505 88.1097C83.7602 89.6983 83.8843 91.3349 84.4108 92.8615C84.9373 94.3882 85.8484 95.7534 87.0561 96.8254C88.2639 97.8973 89.7276 98.6399 91.3059 98.9815L144.602 110.502C146.269 110.863 148.003 110.764 149.618 110.215C151.233 109.666 152.668 108.688 153.769 107.385C154.87 106.083 155.596 104.505 155.869 102.821C156.141 101.137 155.951 99.4111 155.317 97.8276L134.883 46.7534C134.28 45.2379 133.292 43.9057 132.017 42.8879C130.742 41.87 129.224 41.2016 127.613 40.9484C126.001 40.6952 124.352 40.866 122.826 41.4439C121.301 42.0218 119.952 42.9869 118.913 44.2443Z\" fill=\"#263238\"/>\n<path opacity=\"0.1\" d=\"M45.7985 49.7879L34.3578 80.6241C34.0152 81.5655 33.9165 82.5784 34.0709 83.5683C34.2254 84.5582 34.6279 85.4928 35.2411 86.2852C35.8542 87.0775 36.658 87.7017 37.5774 88.0995C38.4969 88.4974 39.5021 88.656 40.4994 88.5606L73.9119 85.2822C74.9752 85.1783 75.9907 84.7894 76.8513 84.1564C77.7118 83.5233 78.3856 82.6698 78.8013 81.6857C79.2171 80.7016 79.3595 79.6235 79.2135 78.5652C79.0675 77.5069 78.6385 76.5077 77.9718 75.673L55.9938 48.1395C55.3373 47.32 54.4749 46.6894 53.4949 46.3121C52.5149 45.9348 51.4524 45.8243 50.4157 45.9919C49.3791 46.1595 48.4054 46.5992 47.5943 47.2661C46.7831 47.933 46.1634 48.8032 45.7985 49.7879Z\" fill=\"#263238\"/>\n<path d=\"M130.242 34.2872L99.5338 78.8535C98.5747 80.2456 97.9889 81.8604 97.8324 83.5436C97.676 85.2268 97.9541 86.922 98.6402 88.467C99.3263 90.012 100.397 91.355 101.751 92.3676C103.105 93.3801 104.696 94.0284 106.371 94.2503L162.818 101.765C164.593 102.002 166.399 101.751 168.043 101.04C169.687 100.329 171.107 99.1851 172.15 97.7296C173.194 96.274 173.822 94.5622 173.967 92.7772C174.113 90.9922 173.77 89.2012 172.977 87.5959L147.238 35.496C146.474 33.9525 145.32 32.6356 143.89 31.6759C142.46 30.7162 140.804 30.1471 139.086 30.0249C137.368 29.9027 135.648 30.2318 134.097 30.9795C132.546 31.7271 131.217 32.8674 130.242 34.2872Z\" fill=\"#E6A100\"/>\n<path d=\"M107.711 90.27C106.691 90.1313 105.722 89.7428 104.889 89.1388C104.056 88.5349 103.385 87.7343 102.937 86.8085C102.474 85.9333 102.256 84.9493 102.307 83.9607C102.357 82.972 102.674 82.0154 103.223 81.1919L134.011 36.4913C134.567 35.6939 135.337 35.0694 136.233 34.6894C137.128 34.3093 138.112 34.189 139.072 34.3423C140.092 34.4799 141.062 34.8681 141.895 35.4721C142.728 36.0762 143.398 36.8773 143.846 37.8038L169.633 90.0319C170.096 90.9071 170.313 91.891 170.263 92.8797C170.212 93.8683 169.896 94.8249 169.346 95.6485C168.791 96.4475 168.022 97.0736 167.126 97.4548C166.231 97.836 165.246 97.9569 164.285 97.8035L107.711 90.27Z\" fill=\"white\"/>\n<path d=\"M136.451 50.1422L140.047 50.6184C141.171 50.7769 142.198 51.3438 142.931 52.2108C143.664 53.0778 144.052 54.1843 144.022 55.3192L143.777 60.0078C143.771 60.1778 143.753 60.3472 143.722 60.5145L141.164 74.6476C140.981 75.6216 140.425 76.4857 139.614 77.0558C138.804 77.626 137.802 77.8571 136.824 77.7C135.785 77.5524 134.827 77.0575 134.105 76.296C133.384 75.5344 132.941 74.5511 132.849 73.5059L131.818 58.9028C131.806 58.7341 131.806 58.5648 131.818 58.3961L132.056 53.7014C132.082 53.168 132.22 52.6462 132.461 52.1699C132.703 51.6937 133.042 51.2738 133.457 50.9378C133.872 50.6018 134.353 50.3572 134.869 50.2201C135.385 50.083 135.924 50.0564 136.451 50.1422ZM136.164 81.6194L137.141 81.7476C138.147 81.8897 139.066 82.3968 139.722 83.1725C140.379 83.9482 140.727 84.9382 140.7 85.954C140.679 86.433 140.557 86.902 140.341 87.3303C140.125 87.7586 139.822 88.1365 139.45 88.4391C139.078 88.7418 138.647 88.9624 138.183 89.0865C137.72 89.2106 137.236 89.2353 136.763 89.1591L135.786 89.0248C134.78 88.8841 133.862 88.3782 133.205 87.6035C132.549 86.8288 132.2 85.8396 132.227 84.8246C132.247 84.3452 132.369 83.8757 132.584 83.4469C132.8 83.0181 133.103 82.6398 133.475 82.337C133.847 82.0341 134.279 81.8136 134.743 81.6899C135.206 81.5662 135.691 81.5422 136.164 81.6194Z\" fill=\"#E6A100\"/>\n<path d=\"M57.6058 41.1001L49.1748 73.0719C48.9205 74.0434 48.917 75.0636 49.1645 76.0368C49.412 77.0101 49.9025 77.9046 50.59 78.6367C51.2775 79.3687 52.1395 79.9142 53.0953 80.2223C54.0512 80.5303 55.0695 80.5907 56.0551 80.3979L88.7594 74.0182C89.7971 73.8112 90.7605 73.3306 91.5499 72.626C92.3393 71.9215 92.926 71.0187 93.2492 70.0112C93.5724 69.0037 93.6203 67.9281 93.388 66.8959C93.1557 65.8636 92.6516 64.9122 91.9279 64.1403L67.679 38.5299C66.9517 37.7571 66.0306 37.1933 65.0116 36.897C63.9926 36.6007 62.9129 36.5828 61.8846 36.8452C60.8563 37.1075 59.9171 37.6406 59.1646 38.3889C58.4122 39.1372 57.8739 40.0734 57.6058 41.1001Z\" fill=\"#E6A100\"/>\n<path d=\"M55.9867 77.8221C55.3862 77.9308 54.768 77.886 54.1895 77.6917C53.611 77.4974 53.091 77.1601 52.6778 76.711C52.2515 76.2784 51.9434 75.7436 51.7831 75.1578C51.6227 74.5721 51.6155 73.9549 51.762 73.3655L60.2113 41.3083C60.3578 40.7481 60.6606 40.2412 61.0844 39.8467C61.5081 39.4521 62.0353 39.1862 62.6045 39.08C63.2055 38.9726 63.8238 39.0187 64.4023 39.214C64.9807 39.4093 65.5005 39.7475 65.9134 40.1972L90.2478 65.8381C90.6747 66.2704 90.9835 66.8049 91.1449 67.3906C91.3063 67.9764 91.3148 68.5937 91.1697 69.1836C91.0221 69.7426 90.7189 70.2483 90.2953 70.6417C89.8716 71.0351 89.3449 71.3001 88.7765 71.4058L55.9867 77.8221Z\" fill=\"white\"/>\n<path d=\"M64.1933 48.8355L66.2751 48.4265C66.9473 48.318 67.6358 48.4619 68.2083 48.8304C68.7808 49.1989 69.1968 49.7661 69.3764 50.4228L70.1212 53.2128C70.1494 53.3153 70.1719 53.4192 70.1884 53.5242L71.5132 62.3092C71.6164 62.9007 71.4819 63.509 71.1389 64.0018C70.7959 64.4945 70.2722 64.8319 69.6817 64.9405C69.0625 65.0433 68.4267 64.931 67.8802 64.6222C67.3337 64.3134 66.9095 63.8268 66.678 63.2433L63.2959 54.8917C63.2548 54.7943 63.2202 54.6944 63.1921 54.5925L62.4229 51.7965C62.3228 51.4856 62.2903 51.1571 62.3273 50.8327C62.3644 50.5082 62.4703 50.1955 62.6378 49.9152C62.8054 49.635 63.0308 49.3937 63.2991 49.2075C63.5673 49.0214 63.8722 48.8945 64.1933 48.8355ZM70.0846 67.3214L70.6524 67.2115C71.2545 67.1073 71.8738 67.2325 72.388 67.5625C72.9023 67.8926 73.2741 68.4034 73.4301 68.9942C73.5162 69.2693 73.5433 69.5595 73.5096 69.8458C73.476 70.1321 73.3824 70.4081 73.2349 70.6558C73.0875 70.9034 72.8894 71.1173 72.6538 71.2833C72.4181 71.4493 72.1501 71.5638 71.8673 71.6193L71.2995 71.7292C70.6982 71.8337 70.0796 71.7093 69.5655 71.3805C69.0514 71.0517 68.679 70.5423 68.5217 69.9527C68.4357 69.6771 68.4086 69.3866 68.4422 69.0999C68.4758 68.8133 68.5693 68.5369 68.7167 68.2887C68.8641 68.0405 69.0621 67.8262 69.2977 67.6595C69.5334 67.4929 69.8015 67.3777 70.0846 67.3214Z\" fill=\"#E6A100\"/>\n</svg>\n",
  thinkingPerson: "<svg width=\"156\" height=\"140\" viewBox=\"0 0 156 140\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n<path d=\"M145.727 21.7008C137.316 9.15573 123.044 0.23566 107.946 0.00420143C92.8474 -0.227258 77.5783 9.12368 72.4933 23.3459C70.0006 30.2755 69.933 37.8104 68.4766 45.0248C67.0202 52.2392 63.6444 59.7491 57.0425 63.0073C48.0975 67.4157 37.4931 62.3771 27.5368 62.8542C16.2666 63.3919 6.0325 71.6319 2.07277 82.1899C-1.88696 92.748 0.0323736 105.069 6.07879 114.594C12.1252 124.12 21.9533 130.925 32.6752 134.439C43.3971 137.954 68.6653 139.998 79.8466 138.495C85.1204 138.278 90.3478 137.415 95.4113 135.924C110.787 131.355 123.304 123.678 133.709 112.885C146.111 100.012 153.846 82.806 155.58 65.0157C157.015 49.9815 154.134 34.2459 145.727 21.7008Z\" fill=\"#F8F9FD\"/>\n<path d=\"M41.6922 113.145C40.816 114.897 44.0841 116.334 45.9679 116.904C47.8898 117.375 49.8787 117.512 51.847 117.307C54.4755 117.167 57.1654 116.921 59.4346 115.625C61.422 114.393 63.0105 112.613 64.0083 110.499C64.9921 108.391 65.7696 106.194 66.3301 103.936C66.3301 103.936 45.6262 105.286 41.6922 113.145Z\" fill=\"#40B7B9\"/>\n<g opacity=\"0.4\">\n<path opacity=\"0.4\" d=\"M41.6922 113.145C40.816 114.897 44.0841 116.334 45.9679 116.904C47.8898 117.375 49.8787 117.512 51.847 117.307C54.4755 117.167 57.1654 116.921 59.4346 115.625C61.422 114.393 63.0105 112.613 64.0083 110.499C64.9921 108.391 65.7696 106.194 66.3301 103.936C66.3301 103.936 45.6262 105.286 41.6922 113.145Z\" fill=\"black\"/>\n</g>\n<path d=\"M100.166 107.537C103.579 109.958 107.669 111.239 111.854 111.199C113.86 111.311 115.838 110.688 117.418 109.447C118.092 108.825 118.6 108.036 119.293 107.44C119.766 107.037 120.318 106.731 120.764 106.301C121 106.098 121.182 105.84 121.294 105.549C121.405 105.259 121.443 104.945 121.404 104.637C121.231 103.876 120.805 103.196 120.195 102.709C117.821 101.36 114.982 101.412 112.248 101.474C109.512 101.592 106.81 102.121 104.231 103.042C102.111 103.76 99.8941 104.794 98.8164 106.722\" fill=\"#40B7B9\"/>\n<g opacity=\"0.4\">\n<path opacity=\"0.4\" d=\"M121.404 104.637C121.094 103.898 120.549 103.282 119.853 102.885C117.479 101.535 114.982 101.413 112.248 101.474C109.512 101.592 106.81 102.121 104.231 103.042C102.111 103.761 99.8941 104.795 98.8164 106.722L100.166 107.537C103.579 109.958 107.669 111.24 111.854 111.199C113.86 111.311 115.838 110.688 117.418 109.447C118.092 108.825 118.6 108.036 119.293 107.441C119.766 107.038 120.318 106.731 120.764 106.302C121 106.099 121.182 105.84 121.294 105.55C121.405 105.259 121.443 104.946 121.404 104.637Z\" fill=\"black\"/>\n</g>\n<path d=\"M59.7404 138.983L103.418 139.561C103.506 139.561 103.594 139.54 103.673 139.5C103.753 139.46 103.822 139.402 103.874 139.33C103.927 139.259 103.962 139.176 103.977 139.088C103.993 139 103.987 138.91 103.961 138.825L98.8352 122.844C98.8352 122.844 99.5887 114.853 100.631 105.251C102.217 90.6623 104.329 72.324 104.355 72.3766C101.367 64.0004 83.7387 62.581 83.7387 62.581L63.6481 63.7726L62.9472 62.5897L57.1644 65.2796C55.9032 65.8664 54.6903 66.5519 53.5371 67.3298C49.717 69.8795 40.5172 75.7411 38.835 82.2685C34.9535 97.3825 41.5248 114.249 41.5248 114.249L45.7479 110.946C46.8117 110.126 47.9299 109.379 49.0949 108.711L57.5587 131.395C57.0551 131.713 56.6285 132.139 56.3102 132.642C55.9919 133.145 55.7899 133.713 55.7188 134.304C55.6487 136.144 56.5949 138.352 59.7404 138.983Z\" fill=\"#40B7B9\"/>\n<g opacity=\"0.3\">\n<path opacity=\"0.3\" d=\"M78.4831 112.242C79.8675 104.795 79.1402 97.1372 78.3955 89.6021C75.9772 95.7353 76.0649 102.745 73.4977 108.825C73.183 109.467 72.9532 110.148 72.8143 110.849C72.7474 111.202 72.7649 111.565 72.8654 111.909C72.9659 112.253 73.1465 112.569 73.3925 112.829C74.0935 113.469 75.1449 113.119 76.0736 113.013C76.905 112.855 77.7141 112.596 78.4831 112.242Z\" fill=\"black\"/>\n</g>\n<g opacity=\"0.4\">\n<path opacity=\"0.4\" d=\"M62.3684 129.485C65.8731 130.703 69.6056 128.434 73.3118 128.031C75.7651 127.768 78.2183 128.329 80.6541 128.723C85.5795 129.52 90.5903 129.644 95.549 129.091C96.3098 129.049 97.0546 128.856 97.7394 128.522C98.0933 128.28 98.3829 127.956 98.5829 127.577C98.783 127.199 98.8874 126.777 98.8872 126.349C90.6337 125.472 82.3889 124.999 74.1354 124.149C72.081 123.799 69.9769 123.867 67.9496 124.351C65.4613 125.122 63.5687 127.076 61.8164 129.012\" fill=\"black\"/>\n</g>\n<path d=\"M120.144 101.763C116.578 93.7288 104.005 71.5091 104.005 71.5091L94.2705 83.7142L96.5398 107.677C96.5398 107.677 101.683 101.939 116.061 101.825C117.106 101.866 118.128 102.142 119.053 102.63C119.978 103.118 120.782 103.807 121.406 104.646L120.144 101.763Z\" fill=\"#40B7B9\"/>\n<path d=\"M61.6933 97.5142C60.9989 95.8108 60.4479 94.0523 60.0461 92.2572C59.5019 90.5086 59.1034 88.7181 58.8545 86.9038C59.5388 88.61 60.0866 90.3679 60.4929 92.1608C61.0372 93.9099 61.4387 95.7002 61.6933 97.5142Z\" fill=\"#263238\"/>\n<path d=\"M93.535 82.0937C93.8519 82.3177 94.1455 82.573 94.4112 82.8559C95.1852 83.6035 95.911 84.3995 96.5841 85.2391C98.8497 88.0085 100.442 91.2656 101.237 94.7543C101.649 96.6829 101.741 98.6663 101.508 100.625C101.289 102.421 100.947 103.998 100.72 105.33C100.492 106.662 100.352 107.748 100.282 108.501C100.28 108.893 100.239 109.283 100.159 109.667C100.097 109.276 100.079 108.879 100.106 108.484C100.145 107.41 100.244 106.34 100.404 105.277C100.588 103.937 100.895 102.342 101.096 100.581C101.299 98.6667 101.196 96.7324 100.79 94.8507C100.005 91.4271 98.483 88.2158 96.33 85.4406C94.7266 83.2853 93.4649 82.1638 93.535 82.0937Z\" fill=\"#263238\"/>\n<path d=\"M84.6141 137.055C84.3097 137.191 83.9885 137.285 83.6591 137.336C83.2848 137.434 82.9043 137.507 82.5201 137.555C82.0732 137.616 81.5651 137.712 80.9955 137.739C79.6607 137.861 78.3175 137.861 76.9827 137.739C75.3494 137.571 73.7359 137.248 72.1637 136.775C70.5995 136.272 69.0859 135.624 67.6427 134.838C66.4726 134.185 65.3616 133.432 64.322 132.587C63.8664 132.236 63.4984 131.868 63.1654 131.562C62.8783 131.303 62.6062 131.028 62.3506 130.738C62.107 130.512 61.8974 130.253 61.7285 129.967C61.7898 129.906 62.7274 130.957 64.5235 132.333C65.5728 133.131 66.6831 133.846 67.8442 134.47C69.2711 135.22 70.7603 135.845 72.2951 136.337C73.8403 136.802 75.4236 137.131 77.0265 137.318C78.3357 137.459 79.6538 137.5 80.9693 137.441C83.221 137.318 84.5966 136.985 84.6141 137.055Z\" fill=\"#263238\"/>\n<path d=\"M98.0999 132.079C98.3061 132.476 98.4228 132.912 98.4416 133.358C98.5814 134.427 98.5009 135.512 98.205 136.548C97.904 137.607 97.2939 138.553 96.4527 139.264C95.8131 139.798 95.3224 139.965 95.2961 139.921C95.2698 139.877 95.6816 139.588 96.2336 139.045C96.9423 138.306 97.457 137.403 97.7319 136.416C98.4328 134.103 97.9334 132.088 98.0999 132.079Z\" fill=\"#263238\"/>\n<path d=\"M95.7247 135.163C95.9148 136.064 95.8387 137.001 95.5058 137.86C95.1729 138.719 94.5975 139.462 93.8496 140C93.7533 139.903 94.5681 139.036 95.0763 137.695C95.5844 136.355 95.5932 135.172 95.7247 135.163Z\" fill=\"#263238\"/>\n<path d=\"M87.9083 106.337C87.4441 107.122 86.9229 107.871 86.3487 108.58C85.8958 109.371 85.3832 110.127 84.8154 110.84C84.9837 109.916 85.3814 109.048 85.972 108.317C86.439 107.503 87.1053 106.822 87.9083 106.337Z\" fill=\"#263238\"/>\n<path d=\"M57.9261 85.1154C57.2586 84.7234 56.6123 84.2964 55.9898 83.8362C52.8738 81.789 49.3374 80.4685 45.6422 79.9723C44.8687 79.916 44.0992 79.8135 43.3379 79.6656C44.114 79.5585 44.9012 79.5585 45.6773 79.6656C49.4732 79.9896 53.1086 81.3438 56.1913 83.5821C56.8379 84.0103 57.4218 84.5263 57.9261 85.1154Z\" fill=\"#263238\"/>\n<path d=\"M104.004 71.2201C102.436 72.4829 100.971 73.8687 99.6234 75.3643C98.3824 76.9606 97.2719 78.6542 96.3027 80.4286C96.4065 79.8319 96.6109 79.2571 96.9073 78.7288C97.5417 77.4151 98.3362 76.1849 99.2729 75.0665C100.212 73.9503 101.29 72.9581 102.48 72.1138C102.933 71.7303 103.448 71.4279 104.004 71.2201Z\" fill=\"#263238\"/>\n<path d=\"M85.9736 63.9996C86.0533 64.126 86.118 64.2613 86.1663 64.4027C86.3373 64.7995 86.475 65.2098 86.5781 65.6293C86.9476 67.1907 86.9476 68.8168 86.5781 70.3782C86.0328 72.709 84.785 74.8163 83.0033 76.415C80.7546 78.32 77.8893 79.3416 74.9426 79.2889C71.9932 79.299 69.1197 78.3555 66.7504 76.599C64.8625 75.1577 63.3308 73.3022 62.2731 71.1755C61.5606 69.7515 61.0588 68.2315 60.7836 66.6632C60.7032 66.2407 60.6506 65.8134 60.6259 65.384C60.6012 65.2331 60.6012 65.0793 60.6259 64.9284C60.6259 64.9284 60.7223 65.5417 60.9676 66.6282C61.3083 68.1523 61.8474 69.6251 62.571 71.009C63.6398 73.0716 65.1578 74.8681 67.0132 76.2661C69.2963 77.9567 72.0579 78.8772 74.8988 78.8946C77.7389 78.9467 80.5033 77.9766 82.6879 76.1609C84.4091 74.6208 85.6298 72.6007 86.1926 70.3607C86.5825 68.8486 86.6363 67.2695 86.3503 65.7345C86.1838 64.5779 85.921 64.0172 85.9736 63.9996Z\" fill=\"#263238\"/>\n<g opacity=\"0.3\">\n<path opacity=\"0.3\" d=\"M89.0386 107.888C89.0386 107.45 88.9685 106.933 88.583 106.714C88.4607 106.652 88.3256 106.62 88.1887 106.62C88.0518 106.62 87.9167 106.652 87.7944 106.714C87.5494 106.846 87.3322 107.025 87.1548 107.239C86.1247 108.311 85.3282 109.585 84.8154 110.981L89.1087 110.604C89.0824 109.719 89.0649 108.79 89.0386 107.888Z\" fill=\"black\"/>\n</g>\n<g opacity=\"0.3\">\n<path opacity=\"0.3\" d=\"M103.295 98.8539C102.863 96.3971 101.787 94.0992 100.176 92.195C102.033 98.2581 101.411 101.684 100.369 105.837L100.596 105.259C101.797 102.832 103.619 101.307 103.295 98.8539Z\" fill=\"black\"/>\n</g>\n<path d=\"M91.5995 15.1363C92.5896 12.683 91.3893 9.71277 89.2602 8.1269C87.0163 6.64978 84.2802 6.11768 81.6462 6.64617C79.0478 7.19101 76.5321 8.07473 74.1637 9.27468C73.0625 8.16401 71.6742 7.3813 70.1538 7.01396C68.6335 6.64662 67.0409 6.7091 65.554 7.19443C64.0672 7.67976 62.7444 8.56883 61.7336 9.76237C60.7227 10.9559 60.0635 12.4069 59.8296 13.9534C58.8822 13.715 57.8879 13.739 56.9531 14.0229C56.0184 14.3067 55.1786 14.8397 54.5239 15.5647C53.8692 16.2897 53.4242 17.1793 53.2367 18.138C53.0492 19.0967 53.1264 20.0884 53.4598 21.0066L65.3056 25.1684L78.2379 47.9489C80.1492 49.5795 82.5884 50.459 85.1005 50.4234C87.6126 50.3879 90.0259 49.4395 91.8902 47.7554C93.7545 46.0714 94.9425 43.7665 95.2324 41.271C95.5223 38.7754 94.8944 36.2596 93.4658 34.193C94.1904 33.5486 94.8058 32.7911 95.2882 31.95C96.3217 31.3389 97.2233 30.5284 97.9408 29.5658C98.6583 28.6031 99.1773 27.5075 99.4676 26.3425C100.615 21.2695 96.6901 15.7321 91.5995 15.1363Z\" fill=\"#263238\"/>\n<path d=\"M83.7554 62.5802C83.0194 58.874 82.5112 56.3331 82.5199 56.3594C82.5287 56.3857 89.5293 53.6432 89.0211 43.8915C88.7758 39.0375 86.9271 31.3885 85.2098 25.1852C83.6677 19.5952 78.4545 13.4357 72.9434 15.2144L56.2348 23.3628C54.5613 23.906 54.2722 25.4831 54.6664 27.1916V28.0678L61.1589 54.9312L63.9013 66.9348C64.4859 69.3995 65.972 71.5561 68.0672 72.9799C70.1623 74.4037 72.7146 74.9915 75.2214 74.6276C76.5905 74.435 77.9058 73.9647 79.0865 73.2455C80.2673 72.5263 81.2886 71.5733 82.0877 70.4451C82.8869 69.317 83.447 68.0374 83.7338 66.6849C84.0206 65.3324 84.0279 63.9356 83.7554 62.5802Z\" fill=\"#FFBE9D\"/>\n<path d=\"M85.15 31.6695C85.2203 31.9804 85.1686 32.3064 85.0056 32.5803C84.8426 32.8542 84.5806 33.0551 84.2738 33.1415C84.119 33.1847 83.9571 33.1962 83.7977 33.1752C83.6383 33.1542 83.4849 33.1012 83.3465 33.0193C83.2082 32.9375 83.0879 32.8285 82.9928 32.6989C82.8976 32.5693 82.8297 32.4218 82.7931 32.2653C82.7231 31.9556 82.775 31.6307 82.9382 31.3583C83.1013 31.0858 83.3632 30.8867 83.6693 30.8021C83.8235 30.7575 83.9852 30.7447 84.1445 30.7646C84.3038 30.7845 84.4574 30.8366 84.596 30.9177C84.7345 30.9989 84.8551 31.1074 84.9503 31.2366C85.0456 31.3659 85.1135 31.5132 85.15 31.6695Z\" fill=\"#263238\"/>\n<path d=\"M84.3867 29.803C84.264 29.9958 83.2038 29.5139 81.9071 29.803C80.6104 30.0921 79.7868 30.9333 79.6115 30.8018C79.4363 30.6704 79.6115 30.4251 79.9708 30.0396C80.4528 29.5302 81.0799 29.1815 81.7669 29.0407C82.4447 28.8946 83.1516 28.9714 83.7821 29.2598C84.2728 29.4613 84.4393 29.7241 84.3867 29.803Z\" fill=\"#263238\"/>\n<path d=\"M72.4276 34.5429C72.4976 34.8527 72.4456 35.1775 72.2825 35.4499C72.1193 35.7224 71.8575 35.9216 71.5514 36.0061C71.4001 36.0501 71.2416 36.0637 71.085 36.0461C70.9284 36.0285 70.7769 35.98 70.6391 35.9034C70.5014 35.8268 70.3803 35.7236 70.2827 35.5999C70.1851 35.4761 70.1131 35.3343 70.0707 35.1825C70.0004 34.8716 70.0521 34.5456 70.2151 34.2717C70.3781 33.9978 70.6401 33.797 70.9469 33.7105C71.0987 33.6666 71.2578 33.6534 71.4149 33.6716C71.5719 33.6898 71.7237 33.7391 71.8616 33.8166C71.9994 33.894 72.1204 33.9981 72.2176 34.1228C72.3147 34.2475 72.3861 34.3903 72.4276 34.5429Z\" fill=\"#263238\"/>\n<path d=\"M71.7881 32.896C71.6742 33.0887 70.6052 32.5981 69.3085 32.896C68.0118 33.1939 67.1881 34.0175 67.0129 33.8948C66.8377 33.7722 67.0129 33.5181 67.3721 33.1238C67.8564 32.619 68.4829 32.2736 69.1683 32.1337C69.8454 31.9898 70.5507 32.0634 71.1835 32.344C71.6479 32.5543 71.8494 32.7908 71.7881 32.896Z\" fill=\"#263238\"/>\n<path d=\"M78.3843 41.1335C79.0267 40.7791 79.7091 40.5026 80.417 40.3099C80.7412 40.2048 81.0478 40.0733 81.0566 39.8368C81.0107 39.4883 80.8612 39.1616 80.6273 38.8993L79.1115 36.5686C76.9911 33.248 75.379 30.4968 75.5104 30.4354C75.6419 30.3741 77.4731 32.9763 79.5934 36.297L81.0741 38.6452C81.365 39.0045 81.5228 39.4533 81.521 39.9156C81.4948 40.0417 81.4412 40.1604 81.364 40.2634C81.2868 40.3663 81.1878 40.451 81.0741 40.5114C80.9027 40.6022 80.72 40.6699 80.5309 40.7129C79.8378 40.9502 79.1156 41.0917 78.3843 41.1335Z\" fill=\"#263238\"/>\n<path d=\"M82.5198 56.3602C78.0882 57.3618 73.4655 57.1131 69.167 55.6418C69.167 55.6418 73.7581 61.6348 83.0193 58.7697L82.5198 56.3602Z\" fill=\"#EB996E\"/>\n<path d=\"M72.0071 31.0383C71.9195 31.4151 70.5789 31.4063 69.0544 31.7831C67.5299 32.1598 66.3207 32.7293 66.0754 32.4314C65.9703 32.2913 66.1455 31.9233 66.6099 31.5553C67.2271 31.0355 67.9604 30.6719 68.7477 30.4951C69.5284 30.3099 70.3415 30.3099 71.1221 30.4951C71.7442 30.609 72.0684 30.8631 72.0071 31.0383Z\" fill=\"#263238\"/>\n<path d=\"M83.8875 25.6683C83.6772 26.0188 82.5557 25.9311 81.2589 26.1852C79.9622 26.4393 78.9371 26.8774 78.6304 26.6233C78.4902 26.4919 78.6304 26.1589 79.0072 25.7471C79.5857 25.2606 80.285 24.9397 81.0311 24.8184C81.7649 24.6705 82.5251 24.7251 83.2303 24.9761C83.7648 25.2214 83.9751 25.4931 83.8875 25.6683Z\" fill=\"#263238\"/>\n<path d=\"M60.3637 17.0902C60.5575 18.0393 60.9581 18.9341 61.5368 19.711C62.1155 20.4879 62.8582 21.1278 63.7121 21.5853C64.566 22.0428 65.5102 22.3066 66.4776 22.358C67.4449 22.4094 68.4118 22.2472 69.3094 21.8828C70.6937 21.3221 72.1306 20.2707 73.5325 20.7788C74.9344 21.287 75.5127 23.2847 76.8532 24.0294C78.8246 25.1334 81.2341 23.2234 83.4333 23.4161C85.1856 23.5651 86.5086 24.9056 87.8667 26.0446C89.2248 27.1837 91.0998 28.0423 92.6331 27.2187C92.282 25.7555 91.7615 24.3382 91.0822 22.9956C90.3971 21.6438 89.2635 20.5722 87.8754 19.964C87.1044 19.6573 86.2721 19.5522 85.5361 19.1754C83.9502 18.3694 83.2405 16.5469 82.0927 15.1713C81.3389 14.3045 80.3893 13.6298 79.3227 13.2031C78.2561 12.7765 77.1032 12.6102 75.9595 12.7181C74.067 12.9108 72.2708 13.8658 70.3608 13.787C68.9501 13.7257 67.6008 13.0948 66.1902 13.1211C63.4478 13.1211 61.3888 15.5744 59.8643 17.8612\" fill=\"#263238\"/>\n<path d=\"M69.5978 19.0967C68.3361 19.0003 65.7601 18.7374 64.9102 17.8437C64.0469 16.878 62.9449 16.1561 61.7148 15.7501C60.4847 15.3442 59.1695 15.2685 57.9009 15.5306C56.642 15.9059 55.5369 16.6754 54.7483 17.7259C53.9596 18.7764 53.5291 20.0524 53.52 21.3659C51.987 21.74 50.5835 22.5212 49.4576 23.627C48.3318 24.7327 47.5256 26.122 47.124 27.6481C46.7162 29.2456 46.7024 30.9184 47.084 32.5224C47.4655 34.1264 48.2309 35.6138 49.3144 36.8566C49.8408 37.5148 50.3209 38.2086 50.7513 38.9332C50.1572 39.6702 49.635 40.4624 49.1917 41.2988C47.1853 45.7323 52.6263 47.432 52.6263 47.432C52.6263 50.411 55.3863 50.3935 57.1474 50.3847C58.9085 50.376 59.881 55.081 61.2566 54.897L59.8635 40.3789C60.0675 40.4582 60.2842 40.4998 60.5031 40.5015C63.8238 40.5629 62.9564 34.2719 61.8875 32.616C62.8768 31.3844 63.7124 30.0368 64.3758 28.6031C64.9773 26.4114 65.0194 24.1039 64.4984 21.8916C65.6112 21.7515 70.141 19.1317 69.5978 19.0967Z\" fill=\"#263238\"/>\n<path d=\"M60.3008 41.1499C60.1876 40.6886 59.9595 40.2635 59.6376 39.9141C59.3158 39.5648 58.9107 39.3027 58.4602 39.1522C58.0096 39.0017 57.5283 38.9678 57.0611 39.0536C56.594 39.1394 56.1561 39.3422 55.7885 39.6429C54.9123 40.3964 54.4479 41.6581 54.9736 43.7697C56.393 49.4122 61.7639 46.8275 61.7289 46.6698C61.6939 46.5121 60.9141 43.4805 60.3008 41.1499Z\" fill=\"#FFBE9D\"/>\n<path d=\"M59.4678 44.9615C59.4678 44.9615 59.3889 45.0579 59.2399 45.1718C59.0328 45.3307 58.7721 45.4029 58.5127 45.3734C57.8644 45.3033 57.1196 44.4972 56.8392 43.4721C56.7056 42.9931 56.6787 42.4906 56.7604 42.0001C56.7693 41.8095 56.8241 41.624 56.9202 41.4592C57.0163 41.2944 57.1509 41.1554 57.3124 41.0538C57.4188 40.9965 57.5419 40.9782 57.6603 41.0022C57.7788 41.0263 57.8851 41.091 57.9607 41.1853C58.0746 41.3167 58.0659 41.4393 58.1009 41.4481C58.136 41.4569 58.1973 41.3167 58.1009 41.0976C58.0337 40.9677 57.9261 40.8632 57.7943 40.7997C57.6088 40.7247 57.4014 40.7247 57.216 40.7997C56.9959 40.9042 56.8059 41.0626 56.6634 41.2602C56.521 41.4578 56.4308 41.6882 56.4012 41.93C56.2875 42.4818 56.3086 43.0528 56.4625 43.5947C56.5603 44.1035 56.8062 44.5721 57.1694 44.9415C57.5326 45.311 57.9969 45.5648 58.504 45.6712C58.6689 45.6779 58.8332 45.6476 58.9848 45.5824C59.1365 45.5172 59.2715 45.4188 59.3801 45.2945C59.494 45.1017 59.494 44.9703 59.4678 44.9615Z\" fill=\"#EB996E\"/>\n<path d=\"M90.5537 33.2735C90.5537 33.2735 91.0706 32.8792 91.789 32.0031C92.7804 30.7406 93.3886 29.2201 93.5414 27.6222C93.6574 26.5314 93.5501 25.4284 93.226 24.3804C92.8517 23.1782 92.1583 22.1002 91.2195 21.2612C90.1357 20.3146 88.8233 19.6679 87.4124 19.3851C86.0015 19.1023 84.5412 19.1933 83.1763 19.649C82.9134 19.7367 82.6681 19.8681 82.4228 19.9732C82.1775 20.0784 81.9584 20.2361 81.7306 20.3675L81.3801 20.5603V20.1748C81.3726 19.496 81.1206 18.8428 80.6704 18.3348C80.2093 17.8418 79.6434 17.4586 79.0145 17.2133C77.8245 16.7174 76.5061 16.6191 75.2557 16.9329C72.8374 17.4849 70.7872 18.5889 68.8509 18.8167C67.3324 19.0806 65.7702 18.7681 64.47 17.9405C64.1269 17.7044 63.8299 17.4075 63.5938 17.0643C63.4537 16.8278 63.3836 16.6964 63.4011 16.6876C63.7186 17.1203 64.1066 17.4964 64.5489 17.8003C65.828 18.5387 67.3307 18.7907 68.7808 18.51C69.7897 18.3202 70.7762 18.0266 71.7247 17.6339C72.8382 17.1887 73.9797 16.817 75.1418 16.5211C75.7896 16.3644 76.4558 16.2966 77.1219 16.3196C77.8249 16.3567 78.5158 16.5169 79.1634 16.7927C79.8334 17.079 80.4318 17.5098 80.9158 18.0544C81.4339 18.6476 81.7256 19.4048 81.7393 20.1923L81.3889 19.9995L82.1161 19.579C82.3877 19.4738 82.6418 19.3336 82.9222 19.2372C84.3607 18.7446 85.9039 18.6416 87.3951 18.9386C88.8863 19.2356 90.2723 19.9221 91.4123 20.9283C92.3977 21.8204 93.119 22.966 93.4976 24.2402C93.8908 25.5906 93.9437 27.0174 93.6518 28.3933C93.3598 29.7691 92.7319 31.0514 91.8241 32.1257C91.5355 32.455 91.2091 32.7491 90.8515 33.0019C90.7636 33.1042 90.6636 33.1954 90.5537 33.2735Z\" fill=\"#455A64\"/>\n<path d=\"M89.4158 13.4635C88.8406 13.1715 88.2271 12.962 87.5934 12.8414C86.869 12.7424 86.1315 12.8113 85.438 13.0429C84.5398 13.3177 83.7594 13.8852 83.2213 14.6551L83.0023 14.9617L82.8708 14.6112C82.4134 13.5342 81.677 12.5986 80.7375 11.9009C79.798 11.2033 78.6895 10.7688 77.5262 10.6422C75.6991 10.5735 73.8985 11.0958 72.3918 12.1317C71.1083 12.9684 69.7432 13.673 68.3176 14.2345C67.3348 14.6063 66.2762 14.7326 65.2335 14.6025C64.9556 14.5512 64.6829 14.4749 64.4187 14.3747C64.2434 14.2958 64.1471 14.252 64.1558 14.2345C64.1646 14.217 64.5501 14.3484 65.2598 14.4185C66.2677 14.4815 67.2769 14.3168 68.2125 13.9366C69.5979 13.3325 70.9262 12.6053 72.1816 11.7637C72.9569 11.2822 73.7788 10.8801 74.6348 10.5633C75.5759 10.2202 76.5816 10.0915 77.5788 10.1866C78.8214 10.3223 80.004 10.7924 81.0007 11.5468C81.9974 12.3013 82.7709 13.3119 83.2388 14.4711H82.8971C83.4996 13.6477 84.36 13.0494 85.3416 12.7713C86.0875 12.555 86.8736 12.516 87.6372 12.6574C88.1207 12.7492 88.5837 12.9273 89.004 13.1831C89.154 13.2565 89.2926 13.3509 89.4158 13.4635Z\" fill=\"#455A64\"/>\n<path d=\"M78.3151 46.4498C78.245 46.4498 78.1662 46.187 77.9296 45.8278C77.6447 45.3462 77.2189 44.9636 76.7097 44.7317C76.2005 44.4998 75.6324 44.4298 75.0821 44.531C74.6527 44.5924 74.3899 44.715 74.3636 44.6537C74.3373 44.5924 74.5388 44.3821 75.012 44.2156C75.6313 44.0163 76.3024 44.0538 76.8957 44.3207C77.4944 44.5873 77.9679 45.0734 78.2187 45.6788C78.4027 46.1344 78.3765 46.4411 78.3151 46.4498Z\" fill=\"#263238\"/>\n<path d=\"M60.4323 47.5364C60.4323 47.5364 60.6864 47.9745 60.3534 48.6404C60.1651 49.0389 59.8335 49.3517 59.4247 49.5166C59.1696 49.6079 58.8967 49.6388 58.6277 49.6069C58.3586 49.575 58.1005 49.4811 57.8739 49.3326C57.6433 49.1924 57.4482 49.0008 57.3039 48.7729C57.1595 48.5449 57.0697 48.2867 57.0415 48.0183C57.0151 47.5855 57.1423 47.1573 57.4007 46.8092C57.8563 46.2309 58.3645 46.2134 58.3645 46.266C58.3645 46.3185 57.979 46.4675 57.6724 46.9932C57.4948 47.2877 57.4208 47.6331 57.4621 47.9745C57.4948 48.1745 57.5705 48.365 57.6839 48.5329C57.7974 48.7008 57.9459 48.8421 58.1192 48.9471C58.2902 49.0565 58.4824 49.1286 58.6832 49.1588C58.884 49.189 59.0889 49.1765 59.2845 49.1223C59.608 49.0065 59.8869 48.792 60.0818 48.509C60.4235 47.9657 60.3622 47.5364 60.4323 47.5364Z\" fill=\"#40B7B9\"/>\n<path d=\"M57.4795 47.1943C57.5233 47.1943 57.4795 47.4922 57.0677 47.685C56.8654 47.7691 56.6432 47.7935 56.4275 47.7553C56.2117 47.7172 56.0114 47.6181 55.8502 47.4698C55.6889 47.3214 55.5735 47.13 55.5175 46.9182C55.4616 46.7064 55.4675 46.483 55.5344 46.2744C55.6202 46.0374 55.7839 45.8366 55.9988 45.7048C56.358 45.4858 56.6296 45.5734 56.6208 45.626C56.6121 45.6786 56.4106 45.7399 56.1915 45.9589C56.0837 46.0936 56.0181 46.2571 56.0028 46.4289C55.9875 46.6007 56.0233 46.7732 56.1056 46.9247C56.1879 47.0763 56.3132 47.2002 56.4656 47.2809C56.618 47.3616 56.7909 47.3955 56.9625 47.3783C57.2604 47.317 57.4182 47.1593 57.4795 47.1943Z\" fill=\"#40B7B9\"/>\n<path d=\"M67.1082 125.008C67.1082 125.008 88.8022 126.269 101.629 126.383C111.556 126.48 115.99 123.842 117.97 117.455C119.635 112.102 116.06 101.824 116.06 101.824C109.34 101.824 105.195 102.788 100.876 104.812L102.024 109.508L67.0469 112.522L67.1082 125.008Z\" fill=\"#FFBE9D\"/>\n<path d=\"M109.314 114.521C108.374 113.298 107.275 112.205 106.046 111.271C104.729 110.464 103.308 109.839 101.823 109.413C102.291 109.346 102.768 109.388 103.216 109.536C104.319 109.796 105.364 110.256 106.3 110.894C107.239 111.533 108.05 112.341 108.692 113.277C109.183 113.995 109.367 114.495 109.314 114.521Z\" fill=\"#EB996E\"/>\n<path d=\"M59.1726 104.777C59.1726 104.777 52.4612 106.389 47.5283 109.683L52.7853 123.93C54.5377 128.609 59.8911 130.939 64.1756 128.486C70.7731 124.71 73.1038 113.705 73.1038 113.705L80.3497 82.2679L68.3374 74.7416L59.2164 104.777\" fill=\"#FFBE9D\"/>\n<path d=\"M68.2922 74.7426L68.7828 64.4038L66.093 53.8897C65.944 53.3114 65.874 52.5842 66.3471 52.2337C66.5817 52.0538 66.8714 51.9608 67.1669 51.9703C67.4624 51.9799 67.7455 52.0916 67.968 52.2863C68.6952 53.0398 72.1999 62.2309 72.1999 62.2309C72.1999 62.2309 77.5183 59.0416 78.4645 58.8839C79.4108 58.7262 80.5936 61.5913 80.6725 61.8103C80.7073 62.4523 80.7073 63.0958 80.6725 63.7379C80.6725 63.7379 83.9581 63.8343 84.256 64.2811C84.4949 65.194 84.6214 66.1326 84.6328 67.0761C84.6328 67.0761 86.0259 67.5229 86.2449 68.5743C86.464 69.6257 86.9196 71.3606 86.2449 71.7461C85.5703 72.1316 84.2035 72.8851 84.2035 72.8851C84.2035 72.8851 83.6515 78.2473 83.5025 78.7379C83.3536 79.2286 80.2782 82.2426 80.2782 82.2426L68.2922 74.7426Z\" fill=\"#FFBE9D\"/>\n<path d=\"M57.1123 128.696C57.1123 128.696 57.4365 128.888 58.1199 129.108C59.1192 129.421 60.1765 129.505 61.2128 129.353C62.8776 129.115 64.4368 128.397 65.6988 127.285C67.3665 125.772 68.7753 123.996 69.8694 122.028C70.5136 120.871 71.056 119.66 71.4903 118.409C71.946 117.033 72.3233 115.632 72.6206 114.213C73.304 111.26 74.0487 108.079 74.8373 104.697C76.4144 97.9421 78.1842 90.3895 80.0943 82.2499V82.1885H80.1381C80.7426 81.5927 81.3472 80.9882 81.9518 80.3573C82.2497 80.0419 82.5476 79.7265 82.8279 79.4023C82.9681 79.2358 83.1171 79.0694 83.231 78.9029C83.3197 78.738 83.3706 78.5554 83.3799 78.3684C83.6165 76.6161 83.8005 74.8024 83.9932 72.9712V72.8573L84.0984 72.8047L85.7719 71.8672C85.8945 71.7884 86.0873 71.7008 86.1662 71.6307C86.2499 71.5549 86.3055 71.453 86.3239 71.3415C86.3646 71.0509 86.3646 70.756 86.3239 70.4654C86.239 69.8228 86.1072 69.1874 85.9296 68.5641C85.6316 68.019 85.1312 67.613 84.5365 67.4338L84.3875 67.3812V67.2323C84.3875 66.7241 84.335 66.1984 84.2736 65.6815C84.2498 65.4226 84.2118 65.1652 84.1597 64.9104C84.1393 64.7982 84.1039 64.6891 84.0546 64.5862C84.0546 64.5249 84.0546 64.5863 84.002 64.5337C83.9543 64.5087 83.9045 64.4882 83.8531 64.4724C82.7993 64.2427 81.7247 64.1224 80.6463 64.1131H80.4185V63.8853C80.4185 63.3421 80.4185 62.7375 80.4185 62.133C80.3823 61.9268 80.3112 61.7282 80.2082 61.5459C80.1206 61.3357 80.0154 61.1341 79.9103 60.9239C79.7052 60.518 79.4648 60.131 79.1918 59.7673C79.0679 59.5978 78.9169 59.4498 78.745 59.3292C78.6815 59.2755 78.6034 59.2419 78.5208 59.2325C78.4381 59.2231 78.3545 59.2385 78.2806 59.2767C77.8567 59.439 77.444 59.6293 77.0452 59.8462C75.4155 60.7223 73.8209 61.5985 72.2613 62.5448L72.0335 62.685L71.9371 62.4396C71.1135 60.3631 70.2899 58.3129 69.4838 56.3064C69.0808 55.2988 68.6865 54.2912 68.2835 53.3012C68.2213 53.0794 68.0979 52.8795 67.9275 52.7246C67.757 52.5696 67.5464 52.4658 67.3197 52.425C67.1103 52.3555 66.8835 52.3593 66.6765 52.4357C66.4695 52.5121 66.2947 52.6566 66.1807 52.8456C66.0715 53.0335 66.0254 53.2516 66.0493 53.4676C66.0493 53.6604 66.1719 53.9583 66.2245 54.1949C66.3647 54.703 66.4961 55.2025 66.6275 55.7019C66.8904 56.7095 67.1445 57.6995 67.4073 58.6809C67.9213 60.6552 68.4266 62.5827 68.9231 64.4636V64.5249C68.7479 68.1231 68.5814 71.5693 68.4237 74.8638V74.8462L60.4417 100.816L58.19 108.044C57.9272 108.859 57.7256 109.499 57.5854 109.946C57.4453 110.393 57.3576 110.585 57.3576 110.585C57.3576 110.585 57.4014 110.357 57.5241 109.928L58.0761 108.009C58.5843 106.318 59.3115 103.874 60.2315 100.755C62.124 94.4812 64.8139 85.5267 68.0644 74.7323V74.7761C68.2163 71.4934 68.3711 68.0471 68.5288 64.4373V64.4986C68.0294 62.6149 67.5125 60.6873 66.9955 58.7247L66.207 55.7457C66.0755 55.2463 65.9441 54.7381 65.8039 54.2387C65.7286 53.9763 65.6671 53.7102 65.6199 53.4414C65.5876 53.1372 65.652 52.8306 65.8039 52.5652C65.9661 52.2919 66.2164 52.0818 66.5136 51.9694C66.8077 51.8833 67.1189 51.8736 67.4178 51.941C67.7167 52.0085 67.9935 52.1509 68.2222 52.3549C68.4421 52.5612 68.605 52.8207 68.6953 53.1084L69.8956 56.1137C70.7105 58.1289 71.5253 60.1791 72.3577 62.2469L72.0335 62.133C73.6019 61.2042 75.179 60.2755 76.8437 59.4081C77.2645 59.1881 77.6975 58.9922 78.1404 58.8211C78.2788 58.7635 78.4296 58.7424 78.5785 58.7597C78.7284 58.7814 78.8719 58.8352 78.9991 58.9174C79.2101 59.0688 79.3963 59.2521 79.551 59.4607C79.844 59.8441 80.0993 60.2548 80.3133 60.6873C80.4272 60.9063 80.5324 61.1166 80.6287 61.3357C80.7534 61.5676 80.8365 61.8197 80.8741 62.0804C80.8741 62.7025 80.8741 63.2808 80.8741 63.8327L80.655 63.5962C81.7813 63.6037 82.9035 63.733 84.002 63.9817C84.0774 64.008 84.1507 64.0403 84.2211 64.0781C84.3173 64.1305 84.3964 64.2096 84.4489 64.3059C84.5168 64.4481 84.5669 64.5982 84.5978 64.7527C84.6504 65.0331 84.6854 65.296 84.7205 65.5676C84.773 66.102 84.8081 66.6277 84.8344 67.1534L84.6767 66.9432C85.0349 67.0483 85.3681 67.2252 85.6558 67.4632C85.9435 67.7012 86.1797 67.9953 86.3501 68.3275C86.5422 68.9933 86.6828 69.6729 86.7707 70.3602C86.8316 70.711 86.8316 71.0696 86.7707 71.4204C86.7326 71.6329 86.6209 71.8252 86.4553 71.9636C86.3116 72.0598 86.1624 72.1476 86.0085 72.2265L84.3437 73.0939L84.4576 72.9274C84.2561 74.7586 84.0721 76.5548 83.8268 78.3334L83.7742 78.6751C83.7539 78.8134 83.6964 78.9437 83.6077 79.0518C83.4787 79.2437 83.3352 79.4253 83.1784 79.5951C82.8805 79.928 82.5826 80.2522 82.3022 80.5676C81.6977 81.1985 81.0931 81.803 80.4798 82.3988L80.5411 82.2937C78.6135 90.4246 76.8262 97.9771 75.2228 104.732C74.4255 108.106 73.6632 111.286 72.9622 114.23C72.6624 115.66 72.2762 117.07 71.8057 118.453C71.3549 119.716 70.798 120.938 70.141 122.107C69.0217 124.1 67.5798 125.894 65.874 127.417C64.5744 128.535 62.975 129.248 61.2741 129.467C60.2154 129.609 59.1381 129.501 58.1287 129.151C57.8719 129.057 57.6229 128.943 57.3839 128.81L57.1123 128.696Z\" fill=\"#EB996E\"/>\n<path d=\"M80.68 63.7638C80.68 63.8251 80.3821 63.8601 79.9177 63.8777C79.328 63.8889 78.741 63.9593 78.1654 64.0879C77.6098 64.2245 77.0976 64.4987 76.6759 64.8853C76.3604 65.1832 76.2203 65.4372 76.1502 65.411C76.0801 65.3847 76.1502 65.0693 76.4393 64.6662C76.8473 64.156 77.4152 63.798 78.0514 63.6499C78.6648 63.4987 79.3017 63.4689 79.9265 63.5622C80.3996 63.6236 80.68 63.7024 80.68 63.7638Z\" fill=\"#EB996E\"/>\n<path d=\"M78.1395 63.8603C78.0256 63.8165 78.0169 63.5449 78.1395 63.2557C78.2622 62.9666 78.4374 62.7651 78.5513 62.8089C78.6652 62.8527 78.6828 63.1243 78.5513 63.4134C78.4199 63.7026 78.2271 63.9041 78.1395 63.8603Z\" fill=\"#EB996E\"/>\n<path d=\"M84.7807 67.0401C83.9302 67.3032 83.0421 67.4246 82.1522 67.3993C81.8721 67.3899 81.5938 67.4479 81.3407 67.5684C81.0876 67.6888 80.8672 67.8682 80.6978 68.0915C80.47 68.4507 80.5488 68.7486 80.4787 68.7661C80.4086 68.7836 80.1983 68.477 80.4174 67.9513C80.538 67.6553 80.758 67.4105 81.0395 67.2591C81.3638 67.0811 81.7221 66.9736 82.0909 66.9437C82.9856 66.8067 83.8981 66.8394 84.7807 67.0401Z\" fill=\"#EB996E\"/>\n<path d=\"M84.2028 70.1949C84.3254 70.1949 84.3955 70.8433 84.3605 71.6406C84.3254 72.4379 84.194 73.0688 84.0713 73.0688C83.9487 73.0688 83.8698 72.4117 83.9048 71.6143C83.9399 70.817 84.0713 70.1862 84.2028 70.1949Z\" fill=\"#EB996E\"/>\n<path d=\"M87.8398 93.7911L88.6196 91.11C88.6553 90.9872 88.7223 90.8759 88.8141 90.787C88.9059 90.698 89.0193 90.6345 89.1431 90.6027C89.2668 90.5708 89.3968 90.5718 89.5201 90.6054C89.6434 90.6391 89.7558 90.7043 89.8463 90.7945L90.8714 91.8372L91.5022 89.3051C91.5393 89.1588 91.6205 89.0274 91.7348 88.9288C91.849 88.8302 91.9909 88.7692 92.141 88.7539C92.2911 88.7386 92.4424 88.7698 92.5742 88.8433C92.706 88.9168 92.812 89.0291 92.8778 89.1649L94.306 92.1614L87.8398 93.7911Z\" fill=\"white\"/>\n<path d=\"M94.3221 93.3083C93.342 93.782 92.3013 94.1181 91.2293 94.3072C90.1925 94.6458 89.1126 94.8347 88.0225 94.8679C90.0396 94.0577 92.1599 93.5327 94.3221 93.3083Z\" fill=\"white\"/>\n<path d=\"M42.217 78.3523C42.217 78.3523 41.8928 78.6853 41.4372 79.395C40.8256 80.4056 40.4234 81.5289 40.2544 82.6981C40.0047 84.439 39.9518 86.2024 40.0967 87.9552C40.1931 89.9441 40.3508 92.117 40.5961 94.395C41.0111 98.2854 41.6282 102.152 42.4449 105.978C42.7515 107.45 43.0319 108.607 43.2246 109.483C43.3123 109.851 43.3911 110.157 43.4524 110.42C43.5138 110.683 43.5225 110.753 43.5225 110.753C43.5225 110.753 43.4787 110.648 43.4174 110.438C43.3561 110.227 43.2597 109.859 43.1633 109.5C42.9443 108.685 42.6464 107.511 42.2871 106.039C41.4354 102.214 40.8007 98.3442 40.3858 94.4476C40.1405 92.1695 39.9916 89.9879 39.9039 87.999C39.7712 86.2449 39.8358 84.4815 40.0967 82.7419C40.285 81.5575 40.7144 80.4243 41.3584 79.4125C41.5956 79.0221 41.8845 78.6655 42.217 78.3523Z\" fill=\"white\"/>\n<path d=\"M60.6602 66.4184L60.4587 66.5235L59.8804 66.8039C59.381 67.0405 58.6538 67.3909 57.7864 67.8728C55.5251 69.134 53.329 70.5084 51.2063 71.9909C48.7005 73.7432 46.4837 75.3378 44.8628 76.4944L42.944 77.8524L42.4096 78.2117C42.3499 78.2593 42.2852 78.3004 42.2168 78.3343C42.2667 78.2755 42.3259 78.2252 42.392 78.1854L42.9002 77.7999L44.784 76.3892C46.3874 75.2064 48.5953 73.5592 51.1012 71.8419C53.2277 70.3531 55.4395 68.9898 57.725 67.7589C58.6012 67.2946 59.3372 66.9616 59.8541 66.7426L60.4412 66.4973C60.6164 66.4359 60.6164 66.4096 60.6602 66.4184Z\" fill=\"white\"/>\n<path d=\"M102.444 72.1224C102.389 72.092 102.339 72.0536 102.295 72.0085L101.901 71.6668C101.413 71.2546 100.901 70.8713 100.368 70.519C98.5892 69.3849 96.702 68.431 94.7341 67.6715C92.7722 66.8943 90.7685 66.2274 88.7323 65.6738C87.9437 65.4547 87.3129 65.297 86.866 65.1919L86.3667 65.0605C86.3058 65.0479 86.2468 65.0273 86.1914 64.9991H86.3754L86.8836 65.0955C87.3304 65.1831 87.97 65.3233 88.7586 65.5248C90.8142 66.0438 92.8337 66.6964 94.8042 67.4787C96.7834 68.2381 98.6728 69.2136 100.438 70.3876C101.173 70.885 101.846 71.4673 102.444 72.1224Z\" fill=\"white\"/>\n<path d=\"M60.9062 139.001C60.7873 138.98 60.6722 138.942 60.5645 138.887C60.2601 138.753 59.9671 138.595 59.6883 138.414C59.2163 138.131 58.8047 137.758 58.477 137.316C58.1492 136.874 57.9118 136.372 57.7783 135.838C57.5377 134.761 57.6578 133.634 58.12 132.631C58.2535 132.32 58.4242 132.026 58.6282 131.755C58.7683 131.571 58.8647 131.484 58.8735 131.492C58.6345 131.866 58.4208 132.255 58.2339 132.658C57.8266 133.642 57.7318 134.728 57.9623 135.768C58.2132 136.795 58.838 137.692 59.7146 138.283C60.4418 138.808 60.9237 138.966 60.9062 139.001Z\" fill=\"white\"/>\n<path d=\"M58.1182 129.512C58.3045 129.859 58.443 130.231 58.53 130.616C58.6671 130.984 58.7497 131.371 58.7753 131.763C58.5762 131.424 58.4341 131.054 58.3547 130.668C58.2111 130.299 58.1311 129.908 58.1182 129.512Z\" fill=\"white\"/>\n</svg>\n",
  establishment: "<svg width=\"209\" height=\"140\" viewBox=\"0 0 209 140\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n<path d=\"M208.085 132.067H0V132.171H208.085V132.067Z\" fill=\"#EBEBEB\"/>\n<path d=\"M137.844 139.896H134.228V140H137.844V139.896Z\" fill=\"#EBEBEB\"/>\n<path d=\"M72.0892 134.722H62.4424V134.826H72.0892V134.722Z\" fill=\"#EBEBEB\"/>\n<path d=\"M190.927 136.953H167.343V137.057H190.927V136.953Z\" fill=\"#EBEBEB\"/>\n<path d=\"M41.3637 136.953H17.7793V137.057H41.3637V136.953Z\" fill=\"#EBEBEB\"/>\n<path d=\"M168.432 7.15814C168.549 4.45719 166.913 2.37217 164.271 1.93519C163.459 0.740785 162.057 0 160.271 0C157.483 0 154.603 1.80202 153.051 4.30737C151.965 4.46523 150.923 4.84169 149.988 5.41397C149.052 5.98624 148.242 6.74242 147.607 7.63673C147.325 7.54552 147.03 7.50054 146.733 7.50356C145.829 7.55736 144.963 7.88583 144.251 8.44508C143.538 9.00432 143.013 9.76769 142.746 10.6332C142.623 11.0458 142.592 11.4806 142.655 11.9066H169.781C170.046 11.5161 170.248 11.0864 170.38 10.6332C170.854 8.89357 170.01 7.4661 168.432 7.15814Z\" fill=\"#F5F5F5\"/>\n<path d=\"M43.6973 14.5161C43.7991 13.442 43.4797 12.3703 42.8066 11.5272C42.1334 10.684 41.1591 10.1352 40.0891 9.9965C39.6969 9.45297 39.1751 9.01601 38.5712 8.72531C37.9672 8.4346 37.3002 8.29934 36.6308 8.33181C34.217 8.33181 31.7283 9.89245 30.3882 12.0774C29.4472 12.2186 28.5447 12.5497 27.7355 13.0505C26.9264 13.5513 26.2275 14.2113 25.6813 14.9905C25.4366 14.9119 25.1809 14.8726 24.9239 14.874C24.1414 14.9175 23.3908 15.1986 22.7722 15.6797C22.1535 16.1607 21.6963 16.819 21.4613 17.5666C21.3542 17.9225 21.3272 18.2978 21.3823 18.6653H44.8501C45.0806 18.3289 45.2562 17.9581 45.3703 17.5666C45.8073 16.0185 45.0749 14.7658 43.6973 14.5161Z\" fill=\"#F5F5F5\"/>\n<path d=\"M114.28 15.6736C113.319 15.6789 112.365 15.8319 111.45 16.1273C109.605 14.5835 107.281 13.7288 104.875 13.7093C103.452 9.22298 99.394 6.21823 93.7757 6.21823C88.3946 6.21823 82.872 8.96912 78.9184 13.1433C78.6021 13.1142 78.2816 13.1017 77.9487 13.1017C71.4689 13.1017 64.7228 18.3538 62.875 24.8335C62.6364 25.6558 62.4871 26.5013 62.4297 27.3555H118.53C119.277 26.336 119.84 25.1938 120.194 23.9804C121.522 19.3942 118.871 15.6736 114.28 15.6736Z\" fill=\"#FAFAFA\"/>\n<path d=\"M41.068 95.2495H21.3623V132.064H41.068V95.2495Z\" fill=\"#E0E0E0\"/>\n<path d=\"M38.7792 87.2382H23.6514V95.7572H38.7792V87.2382Z\" fill=\"#E0E0E0\"/>\n<path d=\"M39.8411 86.6762H22.5908V87.9996H39.8411V86.6762Z\" fill=\"#E0E0E0\"/>\n<path d=\"M157.604 73.8788L182.329 82.2605V132.068H157.604V73.8788Z\" fill=\"#E0E0E0\"/>\n<path d=\"M162.336 65.4307L177.597 70.6079V101.35H162.336V65.4307Z\" fill=\"#E0E0E0\"/>\n<path d=\"M171.425 61.4519H107.938V132.122H171.425V61.4519Z\" fill=\"#F5F5F5\"/>\n<path d=\"M175.882 58.3969H103.489V62.6502H175.882V58.3969Z\" fill=\"#F5F5F5\"/>\n<path d=\"M172.986 81.3241H106.378V85.5773H172.986V81.3241Z\" fill=\"#F5F5F5\"/>\n<path d=\"M172.986 103.572H106.378V107.826H172.986V103.572Z\" fill=\"#F5F5F5\"/>\n<path d=\"M81.9521 35.333L116.424 49.2706V132.068H81.9521V35.333Z\" fill=\"#EBEBEB\"/>\n<path d=\"M88.5479 21.2918L109.827 29.894V81.004H88.5479V21.2918Z\" fill=\"#EBEBEB\"/>\n<path d=\"M94.6123 12.7763L96.1563 13.4006V31.6081H94.6123V12.7763Z\" fill=\"#EBEBEB\"/>\n<path d=\"M74.8065 61.1982L29.7852 71.4069V132.068H74.8065V61.1982Z\" fill=\"#F0F0F0\"/>\n<path d=\"M66.1871 36.2065L38.3994 42.5115V94.6535H66.1871V36.2065Z\" fill=\"#F0F0F0\"/>\n<path d=\"M58.2678 20.4131L56.9277 21.1872V58.4677H58.2678V20.4131Z\" fill=\"#F0F0F0\"/>\n<path d=\"M45.5959 25.5243L44.2559 26.2983V63.5831H45.5959V25.5243Z\" fill=\"#F0F0F0\"/>\n<path d=\"M94.0547 80.9621H53.5488V132.068H94.0547V80.9621Z\" fill=\"#F5F5F5\"/>\n<path d=\"M89.3524 69.8379H58.252V81.6655H89.3524V69.8379Z\" fill=\"#F5F5F5\"/>\n<path d=\"M91.5332 69.0591H56.0713V70.8986H91.5332V69.0591Z\" fill=\"#F5F5F5\"/>\n<path d=\"M154.124 53.6025H128.726V132.067H154.124V53.6025Z\" fill=\"#F0F0F0\"/>\n<path d=\"M151.174 36.5316H131.672V54.6892H151.174V36.5316Z\" fill=\"#F0F0F0\"/>\n<path d=\"M152.543 35.333H130.307V38.1547H152.543V35.333Z\" fill=\"#F0F0F0\"/>\n<path d=\"M19.6636 132.067H86.7129L86.7129 63.224L19.6636 63.224L19.6636 132.067Z\" fill=\"#40B7B9\"/>\n<path opacity=\"0.4\" d=\"M19.6636 132.067H86.7129L86.7129 63.224L19.6636 63.224L19.6636 132.067Z\" fill=\"white\"/>\n<path d=\"M87.2673 132.063H19.111V129.37C19.111 129.244 19.1358 129.12 19.1839 129.004C19.232 128.888 19.3025 128.782 19.3914 128.693C19.4803 128.604 19.5858 128.534 19.7019 128.486C19.8181 128.438 19.9425 128.413 20.0682 128.413H86.3143C86.44 128.413 86.5645 128.438 86.6806 128.486C86.7967 128.534 86.9022 128.604 86.9911 128.693C87.08 128.782 87.1505 128.888 87.1986 129.004C87.2467 129.12 87.2715 129.244 87.2715 129.37V132.063H87.2673Z\" fill=\"#40B7B9\"/>\n<path d=\"M19.1106 77.974H87.2669V78.8438C87.2669 79.0977 87.166 79.3411 86.9865 79.5207C86.807 79.7002 86.5636 79.801 86.3097 79.801H20.0636C19.8098 79.801 19.5663 79.7002 19.3868 79.5207C19.2073 79.3411 19.1064 79.0977 19.1064 78.8438V77.974H19.1106Z\" fill=\"#263238\"/>\n<path d=\"M87.2673 63.8318L19.111 63.8318V62.962C19.111 62.7081 19.2119 62.4646 19.3914 62.2851C19.5709 62.1056 19.8144 62.0048 20.0682 62.0048L86.3143 62.0048C86.5682 62.0048 86.8116 62.1056 86.9911 62.2851C87.1706 62.4646 87.2715 62.7081 87.2715 62.962V63.8318H87.2673Z\" fill=\"#263238\"/>\n<path d=\"M63.9867 93.538H42.3916V132.063H63.9867V93.538Z\" fill=\"white\"/>\n<path opacity=\"0.4\" d=\"M62.7333 83.6503H43.6436V88.4945H62.7333V83.6503Z\" fill=\"#40B7B9\"/>\n<path d=\"M39.2537 88.1869H23.9844V117.797H39.2537V88.1869Z\" fill=\"white\"/>\n<path opacity=\"0.3\" d=\"M37.8923 89.5475H25.3447V116.44H37.8923V89.5475Z\" fill=\"#40B7B9\"/>\n<path opacity=\"0.3\" d=\"M43.9009 112.803H62.4746V96.2352H43.9009V112.803Z\" fill=\"#40B7B9\"/>\n<path d=\"M58.2643 110.755H62.426C62.5049 110.755 62.5831 110.77 62.656 110.8C62.729 110.83 62.7953 110.874 62.851 110.929C62.9068 110.985 62.9509 111.051 62.9808 111.124C63.0108 111.197 63.0259 111.276 63.0253 111.354C63.0253 111.513 62.9622 111.666 62.8498 111.778C62.7374 111.891 62.585 111.954 62.426 111.954H58.2643C58.1054 111.954 57.953 111.891 57.8406 111.778C57.7282 111.666 57.6651 111.513 57.6651 111.354C57.6645 111.276 57.6796 111.197 57.7095 111.124C57.7395 111.051 57.7836 110.985 57.8393 110.929C57.8951 110.874 57.9614 110.83 58.0344 110.8C58.1073 110.77 58.1855 110.755 58.2643 110.755Z\" fill=\"white\"/>\n<path opacity=\"0.4\" d=\"M55.3636 95.8436L47.1817 129.762H45.7168L53.8987 95.8436H55.3636Z\" fill=\"white\"/>\n<path opacity=\"0.4\" d=\"M59.6707 95.8436L51.4888 129.762H48.6172L56.7991 95.8436H59.6707Z\" fill=\"white\"/>\n<path opacity=\"0.4\" d=\"M31.875 89.5475L26.6812 116.436H24.8584L30.0522 89.5475H31.875Z\" fill=\"white\"/>\n<path opacity=\"0.4\" d=\"M35.0958 89.5475L29.902 116.436H27.6797L32.8777 89.5475H35.0958Z\" fill=\"white\"/>\n<path d=\"M67.1203 117.796H82.3896V88.1857H67.1203V117.796Z\" fill=\"white\"/>\n<path opacity=\"0.3\" d=\"M68.4854 89.5427V116.436H81.0329V89.5427H68.4854Z\" fill=\"#40B7B9\"/>\n<path opacity=\"0.4\" d=\"M78.1478 89.5475L72.9498 116.436H71.127L76.3249 89.5475H78.1478Z\" fill=\"white\"/>\n<path opacity=\"0.4\" d=\"M81.3703 89.5475L76.1765 116.436H73.9541L79.1479 89.5475H81.3703Z\" fill=\"white\"/>\n<path d=\"M156.094 76.7666H89.0449V132.067H156.094V76.7666Z\" fill=\"#40B7B9\"/>\n<path opacity=\"0.2\" d=\"M156.094 76.7666H89.0449V132.067H156.094V76.7666Z\" fill=\"black\"/>\n<path d=\"M89.4484 122.979H155.694C155.948 122.979 156.192 123.079 156.371 123.259C156.551 123.438 156.652 123.682 156.652 123.936V132.068H88.4912V123.932C88.4912 123.806 88.516 123.681 88.5641 123.565C88.6122 123.449 88.6827 123.344 88.7716 123.255C88.8604 123.166 88.966 123.095 89.0821 123.047C89.1982 122.999 89.3227 122.974 89.4484 122.974V122.979Z\" fill=\"#263238\"/>\n<path d=\"M102.644 90.4879H94.25V92.5022H102.644V90.4879Z\" fill=\"#40B7B9\"/>\n<path d=\"M153.88 90.4879H145.485V92.5022H153.88V90.4879Z\" fill=\"#40B7B9\"/>\n<path d=\"M106.843 92.5021H98.4492V94.5164H106.843V92.5021Z\" fill=\"#40B7B9\"/>\n<path d=\"M131.002 119.104H139.396V117.09H131.002V119.104Z\" fill=\"#40B7B9\"/>\n<path d=\"M126.808 121.114H135.202V119.1H126.808V121.114Z\" fill=\"#40B7B9\"/>\n<path d=\"M117.589 93.5387H95.9941V132.064H117.589V93.5387Z\" fill=\"white\"/>\n<path d=\"M151.266 93.5387H120.91V117.793H151.266V93.5387Z\" fill=\"white\"/>\n<path opacity=\"0.3\" d=\"M122.267 94.8995V116.436H149.904V94.8995H122.267Z\" fill=\"#40B7B9\"/>\n<path opacity=\"0.3\" d=\"M116.079 96.2347H97.5049V129.374H116.079V96.2347Z\" fill=\"#40B7B9\"/>\n<path d=\"M116.628 111.367H96.9473V114.239H116.628V111.367Z\" fill=\"white\"/>\n<path opacity=\"0.4\" d=\"M108.966 95.8443L100.784 129.762H99.3193L107.501 95.8443H108.966Z\" fill=\"white\"/>\n<path opacity=\"0.4\" d=\"M113.273 95.8443L105.091 129.762H102.22L110.402 95.8443H113.273Z\" fill=\"white\"/>\n<path opacity=\"0.4\" d=\"M136.612 94.9035L131.419 116.436H129.596L134.79 94.9035H136.612Z\" fill=\"white\"/>\n<path opacity=\"0.4\" d=\"M145.485 94.9035L140.291 116.436H134.561L139.754 94.9035H145.485Z\" fill=\"white\"/>\n<path d=\"M91.6947 79.4341H82.8428L93.2554 70.424H99.7934L91.6947 79.4341Z\" fill=\"#40B7B9\"/>\n<path d=\"M100.547 79.4343H91.6953L99.794 70.4242H106.332L100.547 79.4343Z\" fill=\"white\"/>\n<path d=\"M109.399 79.4343H100.547L106.332 70.4242H112.87L109.399 79.4343Z\" fill=\"#40B7B9\"/>\n<path d=\"M118.25 79.4343H109.398L112.869 70.4242H119.407L118.25 79.4343Z\" fill=\"white\"/>\n<path d=\"M127.103 79.4343H118.251L119.408 70.4242H125.946L127.103 79.4343Z\" fill=\"#40B7B9\"/>\n<path d=\"M135.958 79.4343H127.102L125.945 70.4242H132.483L135.958 79.4343Z\" fill=\"white\"/>\n<path d=\"M144.81 79.4343H135.958L132.483 70.4242H139.021L144.81 79.4343Z\" fill=\"#40B7B9\"/>\n<path d=\"M162.514 79.4343H153.662L145.56 70.4242H152.102L162.514 79.4343Z\" fill=\"#40B7B9\"/>\n<path d=\"M153.662 79.4343H144.81L139.021 70.4242H145.56L153.662 79.4343Z\" fill=\"white\"/>\n<path d=\"M87.2669 87.6869C86.0933 87.6869 84.9676 87.221 84.1373 86.3915C83.307 85.5619 82.84 84.4367 82.8389 83.263V79.4343H91.695V83.263C91.6939 84.4367 91.2269 85.5619 90.3966 86.3915C89.5663 87.221 88.4406 87.6869 87.2669 87.6869Z\" fill=\"#40B7B9\"/>\n<path d=\"M96.1358 87.6869C94.9625 87.6869 93.8373 87.2208 93.0076 86.3912C92.178 85.5616 91.7119 84.4363 91.7119 83.263V79.4343H100.547V83.263C100.547 84.4342 100.083 85.5575 99.2559 86.3868C98.429 87.2161 97.3069 87.6836 96.1358 87.6869Z\" fill=\"white\"/>\n<path d=\"M104.971 87.6869C103.797 87.6869 102.672 87.2208 101.843 86.3912C101.013 85.5616 100.547 84.4363 100.547 83.263V79.4343H109.399V83.263C109.399 83.8443 109.284 84.4199 109.062 84.9569C108.839 85.494 108.513 85.9818 108.102 86.3927C107.69 86.8035 107.202 87.1293 106.665 87.3514C106.128 87.5735 105.552 87.6875 104.971 87.6869Z\" fill=\"#40B7B9\"/>\n<path d=\"M109.399 79.4343H118.251V83.263C118.251 84.4374 117.784 85.5637 116.954 86.3942C116.123 87.2246 114.997 87.6911 113.823 87.6911C112.648 87.6911 111.522 87.2246 110.691 86.3942C109.861 85.5637 109.395 84.4374 109.395 83.263V79.4343H109.399Z\" fill=\"white\"/>\n<path d=\"M122.679 87.6869C122.098 87.6875 121.522 87.5735 120.985 87.3514C120.448 87.1293 119.959 86.8035 119.548 86.3927C119.137 85.9818 118.811 85.494 118.588 84.9569C118.366 84.4199 118.251 83.8443 118.251 83.263V79.4343H127.103V83.263C127.103 84.4363 126.637 85.5616 125.807 86.3912C124.978 87.2208 123.852 87.6869 122.679 87.6869Z\" fill=\"#40B7B9\"/>\n<path d=\"M127.103 79.4342H135.955V83.263C135.954 83.8455 135.839 84.4223 135.615 84.9601C135.391 85.498 135.063 85.9863 134.65 86.3973C134.238 86.8083 133.748 87.1337 133.209 87.355C132.67 87.5763 132.093 87.6891 131.51 87.6869C130.336 87.6869 129.209 87.2204 128.379 86.3899C127.549 85.5595 127.082 84.4332 127.082 83.2588V79.4301L127.103 79.4342Z\" fill=\"white\"/>\n<path d=\"M140.382 87.6869C139.209 87.6869 138.083 87.2208 137.254 86.3912C136.424 85.5616 135.958 84.4363 135.958 83.263V79.4343H144.827V83.263C144.827 83.8457 144.712 84.4227 144.488 84.9608C144.264 85.4989 143.937 85.9875 143.524 86.3986C143.111 86.8097 142.62 87.1351 142.081 87.3562C141.542 87.5773 140.965 87.6897 140.382 87.6869Z\" fill=\"#40B7B9\"/>\n<path d=\"M158.087 87.6869C156.914 87.6869 155.788 87.2208 154.959 86.3912C154.129 85.5616 153.663 84.4363 153.663 83.263V79.4343H162.515V83.263C162.515 83.8443 162.4 84.4199 162.178 84.9569C161.955 85.494 161.629 85.9818 161.218 86.3927C160.807 86.8035 160.318 87.1293 159.781 87.3514C159.244 87.5735 158.668 87.6875 158.087 87.6869Z\" fill=\"#40B7B9\"/>\n<path d=\"M144.827 79.4343H153.679V83.263C153.679 84.4374 153.213 85.5637 152.382 86.3942C151.552 87.2246 150.425 87.6911 149.251 87.6911C148.077 87.69 146.952 87.223 146.123 86.3927C145.293 85.5624 144.827 84.4367 144.827 83.263V79.4343Z\" fill=\"white\"/>\n<path d=\"M115.5 112.553C116.194 112.553 116.757 111.99 116.757 111.296C116.757 110.602 116.194 110.039 115.5 110.039C114.806 110.039 114.243 110.602 114.243 111.296C114.243 111.99 114.806 112.553 115.5 112.553Z\" fill=\"#40B7B9\"/>\n<path d=\"M176.627 101.628H174.754V125.5H176.627V101.628Z\" fill=\"#263238\"/>\n<path d=\"M182.592 119H168.787C168.701 118.994 168.615 119.006 168.534 119.037C168.453 119.067 168.38 119.115 168.32 119.177C168.26 119.239 168.215 119.314 168.187 119.395C168.159 119.477 168.149 119.564 168.159 119.65L170.302 131.581C170.336 131.721 170.417 131.846 170.533 131.932C170.648 132.019 170.79 132.062 170.935 132.056H180.448C180.592 132.062 180.733 132.019 180.848 131.932C180.963 131.845 181.044 131.721 181.077 131.581L183.224 119.65C183.234 119.563 183.224 119.476 183.196 119.394C183.168 119.312 183.122 119.238 183.061 119.176C183.001 119.113 182.927 119.066 182.846 119.035C182.765 119.005 182.678 118.993 182.592 119Z\" fill=\"#40B7B9\"/>\n<path opacity=\"0.5\" d=\"M182.592 119H168.787C168.701 118.994 168.615 119.006 168.534 119.037C168.453 119.067 168.38 119.115 168.32 119.177C168.26 119.239 168.215 119.314 168.187 119.395C168.159 119.477 168.149 119.564 168.159 119.65L170.302 131.581C170.336 131.721 170.417 131.846 170.533 131.932C170.648 132.019 170.79 132.062 170.935 132.056H180.448C180.592 132.062 180.733 132.019 180.848 131.932C180.963 131.845 181.044 131.721 181.077 131.581L183.224 119.65C183.234 119.563 183.224 119.476 183.196 119.394C183.168 119.312 183.122 119.238 183.061 119.176C183.001 119.113 182.927 119.066 182.846 119.035C182.765 119.005 182.678 118.993 182.592 119Z\" fill=\"white\"/>\n<path d=\"M184.734 98.999C184.735 98.8751 184.704 98.753 184.645 98.6439C184.587 98.5349 184.501 98.4423 184.397 98.3748C184.337 98.3155 184.266 98.2676 184.189 98.2333C184.128 98.2653 184.058 98.2719 183.992 98.2516C183.926 98.2313 183.872 98.1858 183.84 98.1251C183.808 98.0644 183.801 97.9934 183.821 97.9279C183.842 97.8623 183.887 97.8075 183.948 97.7755C183.924 97.6182 183.851 97.4724 183.74 97.3593C183.799 97.2486 183.83 97.1249 183.83 96.9993C183.83 96.8737 183.799 96.75 183.74 96.6393C183.669 96.5052 183.558 96.3962 183.423 96.3272C183.185 95.8104 182.877 95.3287 182.508 94.8956C182.612 94.7671 182.671 94.6075 182.674 94.442C182.676 94.2898 182.633 94.1406 182.549 94.0136C182.465 93.8867 182.345 93.788 182.204 93.7303C182.253 93.6453 182.284 93.5515 182.296 93.4544C182.308 93.3572 182.301 93.2587 182.275 93.1643C182.249 93.0686 182.205 92.9789 182.145 92.9003C182.084 92.8217 182.009 92.7558 181.923 92.7063C181.838 92.6568 181.743 92.6248 181.645 92.6119C181.546 92.5991 181.447 92.6058 181.351 92.6316C181.262 92.6556 181.179 92.6966 181.105 92.7523L181.06 92.7232C180.929 92.6659 180.785 92.6458 180.643 92.6649C180.56 92.5735 180.456 92.5036 180.34 92.461H180.306C180.369 92.4074 180.422 92.3442 180.464 92.2737C180.566 92.1021 180.596 91.8969 180.547 91.7034C180.498 91.5099 180.374 91.3437 180.202 91.2416C180.051 91.1508 179.872 91.1164 179.698 91.1446C179.523 91.1728 179.364 91.2617 179.249 91.3956L179.178 91.3748C179.052 91.3506 178.921 91.3607 178.8 91.4039C178.726 91.3169 178.633 91.2477 178.529 91.2016C178.424 91.1555 178.31 91.1336 178.196 91.1376C178.174 90.9817 178.103 90.8367 177.995 90.723C177.886 90.6094 177.744 90.5327 177.589 90.5037C177.434 90.4748 177.274 90.4951 177.132 90.5617C176.989 90.6284 176.871 90.7381 176.794 90.8754C176.765 90.9247 176.744 90.978 176.731 91.0335C176.659 90.9943 176.58 90.9675 176.498 90.9544C176.334 90.9286 176.166 90.9578 176.02 91.0377C175.938 90.8956 175.81 90.7856 175.658 90.7255C175.566 90.6882 175.468 90.6694 175.369 90.6702C175.269 90.6709 175.171 90.6912 175.08 90.7298C174.989 90.7685 174.906 90.8248 174.837 90.8955C174.767 90.9661 174.713 91.0498 174.676 91.1417C174.663 91.1728 174.654 91.2048 174.646 91.2374C174.554 91.1426 174.437 91.0742 174.309 91.0391C174.181 91.004 174.046 91.0035 173.918 91.0377C173.892 91.1105 173.845 91.1744 173.784 91.2224C173.724 91.2703 173.65 91.3002 173.573 91.3089C173.496 91.3175 173.419 91.3045 173.349 91.2713C173.279 91.2381 173.219 91.186 173.177 91.1209C172.645 91.2554 172.114 91.3942 171.583 91.5371C171.476 91.6657 171.416 91.8272 171.413 91.9949C171.351 91.9866 171.288 91.9866 171.225 91.9949C171.072 92.0252 170.932 92.1024 170.825 92.2157C170.718 92.329 170.648 92.4729 170.626 92.6275C170.521 92.6145 170.415 92.6245 170.314 92.6566C170.136 92.7186 169.988 92.8448 169.898 93.0103C169.86 92.9841 169.818 92.9644 169.773 92.9521C169.68 92.9185 169.581 92.9037 169.482 92.9086C169.383 92.9134 169.286 92.9378 169.197 92.9804C169.107 93.023 169.027 93.0829 168.961 93.1566C168.895 93.2303 168.844 93.3164 168.812 93.4099C168.766 93.5421 168.758 93.6843 168.788 93.8208C168.818 93.9574 168.886 94.083 168.982 94.1839C168.982 94.1839 168.982 94.1839 168.982 94.2047C168.937 94.321 168.921 94.447 168.937 94.571L168.882 94.6084C168.795 94.6878 168.727 94.786 168.683 94.8956H168.624C168.427 94.8744 168.228 94.932 168.073 95.0558C167.917 95.1796 167.816 95.3598 167.792 95.5573C167.784 95.6167 167.784 95.6769 167.792 95.7362C167.627 95.841 167.509 96.006 167.463 96.1963C167.417 96.3866 167.447 96.5873 167.547 96.7559C167.634 96.9078 167.775 97.0219 167.942 97.0763C167.905 97.1817 167.892 97.2941 167.904 97.4051L167.825 97.455C167.681 98.0084 167.542 98.5633 167.409 99.1197C167.445 99.2161 167.499 99.305 167.567 99.3819C167.482 99.4662 167.417 99.5686 167.376 99.6815C167.327 99.8295 167.325 99.989 167.37 100.138C167.416 100.287 167.507 100.418 167.63 100.514C167.586 100.534 167.545 100.56 167.509 100.593C167.398 100.705 167.327 100.85 167.304 101.006C167.281 101.162 167.308 101.321 167.382 101.46C167.456 101.599 167.572 101.711 167.714 101.78C167.856 101.848 168.016 101.87 168.171 101.841C168.183 101.869 168.197 101.895 168.212 101.921C168.104 102.077 168.06 102.269 168.088 102.457C168.095 102.518 168.112 102.577 168.137 102.632C168.07 102.706 168.017 102.793 167.984 102.887C167.95 102.981 167.936 103.082 167.942 103.182C167.948 103.281 167.973 103.377 168.016 103.467C168.06 103.556 168.12 103.635 168.194 103.701C168.269 103.767 168.355 103.817 168.449 103.85C168.543 103.882 168.642 103.895 168.741 103.889H168.828C168.88 104.033 168.974 104.157 169.098 104.245C169.223 104.334 169.371 104.382 169.523 104.384C169.514 104.43 169.507 104.475 169.503 104.522C169.497 104.722 169.57 104.916 169.706 105.062C169.843 105.208 170.031 105.295 170.231 105.304H170.318C170.276 105.368 170.244 105.438 170.222 105.512C170.195 105.607 170.187 105.707 170.198 105.805C170.209 105.903 170.239 105.999 170.287 106.085C170.335 106.172 170.4 106.248 170.477 106.31C170.555 106.371 170.643 106.417 170.739 106.444C170.862 106.478 170.991 106.481 171.116 106.451C171.24 106.422 171.355 106.363 171.45 106.278C171.669 106.282 171.885 106.336 172.08 106.435C172.276 106.535 172.446 106.677 172.578 106.852C172.701 106.899 172.835 106.913 172.965 106.891C173.096 106.869 173.218 106.812 173.319 106.727C173.343 106.852 173.397 106.969 173.477 107.069C173.54 107.145 173.618 107.208 173.705 107.254C173.793 107.301 173.888 107.329 173.987 107.338C174.085 107.348 174.185 107.338 174.279 107.308C174.374 107.279 174.462 107.232 174.538 107.168C174.635 107.224 174.744 107.257 174.855 107.265C174.967 107.274 175.079 107.258 175.183 107.218C175.204 107.286 175.235 107.351 175.275 107.41C175.39 107.574 175.565 107.686 175.763 107.721C175.96 107.756 176.163 107.712 176.328 107.597C176.415 107.534 176.489 107.453 176.544 107.36C176.636 107.411 176.737 107.442 176.841 107.451C176.945 107.46 177.05 107.447 177.149 107.413C177.248 107.379 177.339 107.324 177.415 107.253C177.492 107.181 177.552 107.094 177.593 106.998C178.117 106.668 178.737 106.522 179.353 106.582C179.455 106.465 179.518 106.319 179.532 106.165C179.663 106.156 179.789 106.113 179.897 106.04C180.006 105.967 180.094 105.867 180.152 105.749C180.189 105.669 180.21 105.583 180.215 105.495C180.381 105.456 180.529 105.358 180.631 105.221C180.715 105.369 180.847 105.485 181.006 105.549C181.164 105.613 181.339 105.622 181.503 105.574C181.667 105.525 181.81 105.423 181.909 105.284C182.007 105.144 182.055 104.975 182.046 104.805C182.025 104.627 181.942 104.462 181.813 104.338C181.929 104.292 182.03 104.216 182.108 104.118C182.184 104.022 182.234 103.909 182.254 103.789L182.304 103.818C182.391 103.866 182.486 103.895 182.584 103.906C182.683 103.916 182.782 103.907 182.877 103.879C182.972 103.851 183.06 103.804 183.137 103.741C183.213 103.679 183.277 103.602 183.324 103.514C183.25 103.286 183.231 103.043 183.269 102.806C183.306 102.569 183.399 102.344 183.54 102.149C183.536 102.048 183.512 101.948 183.469 101.856C183.427 101.764 183.366 101.681 183.29 101.613C183.29 101.588 183.29 101.563 183.29 101.534C183.347 101.488 183.398 101.435 183.44 101.375C183.505 101.28 183.547 101.171 183.563 101.057C183.579 100.943 183.568 100.827 183.532 100.718C183.583 100.714 183.633 100.704 183.681 100.689C183.978 100.115 184.332 99.5721 184.739 99.0698L184.734 98.999Z\" fill=\"#40B7B9\"/>\n</svg>\n",
  'new-email': "<svg width=\"121\" height=\"138\" viewBox=\"0 0 121 138\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\"><path d=\"M56.8944 128.237H25.1816V128.347H56.8944V128.237Z\" fill=\"#EBEBEB\"/><path d=\"M63.0625 121.514H28.2231C26.5979 121.514 25.0391 120.879 23.8899 119.749C22.7406 118.618 22.095 117.085 22.095 115.486L22.095 84.6917C22.095 83.0928 22.7406 81.5593 23.8899 80.4287C25.0391 79.2981 26.5979 78.663 28.2231 78.663H63.0625L63.0625 121.514Z\" fill=\"#F0F0F0\"/><path d=\"M62.7722 121.514H63.3484C66.7329 121.514 69.4766 118.815 69.4766 115.486V84.6917C69.4766 81.3621 66.7329 78.663 63.3484 78.663H62.7722C59.3877 78.663 56.6441 81.3621 56.6441 84.6917L56.6441 115.486C56.6441 118.815 59.3877 121.514 62.7722 121.514Z\" fill=\"#F5F5F5\"/><path d=\"M13.4621 26.2894H9L15.0388 4.08154H19.5009L13.4621 26.2894Z\" fill=\"white\"/><path d=\"M52.2902 26.2894H47.8281L53.8669 4.08154H58.3291L52.2902 26.2894Z\" fill=\"white\"/><path d=\"M37.7911 86.0405H34.4277V122.863H37.7911V86.0405Z\" fill=\"#E6E6E6\"/><path d=\"M38.8497 86.0405H36.5137V122.863H38.8497V86.0405Z\" fill=\"#F5F5F5\"/><path d=\"M16.5118 90.1052H13.1484V122.868H16.5118V90.1052Z\" fill=\"#E6E6E6\"/><path d=\"M17.5704 90.1052H15.2344V122.868H17.5704V90.1052Z\" fill=\"#F5F5F5\"/><path d=\"M96.3609 14.5967C94.6546 13.5465 89.7548 14.5967 90.5543 19.8696C91.3538 25.1426 85.056 23.7936 86.4317 29.9278C87.8074 36.062 98.9694 45.1754 105.843 38.9884C112.718 32.8015 106.924 30.0728 107.054 22.7302C107.143 18.3669 105.133 10.5541 96.3609 14.5967Z\" fill=\"#263238\"/><path d=\"M106.475 38.7248C106.443 38.7246 106.412 38.712 106.39 38.6897C106.379 38.6794 106.37 38.6671 106.364 38.6536C106.359 38.64 106.356 38.6254 106.356 38.6106C106.356 38.5958 106.359 38.5812 106.364 38.5676C106.37 38.554 106.379 38.5417 106.39 38.5315C110.624 34.3922 109.646 31.87 108.409 28.6799C107.721 26.9222 106.948 24.9185 106.881 22.3216C106.814 19.5182 105.773 15.6909 103.062 14.1134C101.141 12.9973 98.6759 13.1906 95.7369 14.689C95.7101 14.7016 95.6794 14.7036 95.6512 14.6946C95.6229 14.6856 95.5993 14.6663 95.585 14.6407C95.5774 14.6275 95.5726 14.613 95.571 14.5979C95.5693 14.5829 95.5708 14.5677 95.5755 14.5532C95.5801 14.5388 95.5877 14.5254 95.5978 14.514C95.6079 14.5026 95.6203 14.4934 95.6342 14.4869C98.6491 12.9489 101.186 12.76 103.183 13.92C105.97 15.5459 107.042 19.4566 107.113 22.3128C107.176 24.8746 107.944 26.8519 108.623 28.5964C109.887 31.8656 110.892 34.4494 106.551 38.7029C106.528 38.7184 106.502 38.7261 106.475 38.7248Z\" fill=\"#263238\"/><path d=\"M107.465 38.1228C107.465 38.1228 107.537 38.2239 107.586 38.2898L107.764 38.5271C107.895 38.6911 108.034 38.8537 108.18 39.0148C108.479 39.3467 108.798 39.6607 109.136 39.9552C109.827 40.5783 110.575 41.1386 111.369 41.6293C112.175 42.1343 113.014 42.5878 113.879 42.9871C114.326 43.2024 114.772 43.3738 115.219 43.5671C115.304 43.6067 115.219 43.5671 115.161 43.6023C115.103 43.6374 115.054 43.6682 115.103 43.6418C115.322 43.4583 115.496 43.2285 115.612 42.9695C115.81 42.5822 115.978 42.1813 116.117 41.7699C116.417 40.8522 116.66 39.9175 116.845 38.9709C117.046 38.0042 117.202 37.0155 117.341 36.018C117.479 35.0206 117.604 34.0099 117.716 33.0212H119.534C119.683 35.1227 119.666 37.2323 119.485 39.3312C119.401 40.4189 119.233 41.4987 118.98 42.5609C118.844 43.1378 118.659 43.7023 118.426 44.2482C118.144 44.9435 117.708 45.568 117.149 46.0762C116.737 46.4307 116.235 46.6691 115.697 46.766C115.164 46.854 114.617 46.8071 114.107 46.6298C113.584 46.4453 113.053 46.2915 112.535 46.0806C111.483 45.6765 110.465 45.1932 109.488 44.6349C108.497 44.0553 107.56 43.3907 106.688 42.6487C106.246 42.2628 105.828 41.8504 105.437 41.414C105.236 41.1943 105.04 40.9746 104.852 40.7197L104.575 40.3331C104.477 40.188 104.41 40.087 104.271 39.8497L107.465 38.1228Z\" fill=\"#FFC3BD\"/><path d=\"M106.854 36.4969C111.03 39.1334 110.691 40.7329 110.691 40.7329L108.064 44.4767C108.064 44.4767 101.364 41.8402 100.949 39.7706C100.511 37.6131 104.826 35.2227 106.854 36.4969Z\" fill=\"#263238\"/><path opacity=\"0.1\" d=\"M106.854 36.4969C111.03 39.1334 110.691 40.7329 110.691 40.7329L108.064 44.4767C108.064 44.4767 101.364 41.8402 100.949 39.7706C100.511 37.6131 104.826 35.2227 106.854 36.4969Z\" fill=\"white\"/><path d=\"M110.94 40.3638C111.017 40.4178 111.07 40.4997 111.087 40.5918C111.104 40.6839 111.083 40.7788 111.029 40.8559L108.349 44.6392C108.323 44.678 108.289 44.7111 108.249 44.7367C108.209 44.7622 108.165 44.7796 108.118 44.7878C108.071 44.796 108.023 44.7948 107.977 44.7844C107.931 44.774 107.887 44.7545 107.849 44.7271C107.81 44.7004 107.778 44.6664 107.752 44.6272C107.727 44.588 107.71 44.5442 107.702 44.4984C107.694 44.4527 107.696 44.4058 107.706 44.3606C107.717 44.3154 107.737 44.2727 107.764 44.235L110.444 40.4516C110.499 40.3765 110.581 40.3253 110.674 40.3089C110.766 40.2925 110.862 40.3122 110.94 40.3638Z\" fill=\"#40B7B9\"/><path d=\"M118.012 33.8825L115.939 31.1581L119.915 30.1519C119.915 30.1519 120.723 32.5774 119.401 34.357L118.012 33.8825Z\" fill=\"#FFC3BD\"/><path d=\"M116.051 27.8098L119.361 27.2605L119.915 30.1518L115.939 31.1581L116.051 27.8098Z\" fill=\"#FFC3BD\"/><path d=\"M82.373 133.941L86.1607 134.301L88.8675 125.539L85.0798 125.179L82.373 133.941Z\" fill=\"#FFC3BD\"/><path d=\"M58.2754 120.991L61.0849 123.584L67.1505 117.028L64.341 114.435L58.2754 120.991Z\" fill=\"#FFC3BD\"/><path d=\"M62.3849 122.34L60.2722 118.601C60.2377 118.536 60.1798 118.485 60.1098 118.459C60.0397 118.433 59.9624 118.434 59.8926 118.46L56.6409 119.677C56.558 119.711 56.4834 119.761 56.4222 119.825C56.3609 119.889 56.3145 119.966 56.2861 120.049C56.2576 120.133 56.2479 120.221 56.2575 120.309C56.2671 120.396 56.2958 120.481 56.3416 120.556C57.101 121.848 57.5342 122.437 58.4588 124.072C59.0305 125.082 60.1427 127.407 60.9333 128.804C61.7239 130.201 63.1666 129.511 62.9701 128.857C62.0767 125.935 62.2375 124.309 62.4921 123.021C62.5382 122.789 62.5003 122.548 62.3849 122.34Z\" fill=\"#263238\"/><path d=\"M86.6116 133.163H82.0155C81.9335 133.164 81.8542 133.192 81.7891 133.241C81.724 133.29 81.6766 133.358 81.6537 133.435L80.6532 137.012C80.6297 137.097 80.6265 137.186 80.6438 137.272C80.6611 137.358 80.6986 137.439 80.7531 137.508C80.8077 137.578 80.8779 137.634 80.9582 137.672C81.0385 137.71 81.1268 137.73 81.216 137.728C82.8329 137.728 83.6011 137.728 85.62 137.728H91.7973C93.4768 137.728 93.8252 136.059 93.1373 135.909C90.0107 135.233 88.224 134.297 87.2637 133.405C87.087 133.243 86.8528 133.156 86.6116 133.163Z\" fill=\"#263238\"/><path opacity=\"0.2\" d=\"M88.8677 125.544L87.4741 130.056H83.5703L85.08 125.183L88.8677 125.544Z\" fill=\"black\"/><path opacity=\"0.2\" d=\"M64.3415 114.435L67.1509 117.032L64.0243 120.411L61.2148 117.814L64.3415 114.435Z\" fill=\"black\"/><path d=\"M106.854 36.4968C106.854 36.4968 108.372 37.5118 98.7469 58.0851L83.5918 53.959C85.5526 47.9566 86.6157 44.2173 87.1651 30.9602C89.4091 31.1067 91.6394 31.4136 93.8381 31.8786C96.1734 32.3425 98.472 32.9695 100.717 33.7549C102.809 34.5637 104.858 35.4789 106.854 36.4968Z\" fill=\"#263238\"/><path opacity=\"0.1\" d=\"M106.854 36.4968C106.854 36.4968 108.372 37.5118 98.7469 58.0851L83.5918 53.959C85.5526 47.9566 86.6157 44.2173 87.1651 30.9602C89.4091 31.1067 91.6394 31.4136 93.8381 31.8786C96.1734 32.3425 98.472 32.9695 100.717 33.7549C102.809 34.5637 104.858 35.4789 106.854 36.4968Z\" fill=\"white\"/><path d=\"M96.6693 24.4395C96.4906 26.7376 95.7983 30.8461 93.842 31.8787C93.842 31.8787 92.703 35.6884 97.643 37.0901C101.828 38.2721 100.72 33.755 100.72 33.755C98.4157 32.5027 99.8272 30.2836 100.274 27.7966L96.6693 24.4395Z\" fill=\"#FFC3BD\"/><path opacity=\"0.2\" d=\"M96.6474 24.4438C96.5045 26.285 96.0355 29.3081 94.834 30.9515C96.2276 31.0878 98.4073 30.6703 99.0504 29.6333C99.3685 28.9063 99.6269 28.1554 99.8232 27.3879L96.6474 24.4438Z\" fill=\"black\"/><path d=\"M102.799 21.1131C102.799 24.892 102.866 26.4959 101.048 28.5392C98.3097 31.615 93.5929 30.7758 92.4539 27.0671C91.4311 23.732 91.6187 18.1119 95.2813 16.3938C96.0861 16.0115 96.9769 15.838 97.869 15.8898C98.7611 15.9417 99.625 16.2172 100.378 16.6902C101.132 17.1631 101.75 17.8178 102.173 18.592C102.597 19.3661 102.812 20.234 102.799 21.1131Z\" fill=\"#FFC3BD\"/><path d=\"M94.8606 19.0172C97.018 21.9832 104.276 26.1049 104.763 22.1326C105.25 18.1604 101.543 14.2232 97.8711 14.6143C94.1996 15.0054 93.0159 16.495 94.8606 19.0172Z\" fill=\"#263238\"/><path d=\"M104.389 24.6417C104.226 24.9667 104 25.2571 103.724 25.4961C103.447 25.7351 103.125 25.9181 102.776 26.0346C101.843 26.3378 101.329 25.5293 101.548 24.6373C101.749 23.8332 102.473 22.7083 103.433 22.7917C103.642 22.8129 103.842 22.8852 104.015 23.002C104.188 23.1188 104.328 23.2765 104.423 23.4605C104.518 23.6445 104.565 23.849 104.559 24.0554C104.553 24.2617 104.495 24.4633 104.389 24.6417Z\" fill=\"#FFC3BD\"/><path d=\"M98.747 58.0984C98.747 58.0984 104.143 79.5988 100.605 95.8614C98.2333 106.754 89.6843 128.76 89.6843 128.76L82.9844 128.593C82.9844 128.593 89.4565 105.502 90.792 96.4195C93.0833 80.8818 87.6296 55.0752 87.6296 55.0752L98.747 58.0984Z\" fill=\"#40B7B9\"/><path opacity=\"0.2\" d=\"M92.7297 61.1743L89.3887 66.3594C90.3889 72.5075 91.0228 78.708 91.287 84.9289C95.9992 76.6548 93.7749 65.5684 92.7297 61.1743Z\" fill=\"black\"/><path d=\"M90.8819 129.09L82.373 128.883L82.9448 125.904L91.5027 126.537L90.8819 129.09Z\" fill=\"#263238\"/><path d=\"M95.4235 57.2197C95.4235 57.2197 92.2969 80.7282 85.5658 94.0863C80.121 104.874 65.5912 120.231 65.5912 120.231L61.875 116.466C61.875 116.466 71.7015 99.7679 75.7214 92.6099C85.6462 75.0334 76.8515 59.2805 83.5781 53.9417L95.4235 57.2197Z\" fill=\"#40B7B9\"/><path d=\"M65.9665 120.745L61.1738 116.145L62.7639 114.018L67.9898 119.33L65.9665 120.745Z\" fill=\"#263238\"/><path d=\"M83.6092 53.0187L82.5506 54.1699C82.4702 54.2578 82.5506 54.3984 82.7382 54.4468L98.6347 58.775C98.7687 58.8101 98.9027 58.775 98.934 58.6959L99.4477 57.3776C99.4834 57.2898 99.3851 57.1799 99.2377 57.136L83.8906 52.9572C83.8423 52.9424 83.7909 52.9403 83.7415 52.9511C83.6922 52.9619 83.6466 52.9852 83.6092 53.0187Z\" fill=\"#40B7B9\"/><path opacity=\"0.5\" d=\"M83.6092 53.0187L82.5506 54.1699C82.4702 54.2578 82.5506 54.3984 82.7382 54.4468L98.6347 58.775C98.7687 58.8101 98.9027 58.775 98.934 58.6959L99.4477 57.3776C99.4834 57.2898 99.3851 57.1799 99.2377 57.136L83.8906 52.9572C83.8423 52.9424 83.7909 52.9403 83.7415 52.9511C83.6922 52.9619 83.6466 52.9852 83.6092 53.0187Z\" fill=\"white\"/><path d=\"M85.1942 55.2685L84.7833 55.1587C84.7029 55.1367 84.6538 55.0752 84.6716 55.0268L85.3506 53.3483C85.3729 53.2956 85.4578 53.2736 85.5382 53.2956L85.9491 53.4098C86.0295 53.4098 86.0831 53.4889 86.0607 53.5416L85.3818 55.2202C85.3602 55.2472 85.3301 55.2666 85.2963 55.2753C85.2624 55.284 85.2266 55.2817 85.1942 55.2685Z\" fill=\"#40B7B9\"/><path d=\"M97.4378 58.6038L97.0269 58.494C96.9465 58.472 96.8929 58.4105 96.9153 58.3621L97.5942 56.6792C97.6158 56.6521 97.6459 56.6328 97.6797 56.6241C97.7136 56.6153 97.7494 56.6177 97.7818 56.6308L98.1927 56.7451C98.2731 56.7671 98.3222 56.8242 98.3044 56.8725L97.6254 58.5379C97.6031 58.6038 97.5406 58.6258 97.4378 58.6038Z\" fill=\"#40B7B9\"/><path d=\"M91.3198 56.9383L90.9088 56.8241C90.824 56.8241 90.7748 56.745 90.7927 56.6966L91.4761 55.0137C91.4761 54.9653 91.5788 54.9434 91.6592 54.9653L92.0701 55.0752C92.155 55.0752 92.2041 55.1587 92.1863 55.207L91.5029 56.89C91.485 56.9383 91.4002 56.9603 91.3198 56.9383Z\" fill=\"#40B7B9\"/><path d=\"M97.0541 22.5061C97.0541 22.8137 96.9201 23.0729 96.7191 23.0817C96.5181 23.0905 96.335 22.8576 96.3127 22.55C96.2903 22.2424 96.4467 21.9832 96.6521 21.97C96.8576 21.9568 97.0363 22.1941 97.0541 22.5061Z\" fill=\"#263238\"/><path d=\"M93.5209 22.7038C93.5209 23.0114 93.3869 23.2707 93.1815 23.2838C92.976 23.297 92.8018 23.0553 92.7795 22.7477C92.7571 22.4402 92.9135 22.1809 93.1189 22.1721C93.3244 22.1633 93.5209 22.4006 93.5209 22.7038Z\" fill=\"#263238\"/><path d=\"M93.2164 22.1809L92.457 22.0139C92.457 22.0139 92.8724 22.5676 93.2164 22.1809Z\" fill=\"#263238\"/><path d=\"M94.4896 23.1782C94.2531 23.8928 93.9195 24.5727 93.498 25.1995C93.6632 25.3019 93.8491 25.3675 94.0428 25.3918C94.2364 25.4161 94.4332 25.3984 94.6192 25.3401L94.4896 23.1782Z\" fill=\"#ED847E\"/><path d=\"M96.3568 26.386C96.1712 26.4332 95.981 26.4612 95.7895 26.4695C95.7794 26.4707 95.7692 26.4698 95.7594 26.4669C95.7497 26.4639 95.7407 26.4589 95.7331 26.4523C95.7255 26.4456 95.7194 26.4374 95.7153 26.4283C95.7111 26.4191 95.709 26.4092 95.7091 26.3992C95.7085 26.3893 95.7099 26.3795 95.7132 26.3702C95.7164 26.3609 95.7215 26.3524 95.7282 26.345C95.7348 26.3377 95.7429 26.3317 95.7519 26.3274C95.7609 26.3231 95.7706 26.3206 95.7806 26.3201C96.1711 26.3045 96.5525 26.1995 96.8945 26.0134C97.2365 25.8272 97.5295 25.5651 97.7503 25.2479C97.7618 25.234 97.7779 25.2246 97.7958 25.2214C97.8136 25.2182 97.8321 25.2214 97.8478 25.2305C97.8634 25.2395 97.8753 25.2538 97.8812 25.2707C97.8871 25.2876 97.8866 25.306 97.8799 25.3226C97.5281 25.8547 96.9835 26.2349 96.3568 26.386Z\" fill=\"#263238\"/><path d=\"M98.2205 20.2606C98.1952 20.2671 98.1687 20.2668 98.1436 20.2598C98.1185 20.2529 98.0957 20.2395 98.0776 20.2211C97.9151 20.0524 97.7139 19.9245 97.4909 19.8481C97.2679 19.7716 97.0295 19.7488 96.7957 19.7817C96.7561 19.7885 96.7155 19.7806 96.6816 19.7595C96.6477 19.7383 96.6231 19.7055 96.6125 19.6674C96.6044 19.6284 96.612 19.5879 96.6337 19.5543C96.6553 19.5207 96.6894 19.4967 96.7287 19.4873C97.0117 19.4426 97.3015 19.4656 97.5736 19.5543C97.8457 19.6431 98.0921 19.7949 98.292 19.997C98.3196 20.0262 98.3349 20.0647 98.3349 20.1046C98.3349 20.1446 98.3196 20.183 98.292 20.2123C98.2723 20.2337 98.2478 20.2502 98.2205 20.2606Z\" fill=\"#263238\"/><path d=\"M91.9937 20.7045C91.9701 20.7184 91.9431 20.7258 91.9156 20.7258C91.888 20.7258 91.861 20.7184 91.8374 20.7045C91.8058 20.6809 91.7848 20.6461 91.779 20.6075C91.7732 20.5689 91.7829 20.5296 91.8061 20.498C91.9709 20.2674 92.1896 20.0791 92.4438 19.9491C92.698 19.8191 92.9802 19.7512 93.2667 19.751C93.2867 19.7521 93.3062 19.7571 93.3242 19.7656C93.3422 19.7742 93.3583 19.7862 93.3715 19.8009C93.3848 19.8156 93.395 19.8327 93.4016 19.8513C93.4081 19.8699 93.4108 19.8895 93.4096 19.9092C93.4085 19.9288 93.4034 19.948 93.3947 19.9657C93.386 19.9834 93.3739 19.9992 93.3589 20.0123C93.344 20.0254 93.3266 20.0354 93.3077 20.0418C93.2888 20.0483 93.2688 20.051 93.2488 20.0498C93.0134 20.0535 92.7822 20.1119 92.5742 20.2204C92.3661 20.3288 92.1871 20.4842 92.0518 20.6737C92.035 20.6882 92.0152 20.6987 91.9937 20.7045Z\" fill=\"#263238\"/><path d=\"M87.5216 36.6243C87.133 37.2044 86.7801 37.6701 86.3826 38.1623C85.9851 38.6544 85.5965 39.1158 85.1856 39.5728C84.3613 40.4913 83.4845 41.3627 82.5592 42.1829C81.6392 43.0195 80.6633 43.7946 79.6381 44.503C79.1333 44.8721 78.5929 45.1929 78.0658 45.5268L77.2395 45.9926L76.8286 46.2211C76.6767 46.3002 76.4802 46.4056 76.2926 46.4803C75.4648 46.8487 74.5449 46.9679 73.6484 46.8231C72.8021 46.6659 72.0114 46.2966 71.3525 45.7509C70.7964 45.2944 70.3065 44.7652 69.8964 44.1778C69.5182 43.6444 69.1823 43.0833 68.8915 42.4993C67.8318 40.2861 67.1008 37.9347 66.7207 35.517L68.5073 35.1128C68.8781 36.1586 69.2935 37.2439 69.7624 38.2589C70.2017 39.2736 70.7199 40.2535 71.3124 41.1898C71.8064 42.0371 72.4614 42.783 73.2419 43.3869C73.5016 43.5826 73.8103 43.7056 74.1352 43.7428C74.4193 43.7547 74.701 43.6877 74.9482 43.5495C75.0345 43.5062 75.118 43.4578 75.1983 43.4044L75.5467 43.1847L76.239 42.7453C76.6857 42.4202 77.1323 42.117 77.579 41.7698C78.4586 41.0921 79.3024 40.3705 80.1071 39.6079C80.9244 38.8477 81.6882 38.0348 82.4252 37.2C82.7959 36.7825 83.1577 36.3607 83.5061 35.9301C83.8545 35.4994 84.2029 35.0512 84.4843 34.6558L87.5216 36.6243Z\" fill=\"#FFC3BD\"/><path d=\"M68.8524 36.7342L69.2455 32.6345L65.498 34.1417C65.498 34.1417 65.9447 36.2025 67.374 36.9408L68.8524 36.7342Z\" fill=\"#FFC3BD\"/><path d=\"M68.0473 30.4199L65.1484 29.8003L65.4968 34.1417L69.2443 32.6345L68.0473 30.4199Z\" fill=\"#FFC3BD\"/><path d=\"M87.1703 30.9602C85.2184 30.9602 80.5195 38.2896 80.5195 38.2896L83.8382 41.6731C83.8382 41.6731 90.0914 37.525 90.3371 35.0819C90.5515 32.9815 89.6537 30.9822 87.1703 30.9602Z\" fill=\"#263238\"/><path opacity=\"0.1\" d=\"M87.1703 30.9602C85.2184 30.9602 80.5195 38.2896 80.5195 38.2896L83.8382 41.6731C83.8382 41.6731 90.0914 37.525 90.3371 35.0819C90.5515 32.9815 89.6537 30.9822 87.1703 30.9602Z\" fill=\"white\"/><path d=\"M84.1412 41.8402C84.0742 41.906 83.9835 41.9429 83.8889 41.9429C83.7942 41.9429 83.7035 41.906 83.6365 41.8402L80.2821 38.6062C80.2153 38.5403 80.1777 38.451 80.1777 38.3579C80.1777 38.2648 80.2153 38.1755 80.2821 38.1096C80.3498 38.0436 80.4413 38.0066 80.5367 38.0066C80.632 38.0066 80.7235 38.0436 80.7913 38.1096L84.1412 41.3393C84.2083 41.406 84.246 41.496 84.246 41.5898C84.246 41.6836 84.2083 41.7736 84.1412 41.8402Z\" fill=\"#40B7B9\"/><path d=\"M63.1488 124.353C63.2713 124.35 63.3892 124.307 63.4838 124.23C63.5287 124.202 63.5646 124.161 63.5875 124.114C63.6103 124.067 63.6193 124.014 63.6133 123.962C63.5731 123.487 62.3493 122.841 62.2064 122.767C62.1943 122.759 62.1804 122.755 62.1662 122.755C62.152 122.755 62.138 122.759 62.126 122.767C62.1135 122.775 62.1042 122.788 62.0994 122.802C62.0945 122.816 62.0945 122.832 62.0992 122.846C62.2376 123.329 62.5458 124.164 62.9925 124.318C63.042 124.339 63.095 124.351 63.1488 124.353ZM62.2555 122.986C62.7022 123.224 63.399 123.681 63.4213 123.975C63.4243 124.002 63.4191 124.028 63.4064 124.052C63.3936 124.075 63.3739 124.095 63.3498 124.107C63.3046 124.149 63.249 124.178 63.1886 124.192C63.1283 124.206 63.0652 124.204 63.0059 124.186C62.7647 124.098 62.4878 123.654 62.2555 122.986Z\" fill=\"#40B7B9\"/><path d=\"M63.314 123.175C63.5073 123.19 63.7001 123.142 63.8634 123.039C63.9171 122.995 63.9537 122.935 63.9667 122.867C63.9798 122.8 63.9685 122.73 63.9348 122.67C63.9113 122.607 63.8732 122.55 63.8237 122.503C63.7741 122.457 63.7143 122.422 63.649 122.402C63.1264 122.222 62.1527 122.745 62.1125 122.767C62.1009 122.774 62.0912 122.783 62.0842 122.795C62.0772 122.806 62.0731 122.819 62.0723 122.833C62.0722 122.846 62.0755 122.858 62.0817 122.87C62.088 122.881 62.097 122.891 62.108 122.898C62.4839 123.078 62.896 123.173 63.314 123.175ZM63.3899 122.512C63.4614 122.512 63.5324 122.524 63.5998 122.547C63.6441 122.56 63.6846 122.583 63.718 122.614C63.7514 122.646 63.7768 122.684 63.7919 122.727C63.841 122.841 63.7919 122.894 63.7651 122.925C63.5373 123.114 62.7333 123.008 62.3179 122.833C62.6505 122.658 63.0147 122.549 63.3899 122.512Z\" fill=\"#40B7B9\"/><path d=\"M88.6474 133.892C88.9596 133.915 89.2715 133.843 89.5407 133.686C89.61 133.635 89.6663 133.568 89.7051 133.492C89.7438 133.416 89.764 133.332 89.764 133.246C89.7697 133.202 89.7627 133.157 89.7437 133.117C89.7248 133.077 89.6947 133.042 89.6568 133.018C89.2414 132.737 87.5709 133.493 87.3833 133.58C87.3681 133.587 87.3555 133.598 87.3474 133.613C87.3394 133.627 87.3363 133.643 87.3387 133.659C87.3403 133.675 87.3469 133.689 87.3573 133.7C87.3678 133.711 87.3816 133.718 87.3967 133.721C87.8063 133.821 88.2255 133.879 88.6474 133.892ZM89.3799 133.115C89.4449 133.11 89.5099 133.124 89.5675 133.154C89.5898 133.154 89.6122 133.194 89.6077 133.255C89.6068 133.316 89.5914 133.375 89.5627 133.429C89.534 133.482 89.4927 133.528 89.4424 133.563C89.0672 133.844 88.1516 133.725 87.6558 133.638C88.1989 133.375 88.7808 133.198 89.3799 133.115Z\" fill=\"#40B7B9\"/><path d=\"M87.4113 133.739H87.4381C87.9428 133.537 88.9925 132.706 88.9344 132.293C88.9344 132.205 88.8629 132.095 88.6351 132.069C87.7418 131.968 87.3532 133.581 87.3354 133.651C87.3328 133.665 87.3339 133.679 87.3386 133.692C87.3433 133.705 87.3514 133.717 87.3622 133.726C87.377 133.734 87.394 133.739 87.4113 133.739ZM88.5547 132.21H88.6083C88.7647 132.21 88.7736 132.284 88.7781 132.306C88.8138 132.57 88.0634 133.242 87.5185 133.523C87.6391 133.15 87.9785 132.21 88.5547 132.21Z\" fill=\"#40B7B9\"/><path d=\"M96.7417 21.9787L95.9824 21.8118C95.9824 21.8118 96.3978 22.3654 96.7417 21.9787Z\" fill=\"#263238\"/><path d=\"M17.8182 135.739L68.3352 131.4C71.7658 131.105 74.3041 128.13 74.0045 124.755L63.4828 6.20482C63.1833 2.82983 60.1594 0.332768 56.7288 0.627447L6.21181 4.96666C2.78117 5.26134 0.242914 8.23617 0.542454 11.6112L11.0641 130.162C11.3637 133.537 14.3876 136.034 17.8182 135.739Z\" fill=\"#40B7B9\"/><path d=\"M4.32409 46.6253C4.79206 46.5818 5.22373 46.3586 5.52556 46.0041C5.82738 45.6496 5.97504 45.1923 5.93652 44.7315L4.54742 29.0972C4.50425 28.6368 4.27847 28.2118 3.91897 27.914C3.55948 27.6163 3.09523 27.4699 2.62679 27.5065C2.15801 27.549 1.72521 27.7717 1.42245 28.1263C1.11968 28.4809 0.97142 28.9388 1.00988 29.4004L2.40346 45.0347C2.44662 45.495 2.67241 45.9201 3.0319 46.2178C3.39139 46.5155 3.85564 46.662 4.32409 46.6253Z\" fill=\"#40B7B9\"/><path d=\"M66.022 34.2596L66.6405 34.2065C67.3654 34.1442 67.9018 33.5156 67.8385 32.8024L66.9908 23.2508C66.9275 22.5376 66.2885 22.0099 65.5635 22.0722L64.945 22.1253C64.2201 22.1876 63.6837 22.8162 63.747 23.5294L64.5947 33.081C64.658 33.7942 65.297 34.3219 66.022 34.2596Z\" fill=\"#263238\"/><path d=\"M66.749 50.3391L67.3699 50.2841C68.0976 50.2197 68.6344 49.5871 68.5689 48.8712L67.6918 39.2833C67.6263 38.5674 66.9832 38.0392 66.2555 38.1037L65.6347 38.1586C64.907 38.2231 64.3701 38.8557 64.4356 39.5716L65.3128 49.1595C65.3783 49.8754 66.0213 50.4035 66.749 50.3391Z\" fill=\"#263238\"/><path d=\"M18.8788 135.645L69.3957 131.306C72.8263 131.011 75.3646 128.036 75.0651 124.661L64.5434 6.11081C64.2438 2.73584 61.2199 0.238774 57.7893 0.533453L7.27236 4.87267C3.84173 5.16734 1.30346 8.14218 1.603 11.5172L12.1247 130.068C12.4242 133.443 15.4481 135.94 18.8788 135.645Z\" fill=\"#263238\"/><path opacity=\"0.4\" d=\"M13.9038 128.264L72.9743 123.188C73.2831 123.161 73.568 123.014 73.7672 122.78C73.9663 122.546 74.0634 122.244 74.0374 121.941L64.0412 9.18747C64.0128 8.88458 63.8641 8.60492 63.6275 8.40914C63.3909 8.21336 63.0853 8.11725 62.7771 8.14167L3.68422 13.2213C3.53171 13.2345 3.38335 13.2772 3.24761 13.3469C3.11187 13.4166 2.99141 13.5119 2.89311 13.6273C2.79481 13.7428 2.7206 13.8762 2.6747 14.0199C2.62881 14.1636 2.61213 14.3148 2.62563 14.4648L12.6397 127.222C12.6526 127.372 12.6956 127.519 12.7663 127.653C12.8369 127.786 12.9338 127.905 13.0513 128.002C13.1688 128.099 13.3046 128.172 13.4509 128.217C13.5972 128.262 13.7511 128.278 13.9038 128.264Z\" fill=\"#40B7B9\"/><path opacity=\"0.3\" d=\"M54.9703 8.81396L47.5468 125.372L35.2012 126.436L42.6246 9.87295L54.9703 8.81396Z\" fill=\"#40B7B9\"/><path opacity=\"0.2\" d=\"M39.0818 5.07335L26.467 6.15691C26.1746 6.18203 25.9582 6.43562 25.9837 6.72331L26.0284 7.22672C26.0539 7.51441 26.3117 7.72727 26.6042 7.70215L39.2189 6.61859C39.5114 6.59347 39.7277 6.33989 39.7022 6.05219L39.6575 5.54878C39.632 5.26109 39.3742 5.04823 39.0818 5.07335Z\" fill=\"white\"/><path d=\"M27.3268 50.2417H88.7914C90.388 50.2463 91.9179 50.8723 93.0468 51.983C94.1758 53.0936 94.8121 54.5987 94.8168 56.1694V85.8297C94.8121 87.4007 94.176 88.9062 93.0471 90.0176C91.9183 91.1289 90.3884 91.7559 88.7914 91.7617H67.5216L58.0569 101.073L48.5922 91.7617H27.3268C25.729 91.7571 24.198 91.1306 23.0682 90.0191C21.9384 88.9077 21.3016 87.4015 21.2969 85.8297V56.1694C21.3016 54.5979 21.9385 53.0922 23.0685 51.9815C24.1984 50.8707 25.7294 50.2452 27.3268 50.2417Z\" fill=\"#40B7B9\"/><path opacity=\"0.3\" d=\"M27.3268 50.2417H88.7914C90.388 50.2463 91.9179 50.8723 93.0468 51.983C94.1758 53.0936 94.8121 54.5987 94.8168 56.1694V85.8297C94.8121 87.4007 94.176 88.9062 93.0471 90.0176C91.9183 91.1289 90.3884 91.7559 88.7914 91.7617H67.5216L58.0569 101.073L48.5922 91.7617H27.3268C25.729 91.7571 24.198 91.1306 23.0682 90.0191C21.9384 88.9077 21.3016 87.4015 21.2969 85.8297V56.1694C21.3016 54.5979 21.9385 53.0922 23.0685 51.9815C24.1984 50.8707 25.7294 50.2452 27.3268 50.2417Z\" fill=\"white\"/><path d=\"M31.2657 60.5195V81.4794C31.2586 82.2922 31.5787 83.0747 32.1562 83.656C32.7337 84.2373 33.5216 84.5701 34.3477 84.5817H81.7649C82.5911 84.5701 83.379 84.2373 83.9564 83.656C84.5339 83.0747 84.8541 82.2922 84.8469 81.4794V60.5195C84.8466 60.1225 84.7708 59.7291 84.6236 59.3594C84.3987 58.7919 84.0063 58.3035 83.4968 57.9573C82.9873 57.6112 82.3841 57.4231 81.7649 57.4172H34.3477C33.729 57.4228 33.1262 57.6108 32.6174 57.9571C32.1085 58.3033 31.717 58.7919 31.4935 59.3594C31.3421 59.728 31.2648 60.122 31.2657 60.5195Z\" fill=\"white\"/><path opacity=\"0.1\" d=\"M31.4941 59.3594L54.4166 69.1803C55.5655 69.6738 56.8056 69.9285 58.0591 69.9285C59.3127 69.9285 60.5528 69.6738 61.7016 69.1803L84.6241 59.3594C84.3993 58.7919 84.0069 58.3035 83.4974 57.9573C82.9879 57.6112 82.3847 57.4231 81.7655 57.4172H34.3483C33.7296 57.4228 33.1268 57.6108 32.618 57.9571C32.1091 58.3033 31.7176 58.7919 31.4941 59.3594Z\" fill=\"black\"/><path d=\"M32.5209 59.2513C36.1003 55.73 36.1003 50.0209 32.5209 46.4997C28.9416 42.9784 23.1384 42.9784 19.5591 46.4997C15.9797 50.0209 15.9797 55.73 19.5591 59.2513C23.1384 62.7725 28.9416 62.7725 32.5209 59.2513Z\" fill=\"#DE5753\"/><path d=\"M27.8089 58.3708H25.6739V50.4614C24.8846 51.1836 23.9438 51.7266 22.918 52.0521V50.1494C23.5768 49.9111 24.1899 49.565 24.7314 49.1256C25.3412 48.6793 25.8066 48.0688 26.0714 47.3679H27.8044L27.8089 58.3708Z\" fill=\"white\"/></svg>"
};
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (illustrations);

/***/ }),
/* 132 */
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
var iconsBanco = {
  341: "<svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n<rect width=\"24\" height=\"24\" rx=\"4\" fill=\"#EC7000\"/>\n<path fill-rule=\"evenodd\" clip-rule=\"evenodd\" d=\"M7.56206 5.00008L16.4578 5.00534C17.8542 5.00534 19.0048 6.15585 18.9994 7.55745V16.4531C18.9994 17.8548 17.8489 19.0001 16.4474 19.0001L7.54637 18.9948C6.14477 18.9897 4.99951 17.8444 4.99951 16.4428L5.00995 7.54694C5.00995 6.14542 6.15528 4.99482 7.56206 5.00008Z\" fill=\"#003399\"/>\n<path fill-rule=\"evenodd\" clip-rule=\"evenodd\" d=\"M17.0289 11.3855H16.0144L15.596 12.1804H16.3072L17.0289 11.3855ZM17.7035 12.6773H16.7151V14.811C16.7151 15.4648 16.2757 15.653 15.9517 15.653C15.643 15.653 15.303 15.5379 15.3083 14.9678V12.6773H14.3199L14.3147 15.109C14.3147 16.0503 14.8535 16.4686 15.5961 16.4686C16.1137 16.4739 16.5165 16.2489 16.7413 15.8516H16.7518V16.3694H17.7036V12.6773H17.7035ZM13.5458 13.6551C13.5458 12.74 12.5837 12.5779 12.0502 12.5779C11.2814 12.5779 10.4812 12.74 10.361 13.8696H11.318C11.3494 13.6552 11.4383 13.3571 11.9298 13.3571C12.1861 13.3571 12.5837 13.3781 12.5837 13.786C12.5837 13.9951 12.3901 14.058 12.2332 14.0789L11.3442 14.2096C10.7114 14.2986 10.2408 14.6698 10.2408 15.3916C10.2408 16.155 10.8265 16.4688 11.386 16.4688C12.0659 16.4688 12.3849 16.1603 12.6046 15.9355C12.6254 16.1395 12.6411 16.1917 12.6987 16.3695L13.5511 16.3643C13.5511 15.9563 13.5459 15.6583 13.5459 15.6531V13.6551H13.5458ZM9.33073 11.3855H8.34232V12.672H7.8298V13.3676H8.33706V15.6111C8.33706 16.0869 8.48874 16.4113 9.34642 16.4113H9.47722C9.63407 16.4113 9.79092 16.4007 9.94267 16.3956V15.6581C9.87464 15.6634 9.80151 15.6738 9.73866 15.6738C9.33599 15.6738 9.32547 15.5901 9.32547 15.3704L9.33073 13.3675H9.94785V12.6719H9.33073V11.3855ZM7.37486 11.3802H6.30799L6.30273 16.3642H7.36961L7.37486 11.3802Z\" fill=\"#FFFF00\"/>\n<path fill-rule=\"evenodd\" clip-rule=\"evenodd\" d=\"M12.5827 15.0459V14.5701C12.4833 14.6485 12.3159 14.7112 11.908 14.7688C11.5367 14.8315 11.2334 14.9256 11.2334 15.3284C11.2334 15.663 11.5054 15.7729 11.6936 15.7729C12.133 15.773 12.5827 15.4958 12.5827 15.0459Z\" fill=\"#003399\"/>\n</svg>\n",
  1: "<svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n<rect width=\"24\" height=\"24\" rx=\"4\" fill=\"#FFF22D\"/>\n<path fill-rule=\"evenodd\" clip-rule=\"evenodd\" d=\"M5.95831 15.5834L4.5 16.5552V18.5L7.41661 16.5552L5.95831 15.5834ZM17.0417 7.41724L18.5 6.44545V4.5L15.5834 6.44545L17.0417 7.41724ZM11.5 18.5L18.5 13.8329L15.5834 11.8881L12.0831 14.2223L13.5414 15.1947L11.6461 16.4586L7.5627 13.7364L14.2712 9.26426L12.8129 8.29185L4.5 13.8329L11.5 18.5ZM11.5006 4.50188L4.5 9.16771L7.41661 11.1125L10.9169 8.77837L9.45862 7.80658L11.3545 6.54263L15.4379 9.26426L8.72947 13.7364L10.1878 14.7088L18.5006 9.16771L11.5006 4.50188Z\" fill=\"#2360A5\"/>\n</svg>\n",
  33: "<svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n<rect width=\"24\" height=\"24\" rx=\"4\" fill=\"#EA1D25\"/>\n<path fill-rule=\"evenodd\" clip-rule=\"evenodd\" d=\"M15.1552 9.99277C15.4242 10.4313 15.5587 10.9373 15.5923 11.4434C18.0807 12.0843 19.762 13.4675 19.7284 14.9855C19.7284 17.212 16.433 19 12.3642 19C8.2954 19 5 17.212 5 14.9855C5 13.4 6.71495 12.0169 9.16969 11.3759C9.16969 11.9831 9.30419 12.5904 9.60683 13.1301L11.9271 17.1446C12.0952 17.4482 12.2297 17.7855 12.297 18.1229L12.3978 17.9542C12.9695 16.9759 12.9695 15.7277 12.3978 14.7494L10.5484 11.5446C9.97672 10.5325 9.97672 9.31807 10.5484 8.33976L10.6493 8.17108C10.7165 8.50843 10.851 8.84578 11.0191 9.1494L12.0952 11.0386L13.7765 13.9735C13.9446 14.2771 14.0792 14.6145 14.1464 14.9518L14.2473 14.7831C14.8189 13.8048 14.8189 12.5566 14.2473 11.5783L12.3978 8.37349C11.8262 7.39518 11.8262 6.14699 12.3978 5.16867L12.4987 5C12.566 5.33735 12.7005 5.6747 12.8686 5.97831L15.1552 9.99277Z\" fill=\"white\"/>\n</svg>\n",
  36: "<svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n<rect width=\"24\" height=\"24\" rx=\"4\" fill=\"#CC092F\"/>\n<path fill-rule=\"evenodd\" clip-rule=\"evenodd\" d=\"M9.2444 8.21944C10.1381 8.0756 11.042 8.0045 11.9471 8.00687C16.2897 8.00687 19.6909 9.64673 19.6909 11.7421C19.6909 13.3212 17.8992 14.5967 15.5002 15.3862C15.318 15.447 15.1965 15.4166 15.1357 15.2648C15.075 15.1129 15.1054 15.0218 15.4394 14.87C16.806 14.2626 17.96 13.3516 17.96 12.4406C17.96 10.6489 14.4677 9.28231 10.3073 9.28231C9.729 9.27909 9.15104 9.30951 8.57631 9.37342C8.29312 9.98202 8.14794 10.6457 8.15116 11.317C8.15601 12.0021 8.30135 12.6791 8.57818 13.3059C8.85502 13.9326 9.25746 14.496 9.76065 14.9611C9.88212 15.0826 9.91249 15.1433 9.82138 15.2951C9.73028 15.447 9.57844 15.447 9.4266 15.3255C8.61257 14.8135 7.94448 14.1 7.48696 13.2541C7.02944 12.4082 6.79798 11.4586 6.81497 10.497C6.8137 10.2011 6.84424 9.9058 6.90608 9.61636L5.35732 9.98077C5.32762 9.99593 5.29512 10.0048 5.26184 10.0069C5.22856 10.0089 5.19521 10.0041 5.16388 9.99269C5.13254 9.98129 5.10389 9.96357 5.0797 9.94062C5.05551 9.91768 5.0363 9.88999 5.02327 9.8593C4.96254 9.73783 5.02327 9.61636 5.17511 9.52526C5.81008 9.19956 6.47017 8.92536 7.14902 8.70533C7.54782 7.62927 8.26328 6.69929 9.20112 6.03792C10.139 5.37656 11.2552 5.01485 12.4026 5.00046C13.2625 4.98971 14.114 5.16927 14.8963 5.52628C15.6786 5.88329 16.3722 6.40891 16.9274 7.06547C16.9589 7.08436 16.9849 7.11107 17.003 7.143C17.021 7.17493 17.0305 7.21099 17.0305 7.24767C17.0305 7.28436 17.021 7.32042 17.003 7.35234C16.9849 7.38427 16.9589 7.41098 16.9274 7.42988C16.8363 7.55135 16.7149 7.52098 16.563 7.39951C15.6372 6.66643 14.4945 6.26065 13.3137 6.24553C12.5297 6.24188 11.7553 6.41789 11.0499 6.76006C10.3445 7.10223 9.72685 7.60146 9.2444 8.21944ZM11.2183 15.4773L12.0382 14.9915C12.0534 14.9915 12.061 14.9915 12.0648 14.9953C12.0686 14.9991 12.0686 15.0066 12.0686 15.0218V18.9696C12.0686 18.9848 12.0686 18.9924 12.0648 18.9962C12.061 19 12.0534 19 12.0382 19H11.2183C11.178 19 11.1394 18.984 11.1109 18.9555C11.0825 18.9271 11.0665 18.8884 11.0665 18.8482V15.7203C11.0628 15.6689 11.0755 15.6177 11.1028 15.5741C11.1301 15.5304 11.1705 15.4965 11.2183 15.4773ZM13.921 14.2323V18.7874C13.921 18.8438 13.8986 18.8979 13.8588 18.9377C13.8189 18.9776 13.7648 19 13.7085 19H12.5545C12.5464 19 12.5387 18.9968 12.533 18.9911C12.5273 18.9854 12.5241 18.9777 12.5241 18.9696V14.7789C12.5227 14.7624 12.5247 14.7459 12.5299 14.7302C12.5351 14.7145 12.5435 14.7001 12.5545 14.6878L13.6174 14.0804C13.7692 13.9893 13.921 14.0501 13.921 14.2323Z\" fill=\"white\"/>\n</svg>\n",
  75: "<svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\"><rect width=\"24\" height=\"24\" rx=\"4\" fill=\"#F5F5F5\"/><path fill-rule=\"evenodd\" clip-rule=\"evenodd\" d=\"M21.968 14.9229C21.8089 16.3149 21.1403 17.8182 20.1792 18.8421C19.6774 19.3773 19.2941 19.8736 17.524 21.0431C15.222 22.2807 13.186 23.1054 12.0001 24C10.8142 23.1047 8.7771 22.2805 6.47516 21.0431C4.70551 19.8736 4.3222 19.3773 3.81965 18.8421C2.85982 17.8182 2.19173 16.3149 2.03267 14.9229C1.83817 13.127 2.54582 11.5355 3.71386 10.4355C4.08528 10.0229 3.83749 9.81723 3.66084 9.48975C3.34555 8.9051 3.27184 8.64819 2.74032 7.63459C2.45581 7.09189 2.31278 6.69433 2.38701 6.34475C2.65212 5.41554 3.66136 5.05993 4.01648 4.64304C4.07881 4.5677 4.20762 4.52626 4.24615 4.45368C4.31056 4.33113 4.26348 4.19576 4.26348 4.19576C4.26348 4.19576 3.86905 3.45315 3.9094 3.33536C3.99216 3.09779 5.32574 2.38958 6.42343 1.96013C7.7508 1.49628 8.47242 1.30717 9.664 1.0146C11.1328 0.652959 12.0006 0 12.0006 0C12.0006 0 12.8684 0.652959 14.338 1.0146C15.5277 1.30742 16.2496 1.49628 17.5772 1.96013C18.6755 2.38983 20.0101 3.09804 20.0918 3.33536C20.1321 3.45315 19.739 4.19225 19.7374 4.19551C19.7359 4.19878 19.6906 4.33087 19.7556 4.45318C19.7938 4.52601 19.9229 4.56845 19.9857 4.64279C20.3398 5.05968 21.3491 5.41554 21.6152 6.34425C21.6892 6.69383 21.5454 7.09163 21.2609 7.63409C20.7301 8.64844 20.6577 8.90535 20.3406 9.49C20.1634 9.81648 19.9154 10.0229 20.2889 10.4355C21.4569 11.5355 22.1648 13.127 21.9701 14.9229H21.968ZM21.3302 14.5444C21.3131 13.0828 20.8 11.7595 19.7023 10.7108C19.0466 10.1259 19.3301 9.99981 19.5424 9.6108C19.8613 9.02615 19.8068 9.02916 20.3391 7.94274C20.5799 7.45151 21.0115 6.75737 20.8525 6.29226C20.6574 5.8804 19.6886 5.24778 19.6304 5.20986C19.3076 5.00041 19.0826 4.84922 18.8518 4.64254C18.7388 4.46197 18.87 4.36628 18.87 4.36628C18.87 4.36628 19.2838 3.71885 19.2235 3.60935C18.9049 3.02521 15.8777 2.06209 14.196 1.68363C13.3869 1.50206 12.0001 0.755674 12.0001 0.755674C12.0001 0.755674 10.6127 1.50206 9.80521 1.68488C8.12402 2.06335 5.09477 3.02646 4.77689 3.61061C4.71637 3.72011 5.1302 4.36754 5.1302 4.36754C5.1302 4.36754 5.26108 4.46197 5.14831 4.64379C4.91811 4.85048 4.6918 5.00141 4.36875 5.21111C4.31081 5.24878 3.34219 5.88165 3.14665 6.29352C2.98784 6.75863 3.41952 7.45277 3.66084 7.944C4.19417 9.02916 4.13959 9.02615 4.45773 9.6108C4.67033 9.99981 4.95355 10.1259 4.29866 10.7108C3.20123 11.7595 2.68782 13.0828 2.67075 14.5444C2.77601 16.0917 3.28942 17.3823 4.84828 18.9966C5.35005 19.5325 6.05201 20.0973 7.83977 21.0255C9.52252 21.8681 10.7625 22.3663 11.9827 23.2431C13.2046 22.3663 14.4795 21.8681 16.1617 21.0255C17.9497 20.0963 18.6517 19.5328 19.1542 18.9966C20.7112 17.3813 21.2234 16.0917 21.3307 14.5444H21.3302Z\" fill=\"black\"/><path fill-rule=\"evenodd\" clip-rule=\"evenodd\" d=\"M20.0203 14.9739C19.8613 14.8197 19.4221 14.9422 19.3678 15.0241C19.1914 14.4545 18.8404 13.9663 18.4108 13.6536C18.4108 13.6536 18.409 13.5467 18.4625 13.4944C18.5629 13.4424 18.852 13.4773 19.0833 13.3744C19.2594 13.2953 19.2948 13.8206 19.7731 13.7511C20.1121 13.7024 20.1093 13.3558 19.9145 13.3904C19.8543 13.3721 19.7744 13.5138 19.7027 13.5281C19.4539 13.5801 19.4195 13.2184 19.4195 13.0642C19.4195 12.9954 19.5602 12.5632 19.4539 12.2726C19.3215 11.908 18.8986 11.7071 18.7108 11.5855C18.6591 11.5511 18.5644 11.3384 18.6754 11.259C18.9407 11.0704 18.4276 10.8982 18.3391 11.3279C18.2905 11.5649 18.3893 11.628 18.3743 11.7586C18.3562 11.913 17.8754 12.2287 18.2683 12.5152C18.4809 12.6697 18.5458 12.416 18.4454 12.2912C18.2509 12.0504 19.1355 11.6885 19.1712 12.6006C19.1852 12.9793 18.5424 13.1504 18.4007 13.2033C17.3206 13.2033 16.4448 12.1988 16.4448 10.9602C16.4448 10.0018 16.982 9.17535 17.7186 8.85364C18.0202 8.52716 19.2594 8.5794 19.2069 8.06356C19.1696 7.71197 18.8169 7.52964 18.6218 7.71925C18.5336 7.89128 18.8344 7.90911 18.8169 8.08013C18.8006 8.23936 18.5065 8.28104 18.3037 8.14895C18.2002 8.08189 18.162 7.97842 18.1439 7.80514C18.073 7.11777 19.4901 6.61927 19.4901 6.61927C19.4901 6.61927 18.3205 6.27571 18.2851 5.94923C18.2556 5.67499 18.3916 5.63958 18.5158 5.79403C18.5892 5.88594 18.8003 5.69056 18.5504 5.46755C18.3562 5.34675 18.0717 5.45398 17.9845 5.7438C17.8974 6.03361 16.7979 4.74603 16.6561 4.36857C16.5876 4.18549 16.6587 3.77915 16.8858 3.85273C17.0459 3.90471 17.0107 4.00693 16.9569 4.07574C16.8936 4.15912 16.9494 4.30453 17.064 4.31658C17.1786 4.32864 17.3558 4.20558 17.3648 3.9901C17.3821 3.57723 16.5682 3.26758 16.3561 3.90446C16.3114 4.03631 16.196 3.85248 16.1081 3.78367C15.912 3.63097 14.6917 2.21958 13.0628 2.2015C12.4407 2.19497 12.7265 2.34615 12.4252 2.32229C12.2134 2.30446 12.0716 2.01264 11.9827 1.90942C11.9309 1.99506 11.7527 2.30472 11.5401 2.32229C11.2396 2.34741 11.5254 2.19522 10.9033 2.2015C9.27388 2.21908 8.05411 3.63047 7.85805 3.78367C7.76908 3.85248 7.65372 4.03631 7.61001 3.90446C7.39741 3.26758 6.58345 3.57798 6.6013 3.9901C6.61035 4.20533 6.78726 4.32914 6.90184 4.31658C7.01642 4.30402 7.07229 4.15912 7.0084 4.07574C6.95486 4.00693 6.9202 3.90471 7.07901 3.85273C7.3074 3.77915 7.37827 4.18549 7.30895 4.36857C7.16721 4.74527 6.06978 6.03587 5.98158 5.7438C5.89338 5.45172 5.60991 5.348 5.41463 5.46755C5.16685 5.69081 5.37687 5.88619 5.45007 5.79403C5.5737 5.63958 5.70871 5.67499 5.68104 5.94923C5.64457 6.27571 4.47627 6.61952 4.47627 6.61952C4.47627 6.61952 5.05046 6.83399 5.45007 7.16926C5.66603 7.35083 5.84631 7.56455 5.82174 7.80539C5.80467 7.97893 5.76587 8.08164 5.66267 8.14945C5.45912 8.28205 5.16581 8.23961 5.14952 8.08064C5.13141 7.90936 5.43196 7.89178 5.34402 7.71975C5.14952 7.53014 4.79595 7.71171 4.75974 8.06381C4.70801 8.57965 5.94615 8.52766 6.24695 8.85414C6.98435 9.1756 7.52155 10.0021 7.52155 10.9604C7.52155 12.199 6.64578 13.2039 5.56568 13.2039C5.42394 13.1519 4.78017 12.9806 4.79518 12.6011C4.83035 11.6897 5.71544 12.0506 5.52093 12.2915C5.42058 12.417 5.4855 12.6699 5.69811 12.5157C6.09099 12.2292 5.60991 11.913 5.5918 11.7588C5.57706 11.6285 5.67586 11.5652 5.62724 11.3284C5.53904 10.8987 5.02485 11.0707 5.291 11.2595C5.40273 11.3397 5.3091 11.5524 5.25634 11.586C5.0683 11.7076 4.6449 11.9085 4.51222 12.2729C4.40695 12.5634 4.54765 12.9957 4.54765 13.0645C4.54765 13.2189 4.51222 13.5803 4.26314 13.5283C4.19124 13.514 4.11132 13.3724 4.05028 13.3907C3.85603 13.3563 3.85293 13.7029 4.19227 13.7516C4.66999 13.8204 4.77707 13.2877 4.90096 13.3397C5.2372 13.4788 5.40144 13.4419 5.50205 13.4939C5.55559 13.5462 5.55508 13.6531 5.55508 13.6531C5.12391 13.9658 4.77371 14.4543 4.59809 15.0238C4.54351 14.9405 4.10459 14.8179 3.94553 14.9736C3.75025 15.1456 3.81129 15.3609 3.82112 15.4385C3.83871 15.5753 4.14261 15.6098 4.10563 15.3345C4.07019 15.0771 4.42428 15.1635 4.47704 15.4209C4.54791 15.8162 4.4385 15.9747 4.45894 16.109C4.63688 17.209 5.44774 17.8961 6.39878 17.8961C6.55094 17.8974 6.70274 17.8816 6.85115 17.8489C7.01978 17.8105 7.11548 18.1025 7.25748 18.3434C7.25748 18.3434 6.6732 18.5664 6.74433 18.9963C6.81545 19.4263 7.22204 19.6493 7.52259 19.2726C7.64622 19.1184 7.43439 19.1006 7.20446 19.1006C7.02987 18.9805 7.0472 18.7741 7.46983 18.6885C7.9835 18.5852 8.44285 19.6511 8.6208 20.0981C8.79875 20.5451 9.77125 21.783 11.0994 21.4901C11.1876 21.4711 11.9842 22.6421 11.9842 22.6421C11.9842 22.6421 12.7816 21.4708 12.8701 21.4901C14.1982 21.783 15.172 20.5446 15.3487 20.0981C15.5253 19.6516 15.986 18.5852 16.4994 18.6885C16.9223 18.7736 16.9391 18.9805 16.7648 19.1006C16.5351 19.1006 16.323 19.1184 16.4466 19.2726C16.7467 19.6511 17.1545 19.4281 17.2254 18.9963C17.2963 18.5646 16.712 18.3434 16.712 18.3434C16.8537 18.1025 16.9492 17.8105 17.1183 17.8489C17.2666 17.8815 17.4184 17.8974 17.5704 17.8961C18.5215 17.8961 19.4213 17.209 19.4738 16.057C19.4805 15.9219 19.4379 15.6522 19.4922 15.4209C19.5439 15.1635 19.8993 15.0771 19.8636 15.3345C19.8258 15.6108 20.129 15.5753 20.1481 15.4385C20.1566 15.3609 20.2182 15.1456 20.0232 14.9734L20.0203 14.9739ZM11.7695 3.59381C11.9289 3.36979 11.9814 3.0953 12.0168 3.23217C12.0776 3.46824 12.283 3.57623 12.194 3.64504C12.0587 3.75052 11.7108 3.67643 11.7701 3.59381H11.7695ZM11.9819 22.075L11.5223 21.4221L11.9819 20.8038L12.4425 21.4221L11.9819 22.075ZM19.188 16.0053C19.188 16.8983 18.4547 17.6214 17.551 17.6214C17.1652 17.6219 16.7918 17.4882 16.4986 17.2447C16.2739 17.0075 16.1472 16.6982 16.1427 16.376C16.1427 15.7537 16.6222 15.2496 17.1693 15.2496C17.2404 15.2983 17.3291 15.2152 17.4538 15.5927C17.6134 15.6617 17.6307 15.5352 17.6307 15.3872C17.6307 15.1464 17.3656 15.0429 17.0467 14.9231C16.8126 14.8342 17.0138 14.348 16.6569 14.3204C16.427 14.3036 16.338 14.4068 16.3915 14.561C16.427 14.6954 16.5532 14.5715 16.6215 14.613C16.8522 14.7506 16.5291 15.1404 16.5291 15.1404C16.1626 15.4563 15.9309 15.9021 15.9309 16.3659C15.9309 16.661 16.0256 16.9204 16.1619 17.1741C16.3191 17.3652 16.4634 17.5435 16.6323 17.6492C16.6323 17.6492 16.7976 18.034 16.3737 18.3775C16.1611 18.5493 15.9485 18.3253 15.2398 19.5288C15.2038 19.5918 15.0825 19.3437 14.8156 19.2543C14.6377 19.1508 14.1069 19.2543 14.0715 19.7015C14.0384 20.1134 14.4615 19.908 14.5676 19.5639C14.7034 19.4775 14.828 19.6342 14.9211 19.804C15.0505 20.0383 14.7794 20.5951 14.0544 21.0426C13.3985 21.4379 12.2302 21.2488 12.2656 20.4921C12.2915 19.9326 13.0806 19.804 12.9735 20.251C12.9099 20.5215 13.646 20.5609 13.293 19.9748C12.9399 19.3886 12.1239 19.9072 11.9822 20.251C11.8407 19.908 11.0265 19.3911 10.6724 19.9748C10.3183 20.5584 11.0554 20.5205 10.991 20.251C10.8845 19.8045 11.6733 19.9331 11.6992 20.4929C11.7344 21.2496 10.5661 21.4384 9.91118 21.0434C9.18516 20.5958 8.91514 20.0388 9.04368 19.8048C9.13757 19.635 9.2612 19.4783 9.39777 19.5647C9.50407 19.9087 9.92696 20.1142 9.89281 19.7023C9.85841 19.255 9.32716 19.1516 9.14999 19.255C8.88306 19.3444 8.76202 19.5925 8.72451 19.5295C8.01686 18.3261 7.80425 18.5501 7.59165 18.3783C7.16825 18.035 7.333 17.65 7.333 17.65C7.48483 17.4835 7.66329 17.4004 7.82107 17.2092C7.95979 16.9488 8.03259 16.6599 8.03341 16.3667C8.03341 15.9026 7.80193 15.4571 7.4362 15.1411C7.4362 15.1411 7.1129 14.7506 7.34283 14.6137C7.41215 14.5723 7.53733 14.6961 7.5738 14.5618C7.62553 14.4076 7.60587 14.3629 7.30766 14.339C6.88322 14.3043 7.15247 14.8347 6.91969 14.9236C6.60104 15.0434 6.33489 15.1467 6.33489 15.3875C6.33489 15.5354 6.353 15.662 6.51206 15.5932C6.63647 15.2165 6.72467 15.2986 6.79528 15.2499C7.34309 15.2499 7.8221 15.7542 7.8221 16.3765C7.81786 16.6986 7.69142 17.0079 7.46698 17.2452C7.17371 17.4885 6.80056 17.6221 6.41481 17.6219C5.51085 17.6219 4.77759 16.8986 4.77759 16.0058C4.67051 14.6481 5.52068 13.8224 6.29532 13.4065C7.16618 13.0441 7.78744 12.1006 7.78744 10.9956C7.78744 9.817 7.14962 8.90738 6.12203 8.49476C5.84605 8.31545 5.98287 8.27527 6.0703 8.08189C6.09978 8.01534 6.09616 7.91689 6.10573 7.80564C6.1316 7.48494 6.09901 7.63688 6.0703 7.47916C6.06021 7.42642 5.9821 7.36891 5.99917 7.20291C6.0703 6.54995 6.7795 6.83022 6.83149 7.08287C6.88503 7.34078 6.79036 7.31492 6.72519 7.37519C6.42438 7.27172 6.52965 7.45907 6.54801 7.51256C6.60155 7.66701 6.77873 7.72151 6.99107 7.58163C7.16747 7.52939 7.24015 7.27499 7.29188 7.2893C7.63122 7.38398 7.78796 7.0143 7.64622 6.99647C7.50448 6.97864 7.32731 7.15193 7.20368 6.99647C6.77769 6.46632 6.07262 6.4942 5.94641 6.72148C5.71569 7.1341 5.52119 6.91084 5.52119 6.91084C5.52119 6.91084 5.20358 6.68858 5.23668 6.67025C5.78553 6.37893 6.03486 6.21142 6.88374 5.39949C7.25541 4.98662 8.1511 3.82962 8.38828 3.64579C9.16783 3.04306 10.6367 1.99531 11.4871 2.64903C11.8257 2.90971 11.6989 3.19851 11.575 3.30198C11.4336 3.4386 11.3361 2.96596 11.2745 2.99158C11.079 3.02674 11.3805 3.33564 11.2391 3.47326C11.1072 3.61139 10.8689 3.44438 10.8845 3.30198C10.9199 2.9755 10.1416 3.59406 11.079 3.85172C11.2794 3.90597 11.2745 3.78291 11.4152 3.79974C11.5559 3.81657 11.7333 3.98935 11.9814 3.95494C12.2292 3.98935 12.4066 3.81732 12.5483 3.79974C12.6901 3.78216 12.6849 3.90597 12.8846 3.85172C13.8229 3.59406 13.0436 2.97475 13.0798 3.30198C13.0954 3.44413 12.8571 3.61139 12.7255 3.47326C12.584 3.33564 12.8846 3.02674 12.6901 2.99158C12.6275 2.96646 12.531 3.4386 12.3895 3.30198C12.2648 3.19801 12.1389 2.9092 12.4775 2.64903C13.3268 1.99607 14.7967 3.04407 15.5763 3.64579C15.8142 3.82962 16.7089 4.98662 17.0808 5.39949C17.9294 6.21217 18.0895 6.32744 18.7279 6.6715C18.7618 6.68983 18.4266 6.92917 18.4266 6.92917C18.4266 6.92917 18.2675 7.04972 18.0192 6.72273C17.8619 6.51554 17.1869 6.46733 16.7619 6.99773C16.6383 7.15318 16.4611 6.98115 16.3196 6.99773C16.1782 7.01431 16.3344 7.38524 16.6737 7.29056C16.7254 7.27624 16.7973 7.53064 16.9745 7.58288C17.1869 7.72276 17.3643 7.66827 17.4178 7.51382C17.4359 7.46033 17.5415 7.27298 17.2399 7.37645C17.1755 7.31617 17.0808 7.34204 17.1344 7.08412C17.1861 6.83148 17.8956 6.55146 17.9667 7.20416C17.984 7.36916 17.9049 7.42667 17.8956 7.48042C17.8668 7.63813 17.834 7.48594 17.8596 7.8069C17.8694 7.91715 17.8653 8.01559 17.8956 8.08315C17.9812 8.27652 18.119 8.31671 17.842 8.49602C16.8157 8.90864 16.1776 9.81826 16.1776 10.9969C16.1776 12.1031 16.7984 13.0464 17.6698 13.4078C18.4449 13.8219 19.2941 14.6479 19.188 16.0053Z\" fill=\"black\"/><path fill-rule=\"evenodd\" clip-rule=\"evenodd\" d=\"M15.1909 11.6324C14.8573 10.9973 14.2911 10.5573 13.6649 10.3845L13.7001 10.2645C14.0363 9.78282 14.1791 9.14518 14.1962 8.54446C14.1965 8.43491 14.186 8.32559 14.1649 8.21798C14.236 8.16775 14.4864 8.30613 14.6915 8.5972C14.9214 8.92368 15.1876 8.64918 14.9569 8.4764C14.7787 8.3438 14.6033 7.70365 14.5852 7.58285C14.5671 7.46205 14.5679 7.01553 14.6033 6.94697C14.6824 6.79302 14.6033 6.36207 14.3907 6.77469C14.1781 7.18731 13.8765 7.08434 13.8765 7.08434C13.7177 6.75786 13.2901 6.09611 12.5315 5.91555C12.6371 5.65687 13.0258 5.31156 13.592 5.08905C13.8845 4.97478 14.1168 4.89794 14.356 4.88362C14.4442 4.72917 14.4623 4.6257 14.3912 4.6257C13.9481 4.6257 13.3178 4.82335 13.0491 4.94339C12.8259 5.04385 12.5277 5.11919 12.1974 5.14757C11.954 5.17025 11.7086 5.1618 11.4675 5.12245C11.1007 5.05866 10.6732 4.97177 10.3012 4.85072C9.91146 4.59205 9.87629 4.98734 9.94224 5.03933C10.1982 5.11292 10.4449 5.214 10.6778 5.34069C10.9085 5.50971 11.0694 5.70409 11.2044 5.8824C10.8369 6.01249 10.4882 6.2704 10.3367 6.51853C10.1833 6.27317 9.83697 6.05242 9.57445 6.05242C8.92784 5.98461 8.60065 6.40677 8.60065 6.80056C8.60065 6.99192 8.69428 7.16471 8.84688 7.29254C8.84688 7.29254 9.07837 7.41107 9.23071 7.29103C9.28916 7.24381 9.23821 7.1637 9.23821 7.10217C9.09673 6.92939 9.14691 6.65414 9.45082 6.65414C9.75472 6.65414 9.9994 6.93039 9.9994 7.23904C9.34374 7.57431 8.813 8.1783 8.813 8.84633C8.813 9.55278 9.25554 10.1774 10.1411 10.488V13.9253C10.1411 13.9253 10.1758 14.3038 9.76895 13.8221C9.66549 13.6991 9.54729 13.638 9.41461 13.4454C8.93663 12.7063 8.57737 12.0526 8.45762 12.0526C8.29881 12.0526 8.15707 12.0697 8.33399 12.3447C8.49646 12.5975 8.58217 12.8897 8.58125 13.1877C8.58125 13.4622 8.64074 13.799 8.03241 14.2701C7.76729 14.4768 8.01508 14.6833 8.24527 14.4768C8.47547 14.2704 8.68859 14.3048 8.75868 14.3048C8.95448 14.3048 9.41357 14.3392 9.85689 14.8033C10.0085 14.8561 10.1039 14.9871 10.1039 15.1549C10.1039 15.2551 10.0629 15.3512 9.98992 15.4221C9.91695 15.4929 9.81797 15.5327 9.71476 15.5327C9.61156 15.5327 9.51258 15.4929 9.43961 15.4221C9.36663 15.3512 9.32563 15.2551 9.32563 15.1549C9.32563 15.0545 9.37012 15.0429 9.43168 14.9741C9.43168 14.9741 9.36081 14.7508 9.09544 14.9397C8.9987 15.0077 8.77627 15.2493 8.84714 15.4214C8.86473 15.8508 9.44461 16.3197 10.2811 15.9028C10.4187 16.1183 10.674 16.4134 10.9362 16.5733C11.207 16.7383 11.4822 16.7652 11.4592 16.8373C11.2549 17.4669 10.6708 17.6701 10.6708 17.6701C10.2655 17.7348 9.90939 17.7251 9.85663 17.3981C9.59152 16.8652 10.2446 17.0028 10.0511 16.6419C9.89103 16.5899 9.67946 16.607 9.59281 16.6452C9.31218 16.8147 9.12984 17.0814 9.12984 17.381C9.12984 17.8931 9.66135 18.3102 10.3162 18.3102C10.583 18.3127 10.8447 18.2396 11.0694 18.1C11.334 17.9295 11.6446 17.7941 11.8035 17.5535C11.9806 17.7941 12.5535 18.1126 12.7066 18.2065C12.9899 18.3783 13.8747 18.4815 13.2379 18.0686C12.2178 17.4076 12.3717 16.7275 12.3717 16.7275C13.062 16.7107 14.2487 15.782 14.415 14.6406C15.4253 14.066 15.7752 12.7467 15.1909 11.6324ZM10.1414 9.73058C9.69808 9.50757 9.53901 9.18185 9.53901 8.85386C9.53901 8.51407 9.78964 8.17378 10.1414 7.9259V9.73058ZM11.5748 6.41305V6.89398C11.1499 6.85957 10.8136 6.98037 10.7963 6.96932C10.877 6.70537 11.1532 6.43942 11.5748 6.41305ZM11.5748 7.46909V9.98925C11.5748 9.98925 11.1868 10.0229 10.9908 9.95384C10.9536 9.94217 10.9198 9.92211 10.8922 9.89531C10.8645 9.86851 10.8438 9.83572 10.8317 9.79964V7.59943C11.0734 7.52813 11.3227 7.48439 11.5748 7.46909ZM11.5733 16.1133C11.1144 15.9759 10.9036 15.5542 10.8842 15.2662C11.073 15.3006 11.3097 15.387 11.5733 15.3694V16.1133ZM11.5748 14.5959C11.5748 14.7014 11.2246 14.6695 11.0079 14.5102C10.9233 14.444 10.8618 14.354 10.8317 14.2526V11.5523H11.5748V14.5959ZM11.5929 10.9684H10.8491V10.5917C11.1323 10.6259 11.2743 10.642 11.5929 10.642V10.9684ZM12.3717 6.49819C12.7374 6.58759 13.0276 6.83647 13.1148 7.08459C13.0801 7.08459 12.5132 6.89498 12.3717 6.92939V6.49718V6.49819ZM12.3691 7.48139C12.5817 7.48139 12.5502 7.54844 12.8494 7.56602C12.9904 7.61625 13.3165 7.65493 13.398 7.77246C13.4997 7.91586 13.517 8.21421 13.5046 8.54546C13.4567 9.39355 13.3101 9.73184 13.0268 10.0927C12.9805 10.2198 12.8347 10.1902 12.6906 10.1615C12.5849 10.1418 12.4786 10.125 12.3717 10.1113L12.3691 7.4824V7.48139ZM12.3898 16.0751V15.3696C12.8773 15.3425 13.2896 15.2571 13.4691 15.1642C13.4518 15.4214 12.9733 15.8892 12.3898 16.0741V16.0751ZM13.5765 14.3736C13.292 14.5288 13.0442 14.631 12.8142 14.6499C12.3901 14.632 12.3717 14.688 12.3717 14.6152V11.7942C12.3717 11.7942 13.7167 12.1724 13.7705 13.7367C13.7748 13.8723 13.8054 14.2691 13.5765 14.3726V14.3736ZM14.4083 13.5509L14.3935 13.5135C14.377 13.1574 14.2533 12.74 14.0219 12.3331C13.6569 11.6932 13.062 11.2437 12.7079 11.158C12.754 11.1149 12.7506 11.1091 12.8075 11.0787C13.1859 10.7796 14.049 11.1606 14.4546 11.8693C14.85 12.3967 14.789 13.2171 14.4083 13.5499V13.5509Z\" fill=\"black\"/></svg>",
  237: "<svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n<rect width=\"24\" height=\"24\" rx=\"4\" fill=\"#CC092F\"/>\n<path fill-rule=\"evenodd\" clip-rule=\"evenodd\" d=\"M9.2444 8.21944C10.1381 8.0756 11.042 8.0045 11.9471 8.00687C16.2897 8.00687 19.6909 9.64673 19.6909 11.7421C19.6909 13.3212 17.8992 14.5967 15.5002 15.3862C15.318 15.447 15.1965 15.4166 15.1357 15.2648C15.075 15.1129 15.1054 15.0218 15.4394 14.87C16.806 14.2626 17.96 13.3516 17.96 12.4406C17.96 10.6489 14.4677 9.28231 10.3073 9.28231C9.729 9.27909 9.15104 9.30951 8.57631 9.37342C8.29312 9.98202 8.14794 10.6457 8.15116 11.317C8.15601 12.0021 8.30135 12.6791 8.57818 13.3059C8.85502 13.9326 9.25746 14.496 9.76065 14.9611C9.88212 15.0826 9.91249 15.1433 9.82138 15.2951C9.73028 15.447 9.57844 15.447 9.4266 15.3255C8.61257 14.8135 7.94448 14.1 7.48696 13.2541C7.02944 12.4082 6.79798 11.4586 6.81497 10.497C6.8137 10.2011 6.84424 9.9058 6.90608 9.61636L5.35732 9.98077C5.32762 9.99593 5.29512 10.0048 5.26184 10.0069C5.22856 10.0089 5.19521 10.0041 5.16388 9.99269C5.13254 9.98129 5.10389 9.96357 5.0797 9.94062C5.05551 9.91768 5.0363 9.88999 5.02327 9.8593C4.96254 9.73783 5.02327 9.61636 5.17511 9.52526C5.81008 9.19956 6.47017 8.92536 7.14902 8.70533C7.54782 7.62927 8.26328 6.69929 9.20112 6.03792C10.139 5.37656 11.2552 5.01485 12.4026 5.00046C13.2625 4.98971 14.114 5.16927 14.8963 5.52628C15.6786 5.88329 16.3722 6.40891 16.9274 7.06547C16.9589 7.08436 16.9849 7.11107 17.003 7.143C17.021 7.17493 17.0305 7.21099 17.0305 7.24767C17.0305 7.28436 17.021 7.32042 17.003 7.35234C16.9849 7.38427 16.9589 7.41098 16.9274 7.42988C16.8363 7.55135 16.7149 7.52098 16.563 7.39951C15.6372 6.66643 14.4945 6.26065 13.3137 6.24553C12.5297 6.24188 11.7553 6.41789 11.0499 6.76006C10.3445 7.10223 9.72685 7.60146 9.2444 8.21944ZM11.2183 15.4773L12.0382 14.9915C12.0534 14.9915 12.061 14.9915 12.0648 14.9953C12.0686 14.9991 12.0686 15.0066 12.0686 15.0218V18.9696C12.0686 18.9848 12.0686 18.9924 12.0648 18.9962C12.061 19 12.0534 19 12.0382 19H11.2183C11.178 19 11.1394 18.984 11.1109 18.9555C11.0825 18.9271 11.0665 18.8884 11.0665 18.8482V15.7203C11.0628 15.6689 11.0755 15.6177 11.1028 15.5741C11.1301 15.5304 11.1705 15.4965 11.2183 15.4773ZM13.921 14.2323V18.7874C13.921 18.8438 13.8986 18.8979 13.8588 18.9377C13.8189 18.9776 13.7648 19 13.7085 19H12.5545C12.5464 19 12.5387 18.9968 12.533 18.9911C12.5273 18.9854 12.5241 18.9777 12.5241 18.9696V14.7789C12.5227 14.7624 12.5247 14.7459 12.5299 14.7302C12.5351 14.7145 12.5435 14.7001 12.5545 14.6878L13.6174 14.0804C13.7692 13.9893 13.921 14.0501 13.921 14.2323Z\" fill=\"white\"/>\n</svg>\n",
  318: "<svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n<rect width=\"24\" height=\"24\" rx=\"4\" fill=\"#F5F5F5\"/>\n<path d=\"M11.304 10.249C11.304 9.82007 11.6967 9.47702 12.1237 9.54584C14.4126 9.88863 16.1716 11.8784 16.1716 14.2625C16.1716 18.0019 13.1826 18.8251 11.8846 18.9968C11.5772 19.031 11.304 18.7908 11.304 18.482V10.249Z\" fill=\"#462A71\"/>\n<path fill-rule=\"evenodd\" clip-rule=\"evenodd\" d=\"M9.66455 14.5543H7.52956C7.23914 14.5543 7 14.3141 7 14.0226V7.79627C7 6.25265 8.24699 5.00027 9.78385 5H10.7744C11.0648 5 11.304 5.24022 11.304 5.53172V12.9078C11.304 13.8166 10.5696 14.5543 9.66455 14.5543Z\" fill=\"#FF6300\"/>\n</svg>\n",
  623: "<svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n<rect width=\"24\" height=\"24\" rx=\"4\" fill=\"#1266B0\"/>\n<path fill-rule=\"evenodd\" clip-rule=\"evenodd\" d=\"M15.5849 10.4996C15.6713 10.5682 15.6098 10.5098 15.6883 10.5995L17.322 13.2794C17.9772 14.3488 18.2175 15.3107 20 14.905L19.9818 9.03615L18.8716 9.05633L18.8713 13.517L18.3876 12.7917C17.9225 12.0457 16.6612 9.7787 16.2435 9.35535C15.7828 8.8882 14.573 8.86229 14.4632 9.18197C14.3372 9.5489 14.4966 8.9648 14.4335 9.28055C14.4271 9.31221 14.4245 9.45131 14.4247 9.48936C14.4288 10.7506 14.3744 14.2857 14.4425 14.9582L15.5842 14.9349L15.5849 10.4996Z\" fill=\"white\"/>\n<path fill-rule=\"evenodd\" clip-rule=\"evenodd\" d=\"M9.62977 13.0284C9.6512 12.9093 10.606 10.4802 10.8306 10.373C11.1333 10.4945 11.1775 11.1162 11.4346 11.5062L12.3847 11.17C12.4619 11.1349 12.4525 11.1372 12.4949 11.1053C12.3766 10.7301 12.1633 10.3315 12.0044 9.94092C11.8231 9.49493 11.7119 9.17459 11.2835 9.00909C10.1569 8.57409 9.85416 9.70768 9.53745 10.4013C9.38238 10.741 7.62819 14.6445 7.55212 14.9554L8.80462 14.9511C8.9533 14.5215 9.01363 14.3842 9.29577 14.1289C9.96947 13.5193 10.9563 12.856 11.9455 12.6961C12.017 12.9554 12.7946 14.7973 12.9172 14.9536L14.1595 14.957C14.0836 14.5022 13.2633 13.0209 13.1255 12.464L14.0383 12.3556L14.0433 11.2267C13.1632 11.2328 12.1616 11.5235 11.474 11.8198C10.2146 12.3629 10.0068 12.8065 9.62977 13.0284Z\" fill=\"white\"/>\n<path fill-rule=\"evenodd\" clip-rule=\"evenodd\" d=\"M5.19407 9.0382C5.65288 8.9014 6.45849 8.94077 6.89829 9.10758C8.20905 9.60508 7.77288 12.0435 5.19095 11.5073L5.19407 9.0382ZM5.18732 12.4705C6.3743 12.4345 6.9728 12.5805 7.86122 11.9357C8.45748 11.503 8.91163 10.7613 8.6983 9.68955C8.25123 7.4432 4.42424 8.00106 4 8.24021L4.0121 14.9551L5.18992 14.9578L5.18732 12.4705Z\" fill=\"white\"/>\n</svg>\n",
  655: "<svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n<rect width=\"24\" height=\"24\" rx=\"4\" fill=\"#00497C\"/>\n<g clip-path=\"url(#clip0)\">\n<path d=\"M14.7934 5.80991C15.0245 5.32994 15.5168 5 16.0849 5H16.1007H19.4774L12.8248 18.304C12.6226 18.7086 12.2205 18.9999 11.7371 18.9999C11.2398 18.9999 10.8418 18.6814 10.6313 18.2612L8.82556 14.6413C8.92898 14.6611 9.03735 14.6713 9.14586 14.6713C9.42945 14.6713 9.6975 14.6031 9.93313 14.4818C9.93902 14.4792 9.94559 14.4776 9.95121 14.4745C10.4016 14.2407 10.7678 13.8664 10.9921 13.41L14.7934 5.80991Z\" fill=\"white\"/>\n<path d=\"M9.20415 5.79049C9.43255 5.33275 9.9002 5.01447 10.4441 5.00013L10.4843 5H13.7045L9.83135 12.7463C9.64407 13.1198 9.29819 13.4074 8.85465 13.4074C8.41648 13.4066 8.06778 13.1238 7.88292 12.7545L6.09457 9.18379C6.1937 9.20429 6.29618 9.215 6.40054 9.215C6.62773 9.215 6.8426 9.16758 7.03697 9.07863L7.05519 9.07019C7.07729 9.05988 7.09846 9.04889 7.12016 9.03818C7.52847 8.82746 7.85747 8.48948 8.06108 8.07743L8.06497 8.07033L8.06778 8.0639L9.20415 5.79049Z\" fill=\"white\"/>\n<path d=\"M8.27756 5L6.99759 7.55847C6.83925 7.87502 6.51628 8.09565 6.13932 8.09565C5.76062 8.09565 5.43684 7.87502 5.27877 7.55847L4 5H8.27756Z\" fill=\"white\"/>\n</g>\n<defs>\n<clipPath id=\"clip0\">\n<rect width=\"15.4774\" height=\"14\" fill=\"white\" transform=\"translate(4 5)\"/>\n</clipPath>\n</defs>\n</svg>\n",
  212: "<svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n<rect width=\"24\" height=\"24\" rx=\"4\" fill=\"#00AE5A\"/>\n<path d=\"M12.1352 18.4145L17.7673 15.2645L17.7756 8.7747L12.1352 5.5257L6.46179 8.7747V15.4211L12.1352 18.4145Z\" fill=\"#65B22E\"/>\n<path d=\"M17.7673 13.1287L13.9576 17.392L17.7673 15.2645V13.1287Z\" fill=\"#35B558\"/>\n<path d=\"M6.46179 10.3497V14.9923L11.9868 12.2299L6.46179 10.3497Z\" fill=\"#35B558\"/>\n<path d=\"M17.7756 8.77471L12.8609 5.94626L11.9868 12.2299L17.7756 9.59108V8.77471Z\" fill=\"#70BF54\"/>\n<path d=\"M12.1352 18.4145L12.7289 18.0764L11.9868 12.2299L6.46179 14.9923V15.4211L12.1352 18.4145Z\" fill=\"#00AE5A\"/>\n<path d=\"M11.9868 12.2299L12.8608 5.94625L12.1352 5.5257L6.46179 8.7747V10.3497L11.9868 12.2299Z\" fill=\"#50AF47\"/>\n<path d=\"M18.0147 8.33765L12.3331 5.05566C12.2011 4.98145 12.0362 4.98145 11.9043 5.05566L6.21439 8.3459C6.0907 8.42836 6.00824 8.56855 6.00824 8.71698C6.00824 8.87366 6.0907 9.01384 6.22264 9.08806L11.9043 12.3618C11.9702 12.403 12.0445 12.4195 12.1187 12.4195C12.1929 12.4195 12.2671 12.403 12.3331 12.3618L18.023 9.07981C18.1549 9.0056 18.2374 8.86541 18.2374 8.70873C18.2291 8.5603 18.1467 8.42012 18.0147 8.33765ZM12.1187 11.5042L7.2864 8.71698L12.1187 5.92151L16.951 8.70873L12.1187 11.5042Z\" fill=\"white\"/>\n<path d=\"M17.8086 10.2673C17.5694 10.2673 17.3798 10.4569 17.3798 10.6961V15.0418L12.1187 18.0764L6.85761 15.0501V10.7043C6.85761 10.4652 6.66794 10.2755 6.4288 10.2755C6.18966 10.2755 6 10.4652 6 10.7043V15.2975C6 15.4541 6.08246 15.5943 6.2144 15.6685L11.896 18.9423C11.962 18.9835 12.0362 19 12.1104 19C12.1847 19 12.2589 18.9835 12.3248 18.9423L18.0147 15.6603C18.1467 15.5861 18.2291 15.4459 18.2291 15.2892V10.6961C18.2291 10.4569 18.0395 10.2673 17.8086 10.2673Z\" fill=\"white\"/>\n</svg>\n",
  197: "<svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n<rect width=\"24\" height=\"24\" rx=\"4\" fill=\"#0DB14B\"/>\n<path fill-rule=\"evenodd\" clip-rule=\"evenodd\" d=\"M10.357 18.8443L4.34535 12.8395C4.12418 12.6174 4 12.3168 4 12.0034C4 11.69 4.12418 11.3894 4.34535 11.1673L10.357 5.16248C10.4054 5.11396 10.4629 5.07548 10.5262 5.04922C10.5895 5.02296 10.6574 5.00944 10.7259 5.00944C10.7944 5.00944 10.8623 5.02296 10.9256 5.04922C10.9889 5.07548 11.0464 5.11396 11.0949 5.16248C11.1896 5.2613 11.2449 5.39129 11.2506 5.52805V18.4787C11.2488 18.6176 11.1924 18.7502 11.0935 18.8477C10.9947 18.9453 10.8614 19 10.7225 19C10.6542 19.0003 10.5865 18.9867 10.5236 18.9599C10.4608 18.9332 10.404 18.8938 10.357 18.8443ZM13.0649 5C14.8364 5.12329 16.4952 5.914 17.7065 7.21255C18.9178 8.5111 19.5915 10.2208 19.5915 11.9966C19.5915 13.7724 18.9178 15.4821 17.7065 16.7807C16.4952 18.0792 14.8364 18.8699 13.0649 18.9932C12.9973 18.9988 12.9292 18.9909 12.8647 18.9701C12.8001 18.9492 12.7403 18.9158 12.6887 18.8718C12.6371 18.8277 12.5948 18.7739 12.5641 18.7134C12.5333 18.6529 12.5149 18.587 12.5098 18.5193V15.6692C12.5082 15.5458 12.5511 15.4258 12.6307 15.3314C12.7102 15.2369 12.8211 15.1742 12.943 15.1547C13.7052 15.0486 14.4032 14.6705 14.9084 14.0901C15.4136 13.5096 15.6919 12.7661 15.6919 11.9966C15.6919 11.2271 15.4136 10.4836 14.9084 9.90317C14.4032 9.32275 13.7052 8.9446 12.943 8.83849C12.8205 8.82036 12.7088 8.75804 12.629 8.66327C12.5492 8.56851 12.5068 8.44784 12.5098 8.32398V5.52128C12.5097 5.38534 12.5628 5.25476 12.6576 5.15738C12.7525 5.06001 12.8816 5.00353 13.0175 5H13.0649Z\" fill=\"white\"/>\n</svg>\n",
  260: "<svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n<rect width=\"24\" height=\"24\" rx=\"4\" fill=\"#8A05BE\"/>\n<path fill-rule=\"evenodd\" clip-rule=\"evenodd\" d=\"M19.6783 16.173C20.2376 16.173 20.9253 15.4632 20.9253 14.8856V7.97396C20.9253 7.88555 20.8544 7.8127 20.7677 7.8127H19.3259C19.3051 7.81287 19.2846 7.81715 19.2654 7.82528C19.2463 7.83341 19.229 7.84525 19.2144 7.86011C19.1998 7.87496 19.1883 7.89255 19.1806 7.91187C19.1728 7.93118 19.1689 7.95184 19.1691 7.97266C19.1696 8.67604 19.1696 12.6386 19.1691 16.173H19.6783ZM17.2013 18.3913C18.3971 18.3913 18.5756 17.7789 18.5756 17.4133L18.5764 16.7826H17.1925C16.1021 16.7826 15.2175 15.8741 15.2175 14.7541V7.97526C15.2175 7.88633 15.1464 7.814 15.0597 7.814H13.6161C13.5953 7.8141 13.5747 7.81833 13.5555 7.82643C13.5363 7.83454 13.5189 7.84637 13.5043 7.86123C13.4897 7.8761 13.4782 7.89372 13.4704 7.91306C13.4627 7.93241 13.4588 7.95311 13.459 7.97396C13.459 11.0483 13.4616 15.2672 13.4616 15.2672C13.4616 16.572 14.884 18.3913 17.2013 18.3913ZM19.2162 7.20474H20.8771V7.20448C21.2316 7.20448 21.5187 7.49952 21.518 7.863V14.8856C21.518 15.8077 20.5721 16.7826 19.678 16.7826H19.1683V17.4092C19.1683 18.3907 18.4144 19 17.2008 19C15.3914 19 12.8676 17.58 12.8674 15.2674C12.8674 15.2674 12.864 10.8678 12.8648 7.863C12.8653 7.49952 13.1525 7.20448 13.5064 7.20448H15.1681C15.522 7.20448 15.8092 7.49952 15.8092 7.863V14.7541C15.8092 15.5381 16.428 16.1738 17.1915 16.1738H18.5754V7.863C18.5754 7.5003 18.8631 7.20474 19.2162 7.20474ZM11.049 16.0869C11.0568 16.0675 11.0607 16.0469 11.0605 16.026H11.0602C11.0602 12.9722 11.0576 8.73282 11.0576 8.73282C11.0576 7.42796 9.63472 5.60874 7.31742 5.60874C6.12164 5.60874 5.94313 6.22189 5.94313 6.58667V7.21744H7.32699C8.41721 7.21744 9.30201 8.12589 9.30201 9.24589V16.0247C9.3018 16.067 9.31827 16.1077 9.34783 16.1378C9.3774 16.168 9.41765 16.1852 9.45983 16.1857H10.9035C10.9242 16.1856 10.9448 16.1814 10.964 16.1733C10.9831 16.1652 11.0005 16.1534 11.0151 16.1386C11.0297 16.1238 11.0412 16.1062 11.049 16.0869ZM3.63844 16.1388C3.66788 16.1691 3.70809 16.1864 3.75027 16.187L3.75053 16.1865H5.19234C5.23452 16.186 5.27476 16.1687 5.30425 16.1385C5.33373 16.1082 5.35005 16.0675 5.34964 16.0253C5.34887 15.4782 5.34887 12.8882 5.34964 7.8267H4.83997C4.28089 7.8267 3.59323 8.53759 3.59323 9.11522V16.0255C3.59275 16.0678 3.60901 16.1085 3.63844 16.1388ZM7.31742 5C9.12661 5 11.6504 6.41996 11.6501 8.73282L11.6504 8.73255C11.6504 8.73255 11.6537 13.0762 11.6524 16.137C11.6524 16.5013 11.3655 16.7955 11.0116 16.7955H9.34962C8.99595 16.7955 8.70878 16.5005 8.70878 16.137V9.24589C8.70878 8.46189 8.08968 7.82618 7.32647 7.82618H5.94235V16.137C5.94235 16.4898 5.67045 16.7763 5.33101 16.7927C5.32584 16.7927 5.32105 16.7934 5.31627 16.7941C5.31148 16.7948 5.30669 16.7955 5.30152 16.7955H3.64083C3.28717 16.7955 3 16.5005 3 16.137V9.11444C3 8.19226 3.94586 7.21744 4.84023 7.21744H5.34964V6.59081C5.34964 5.60926 6.10353 5 7.31742 5Z\" fill=\"white\"/>\n</svg>\n",
  290: "\n    <svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n<rect width=\"24\" height=\"24\" rx=\"4\" fill=\"#A7DBDA\"/>\n<path fill-rule=\"evenodd\" clip-rule=\"evenodd\" d=\"M11.2701 5.03625C6.35068 5.60199 3.49892 10.8077 5.82065 15.3384C7.00648 17.6524 9.74837 19.2581 12.6633 18.9657C16.2083 18.6101 19.2897 15.3788 18.8665 11.3377C18.7577 10.2986 18.4802 9.50204 18.0502 8.68974C17.84 8.29286 17.601 7.97069 17.3565 7.64833C16.1711 6.08497 13.6547 4.76203 11.2701 5.03625Z\" fill=\"#040607\"/>\n<path fill-rule=\"evenodd\" clip-rule=\"evenodd\" d=\"M14.1659 17.017C14.0326 16.9022 13.5325 16.7229 13.2965 16.5392C11.1032 14.8329 11.8418 11.8178 13.9532 10.9755L14.4639 10.7799C14.1613 10.295 13.2059 9.63335 12.3969 9.37058C9.64445 8.47652 6.6026 10.3734 6.40154 13.4133C6.25836 15.578 7.57591 17.199 8.9325 17.8561C10.6794 18.7021 13.0046 18.3556 14.1659 17.017Z\" fill=\"#A7DBDA\"/>\n<path fill-rule=\"evenodd\" clip-rule=\"evenodd\" d=\"M6.40241 11.5871C6.44428 11.5474 6.88875 10.7868 7.26902 10.3418C7.54551 10.0182 7.98183 9.67102 8.43779 9.40093C10.1591 8.3813 12.4463 8.4855 14.0581 9.77471C14.1635 9.85901 14.2515 9.90988 14.3435 10.0046L14.8605 10.5671C15.177 10.9955 15.8752 10.434 17.1461 11.4229C17.311 11.5512 17.2847 11.6037 17.4727 11.6785C17.8018 8.24023 15.2577 5.48544 12.0209 5.43534C10.4727 5.41139 8.83959 6.11708 7.90237 7.17824C6.92139 8.28895 6.28196 9.52341 6.40241 11.5871Z\" fill=\"#DDE461\"/>\n<path fill-rule=\"evenodd\" clip-rule=\"evenodd\" d=\"M14.6445 11.2281C13.3158 11.5094 12.1475 12.7576 12.451 14.4301C12.6952 15.7761 14.0198 16.9861 15.7061 16.6562C17.0147 16.4002 18.1776 15.0991 17.8852 13.4467C17.6466 12.0982 16.2874 10.8801 14.6445 11.2281Z\" fill=\"#F4E13D\"/>\n</svg>\n",
  735: "<svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n<rect width=\"24\" height=\"24\" rx=\"4\" fill=\"#00AFEF\"/>\n<g clip-path=\"url(#clip0)\">\n<path d=\"M11.92 5C7.54676 4.99912 4.00088 8.54382 4 12.9171C3.99971 15.0164 4.83301 17.0303 6.31699 18.5155C6.96148 19.1608 8.00715 19.1614 8.65223 18.5172C9.29731 17.873 9.2982 16.8271 8.654 16.182C6.85131 14.3781 6.85249 11.4546 8.65636 9.65194C10.4602 7.84925 13.384 7.85043 15.1864 9.6543C16.9882 11.4573 16.9882 14.379 15.1864 16.182C14.5419 16.8273 14.5428 17.873 15.1882 18.5172C15.8335 19.1614 16.8792 19.1608 17.5237 18.5155C20.6145 15.4217 20.6121 10.4081 17.5184 7.31699C16.0332 5.83301 14.0194 4.99941 11.92 5Z\" fill=\"white\"/>\n</g>\n<defs>\n<clipPath id=\"clip0\">\n<rect width=\"15.8401\" height=\"14\" fill=\"white\" transform=\"translate(4 5)\"/>\n</clipPath>\n</defs>\n</svg>\n",
  477: "<svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n<rect width=\"24\" height=\"24\" rx=\"4\" fill=\"#004484\"/>\n<path fill-rule=\"evenodd\" clip-rule=\"evenodd\" d=\"M8.87818 15.0635L8.8494 15.0909C8.38744 15.5473 7.85259 15.7889 7.30196 15.7889C6.1524 15.7889 5.31763 14.9525 5.31763 13.7986C5.31763 12.6469 6.1524 11.8099 7.30196 11.8099C7.85259 11.8099 8.38721 12.0522 8.8494 12.5092L8.87818 12.5371L9.61755 11.6701L9.59782 11.6467C8.98334 10.9422 8.24514 10.5995 7.33794 10.5995C6.42818 10.5995 5.5955 10.8965 4.99588 11.4318C4.3438 12.0124 4 12.8303 4 13.7984C4 14.7666 4.3438 15.5866 4.99565 16.1667C5.59526 16.7048 6.42795 16.9998 7.33771 16.9998C8.24491 16.9998 8.98311 16.6573 9.59759 15.9525L9.61732 15.9309L8.87818 15.0635Z\" fill=\"white\"/>\n<path fill-rule=\"evenodd\" clip-rule=\"evenodd\" d=\"M10.3648 16.8814H11.6713V10.6998H10.3648V16.8814Z\" fill=\"white\"/>\n<path fill-rule=\"evenodd\" clip-rule=\"evenodd\" d=\"M16.789 15.5378C16.4399 15.7435 16.1158 15.8472 15.824 15.8472C15.402 15.8472 15.2112 15.6312 15.2112 15.1501V11.8697H16.5423V10.7057H15.2112V8.78195L13.9309 9.44644V10.7057H12.8264V11.8697H13.9309V15.3596C13.9309 16.3096 14.512 16.9593 15.3797 16.9766C15.9682 16.9876 16.3231 16.8175 16.5386 16.6931L16.5518 16.6843L16.8656 15.4921L16.789 15.5378Z\" fill=\"white\"/>\n<path fill-rule=\"evenodd\" clip-rule=\"evenodd\" d=\"M17.8703 16.8814H19.178V10.6998H17.8703V16.8814Z\" fill=\"white\"/>\n<path fill-rule=\"evenodd\" clip-rule=\"evenodd\" d=\"M19.9396 9.61589C18.7462 7.9775 16.7644 7 14.7481 7C12.7322 7 10.7497 7.9775 9.55836 9.61589L9.49707 9.70027H11.0002L11.0162 9.68272C12.0395 8.65999 13.3747 8.11859 14.7481 8.11859C16.1209 8.11859 17.456 8.65999 18.4809 9.68272L18.4983 9.70027H19.9998L19.9396 9.61589Z\" fill=\"#BF0024\"/>\n</svg>\n",
  269: "<svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n<rect width=\"24\" height=\"24\" rx=\"4\" fill=\"#F5F5F5\"/>\n<path fill-rule=\"evenodd\" clip-rule=\"evenodd\" d=\"M7.02292 7V12V17L2 12L7.02292 7Z\" fill=\"#DA000A\"/>\n<path fill-rule=\"evenodd\" clip-rule=\"evenodd\" d=\"M7.02251 7H11.9884H16.9921L11.9884 12.0233L7.00356 7.01897L7.02251 7Z\" fill=\"#DA000A\"/>\n<path fill-rule=\"evenodd\" clip-rule=\"evenodd\" d=\"M16.9771 17V12V7L22 12L16.9771 17Z\" fill=\"#DA000A\"/>\n<path fill-rule=\"evenodd\" clip-rule=\"evenodd\" d=\"M16.9775 17H12.0117H7.00769L12.0117 11.9767L16.9965 16.981L16.9775 17Z\" fill=\"#DA000A\"/>\n</svg>\n",
  104: "<svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n<rect width=\"24\" height=\"24\" rx=\"4\" fill=\"#F5F5F5\"/>\n<g clip-path=\"url(#clip0)\">\n<path fill-rule=\"evenodd\" clip-rule=\"evenodd\" d=\"M9.29059 12.5022H14.9816L18.8807 18.9607H13.1896L9.29059 12.5022Z\" fill=\"#0069A7\"/>\n<path fill-rule=\"evenodd\" clip-rule=\"evenodd\" d=\"M9.88235 11.5099H15.7647L20.8733 5.07855H14.991L9.88235 11.5099Z\" fill=\"#EE8717\"/>\n<path fill-rule=\"evenodd\" clip-rule=\"evenodd\" d=\"M4 19H9.88236L14.991 12.4897H9.10862L4 19Z\" fill=\"#EE8717\"/>\n<path fill-rule=\"evenodd\" clip-rule=\"evenodd\" d=\"M6.12137 5H11.6114L15.3724 11.5099H9.88236L6.12137 5Z\" fill=\"#0069A7\"/>\n</g>\n<defs>\n<clipPath id=\"clip0\">\n<rect width=\"16.8733\" height=\"14\" fill=\"white\" transform=\"translate(4 5)\"/>\n</clipPath>\n</defs>\n</svg>\n",
  "null": "<svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n<rect width=\"24\" height=\"24\" rx=\"5\" fill=\"#979899\"/>\n<path d=\"M11.7679 5.87476L6.31261 8.80054V9.97632H17.2501V8.80054L11.7679 5.87476ZM14.3604 11.1248V15.2263H16.0888V11.1248H14.3604ZM6.31261 18.1248H17.2501V16.3748H6.31261V18.1248ZM10.9037 11.1248V15.2263H12.6321V11.1248H10.9037ZM7.44687 11.1248V15.2263H9.17526V11.1248H7.44687Z\" fill=\"white\"/>\n</svg>\n"
};
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (iconsBanco);

/***/ }),
/* 133 */
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {


var content = __webpack_require__(134);

if(typeof content === 'string') content = [[module.id, content, '']];

var transform;
var insertInto;



var options = {"hmr":true}

options.transform = transform
options.insertInto = undefined;

var update = __webpack_require__(125)(content, options);

if(content.locals) module.exports = content.locals;

if(false) {}

/***/ }),
/* 134 */
/***/ ((module, exports, __webpack_require__) => {

exports = module.exports = __webpack_require__(118)(false);
// imports


// module
exports.push([module.id, ".custom-scrollbar::-webkit-scrollbar-track,\n.select__menu-list::-webkit-scrollbar-track {\n  background-color: transparent;\n}\n\n.custom-scrollbar::-webkit-scrollbar,\n.select__menu-list::-webkit-scrollbar {\n  width: 14px;\n}\n\n.custom-scrollbar::-webkit-scrollbar-thumb,\n.select__menu-list::-webkit-scrollbar-thumb {\n  background-color: #d8d8d8;\n  border-radius: 20px;\n  border: 4px solid rgba(0, 0, 0, 0);\n  background-clip: padding-box;\n  width: 4px;\n}\n\n@-moz-keyframes spin {\n  from {\n    -moz-transform: rotate(0deg);\n  }\n  to {\n    -moz-transform: rotate(360deg);\n  }\n}\n@-webkit-keyframes spin {\n  from {\n    -webkit-transform: rotate(0deg);\n  }\n  to {\n    -webkit-transform: rotate(360deg);\n  }\n}\n@keyframes spin {\n  from {\n    transform: rotate(0deg);\n  }\n  to {\n    transform: rotate(360deg);\n  }\n}\n.react-tooltip-lite {\n  background: #303133;\n  padding: 8px;\n  text-align: center;\n  border-radius: 4px;\n  opacity: 0.8;\n  min-width: 123px;\n}\n\n.react-tooltip-lite-arrow {\n  border-top: 10px solid #303133 !important;\n  opacity: 0.8;\n}\n\n.ReactCollapse--collapse {\n  transition: height 300ms;\n}", ""]);

// exports


/***/ }),
/* 135 */
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "handleOutsideDivClick": () => (/* reexport safe */ _clickHandleUtil__WEBPACK_IMPORTED_MODULE_0__.handleOutsideDivClick),
/* harmony export */   "fontStyleMaker": () => (/* reexport safe */ _FontUtil__WEBPACK_IMPORTED_MODULE_1__.fontStyleMaker)
/* harmony export */ });
/* harmony import */ var _clickHandleUtil__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(136);
/* harmony import */ var _FontUtil__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(137);



/***/ }),
/* 136 */
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "handleOutsideDivClick": () => (/* binding */ handleOutsideDivClick)
/* harmony export */ });
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(47);

var handleOutsideDivClick = function handleOutsideDivClick(callbackAction) {
  var wrapperRef = (0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)(null);
  useOutsideAlerter(wrapperRef);

  function useOutsideAlerter(ref) {
    (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(function () {
      function handleClickOutside(event) {
        if (ref.current && !ref.current.contains(event.target)) {
          callbackAction();
        }
      }

      document.addEventListener('mousedown', handleClickOutside);
      return function () {
        document.removeEventListener('mousedown', handleClickOutside);
      };
    }, [ref]);
  }

  return wrapperRef;
};

/***/ }),
/* 137 */
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "fontStyleMaker": () => (/* binding */ fontStyleMaker)
/* harmony export */ });
/* harmony import */ var _tokens_index__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(113);

var fontStyleMaker = function (_a) {
    var fontFamily = _a.fontFamily, fontWeight = _a.fontWeight, fontSize = _a.fontSize;
    return {
        fontFamily: _tokens_index__WEBPACK_IMPORTED_MODULE_0__.Tokens.fonts.family[fontFamily],
        fontWeight: _tokens_index__WEBPACK_IMPORTED_MODULE_0__.Tokens.fonts.weight[fontWeight],
        fontSize: _tokens_index__WEBPACK_IMPORTED_MODULE_0__.Tokens.fonts.fontSize[fontSize],
        lineHeight: _tokens_index__WEBPACK_IMPORTED_MODULE_0__.Tokens.fonts.fontSize[fontSize],
    };
};


/***/ }),
/* 138 */
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "camelize": () => (/* binding */ camelize)
/* harmony export */ });
/* harmony import */ var core_js_modules_es_regexp_exec_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(93);
/* harmony import */ var core_js_modules_es_regexp_exec_js__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_regexp_exec_js__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var core_js_modules_es_string_replace_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(97);
/* harmony import */ var core_js_modules_es_string_replace_js__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_string_replace_js__WEBPACK_IMPORTED_MODULE_1__);


function camelize(str) {
  return str && str.replace(/(?:^\w|[A-Z]|\b\w)/g, function (word, index) {
    return index === 0 ? word.toLowerCase() : word.toUpperCase();
  }).replace(/\s+/g, '').replace(/\W/gm, '');
}

/***/ }),
/* 139 */
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__),
/* harmony export */   "ServerStyleSheet": () => (/* binding */ Ue),
/* harmony export */   "StyleSheetConsumer": () => (/* binding */ le),
/* harmony export */   "StyleSheetContext": () => (/* binding */ ue),
/* harmony export */   "StyleSheetManager": () => (/* binding */ ye),
/* harmony export */   "ThemeConsumer": () => (/* binding */ Le),
/* harmony export */   "ThemeContext": () => (/* binding */ ze),
/* harmony export */   "ThemeProvider": () => (/* binding */ Ge),
/* harmony export */   "__PRIVATE__": () => (/* binding */ Ze),
/* harmony export */   "createGlobalStyle": () => (/* binding */ $e),
/* harmony export */   "css": () => (/* binding */ Ae),
/* harmony export */   "isStyledComponent": () => (/* binding */ N),
/* harmony export */   "keyframes": () => (/* binding */ We),
/* harmony export */   "useTheme": () => (/* binding */ Xe),
/* harmony export */   "version": () => (/* binding */ C),
/* harmony export */   "withTheme": () => (/* binding */ Je)
/* harmony export */ });
/* harmony import */ var react_is__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(108);
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(47);
/* harmony import */ var shallowequal__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(140);
/* harmony import */ var shallowequal__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(shallowequal__WEBPACK_IMPORTED_MODULE_2__);
/* harmony import */ var _emotion_stylis__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(141);
/* harmony import */ var _emotion_unitless__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(142);
/* harmony import */ var _emotion_is_prop_valid__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(143);
/* harmony import */ var hoist_non_react_statics__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(145);
/* harmony import */ var hoist_non_react_statics__WEBPACK_IMPORTED_MODULE_6___default = /*#__PURE__*/__webpack_require__.n(hoist_non_react_statics__WEBPACK_IMPORTED_MODULE_6__);
function v(){return(v=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e}).apply(this,arguments)}var g=function(e,t){for(var n=[e[0]],r=0,o=t.length;r<o;r+=1)n.push(t[r],e[r+1]);return n},S=function(t){return null!==t&&"object"==typeof t&&"[object Object]"===(t.toString?t.toString():Object.prototype.toString.call(t))&&!(0,react_is__WEBPACK_IMPORTED_MODULE_0__.typeOf)(t)},w=Object.freeze([]),E=Object.freeze({});function b(e){return"function"==typeof e}function _(e){return"production"!=="MISSING_ENV_VAR".NODE_ENV&&"string"==typeof e&&e||e.displayName||e.name||"Component"}function N(e){return e&&"string"==typeof e.styledComponentId}var A="undefined"!=typeof process&&("MISSING_ENV_VAR".REACT_APP_SC_ATTR||"MISSING_ENV_VAR".SC_ATTR)||"data-styled",C="5.2.1",I="undefined"!=typeof window&&"HTMLElement"in window,P=Boolean("boolean"==typeof SC_DISABLE_SPEEDY?SC_DISABLE_SPEEDY:"undefined"!=typeof process&&void 0!=="MISSING_ENV_VAR".REACT_APP_SC_DISABLE_SPEEDY&&""!=="MISSING_ENV_VAR".REACT_APP_SC_DISABLE_SPEEDY?"false"!=="MISSING_ENV_VAR".REACT_APP_SC_DISABLE_SPEEDY&&"MISSING_ENV_VAR".REACT_APP_SC_DISABLE_SPEEDY:"undefined"!=typeof process&&void 0!=="MISSING_ENV_VAR".SC_DISABLE_SPEEDY&&""!=="MISSING_ENV_VAR".SC_DISABLE_SPEEDY?"false"!=="MISSING_ENV_VAR".SC_DISABLE_SPEEDY&&"MISSING_ENV_VAR".SC_DISABLE_SPEEDY:"production"!=="MISSING_ENV_VAR".NODE_ENV),O={},R="production"!=="MISSING_ENV_VAR".NODE_ENV?{1:"Cannot create styled-component for component: %s.\n\n",2:"Can't collect styles once you've consumed a `ServerStyleSheet`'s styles! `ServerStyleSheet` is a one off instance for each server-side render cycle.\n\n- Are you trying to reuse it across renders?\n- Are you accidentally calling collectStyles twice?\n\n",3:"Streaming SSR is only supported in a Node.js environment; Please do not try to call this method in the browser.\n\n",4:"The `StyleSheetManager` expects a valid target or sheet prop!\n\n- Does this error occur on the client and is your target falsy?\n- Does this error occur on the server and is the sheet falsy?\n\n",5:"The clone method cannot be used on the client!\n\n- Are you running in a client-like environment on the server?\n- Are you trying to run SSR on the client?\n\n",6:"Trying to insert a new style tag, but the given Node is unmounted!\n\n- Are you using a custom target that isn't mounted?\n- Does your document not have a valid head element?\n- Have you accidentally removed a style tag manually?\n\n",7:'ThemeProvider: Please return an object from your "theme" prop function, e.g.\n\n```js\ntheme={() => ({})}\n```\n\n',8:'ThemeProvider: Please make your "theme" prop an object.\n\n',9:"Missing document `<head>`\n\n",10:"Cannot find a StyleSheet instance. Usually this happens if there are multiple copies of styled-components loaded at once. Check out this issue for how to troubleshoot and fix the common cases where this situation can happen: https://github.com/styled-components/styled-components/issues/1941#issuecomment-417862021\n\n",11:"_This error was replaced with a dev-time warning, it will be deleted for v4 final._ [createGlobalStyle] received children which will not be rendered. Please use the component without passing children elements.\n\n",12:"It seems you are interpolating a keyframe declaration (%s) into an untagged string. This was supported in styled-components v3, but is not longer supported in v4 as keyframes are now injected on-demand. Please wrap your string in the css\\`\\` helper which ensures the styles are injected correctly. See https://www.styled-components.com/docs/api#css\n\n",13:"%s is not a styled component and cannot be referred to via component selector. See https://www.styled-components.com/docs/advanced#referring-to-other-components for more details.\n\n",14:'ThemeProvider: "theme" prop is required.\n\n',15:"A stylis plugin has been supplied that is not named. We need a name for each plugin to be able to prevent styling collisions between different stylis configurations within the same app. Before you pass your plugin to `<StyleSheetManager stylisPlugins={[]}>`, please make sure each plugin is uniquely-named, e.g.\n\n```js\nObject.defineProperty(importedPlugin, 'name', { value: 'some-unique-name' });\n```\n\n",16:"Reached the limit of how many styled components may be created at group %s.\nYou may only create up to 1,073,741,824 components. If you're creating components dynamically,\nas for instance in your render method then you may be running into this limitation.\n\n",17:"CSSStyleSheet could not be found on HTMLStyleElement.\nHas styled-components' style tag been unmounted or altered by another script?\n"}:{};function D(){for(var e=arguments.length<=0?void 0:arguments[0],t=[],n=1,r=arguments.length;n<r;n+=1)t.push(n<0||arguments.length<=n?void 0:arguments[n]);return t.forEach((function(t){e=e.replace(/%[a-z]/,t)})),e}function j(e){for(var t=arguments.length,n=new Array(t>1?t-1:0),r=1;r<t;r++)n[r-1]=arguments[r];throw"production"==="MISSING_ENV_VAR".NODE_ENV?new Error("An error occurred. See https://git.io/JUIaE#"+e+" for more information."+(n.length>0?" Args: "+n.join(", "):"")):new Error(D.apply(void 0,[R[e]].concat(n)).trim())}var T=function(){function e(e){this.groupSizes=new Uint32Array(512),this.length=512,this.tag=e}var t=e.prototype;return t.indexOfGroup=function(e){for(var t=0,n=0;n<e;n++)t+=this.groupSizes[n];return t},t.insertRules=function(e,t){if(e>=this.groupSizes.length){for(var n=this.groupSizes,r=n.length,o=r;e>=o;)(o<<=1)<0&&j(16,""+e);this.groupSizes=new Uint32Array(o),this.groupSizes.set(n),this.length=o;for(var s=r;s<o;s++)this.groupSizes[s]=0}for(var i=this.indexOfGroup(e+1),a=0,c=t.length;a<c;a++)this.tag.insertRule(i,t[a])&&(this.groupSizes[e]++,i++)},t.clearGroup=function(e){if(e<this.length){var t=this.groupSizes[e],n=this.indexOfGroup(e),r=n+t;this.groupSizes[e]=0;for(var o=n;o<r;o++)this.tag.deleteRule(n)}},t.getGroup=function(e){var t="";if(e>=this.length||0===this.groupSizes[e])return t;for(var n=this.groupSizes[e],r=this.indexOfGroup(e),o=r+n,s=r;s<o;s++)t+=this.tag.getRule(s)+"/*!sc*/\n";return t},e}(),k=new Map,x=new Map,V=1,B=function(e){if(k.has(e))return k.get(e);for(;x.has(V);)V++;var t=V++;return"production"!=="MISSING_ENV_VAR".NODE_ENV&&((0|t)<0||t>1<<30)&&j(16,""+t),k.set(e,t),x.set(t,e),t},M=function(e){return x.get(e)},z=function(e,t){k.set(e,t),x.set(t,e)},L="style["+A+'][data-styled-version="5.2.1"]',G=new RegExp("^"+A+'\\.g(\\d+)\\[id="([\\w\\d-]+)"\\].*?"([^"]*)'),F=function(e,t,n){for(var r,o=n.split(","),s=0,i=o.length;s<i;s++)(r=o[s])&&e.registerName(t,r)},Y=function(e,t){for(var n=t.innerHTML.split("/*!sc*/\n"),r=[],o=0,s=n.length;o<s;o++){var i=n[o].trim();if(i){var a=i.match(G);if(a){var c=0|parseInt(a[1],10),u=a[2];0!==c&&(z(u,c),F(e,u,a[3]),e.getTag().insertRules(c,r)),r.length=0}else r.push(i)}}},q=function(){return true?__webpack_require__.nc:0},H=function(e){var t=document.head,n=e||t,r=document.createElement("style"),o=function(e){for(var t=e.childNodes,n=t.length;n>=0;n--){var r=t[n];if(r&&1===r.nodeType&&r.hasAttribute(A))return r}}(n),s=void 0!==o?o.nextSibling:null;r.setAttribute(A,"active"),r.setAttribute("data-styled-version","5.2.1");var i=q();return i&&r.setAttribute("nonce",i),n.insertBefore(r,s),r},$=function(){function e(e){var t=this.element=H(e);t.appendChild(document.createTextNode("")),this.sheet=function(e){if(e.sheet)return e.sheet;for(var t=document.styleSheets,n=0,r=t.length;n<r;n++){var o=t[n];if(o.ownerNode===e)return o}j(17)}(t),this.length=0}var t=e.prototype;return t.insertRule=function(e,t){try{return this.sheet.insertRule(t,e),this.length++,!0}catch(e){return!1}},t.deleteRule=function(e){this.sheet.deleteRule(e),this.length--},t.getRule=function(e){var t=this.sheet.cssRules[e];return void 0!==t&&"string"==typeof t.cssText?t.cssText:""},e}(),W=function(){function e(e){var t=this.element=H(e);this.nodes=t.childNodes,this.length=0}var t=e.prototype;return t.insertRule=function(e,t){if(e<=this.length&&e>=0){var n=document.createTextNode(t),r=this.nodes[e];return this.element.insertBefore(n,r||null),this.length++,!0}return!1},t.deleteRule=function(e){this.element.removeChild(this.nodes[e]),this.length--},t.getRule=function(e){return e<this.length?this.nodes[e].textContent:""},e}(),U=function(){function e(e){this.rules=[],this.length=0}var t=e.prototype;return t.insertRule=function(e,t){return e<=this.length&&(this.rules.splice(e,0,t),this.length++,!0)},t.deleteRule=function(e){this.rules.splice(e,1),this.length--},t.getRule=function(e){return e<this.length?this.rules[e]:""},e}(),J=I,X={isServer:!I,useCSSOMInjection:!P},Z=function(){function e(e,t,n){void 0===e&&(e=E),void 0===t&&(t={}),this.options=v({},X,{},e),this.gs=t,this.names=new Map(n),!this.options.isServer&&I&&J&&(J=!1,function(e){for(var t=document.querySelectorAll(L),n=0,r=t.length;n<r;n++){var o=t[n];o&&"active"!==o.getAttribute(A)&&(Y(e,o),o.parentNode&&o.parentNode.removeChild(o))}}(this))}e.registerId=function(e){return B(e)};var t=e.prototype;return t.reconstructWithOptions=function(t,n){return void 0===n&&(n=!0),new e(v({},this.options,{},t),this.gs,n&&this.names||void 0)},t.allocateGSInstance=function(e){return this.gs[e]=(this.gs[e]||0)+1},t.getTag=function(){return this.tag||(this.tag=(n=(t=this.options).isServer,r=t.useCSSOMInjection,o=t.target,e=n?new U(o):r?new $(o):new W(o),new T(e)));var e,t,n,r,o},t.hasNameForId=function(e,t){return this.names.has(e)&&this.names.get(e).has(t)},t.registerName=function(e,t){if(B(e),this.names.has(e))this.names.get(e).add(t);else{var n=new Set;n.add(t),this.names.set(e,n)}},t.insertRules=function(e,t,n){this.registerName(e,t),this.getTag().insertRules(B(e),n)},t.clearNames=function(e){this.names.has(e)&&this.names.get(e).clear()},t.clearRules=function(e){this.getTag().clearGroup(B(e)),this.clearNames(e)},t.clearTag=function(){this.tag=void 0},t.toString=function(){return function(e){for(var t=e.getTag(),n=t.length,r="",o=0;o<n;o++){var s=M(o);if(void 0!==s){var i=e.names.get(s),a=t.getGroup(o);if(void 0!==i&&0!==a.length){var c=A+".g"+o+'[id="'+s+'"]',u="";void 0!==i&&i.forEach((function(e){e.length>0&&(u+=e+",")})),r+=""+a+c+'{content:"'+u+'"}/*!sc*/\n'}}}return r}(this)},e}(),K=/(a)(d)/gi,Q=function(e){return String.fromCharCode(e+(e>25?39:97))};function ee(e){var t,n="";for(t=Math.abs(e);t>52;t=t/52|0)n=Q(t%52)+n;return(Q(t%52)+n).replace(K,"$1-$2")}var te=function(e,t){for(var n=t.length;n;)e=33*e^t.charCodeAt(--n);return e},ne=function(e){return te(5381,e)};function re(e){for(var t=0;t<e.length;t+=1){var n=e[t];if(b(n)&&!N(n))return!1}return!0}var oe=ne("5.2.1"),se=function(){function e(e,t,n){this.rules=e,this.staticRulesId="",this.isStatic="production"==="MISSING_ENV_VAR".NODE_ENV&&(void 0===n||n.isStatic)&&re(e),this.componentId=t,this.baseHash=te(oe,t),this.baseStyle=n,Z.registerId(t)}return e.prototype.generateAndInjectStyles=function(e,t,n){var r=this.componentId,o=[];if(this.baseStyle&&o.push(this.baseStyle.generateAndInjectStyles(e,t,n)),this.isStatic&&!n.hash)if(this.staticRulesId&&t.hasNameForId(r,this.staticRulesId))o.push(this.staticRulesId);else{var s=Ne(this.rules,e,t,n).join(""),i=ee(te(this.baseHash,s.length)>>>0);if(!t.hasNameForId(r,i)){var a=n(s,"."+i,void 0,r);t.insertRules(r,i,a)}o.push(i),this.staticRulesId=i}else{for(var c=this.rules.length,u=te(this.baseHash,n.hash),l="",d=0;d<c;d++){var h=this.rules[d];if("string"==typeof h)l+=h,"production"!=="MISSING_ENV_VAR".NODE_ENV&&(u=te(u,h+d));else if(h){var p=Ne(h,e,t,n),f=Array.isArray(p)?p.join(""):p;u=te(u,f+d),l+=f}}if(l){var m=ee(u>>>0);if(!t.hasNameForId(r,m)){var y=n(l,"."+m,void 0,r);t.insertRules(r,m,y)}o.push(m)}}return o.join(" ")},e}(),ie=/^\s*\/\/.*$/gm,ae=[":","[",".","#"];function ce(e){var t,n,r,o,s=void 0===e?E:e,i=s.options,a=void 0===i?E:i,c=s.plugins,u=void 0===c?w:c,l=new _emotion_stylis__WEBPACK_IMPORTED_MODULE_3__["default"](a),d=[],h=function(e){function t(t){if(t)try{e(t+"}")}catch(e){}}return function(n,r,o,s,i,a,c,u,l,d){switch(n){case 1:if(0===l&&64===r.charCodeAt(0))return e(r+";"),"";break;case 2:if(0===u)return r+"/*|*/";break;case 3:switch(u){case 102:case 112:return e(o[0]+r),"";default:return r+(0===d?"/*|*/":"")}case-2:r.split("/*|*/}").forEach(t)}}}((function(e){d.push(e)})),f=function(e,r,s){return 0===r&&ae.includes(s[n.length])||s.match(o)?e:"."+t};function m(e,s,i,a){void 0===a&&(a="&");var c=e.replace(ie,""),u=s&&i?i+" "+s+" { "+c+" }":c;return t=a,n=s,r=new RegExp("\\"+n+"\\b","g"),o=new RegExp("(\\"+n+"\\b){2,}"),l(i||!s?"":s,u)}return l.use([].concat(u,[function(e,t,o){2===e&&o.length&&o[0].lastIndexOf(n)>0&&(o[0]=o[0].replace(r,f))},h,function(e){if(-2===e){var t=d;return d=[],t}}])),m.hash=u.length?u.reduce((function(e,t){return t.name||j(15),te(e,t.name)}),5381).toString():"",m}var ue=react__WEBPACK_IMPORTED_MODULE_1__.createContext(),le=ue.Consumer,de=react__WEBPACK_IMPORTED_MODULE_1__.createContext(),he=(de.Consumer,new Z),pe=ce();function fe(){return (0,react__WEBPACK_IMPORTED_MODULE_1__.useContext)(ue)||he}function me(){return (0,react__WEBPACK_IMPORTED_MODULE_1__.useContext)(de)||pe}function ye(e){var t=(0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(e.stylisPlugins),n=t[0],s=t[1],c=fe(),u=(0,react__WEBPACK_IMPORTED_MODULE_1__.useMemo)((function(){var t=c;return e.sheet?t=e.sheet:e.target&&(t=t.reconstructWithOptions({target:e.target},!1)),e.disableCSSOMInjection&&(t=t.reconstructWithOptions({useCSSOMInjection:!1})),t}),[e.disableCSSOMInjection,e.sheet,e.target]),l=(0,react__WEBPACK_IMPORTED_MODULE_1__.useMemo)((function(){return ce({options:{prefix:!e.disableVendorPrefixes},plugins:n})}),[e.disableVendorPrefixes,n]);return (0,react__WEBPACK_IMPORTED_MODULE_1__.useEffect)((function(){shallowequal__WEBPACK_IMPORTED_MODULE_2___default()(n,e.stylisPlugins)||s(e.stylisPlugins)}),[e.stylisPlugins]),react__WEBPACK_IMPORTED_MODULE_1__.createElement(ue.Provider,{value:u},react__WEBPACK_IMPORTED_MODULE_1__.createElement(de.Provider,{value:l},"production"!=="MISSING_ENV_VAR".NODE_ENV?react__WEBPACK_IMPORTED_MODULE_1__.Children.only(e.children):e.children))}var ve=function(){function e(e,t){var n=this;this.inject=function(e,t){void 0===t&&(t=pe);var r=n.name+t.hash;e.hasNameForId(n.id,r)||e.insertRules(n.id,r,t(n.rules,r,"@keyframes"))},this.toString=function(){return j(12,String(n.name))},this.name=e,this.id="sc-keyframes-"+e,this.rules=t}return e.prototype.getName=function(e){return void 0===e&&(e=pe),this.name+e.hash},e}(),ge=/([A-Z])/,Se=/([A-Z])/g,we=/^ms-/,Ee=function(e){return"-"+e.toLowerCase()};function be(e){return ge.test(e)?e.replace(Se,Ee).replace(we,"-ms-"):e}var _e=function(e){return null==e||!1===e||""===e};function Ne(e,n,r,o){if(Array.isArray(e)){for(var s,i=[],a=0,c=e.length;a<c;a+=1)""!==(s=Ne(e[a],n,r,o))&&(Array.isArray(s)?i.push.apply(i,s):i.push(s));return i}if(_e(e))return"";if(N(e))return"."+e.styledComponentId;if(b(e)){if("function"!=typeof(l=e)||l.prototype&&l.prototype.isReactComponent||!n)return e;var u=e(n);return"production"!=="MISSING_ENV_VAR".NODE_ENV&&(0,react_is__WEBPACK_IMPORTED_MODULE_0__.isElement)(u)&&console.warn(_(e)+" is not a styled component and cannot be referred to via component selector. See https://www.styled-components.com/docs/advanced#referring-to-other-components for more details."),Ne(u,n,r,o)}var l;return e instanceof ve?r?(e.inject(r,o),e.getName(o)):e:S(e)?function e(t,n){var r,o,s=[];for(var i in t)t.hasOwnProperty(i)&&!_e(t[i])&&(S(t[i])?s.push.apply(s,e(t[i],i)):b(t[i])?s.push(be(i)+":",t[i],";"):s.push(be(i)+": "+(r=i,null==(o=t[i])||"boolean"==typeof o||""===o?"":"number"!=typeof o||0===o||r in _emotion_unitless__WEBPACK_IMPORTED_MODULE_4__["default"]?String(o).trim():o+"px")+";"));return n?[n+" {"].concat(s,["}"]):s}(e):e.toString()}function Ae(e){for(var t=arguments.length,n=new Array(t>1?t-1:0),r=1;r<t;r++)n[r-1]=arguments[r];return b(e)||S(e)?Ne(g(w,[e].concat(n))):0===n.length&&1===e.length&&"string"==typeof e[0]?e:Ne(g(e,n))}var Ce=/invalid hook call/i,Ie=new Set,Pe=function(e,t){if("production"!=="MISSING_ENV_VAR".NODE_ENV){var n="The component "+e+(t?' with the id of "'+t+'"':"")+" has been created dynamically.\nYou may see this warning because you've called styled inside another component.\nTo resolve this only create new StyledComponents outside of any render method and function component.";try{(0,react__WEBPACK_IMPORTED_MODULE_1__.useRef)(),Ie.has(n)||(console.warn(n),Ie.add(n))}catch(e){Ce.test(e.message)&&Ie.delete(n)}}},Oe=function(e,t,n){return void 0===n&&(n=E),e.theme!==n.theme&&e.theme||t||n.theme},Re=/[!"#$%&'()*+,./:;<=>?@[\\\]^`{|}~-]+/g,De=/(^-|-$)/g;function je(e){return e.replace(Re,"-").replace(De,"")}var Te=function(e){return ee(ne(e)>>>0)};function ke(e){return"string"==typeof e&&("production"==="MISSING_ENV_VAR".NODE_ENV||e.charAt(0)===e.charAt(0).toLowerCase())}var xe=function(e){return"function"==typeof e||"object"==typeof e&&null!==e&&!Array.isArray(e)},Ve=function(e){return"__proto__"!==e&&"constructor"!==e&&"prototype"!==e};function Be(e,t,n){var r=e[n];xe(t)&&xe(r)?Me(r,t):e[n]=t}function Me(e){for(var t=arguments.length,n=new Array(t>1?t-1:0),r=1;r<t;r++)n[r-1]=arguments[r];for(var o=0,s=n;o<s.length;o++){var i=s[o];if(xe(i))for(var a in i)Ve(a)&&Be(e,i[a],a)}return e}var ze=react__WEBPACK_IMPORTED_MODULE_1__.createContext(),Le=ze.Consumer;function Ge(e){var t=(0,react__WEBPACK_IMPORTED_MODULE_1__.useContext)(ze),n=(0,react__WEBPACK_IMPORTED_MODULE_1__.useMemo)((function(){return function(e,t){if(!e)return j(14);if(b(e)){var n=e(t);return"production"==="MISSING_ENV_VAR".NODE_ENV||null!==n&&!Array.isArray(n)&&"object"==typeof n?n:j(7)}return Array.isArray(e)||"object"!=typeof e?j(8):t?v({},t,{},e):e}(e.theme,t)}),[e.theme,t]);return e.children?react__WEBPACK_IMPORTED_MODULE_1__.createElement(ze.Provider,{value:n},e.children):null}var Fe={};function Ye(e,t,n){var o=N(e),i=!ke(e),a=t.attrs,c=void 0===a?w:a,d=t.componentId,h=void 0===d?function(e,t){var n="string"!=typeof e?"sc":je(e);Fe[n]=(Fe[n]||0)+1;var r=n+"-"+Te("5.2.1"+n+Fe[n]);return t?t+"-"+r:r}(t.displayName,t.parentComponentId):d,p=t.displayName,f=void 0===p?function(e){return ke(e)?"styled."+e:"Styled("+_(e)+")"}(e):p,g=t.displayName&&t.componentId?je(t.displayName)+"-"+t.componentId:t.componentId||h,S=o&&e.attrs?Array.prototype.concat(e.attrs,c).filter(Boolean):c,A=t.shouldForwardProp;o&&e.shouldForwardProp&&(A=t.shouldForwardProp?function(n,r){return e.shouldForwardProp(n,r)&&t.shouldForwardProp(n,r)}:e.shouldForwardProp);var C,I=new se(n,g,o?e.componentStyle:void 0),P=I.isStatic&&0===c.length,O=function(e,t){return function(e,t,n,r){var o=e.attrs,i=e.componentStyle,a=e.defaultProps,c=e.foldedComponentIds,d=e.shouldForwardProp,h=e.styledComponentId,p=e.target;"production"!=="MISSING_ENV_VAR".NODE_ENV&&(0,react__WEBPACK_IMPORTED_MODULE_1__.useDebugValue)(h);var f=function(e,t,n){void 0===e&&(e=E);var r=v({},t,{theme:e}),o={};return n.forEach((function(e){var t,n,s,i=e;for(t in b(i)&&(i=i(r)),i)r[t]=o[t]="className"===t?(n=o[t],s=i[t],n&&s?n+" "+s:n||s):i[t]})),[r,o]}(Oe(t,(0,react__WEBPACK_IMPORTED_MODULE_1__.useContext)(ze),a)||E,t,o),y=f[0],g=f[1],S=function(e,t,n,r){var o=fe(),s=me(),i=t?e.generateAndInjectStyles(E,o,s):e.generateAndInjectStyles(n,o,s);return"production"!=="MISSING_ENV_VAR".NODE_ENV&&(0,react__WEBPACK_IMPORTED_MODULE_1__.useDebugValue)(i),"production"!=="MISSING_ENV_VAR".NODE_ENV&&!t&&r&&r(i),i}(i,r,y,"production"!=="MISSING_ENV_VAR".NODE_ENV?e.warnTooManyClasses:void 0),w=n,_=g.$as||t.$as||g.as||t.as||p,N=ke(_),A=g!==t?v({},t,{},g):t,C={};for(var I in A)"$"!==I[0]&&"as"!==I&&("forwardedAs"===I?C.as=A[I]:(d?d(I,_emotion_is_prop_valid__WEBPACK_IMPORTED_MODULE_5__["default"]):!N||(0,_emotion_is_prop_valid__WEBPACK_IMPORTED_MODULE_5__["default"])(I))&&(C[I]=A[I]));return t.style&&g.style!==t.style&&(C.style=v({},t.style,{},g.style)),C.className=Array.prototype.concat(c,h,S!==h?S:null,t.className,g.className).filter(Boolean).join(" "),C.ref=w,(0,react__WEBPACK_IMPORTED_MODULE_1__.createElement)(_,C)}(C,e,t,P)};return O.displayName=f,(C=react__WEBPACK_IMPORTED_MODULE_1__.forwardRef(O)).attrs=S,C.componentStyle=I,C.displayName=f,C.shouldForwardProp=A,C.foldedComponentIds=o?Array.prototype.concat(e.foldedComponentIds,e.styledComponentId):w,C.styledComponentId=g,C.target=o?e.target:e,C.withComponent=function(e){var r=t.componentId,o=function(e,t){if(null==e)return{};var n,r,o={},s=Object.keys(e);for(r=0;r<s.length;r++)n=s[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}(t,["componentId"]),s=r&&r+"-"+(ke(e)?e:je(_(e)));return Ye(e,v({},o,{attrs:S,componentId:s}),n)},Object.defineProperty(C,"defaultProps",{get:function(){return this._foldedDefaultProps},set:function(t){this._foldedDefaultProps=o?Me({},e.defaultProps,t):t}}),"production"!=="MISSING_ENV_VAR".NODE_ENV&&(Pe(f,g),C.warnTooManyClasses=function(e,t){var n={},r=!1;return function(o){if(!r&&(n[o]=!0,Object.keys(n).length>=200)){var s=t?' with the id of "'+t+'"':"";console.warn("Over 200 classes were generated for component "+e+s+".\nConsider using the attrs method, together with a style object for frequently changed styles.\nExample:\n  const Component = styled.div.attrs(props => ({\n    style: {\n      background: props.background,\n    },\n  }))`width: 100%;`\n\n  <Component />"),r=!0,n={}}}}(f,g)),C.toString=function(){return"."+C.styledComponentId},i&&hoist_non_react_statics__WEBPACK_IMPORTED_MODULE_6___default()(C,e,{attrs:!0,componentStyle:!0,displayName:!0,foldedComponentIds:!0,shouldForwardProp:!0,styledComponentId:!0,target:!0,withComponent:!0}),C}var qe=function(e){return function e(t,r,o){if(void 0===o&&(o=E),!(0,react_is__WEBPACK_IMPORTED_MODULE_0__.isValidElementType)(r))return j(1,String(r));var s=function(){return t(r,o,Ae.apply(void 0,arguments))};return s.withConfig=function(n){return e(t,r,v({},o,{},n))},s.attrs=function(n){return e(t,r,v({},o,{attrs:Array.prototype.concat(o.attrs,n).filter(Boolean)}))},s}(Ye,e)};["a","abbr","address","area","article","aside","audio","b","base","bdi","bdo","big","blockquote","body","br","button","canvas","caption","cite","code","col","colgroup","data","datalist","dd","del","details","dfn","dialog","div","dl","dt","em","embed","fieldset","figcaption","figure","footer","form","h1","h2","h3","h4","h5","h6","head","header","hgroup","hr","html","i","iframe","img","input","ins","kbd","keygen","label","legend","li","link","main","map","mark","marquee","menu","menuitem","meta","meter","nav","noscript","object","ol","optgroup","option","output","p","param","picture","pre","progress","q","rp","rt","ruby","s","samp","script","section","select","small","source","span","strong","style","sub","summary","sup","table","tbody","td","textarea","tfoot","th","thead","time","title","tr","track","u","ul","var","video","wbr","circle","clipPath","defs","ellipse","foreignObject","g","image","line","linearGradient","marker","mask","path","pattern","polygon","polyline","radialGradient","rect","stop","svg","text","tspan"].forEach((function(e){qe[e]=qe(e)}));var He=function(){function e(e,t){this.rules=e,this.componentId=t,this.isStatic=re(e),Z.registerId(this.componentId+1)}var t=e.prototype;return t.createStyles=function(e,t,n,r){var o=r(Ne(this.rules,t,n,r).join(""),""),s=this.componentId+e;n.insertRules(s,s,o)},t.removeStyles=function(e,t){t.clearRules(this.componentId+e)},t.renderStyles=function(e,t,n,r){e>2&&Z.registerId(this.componentId+e),this.removeStyles(e,n),this.createStyles(e,t,n,r)},e}();function $e(e){for(var t=arguments.length,n=new Array(t>1?t-1:0),o=1;o<t;o++)n[o-1]=arguments[o];var i=Ae.apply(void 0,[e].concat(n)),a="sc-global-"+Te(JSON.stringify(i)),u=new He(i,a);function l(e){var t=fe(),n=me(),o=(0,react__WEBPACK_IMPORTED_MODULE_1__.useContext)(ze),l=(0,react__WEBPACK_IMPORTED_MODULE_1__.useRef)(t.allocateGSInstance(a)).current;return"production"!=="MISSING_ENV_VAR".NODE_ENV&&react__WEBPACK_IMPORTED_MODULE_1__.Children.count(e.children)&&console.warn("The global style component "+a+" was given child JSX. createGlobalStyle does not render children."),"production"!=="MISSING_ENV_VAR".NODE_ENV&&i.some((function(e){return"string"==typeof e&&-1!==e.indexOf("@import")}))&&console.warn("Please do not use @import CSS syntax in createGlobalStyle at this time, as the CSSOM APIs we use in production do not handle it well. Instead, we recommend using a library such as react-helmet to inject a typical <link> meta tag to the stylesheet, or simply embedding it manually in your index.html <head> section for a simpler app."),(0,react__WEBPACK_IMPORTED_MODULE_1__.useLayoutEffect)((function(){return h(l,e,t,o,n),function(){return u.removeStyles(l,t)}}),[l,e,t,o,n]),null}function h(e,t,n,r,o){if(u.isStatic)u.renderStyles(e,O,n,o);else{var s=v({},t,{theme:Oe(t,r,l.defaultProps)});u.renderStyles(e,s,n,o)}}return"production"!=="MISSING_ENV_VAR".NODE_ENV&&Pe(a),react__WEBPACK_IMPORTED_MODULE_1__.memo(l)}function We(e){"production"!=="MISSING_ENV_VAR".NODE_ENV&&"undefined"!=typeof navigator&&"ReactNative"===navigator.product&&console.warn("`keyframes` cannot be used on ReactNative, only on the web. To do animation in ReactNative please use Animated.");for(var t=arguments.length,n=new Array(t>1?t-1:0),r=1;r<t;r++)n[r-1]=arguments[r];var o=Ae.apply(void 0,[e].concat(n)).join(""),s=Te(o);return new ve(s,o)}var Ue=function(){function e(){var e=this;this._emitSheetCSS=function(){var t=e.instance.toString(),n=q();return"<style "+[n&&'nonce="'+n+'"',A+'="true"','data-styled-version="5.2.1"'].filter(Boolean).join(" ")+">"+t+"</style>"},this.getStyleTags=function(){return e.sealed?j(2):e._emitSheetCSS()},this.getStyleElement=function(){var t;if(e.sealed)return j(2);var n=((t={})[A]="",t["data-styled-version"]="5.2.1",t.dangerouslySetInnerHTML={__html:e.instance.toString()},t),o=q();return o&&(n.nonce=o),[react__WEBPACK_IMPORTED_MODULE_1__.createElement("style",v({},n,{key:"sc-0-0"}))]},this.seal=function(){e.sealed=!0},this.instance=new Z({isServer:!0}),this.sealed=!1}var t=e.prototype;return t.collectStyles=function(e){return this.sealed?j(2):react__WEBPACK_IMPORTED_MODULE_1__.createElement(ye,{sheet:this.instance},e)},t.interleaveWithNodeStream=function(e){return j(3)},e}(),Je=function(e){var t=react__WEBPACK_IMPORTED_MODULE_1__.forwardRef((function(t,n){var o=(0,react__WEBPACK_IMPORTED_MODULE_1__.useContext)(ze),i=e.defaultProps,a=Oe(t,o,i);return"production"!=="MISSING_ENV_VAR".NODE_ENV&&void 0===a&&console.warn('[withTheme] You are not using a ThemeProvider nor passing a theme prop or a theme in defaultProps in component class "'+_(e)+'"'),react__WEBPACK_IMPORTED_MODULE_1__.createElement(e,v({},t,{theme:a,ref:n}))}));return hoist_non_react_statics__WEBPACK_IMPORTED_MODULE_6___default()(t,e),t.displayName="WithTheme("+_(e)+")",t},Xe=function(){return (0,react__WEBPACK_IMPORTED_MODULE_1__.useContext)(ze)},Ze={StyleSheet:Z,masterSheet:he};"production"!=="MISSING_ENV_VAR".NODE_ENV&&"undefined"!=typeof navigator&&"ReactNative"===navigator.product&&console.warn("It looks like you've imported 'styled-components' on React Native.\nPerhaps you're looking to import 'styled-components/native'?\nRead more about this at https://www.styled-components.com/docs/basics#react-native"),"production"!=="MISSING_ENV_VAR".NODE_ENV&&"test"!=="MISSING_ENV_VAR".NODE_ENV&&(window["__styled-components-init__"]=window["__styled-components-init__"]||0,1===window["__styled-components-init__"]&&console.warn("It looks like there are several instances of 'styled-components' initialized in this application. This may cause dynamic styles to not render properly, errors during the rehydration process, a missing theme prop, and makes your application bigger without good reason.\n\nSee https://s-c.sh/2BAXzed for more info."),window["__styled-components-init__"]+=1);/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (qe);
//# sourceMappingURL=styled-components.browser.esm.js.map


/***/ }),
/* 140 */
/***/ ((module) => {

//

module.exports = function shallowEqual(objA, objB, compare, compareContext) {
  var ret = compare ? compare.call(compareContext, objA, objB) : void 0;

  if (ret !== void 0) {
    return !!ret;
  }

  if (objA === objB) {
    return true;
  }

  if (typeof objA !== "object" || !objA || typeof objB !== "object" || !objB) {
    return false;
  }

  var keysA = Object.keys(objA);
  var keysB = Object.keys(objB);

  if (keysA.length !== keysB.length) {
    return false;
  }

  var bHasOwnProperty = Object.prototype.hasOwnProperty.bind(objB);

  // Test for A's keys different from B.
  for (var idx = 0; idx < keysA.length; idx++) {
    var key = keysA[idx];

    if (!bHasOwnProperty(key)) {
      return false;
    }

    var valueA = objA[key];
    var valueB = objB[key];

    ret = compare ? compare.call(compareContext, valueA, valueB, key) : void 0;

    if (ret === false || (ret === void 0 && valueA !== valueB)) {
      return false;
    }
  }

  return true;
};


/***/ }),
/* 141 */
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
function stylis_min (W) {
  function M(d, c, e, h, a) {
    for (var m = 0, b = 0, v = 0, n = 0, q, g, x = 0, K = 0, k, u = k = q = 0, l = 0, r = 0, I = 0, t = 0, B = e.length, J = B - 1, y, f = '', p = '', F = '', G = '', C; l < B;) {
      g = e.charCodeAt(l);
      l === J && 0 !== b + n + v + m && (0 !== b && (g = 47 === b ? 10 : 47), n = v = m = 0, B++, J++);

      if (0 === b + n + v + m) {
        if (l === J && (0 < r && (f = f.replace(N, '')), 0 < f.trim().length)) {
          switch (g) {
            case 32:
            case 9:
            case 59:
            case 13:
            case 10:
              break;

            default:
              f += e.charAt(l);
          }

          g = 59;
        }

        switch (g) {
          case 123:
            f = f.trim();
            q = f.charCodeAt(0);
            k = 1;

            for (t = ++l; l < B;) {
              switch (g = e.charCodeAt(l)) {
                case 123:
                  k++;
                  break;

                case 125:
                  k--;
                  break;

                case 47:
                  switch (g = e.charCodeAt(l + 1)) {
                    case 42:
                    case 47:
                      a: {
                        for (u = l + 1; u < J; ++u) {
                          switch (e.charCodeAt(u)) {
                            case 47:
                              if (42 === g && 42 === e.charCodeAt(u - 1) && l + 2 !== u) {
                                l = u + 1;
                                break a;
                              }

                              break;

                            case 10:
                              if (47 === g) {
                                l = u + 1;
                                break a;
                              }

                          }
                        }

                        l = u;
                      }

                  }

                  break;

                case 91:
                  g++;

                case 40:
                  g++;

                case 34:
                case 39:
                  for (; l++ < J && e.charCodeAt(l) !== g;) {
                  }

              }

              if (0 === k) break;
              l++;
            }

            k = e.substring(t, l);
            0 === q && (q = (f = f.replace(ca, '').trim()).charCodeAt(0));

            switch (q) {
              case 64:
                0 < r && (f = f.replace(N, ''));
                g = f.charCodeAt(1);

                switch (g) {
                  case 100:
                  case 109:
                  case 115:
                  case 45:
                    r = c;
                    break;

                  default:
                    r = O;
                }

                k = M(c, r, k, g, a + 1);
                t = k.length;
                0 < A && (r = X(O, f, I), C = H(3, k, r, c, D, z, t, g, a, h), f = r.join(''), void 0 !== C && 0 === (t = (k = C.trim()).length) && (g = 0, k = ''));
                if (0 < t) switch (g) {
                  case 115:
                    f = f.replace(da, ea);

                  case 100:
                  case 109:
                  case 45:
                    k = f + '{' + k + '}';
                    break;

                  case 107:
                    f = f.replace(fa, '$1 $2');
                    k = f + '{' + k + '}';
                    k = 1 === w || 2 === w && L('@' + k, 3) ? '@-webkit-' + k + '@' + k : '@' + k;
                    break;

                  default:
                    k = f + k, 112 === h && (k = (p += k, ''));
                } else k = '';
                break;

              default:
                k = M(c, X(c, f, I), k, h, a + 1);
            }

            F += k;
            k = I = r = u = q = 0;
            f = '';
            g = e.charCodeAt(++l);
            break;

          case 125:
          case 59:
            f = (0 < r ? f.replace(N, '') : f).trim();
            if (1 < (t = f.length)) switch (0 === u && (q = f.charCodeAt(0), 45 === q || 96 < q && 123 > q) && (t = (f = f.replace(' ', ':')).length), 0 < A && void 0 !== (C = H(1, f, c, d, D, z, p.length, h, a, h)) && 0 === (t = (f = C.trim()).length) && (f = '\x00\x00'), q = f.charCodeAt(0), g = f.charCodeAt(1), q) {
              case 0:
                break;

              case 64:
                if (105 === g || 99 === g) {
                  G += f + e.charAt(l);
                  break;
                }

              default:
                58 !== f.charCodeAt(t - 1) && (p += P(f, q, g, f.charCodeAt(2)));
            }
            I = r = u = q = 0;
            f = '';
            g = e.charCodeAt(++l);
        }
      }

      switch (g) {
        case 13:
        case 10:
          47 === b ? b = 0 : 0 === 1 + q && 107 !== h && 0 < f.length && (r = 1, f += '\x00');
          0 < A * Y && H(0, f, c, d, D, z, p.length, h, a, h);
          z = 1;
          D++;
          break;

        case 59:
        case 125:
          if (0 === b + n + v + m) {
            z++;
            break;
          }

        default:
          z++;
          y = e.charAt(l);

          switch (g) {
            case 9:
            case 32:
              if (0 === n + m + b) switch (x) {
                case 44:
                case 58:
                case 9:
                case 32:
                  y = '';
                  break;

                default:
                  32 !== g && (y = ' ');
              }
              break;

            case 0:
              y = '\\0';
              break;

            case 12:
              y = '\\f';
              break;

            case 11:
              y = '\\v';
              break;

            case 38:
              0 === n + b + m && (r = I = 1, y = '\f' + y);
              break;

            case 108:
              if (0 === n + b + m + E && 0 < u) switch (l - u) {
                case 2:
                  112 === x && 58 === e.charCodeAt(l - 3) && (E = x);

                case 8:
                  111 === K && (E = K);
              }
              break;

            case 58:
              0 === n + b + m && (u = l);
              break;

            case 44:
              0 === b + v + n + m && (r = 1, y += '\r');
              break;

            case 34:
            case 39:
              0 === b && (n = n === g ? 0 : 0 === n ? g : n);
              break;

            case 91:
              0 === n + b + v && m++;
              break;

            case 93:
              0 === n + b + v && m--;
              break;

            case 41:
              0 === n + b + m && v--;
              break;

            case 40:
              if (0 === n + b + m) {
                if (0 === q) switch (2 * x + 3 * K) {
                  case 533:
                    break;

                  default:
                    q = 1;
                }
                v++;
              }

              break;

            case 64:
              0 === b + v + n + m + u + k && (k = 1);
              break;

            case 42:
            case 47:
              if (!(0 < n + m + v)) switch (b) {
                case 0:
                  switch (2 * g + 3 * e.charCodeAt(l + 1)) {
                    case 235:
                      b = 47;
                      break;

                    case 220:
                      t = l, b = 42;
                  }

                  break;

                case 42:
                  47 === g && 42 === x && t + 2 !== l && (33 === e.charCodeAt(t + 2) && (p += e.substring(t, l + 1)), y = '', b = 0);
              }
          }

          0 === b && (f += y);
      }

      K = x;
      x = g;
      l++;
    }

    t = p.length;

    if (0 < t) {
      r = c;
      if (0 < A && (C = H(2, p, r, d, D, z, t, h, a, h), void 0 !== C && 0 === (p = C).length)) return G + p + F;
      p = r.join(',') + '{' + p + '}';

      if (0 !== w * E) {
        2 !== w || L(p, 2) || (E = 0);

        switch (E) {
          case 111:
            p = p.replace(ha, ':-moz-$1') + p;
            break;

          case 112:
            p = p.replace(Q, '::-webkit-input-$1') + p.replace(Q, '::-moz-$1') + p.replace(Q, ':-ms-input-$1') + p;
        }

        E = 0;
      }
    }

    return G + p + F;
  }

  function X(d, c, e) {
    var h = c.trim().split(ia);
    c = h;
    var a = h.length,
        m = d.length;

    switch (m) {
      case 0:
      case 1:
        var b = 0;

        for (d = 0 === m ? '' : d[0] + ' '; b < a; ++b) {
          c[b] = Z(d, c[b], e).trim();
        }

        break;

      default:
        var v = b = 0;

        for (c = []; b < a; ++b) {
          for (var n = 0; n < m; ++n) {
            c[v++] = Z(d[n] + ' ', h[b], e).trim();
          }
        }

    }

    return c;
  }

  function Z(d, c, e) {
    var h = c.charCodeAt(0);
    33 > h && (h = (c = c.trim()).charCodeAt(0));

    switch (h) {
      case 38:
        return c.replace(F, '$1' + d.trim());

      case 58:
        return d.trim() + c.replace(F, '$1' + d.trim());

      default:
        if (0 < 1 * e && 0 < c.indexOf('\f')) return c.replace(F, (58 === d.charCodeAt(0) ? '' : '$1') + d.trim());
    }

    return d + c;
  }

  function P(d, c, e, h) {
    var a = d + ';',
        m = 2 * c + 3 * e + 4 * h;

    if (944 === m) {
      d = a.indexOf(':', 9) + 1;
      var b = a.substring(d, a.length - 1).trim();
      b = a.substring(0, d).trim() + b + ';';
      return 1 === w || 2 === w && L(b, 1) ? '-webkit-' + b + b : b;
    }

    if (0 === w || 2 === w && !L(a, 1)) return a;

    switch (m) {
      case 1015:
        return 97 === a.charCodeAt(10) ? '-webkit-' + a + a : a;

      case 951:
        return 116 === a.charCodeAt(3) ? '-webkit-' + a + a : a;

      case 963:
        return 110 === a.charCodeAt(5) ? '-webkit-' + a + a : a;

      case 1009:
        if (100 !== a.charCodeAt(4)) break;

      case 969:
      case 942:
        return '-webkit-' + a + a;

      case 978:
        return '-webkit-' + a + '-moz-' + a + a;

      case 1019:
      case 983:
        return '-webkit-' + a + '-moz-' + a + '-ms-' + a + a;

      case 883:
        if (45 === a.charCodeAt(8)) return '-webkit-' + a + a;
        if (0 < a.indexOf('image-set(', 11)) return a.replace(ja, '$1-webkit-$2') + a;
        break;

      case 932:
        if (45 === a.charCodeAt(4)) switch (a.charCodeAt(5)) {
          case 103:
            return '-webkit-box-' + a.replace('-grow', '') + '-webkit-' + a + '-ms-' + a.replace('grow', 'positive') + a;

          case 115:
            return '-webkit-' + a + '-ms-' + a.replace('shrink', 'negative') + a;

          case 98:
            return '-webkit-' + a + '-ms-' + a.replace('basis', 'preferred-size') + a;
        }
        return '-webkit-' + a + '-ms-' + a + a;

      case 964:
        return '-webkit-' + a + '-ms-flex-' + a + a;

      case 1023:
        if (99 !== a.charCodeAt(8)) break;
        b = a.substring(a.indexOf(':', 15)).replace('flex-', '').replace('space-between', 'justify');
        return '-webkit-box-pack' + b + '-webkit-' + a + '-ms-flex-pack' + b + a;

      case 1005:
        return ka.test(a) ? a.replace(aa, ':-webkit-') + a.replace(aa, ':-moz-') + a : a;

      case 1e3:
        b = a.substring(13).trim();
        c = b.indexOf('-') + 1;

        switch (b.charCodeAt(0) + b.charCodeAt(c)) {
          case 226:
            b = a.replace(G, 'tb');
            break;

          case 232:
            b = a.replace(G, 'tb-rl');
            break;

          case 220:
            b = a.replace(G, 'lr');
            break;

          default:
            return a;
        }

        return '-webkit-' + a + '-ms-' + b + a;

      case 1017:
        if (-1 === a.indexOf('sticky', 9)) break;

      case 975:
        c = (a = d).length - 10;
        b = (33 === a.charCodeAt(c) ? a.substring(0, c) : a).substring(d.indexOf(':', 7) + 1).trim();

        switch (m = b.charCodeAt(0) + (b.charCodeAt(7) | 0)) {
          case 203:
            if (111 > b.charCodeAt(8)) break;

          case 115:
            a = a.replace(b, '-webkit-' + b) + ';' + a;
            break;

          case 207:
          case 102:
            a = a.replace(b, '-webkit-' + (102 < m ? 'inline-' : '') + 'box') + ';' + a.replace(b, '-webkit-' + b) + ';' + a.replace(b, '-ms-' + b + 'box') + ';' + a;
        }

        return a + ';';

      case 938:
        if (45 === a.charCodeAt(5)) switch (a.charCodeAt(6)) {
          case 105:
            return b = a.replace('-items', ''), '-webkit-' + a + '-webkit-box-' + b + '-ms-flex-' + b + a;

          case 115:
            return '-webkit-' + a + '-ms-flex-item-' + a.replace(ba, '') + a;

          default:
            return '-webkit-' + a + '-ms-flex-line-pack' + a.replace('align-content', '').replace(ba, '') + a;
        }
        break;

      case 973:
      case 989:
        if (45 !== a.charCodeAt(3) || 122 === a.charCodeAt(4)) break;

      case 931:
      case 953:
        if (!0 === la.test(d)) return 115 === (b = d.substring(d.indexOf(':') + 1)).charCodeAt(0) ? P(d.replace('stretch', 'fill-available'), c, e, h).replace(':fill-available', ':stretch') : a.replace(b, '-webkit-' + b) + a.replace(b, '-moz-' + b.replace('fill-', '')) + a;
        break;

      case 962:
        if (a = '-webkit-' + a + (102 === a.charCodeAt(5) ? '-ms-' + a : '') + a, 211 === e + h && 105 === a.charCodeAt(13) && 0 < a.indexOf('transform', 10)) return a.substring(0, a.indexOf(';', 27) + 1).replace(ma, '$1-webkit-$2') + a;
    }

    return a;
  }

  function L(d, c) {
    var e = d.indexOf(1 === c ? ':' : '{'),
        h = d.substring(0, 3 !== c ? e : 10);
    e = d.substring(e + 1, d.length - 1);
    return R(2 !== c ? h : h.replace(na, '$1'), e, c);
  }

  function ea(d, c) {
    var e = P(c, c.charCodeAt(0), c.charCodeAt(1), c.charCodeAt(2));
    return e !== c + ';' ? e.replace(oa, ' or ($1)').substring(4) : '(' + c + ')';
  }

  function H(d, c, e, h, a, m, b, v, n, q) {
    for (var g = 0, x = c, w; g < A; ++g) {
      switch (w = S[g].call(B, d, x, e, h, a, m, b, v, n, q)) {
        case void 0:
        case !1:
        case !0:
        case null:
          break;

        default:
          x = w;
      }
    }

    if (x !== c) return x;
  }

  function T(d) {
    switch (d) {
      case void 0:
      case null:
        A = S.length = 0;
        break;

      default:
        if ('function' === typeof d) S[A++] = d;else if ('object' === typeof d) for (var c = 0, e = d.length; c < e; ++c) {
          T(d[c]);
        } else Y = !!d | 0;
    }

    return T;
  }

  function U(d) {
    d = d.prefix;
    void 0 !== d && (R = null, d ? 'function' !== typeof d ? w = 1 : (w = 2, R = d) : w = 0);
    return U;
  }

  function B(d, c) {
    var e = d;
    33 > e.charCodeAt(0) && (e = e.trim());
    V = e;
    e = [V];

    if (0 < A) {
      var h = H(-1, c, e, e, D, z, 0, 0, 0, 0);
      void 0 !== h && 'string' === typeof h && (c = h);
    }

    var a = M(O, e, c, 0, 0);
    0 < A && (h = H(-2, a, e, e, D, z, a.length, 0, 0, 0), void 0 !== h && (a = h));
    V = '';
    E = 0;
    z = D = 1;
    return a;
  }

  var ca = /^\0+/g,
      N = /[\0\r\f]/g,
      aa = /: */g,
      ka = /zoo|gra/,
      ma = /([,: ])(transform)/g,
      ia = /,\r+?/g,
      F = /([\t\r\n ])*\f?&/g,
      fa = /@(k\w+)\s*(\S*)\s*/,
      Q = /::(place)/g,
      ha = /:(read-only)/g,
      G = /[svh]\w+-[tblr]{2}/,
      da = /\(\s*(.*)\s*\)/g,
      oa = /([\s\S]*?);/g,
      ba = /-self|flex-/g,
      na = /[^]*?(:[rp][el]a[\w-]+)[^]*/,
      la = /stretch|:\s*\w+\-(?:conte|avail)/,
      ja = /([^-])(image-set\()/,
      z = 1,
      D = 1,
      E = 0,
      w = 1,
      O = [],
      S = [],
      A = 0,
      R = null,
      Y = 0,
      V = '';
  B.use = T;
  B.set = U;
  void 0 !== W && U(W);
  return B;
}

/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (stylis_min);


/***/ }),
/* 142 */
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
var unitlessKeys = {
  animationIterationCount: 1,
  borderImageOutset: 1,
  borderImageSlice: 1,
  borderImageWidth: 1,
  boxFlex: 1,
  boxFlexGroup: 1,
  boxOrdinalGroup: 1,
  columnCount: 1,
  columns: 1,
  flex: 1,
  flexGrow: 1,
  flexPositive: 1,
  flexShrink: 1,
  flexNegative: 1,
  flexOrder: 1,
  gridRow: 1,
  gridRowEnd: 1,
  gridRowSpan: 1,
  gridRowStart: 1,
  gridColumn: 1,
  gridColumnEnd: 1,
  gridColumnSpan: 1,
  gridColumnStart: 1,
  msGridRow: 1,
  msGridRowSpan: 1,
  msGridColumn: 1,
  msGridColumnSpan: 1,
  fontWeight: 1,
  lineHeight: 1,
  opacity: 1,
  order: 1,
  orphans: 1,
  tabSize: 1,
  widows: 1,
  zIndex: 1,
  zoom: 1,
  WebkitLineClamp: 1,
  // SVG-related properties
  fillOpacity: 1,
  floodOpacity: 1,
  stopOpacity: 1,
  strokeDasharray: 1,
  strokeDashoffset: 1,
  strokeMiterlimit: 1,
  strokeOpacity: 1,
  strokeWidth: 1
};

/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (unitlessKeys);


/***/ }),
/* 143 */
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _emotion_memoize__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(144);


var reactPropsRegex = /^((children|dangerouslySetInnerHTML|key|ref|autoFocus|defaultValue|defaultChecked|innerHTML|suppressContentEditableWarning|suppressHydrationWarning|valueLink|accept|acceptCharset|accessKey|action|allow|allowUserMedia|allowPaymentRequest|allowFullScreen|allowTransparency|alt|async|autoComplete|autoPlay|capture|cellPadding|cellSpacing|challenge|charSet|checked|cite|classID|className|cols|colSpan|content|contentEditable|contextMenu|controls|controlsList|coords|crossOrigin|data|dateTime|decoding|default|defer|dir|disabled|disablePictureInPicture|download|draggable|encType|form|formAction|formEncType|formMethod|formNoValidate|formTarget|frameBorder|headers|height|hidden|high|href|hrefLang|htmlFor|httpEquiv|id|inputMode|integrity|is|keyParams|keyType|kind|label|lang|list|loading|loop|low|marginHeight|marginWidth|max|maxLength|media|mediaGroup|method|min|minLength|multiple|muted|name|nonce|noValidate|open|optimum|pattern|placeholder|playsInline|poster|preload|profile|radioGroup|readOnly|referrerPolicy|rel|required|reversed|role|rows|rowSpan|sandbox|scope|scoped|scrolling|seamless|selected|shape|size|sizes|slot|span|spellCheck|src|srcDoc|srcLang|srcSet|start|step|style|summary|tabIndex|target|title|type|useMap|value|width|wmode|wrap|about|datatype|inlist|prefix|property|resource|typeof|vocab|autoCapitalize|autoCorrect|autoSave|color|inert|itemProp|itemScope|itemType|itemID|itemRef|on|results|security|unselectable|accentHeight|accumulate|additive|alignmentBaseline|allowReorder|alphabetic|amplitude|arabicForm|ascent|attributeName|attributeType|autoReverse|azimuth|baseFrequency|baselineShift|baseProfile|bbox|begin|bias|by|calcMode|capHeight|clip|clipPathUnits|clipPath|clipRule|colorInterpolation|colorInterpolationFilters|colorProfile|colorRendering|contentScriptType|contentStyleType|cursor|cx|cy|d|decelerate|descent|diffuseConstant|direction|display|divisor|dominantBaseline|dur|dx|dy|edgeMode|elevation|enableBackground|end|exponent|externalResourcesRequired|fill|fillOpacity|fillRule|filter|filterRes|filterUnits|floodColor|floodOpacity|focusable|fontFamily|fontSize|fontSizeAdjust|fontStretch|fontStyle|fontVariant|fontWeight|format|from|fr|fx|fy|g1|g2|glyphName|glyphOrientationHorizontal|glyphOrientationVertical|glyphRef|gradientTransform|gradientUnits|hanging|horizAdvX|horizOriginX|ideographic|imageRendering|in|in2|intercept|k|k1|k2|k3|k4|kernelMatrix|kernelUnitLength|kerning|keyPoints|keySplines|keyTimes|lengthAdjust|letterSpacing|lightingColor|limitingConeAngle|local|markerEnd|markerMid|markerStart|markerHeight|markerUnits|markerWidth|mask|maskContentUnits|maskUnits|mathematical|mode|numOctaves|offset|opacity|operator|order|orient|orientation|origin|overflow|overlinePosition|overlineThickness|panose1|paintOrder|pathLength|patternContentUnits|patternTransform|patternUnits|pointerEvents|points|pointsAtX|pointsAtY|pointsAtZ|preserveAlpha|preserveAspectRatio|primitiveUnits|r|radius|refX|refY|renderingIntent|repeatCount|repeatDur|requiredExtensions|requiredFeatures|restart|result|rotate|rx|ry|scale|seed|shapeRendering|slope|spacing|specularConstant|specularExponent|speed|spreadMethod|startOffset|stdDeviation|stemh|stemv|stitchTiles|stopColor|stopOpacity|strikethroughPosition|strikethroughThickness|string|stroke|strokeDasharray|strokeDashoffset|strokeLinecap|strokeLinejoin|strokeMiterlimit|strokeOpacity|strokeWidth|surfaceScale|systemLanguage|tableValues|targetX|targetY|textAnchor|textDecoration|textRendering|textLength|to|transform|u1|u2|underlinePosition|underlineThickness|unicode|unicodeBidi|unicodeRange|unitsPerEm|vAlphabetic|vHanging|vIdeographic|vMathematical|values|vectorEffect|version|vertAdvY|vertOriginX|vertOriginY|viewBox|viewTarget|visibility|widths|wordSpacing|writingMode|x|xHeight|x1|x2|xChannelSelector|xlinkActuate|xlinkArcrole|xlinkHref|xlinkRole|xlinkShow|xlinkTitle|xlinkType|xmlBase|xmlns|xmlnsXlink|xmlLang|xmlSpace|y|y1|y2|yChannelSelector|z|zoomAndPan|for|class|autofocus)|(([Dd][Aa][Tt][Aa]|[Aa][Rr][Ii][Aa]|x)-.*))$/; // https://esbench.com/bench/5bfee68a4cd7e6009ef61d23

var index = (0,_emotion_memoize__WEBPACK_IMPORTED_MODULE_0__["default"])(function (prop) {
  return reactPropsRegex.test(prop) || prop.charCodeAt(0) === 111
  /* o */
  && prop.charCodeAt(1) === 110
  /* n */
  && prop.charCodeAt(2) < 91;
}
/* Z+1 */
);

/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (index);


/***/ }),
/* 144 */
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
function memoize(fn) {
  var cache = {};
  return function (arg) {
    if (cache[arg] === undefined) cache[arg] = fn(arg);
    return cache[arg];
  };
}

/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (memoize);


/***/ }),
/* 145 */
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";


var reactIs = __webpack_require__(108);

/**
 * Copyright 2015, Yahoo! Inc.
 * Copyrights licensed under the New BSD License. See the accompanying LICENSE file for terms.
 */
var REACT_STATICS = {
  childContextTypes: true,
  contextType: true,
  contextTypes: true,
  defaultProps: true,
  displayName: true,
  getDefaultProps: true,
  getDerivedStateFromError: true,
  getDerivedStateFromProps: true,
  mixins: true,
  propTypes: true,
  type: true
};
var KNOWN_STATICS = {
  name: true,
  length: true,
  prototype: true,
  caller: true,
  callee: true,
  arguments: true,
  arity: true
};
var FORWARD_REF_STATICS = {
  '$$typeof': true,
  render: true,
  defaultProps: true,
  displayName: true,
  propTypes: true
};
var MEMO_STATICS = {
  '$$typeof': true,
  compare: true,
  defaultProps: true,
  displayName: true,
  propTypes: true,
  type: true
};
var TYPE_STATICS = {};
TYPE_STATICS[reactIs.ForwardRef] = FORWARD_REF_STATICS;
TYPE_STATICS[reactIs.Memo] = MEMO_STATICS;

function getStatics(component) {
  // React v16.11 and below
  if (reactIs.isMemo(component)) {
    return MEMO_STATICS;
  } // React v16.12 and above


  return TYPE_STATICS[component['$$typeof']] || REACT_STATICS;
}

var defineProperty = Object.defineProperty;
var getOwnPropertyNames = Object.getOwnPropertyNames;
var getOwnPropertySymbols = Object.getOwnPropertySymbols;
var getOwnPropertyDescriptor = Object.getOwnPropertyDescriptor;
var getPrototypeOf = Object.getPrototypeOf;
var objectPrototype = Object.prototype;
function hoistNonReactStatics(targetComponent, sourceComponent, blacklist) {
  if (typeof sourceComponent !== 'string') {
    // don't hoist over string (html) components
    if (objectPrototype) {
      var inheritedComponent = getPrototypeOf(sourceComponent);

      if (inheritedComponent && inheritedComponent !== objectPrototype) {
        hoistNonReactStatics(targetComponent, inheritedComponent, blacklist);
      }
    }

    var keys = getOwnPropertyNames(sourceComponent);

    if (getOwnPropertySymbols) {
      keys = keys.concat(getOwnPropertySymbols(sourceComponent));
    }

    var targetStatics = getStatics(targetComponent);
    var sourceStatics = getStatics(sourceComponent);

    for (var i = 0; i < keys.length; ++i) {
      var key = keys[i];

      if (!KNOWN_STATICS[key] && !(blacklist && blacklist[key]) && !(sourceStatics && sourceStatics[key]) && !(targetStatics && targetStatics[key])) {
        var descriptor = getOwnPropertyDescriptor(sourceComponent, key);

        try {
          // Avoid failures from read-only properties
          defineProperty(targetComponent, key, descriptor);
        } catch (e) {}
      }
    }
  }

  return targetComponent;
}

module.exports = hoistNonReactStatics;


/***/ })
/******/ 	]);
/************************************************************************/
/******/ 	// The module cache
/******/ 	var __webpack_module_cache__ = {};
/******/ 	
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/ 		// Check if module is in cache
/******/ 		var cachedModule = __webpack_module_cache__[moduleId];
/******/ 		if (cachedModule !== undefined) {
/******/ 			return cachedModule.exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = __webpack_module_cache__[moduleId] = {
/******/ 			id: moduleId,
/******/ 			// no module.loaded needed
/******/ 			exports: {}
/******/ 		};
/******/ 	
/******/ 		// Execute the module function
/******/ 		__webpack_modules__[moduleId](module, module.exports, __webpack_require__);
/******/ 	
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/ 	
/************************************************************************/
/******/ 	/* webpack/runtime/compat get default export */
/******/ 	(() => {
/******/ 		// getDefaultExport function for compatibility with non-harmony modules
/******/ 		__webpack_require__.n = (module) => {
/******/ 			var getter = module && module.__esModule ?
/******/ 				() => (module['default']) :
/******/ 				() => (module);
/******/ 			__webpack_require__.d(getter, { a: getter });
/******/ 			return getter;
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/create fake namespace object */
/******/ 	(() => {
/******/ 		var getProto = Object.getPrototypeOf ? (obj) => (Object.getPrototypeOf(obj)) : (obj) => (obj.__proto__);
/******/ 		var leafPrototypes;
/******/ 		// create a fake namespace object
/******/ 		// mode & 1: value is a module id, require it
/******/ 		// mode & 2: merge all properties of value into the ns
/******/ 		// mode & 4: return value when already ns object
/******/ 		// mode & 16: return value when it's Promise-like
/******/ 		// mode & 8|1: behave like require
/******/ 		__webpack_require__.t = function(value, mode) {
/******/ 			if(mode & 1) value = this(value);
/******/ 			if(mode & 8) return value;
/******/ 			if(typeof value === 'object' && value) {
/******/ 				if((mode & 4) && value.__esModule) return value;
/******/ 				if((mode & 16) && typeof value.then === 'function') return value;
/******/ 			}
/******/ 			var ns = Object.create(null);
/******/ 			__webpack_require__.r(ns);
/******/ 			var def = {};
/******/ 			leafPrototypes = leafPrototypes || [null, getProto({}), getProto([]), getProto(getProto)];
/******/ 			for(var current = mode & 2 && value; typeof current == 'object' && !~leafPrototypes.indexOf(current); current = getProto(current)) {
/******/ 				Object.getOwnPropertyNames(current).forEach((key) => (def[key] = () => (value[key])));
/******/ 			}
/******/ 			def['default'] = () => (value);
/******/ 			__webpack_require__.d(ns, def);
/******/ 			return ns;
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/define property getters */
/******/ 	(() => {
/******/ 		// define getter functions for harmony exports
/******/ 		__webpack_require__.d = (exports, definition) => {
/******/ 			for(var key in definition) {
/******/ 				if(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {
/******/ 					Object.defineProperty(exports, key, { enumerable: true, get: definition[key] });
/******/ 				}
/******/ 			}
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/global */
/******/ 	(() => {
/******/ 		__webpack_require__.g = (function() {
/******/ 			if (typeof globalThis === 'object') return globalThis;
/******/ 			try {
/******/ 				return this || new Function('return this')();
/******/ 			} catch (e) {
/******/ 				if (typeof window === 'object') return window;
/******/ 			}
/******/ 		})();
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/hasOwnProperty shorthand */
/******/ 	(() => {
/******/ 		__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/make namespace object */
/******/ 	(() => {
/******/ 		// define __esModule on exports
/******/ 		__webpack_require__.r = (exports) => {
/******/ 			if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 				Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 			}
/******/ 			Object.defineProperty(exports, '__esModule', { value: true });
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/publicPath */
/******/ 	(() => {
/******/ 		var scriptUrl;
/******/ 		if (__webpack_require__.g.importScripts) scriptUrl = __webpack_require__.g.location + "";
/******/ 		var document = __webpack_require__.g.document;
/******/ 		if (!scriptUrl && document) {
/******/ 			if (document.currentScript)
/******/ 				scriptUrl = document.currentScript.src
/******/ 			if (!scriptUrl) {
/******/ 				var scripts = document.getElementsByTagName("script");
/******/ 				if(scripts.length) scriptUrl = scripts[scripts.length - 1].src
/******/ 			}
/******/ 		}
/******/ 		// When supporting browsers where an automatic publicPath is not supported you must specify an output.publicPath manually via configuration
/******/ 		// or pass an empty string ("") and set the __webpack_public_path__ variable from your code to use your own logic.
/******/ 		if (!scriptUrl) throw new Error("Automatic publicPath is not supported in this browser");
/******/ 		scriptUrl = scriptUrl.replace(/#.*$/, "").replace(/\?.*$/, "").replace(/\/[^\/]+$/, "/");
/******/ 		__webpack_require__.p = scriptUrl + "../";
/******/ 	})();
/******/ 	
/************************************************************************/
var __webpack_exports__ = {};
// This entry need to be wrapped in an IIFE because it need to be in strict mode.
(() => {
"use strict";
var react__WEBPACK_IMPORTED_MODULE_2___namespace_cache;
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var core_js_modules_es_object_define_property_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(1);
/* harmony import */ var core_js_modules_es_object_define_property_js__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_object_define_property_js__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var react_dom__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(45);
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(47);
/* harmony import */ var _WebComponent__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(60);
/* harmony import */ var react_to_webcomponent__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(105);
/* harmony import */ var _components_Button__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(106);
/* harmony import */ var prop_types__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(107);
/* harmony import */ var prop_types__WEBPACK_IMPORTED_MODULE_6___default = /*#__PURE__*/__webpack_require__.n(prop_types__WEBPACK_IMPORTED_MODULE_6__);


function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }






 //
// const ButtonWeb = props => {
//     const htmlPureProps = {
//         ...getProps(props),
//         ...getEvents(props),
//     };
//
//     return (
//         <Button disabled={props.disabled} {...htmlPureProps}>
//             {props.children}
//         </Button>
//     )
// }
//
//
// const ButtonWeb = props => {
//     return (
//         <Button disabled={props.disabled} onclick={props.onClick}>
//             {props.children}
//         </Button>
//     )
// }
//
// ButtonWeb.propType = {
//     disabled: PropTypes.bool,
//     onclick: PropTypes.func,
// }

var htmlProps = (0,_WebComponent__WEBPACK_IMPORTED_MODULE_3__.convertPropsToHtmlProps)(_components_Button__WEBPACK_IMPORTED_MODULE_5__.Button.propTypes);

var ButtonWeb = function ButtonWeb(props) {
  var htmlProps = (0,_WebComponent__WEBPACK_IMPORTED_MODULE_3__.remapHtmlPropsToHtmlProps)(_components_Button__WEBPACK_IMPORTED_MODULE_5__.Button.propTypes, props);
  return /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_2__.createElement(_components_Button__WEBPACK_IMPORTED_MODULE_5__.Button, htmlProps, props.children);
};

ButtonWeb.propTypes = _objectSpread({}, htmlProps);
customElements.define("r-button", (0,react_to_webcomponent__WEBPACK_IMPORTED_MODULE_4__["default"])(ButtonWeb, /*#__PURE__*/ (react__WEBPACK_IMPORTED_MODULE_2___namespace_cache || (react__WEBPACK_IMPORTED_MODULE_2___namespace_cache = __webpack_require__.t(react__WEBPACK_IMPORTED_MODULE_2__, 2))), react_dom__WEBPACK_IMPORTED_MODULE_1__)); // const WebGreeting = reactToWebComponent(ButtonWeb, React, ReactDOM);
// customElements.define("web-greeting2", WebGreeting);
})();

/******/ })()
;